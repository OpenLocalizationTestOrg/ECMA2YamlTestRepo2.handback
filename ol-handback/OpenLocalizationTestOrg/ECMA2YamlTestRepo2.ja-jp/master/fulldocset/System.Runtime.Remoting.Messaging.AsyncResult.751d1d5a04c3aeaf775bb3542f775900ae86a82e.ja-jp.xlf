<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a67d37a89ee4c73e68c5be9c05bf11c3ab7ca3c1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Remoting.Messaging.AsyncResult.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b9cbecfb539fbbc747ae1543d08427742622d0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">609e77d854a729b6553a17bd13fcc620819d300c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Encapsulates the results of an asynchronous operation on a delegate.</source>
          <target state="translated">デリゲートでの非同期操作の結果をカプセル化します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The AsyncResult class is used in conjunction with asynchronous method calls made using delegates.</source>
          <target state="translated">AsyncResult クラスは、デリゲートを使用した非同期メソッド呼び出しと組み合わせて使用されます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IAsyncResult&gt; returned from the delegate's <ph id="ph1">`BeginInvoke`</ph> method can be cast to an AsyncResult.</source>
          <target state="translated">&lt;xref:System.IAsyncResult&gt;、デリゲートから返された<ph id="ph1">`BeginInvoke`</ph>メソッドは、AsyncResult にキャストすることができます&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The AsyncResult has the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt; property that holds the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">AsyncResult が、&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;非同期呼び出しが呼び出されるデリゲートを保持するプロパティがオブジェクトです&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`BeginInvoke`</ph> and asynchronous calls using delegates, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`BeginInvoke`</ph>、デリゲートを使用して非同期呼び出しを参照してください、<bpt id="p1">[</bpt>非同期プログラミングを使用してデリゲート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Gets the delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">非同期呼び出しが呼び出されたデリゲート オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The AsyncDelegate property can be cast to the actual class of the user-defined delegate.</source>
          <target state="translated">AsyncDelegate プロパティは、ユーザー定義のデリゲートの実際のクラスにキャストすることができます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, if the delegate that was used to make the asynchronous call is of type <ph id="ph1">`MyDelegate`</ph>, the delegate that is returned by this property must be cast to <ph id="ph2">`MyDelegate`</ph>.</source>
          <target state="translated">たとえば、非同期呼び出しを行うために使用されたデリゲートは型<ph id="ph1">`MyDelegate`</ph>にこのプロパティによって返されるデリゲートをキャストする必要があります<ph id="ph2">`MyDelegate`</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The callback method can then call the delegate's <ph id="ph1">`EndInvoke`</ph> method with the correct signature, in order to obtain the results of the asynchronous method call.</source>
          <target state="translated">コールバック メソッドでは、デリゲートを呼び出すことができますし、<ph id="ph1">`EndInvoke`</ph>非同期メソッドの呼び出しの結果を取得するために、正しいシグネチャを持つメソッドです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The delegate object on which the asynchronous call was invoked.</source>
          <target state="translated">非同期呼び出しが呼び出されたデリゲート オブジェクト。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Implements the <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">実装して、 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The AsyncProcessMessage method of the &lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt; interface is not relevant to the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; class.</source>
          <target state="translated">&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;インターフェイスは&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;クラス&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;に関係のない&lt;/xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;の AsyncProcessMessage メソッド</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Implementation by &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; throws a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; &lt;xref:System.NotSupportedException&gt;。&lt;/xref:System.NotSupportedException&gt;のスロー&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;によって実装</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instead, obtain an &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; by casting the &lt;xref:System.IAsyncResult&gt; interface returned by an asynchronous call made using a delegate.</source>
          <target state="translated">代わりに、取得、&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;でキャスト、&lt;xref:System.IAsyncResult&gt;インターフェイス、デリゲートを使用して非同期呼び出しによって返される&lt;/xref:System.IAsyncResult&gt;&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The request <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">要求<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessage"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The response <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface.</source>
          <target state="translated">応答<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No value is returned.</source>
          <target state="translated">値は返されません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets the object provided as the last parameter of a <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method call.</source>
          <target state="translated">最後のパラメーターとして指定されたオブジェクトを取得、 <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メソッドの呼び出しです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`BeginInvoke`</ph> method, see <bpt id="p1">[</bpt>Asynchronous Programming Using Delegates<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、<ph id="ph1">`BeginInvoke`</ph>メソッドを参照してください<bpt id="p1">[</bpt>非同期プログラミングを使用してデリゲート<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The object provided as the last parameter of a <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method call.</source>
          <target state="translated">最後のパラメーターとして指定されたオブジェクト、 <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メソッドの呼び出しです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets a &lt;xref:System.Threading.WaitHandle&gt; that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">取得、 &lt;xref:System.Threading.WaitHandle&gt;Win32 同期ハンドルをカプセル化し、各種の同期スキームを実装できるようにする&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; returned by this method is automatically signaled when the asynchronous operation has completed.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;これによって返される非同期操作が完了したときに、メソッドが自動的にシグナル通知&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph> on the delegate that was used to make the asynchronous method call.</source>
          <target state="translated">呼び出すと、待機ハンドルは自動的に閉じられていません<ph id="ph1">`EndInvoke`</ph>非同期メソッド呼び出しを行うために使用されたデリゲートでします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
          <target state="translated">待機ハンドルへのすべての参照を解放するガベージ コレクションが待機ハンドルをクリアするときにシステム リソースが解放されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To free the system resources as soon as you are finished using the wait handle, call the &lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">待機ハンドルの使用が終了したらすぐに、システム リソースを解放して呼び出し、&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently when disposable objects are explicitly closed or disposed.</source>
          <target state="translated">破棄可能なオブジェクトを明示的に終了または破棄されるときに、ガベージ コレクションはより効率的に動作します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  The &lt;xref:System.Threading.WaitHandle&gt; contained in the AsyncWaitHandle property can be used to block the current thread until the asynchronous call is complete.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt;、 &lt;xref:System.Threading.WaitHandle&gt;AsyncWaitHandle の非同期呼び出しが完了するまで、現在のスレッドをブロックするプロパティを使用することができますに含まれている&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However the &lt;xref:System.Threading.WaitHandle&gt; will ignore the &lt;xref:System.AsyncCallback&gt;, if one was specified during the <ph id="ph1">`BeginInvoke`</ph> call.</source>
          <target state="translated">ただし、&lt;xref:System.Threading.WaitHandle&gt;は無視されます、&lt;xref:System.AsyncCallback&gt;中に指定されている場合、<ph id="ph1">`BeginInvoke`</ph>呼び出します&lt;/xref:System.AsyncCallback&gt;&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Therefore, a situation can occur where the application shuts down before the &lt;xref:System.AsyncCallback&gt; has finished executing, even if a &lt;xref:System.Threading.WaitHandle&gt; is used to block until the asynchronous call completion.</source>
          <target state="translated">したがって、ここで、アプリケーションがシャット ダウンする前に、状況が発生、&lt;xref:System.AsyncCallback&gt;の実行が完了場合でも、&lt;xref:System.Threading.WaitHandle&gt;を使用する非同期呼び出しが完了するまでブロックします&lt;/xref:System.Threading.WaitHandle&gt;&lt;/xref:System.AsyncCallback&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For an example of such a situation, see the example for the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt; class, and remove the &lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt; statement.</source>
          <target state="translated">このような状況の例は、の例を参照してください、&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;クラス、および削除、&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;ステートメント&lt;/xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Threading.WaitHandle&gt; that encapsulates Win32 synchronization handles, and allows the implementation of various synchronization schemes.</source>
          <target state="translated">A &lt;xref:System.Threading.WaitHandle&gt;Win32 同期ハンドルをカプセル化し、各種の同期スキームを実装できるようにする&lt;/xref:System.Threading.WaitHandle&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> call completed synchronously.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>呼び出しが同期的に完了しました。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If it is detected that the <ph id="ph1">`BeginInvoke`</ph> call completed synchronously in the &lt;xref:System.AsyncCallback&gt; delegate, it is probable that the thread that called BeginInvoke is the current thread.</source>
          <target state="translated">検出された場合、<ph id="ph1">`BeginInvoke`</ph>呼び出しが同期的に完了しました、&lt;xref:System.AsyncCallback&gt;デリゲート、BeginInvoke を呼び出したスレッドが現在のスレッドであると考えられます&lt;/xref:System.AsyncCallback&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Most providers of the &lt;xref:System.IAsyncResult&gt; interface will not use the capability and will return a default <ph id="ph1">`false`</ph>.</source>
          <target state="translated">ほとんどのプロバイダー、&lt;xref:System.IAsyncResult&gt;インターフェイス機能を使用しませんし、既定値が返されます<ph id="ph1">`false`</ph>&lt;/xref:System.IAsyncResult&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Current implementation of CompletedSynchronously always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">現在の実装の CompletedSynchronously 常に返します<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> call completed synchronously; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref uid="langword_csharp_BeginInvoke" name="BeginInvoke" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>呼び出しが同期的に、それ以外の完了<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether <bpt id="p1">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has been called on the current <bpt id="p2">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定を示す値かどうか<bpt id="p1">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が現在の呼び出された<bpt id="p2">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has been called on the current <bpt id="p3">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合<bpt id="p2">&lt;xref uid="langword_csharp_EndInvoke" name="EndInvoke" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>が現在の呼び出された<bpt id="p3">&lt;xref href="System.Runtime.Remoting.Messaging.AsyncResult"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the response message for the asynchronous call.</source>
          <target state="translated">非同期呼び出しの応答メッセージを取得します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The GetReplyMessage method can return an object after the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt; method is called.</source>
          <target state="translated">GetReplyMessage メソッドは、後にオブジェクトを返すことができます、&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;メソッドが呼び出されます&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt; return value can be cast to an &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;.</source>
          <target state="translated">&lt;xref:System.Runtime.Remoting.Messaging.IMessage&gt; &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;。&lt;/xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;にキャストできる値を返す&lt;/xref:System.Runtime.Remoting.Messaging.IMessage&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, you do not need to call either of these methods directly.</source>
          <target state="translated">ただし、これらのメソッドのいずれかを直接呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>They are intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">使用するための .NET Framework リモート処理インフラストラクチャが用意されています。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A remoting message that should represent a response to a method call on a remote object.</source>
          <target state="translated">リモート処理メッセージをリモート オブジェクトに対するメソッド呼び出しへの応答を表す必要があります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the server has completed the call.</source>
          <target state="translated">サーバーが呼び出しを完了したかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The server must not use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">サーバーの合意済みの外部でクライアントが指定したリソースを使用する必要がありますいない IsCompleted プロパティを設定した後のセマンティクスの共有時に<ph id="ph1">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Thus, it is safe for the client to destroy the resources after the IsCompleted property returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">したがって、IsCompleted プロパティが返された後に、リソースを破棄するクライアントに対して安全では<ph id="ph1">`true`</ph>します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> after the server has completed the call; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>サーバーには、呼び出しが完了した後それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the next message sink in the sink chain.</source>
          <target state="translated">シンク チェーン内の次のメッセージ シンクを取得します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The current implementation of NextSink returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">NextSink の現在の実装を返します<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> interface that represents the next message sink in the sink chain.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageSink"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>シンク チェーン内のシンクの次のメッセージを表すインターフェイスです。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Sets an <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the current remote method call, which provides a way to control asynchronous messages after they have been dispatched.</source>
          <target state="translated">セット、 <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>おり、現在のリモート メソッド呼び出しがディスパッチされた後に非同期メッセージを制御する方法を提供します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You do not need to call the SetMessageCtrl method.</source>
          <target state="translated">SetMessageCtrl メソッドを呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the current remote method call.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Remoting.Messaging.IMessageCtrl"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の現在のリモート メソッド呼び出しです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Synchronously processes a response message returned by a method call on a remote object.</source>
          <target state="translated">リモート オブジェクトに対するメソッドの呼び出しによって返される応答メッセージを同期的に処理します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The SyncProcessMessage method implements the &lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt; interface.</source>
          <target state="translated">メソッドを実装する、&lt;xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;インターフェイス&lt;/xref:System.Runtime.Remoting.Messaging.IMessageSink&gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You do not need to call this method directly.</source>
          <target state="translated">このメソッドを直接呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It is intended for use by the remoting infrastructure of the .NET Framework.</source>
          <target state="translated">.NET Framework のリモート処理インフラストラクチャで目的が使用します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>SyncProcessMessage invokes the consumer code's &lt;xref:System.AsyncCallback&gt; delegate.</source>
          <target state="translated">呼び出すコンシューマー コードの&lt;xref:System.AsyncCallback&gt;委任します&lt;/xref:System.AsyncCallback&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It also sets the &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt; instance returned by the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt; method.</source>
          <target state="translated">また、設定、&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;によって返されるインスタンス、&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;メソッド&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;&lt;/xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`msg`</ph> parameter is of type &lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;, the same object is returned by &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;.</source>
          <target state="translated">場合、<ph id="ph1">`msg`</ph>パラメーターは型&lt;xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;.&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A&gt;によって同じオブジェクトが返される、&lt;/xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Otherwise, a reply message that contains a remoting exception is returned.</source>
          <target state="translated">それ以外の場合、リモート処理例外を含む応答メッセージが返されます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>SyncProcessMessage also modifies the value returned by the &lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt; property.</source>
          <target state="translated">では、によって返される値も変更されます、&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;プロパティ&lt;/xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A response message to a method call on a remote object.</source>
          <target state="translated">リモート オブジェクトに対するメソッドの呼び出しに応答メッセージ。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>