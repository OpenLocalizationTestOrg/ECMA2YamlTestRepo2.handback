<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c49f0e1be87f960b7dfcf7d811ca0b2f625045e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Cryptography.Rfc2898DeriveBytes.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">381767a32ebe81b7940e57f2314493eeae3850c2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c70f348fc116936174057b69bfe07f4c9d5fd90</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">基づく擬似乱数ジェネレーターを使用して、キー派生機能 (pbkdf2) のパスワードに基づく実装<bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Rfc2898DeriveBytes takes a password, a salt, and an iteration count, and then generates keys through calls to the &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt; method.</source>
          <target state="translated">Rfc2898DeriveBytes、パスワード、salt、および、反復カウントを呼び出すことでキーを生成し、&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;メソッド&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Rfc2898DeriveBytes class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">Rfc2898DeriveBytes クラスは、基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、<bpt id="p1">[</bpt>コメント Web サイトの要求<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ハードコーディングしないでをソース コード内のパスワード。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">使用してパスワードをハードコーディング アセンブリから取得できる、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password and salt to derive the key.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスをキーを派生させるため、パスワードおよび salt を使用します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The salt size must be 8 bytes or larger.</source>
          <target state="translated">Salt のサイズは 8 バイトである必要がありますか大きいです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、<bpt id="p1">[</bpt>コメント Web サイトの要求<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ハードコーディングしないでをソース コード内のパスワード。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">使用してパスワードをハードコーディング アセンブリから取得できる、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">キーの派生に使用するパスワード。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The key salt used to derive the key.</source>
          <target state="translated">キーを派生させるために使用するキー salt。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">パスワード、または salt が<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the password and salt size to derive the key.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスをキーを派生させるため、パスワードおよび salt のサイズを使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The salt size must be 8 bytes or larger.</source>
          <target state="translated">Salt のサイズは 8 バイトである必要がありますか大きいです。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、<bpt id="p1">[</bpt>コメント Web サイトの要求<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ハードコーディングしないでをソース コード内のパスワード。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">使用してパスワードをハードコーディング アセンブリから取得できる、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">キーの派生に使用するパスワード。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The size of the random salt that you want the class to generate.</source>
          <target state="translated">クラスを生成するランダム salt のサイズ。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes.</source>
          <target state="translated">指定された salt のサイズは 8 バイト未満です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">パスワード、または salt が<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password, a salt, and number of iterations to derive the key.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスをキーを派生させるため、パスワード、salt、およびイテレーションの数を使用します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">Salt のサイズは 8 バイトである必要がありますか、大きい反復カウントは 0 より大きい値である必要があります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">イテレーションの推奨される最小数は 1000 です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、<bpt id="p1">[</bpt>コメント Web サイトの要求<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ハードコーディングしないでをソース コード内のパスワード。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">使用してパスワードをハードコーディング アセンブリから取得できる、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">キーの派生に使用するパスワード。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The key salt used to derive the key.</source>
          <target state="translated">キーを派生させるために使用するキー salt。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">操作のイテレーションの数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">パスワード、または salt が<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password, a salt, and number of iterations to derive the key.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスをキーを派生させるため、パスワード、salt、およびイテレーションの数を使用します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">Salt のサイズは 8 バイトである必要がありますか、大きい反復カウントは 0 より大きい値である必要があります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">イテレーションの推奨される最小数は 1000 です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、<bpt id="p1">[</bpt>コメント Web サイトの要求<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ハードコーディングしないでをソース コード内のパスワード。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">使用してパスワードをハードコーディング アセンブリから取得できる、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">キーの派生に使用するパスワード。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The key salt used to derive the key.</source>
          <target state="translated">キーを派生させるために使用するキー salt。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">操作のイテレーションの数。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">パスワード、または salt が<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using a password, a salt size, and number of iterations to derive the key.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスをキーを派生させるため、パスワード、salt サイズ、およびイテレーションの数を使用します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</source>
          <target state="translated">Salt のサイズは 8 バイトである必要がありますか、大きい反復カウントは 0 より大きい値である必要があります。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">イテレーションの推奨される最小数は 1000 です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</source>
          <target state="translated">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</source>
          <target state="translated">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class can be used to produce a derived key from a base key and other parameters.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</source>
          <target state="translated">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the <bpt id="p1">[</bpt>Request for Comments Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>.</source>
          <target state="translated">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS #5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、<bpt id="p1">[</bpt>コメント Web サイトの要求<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=37119)</ept>です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See section 5.2, "PBKDF2," for complete details.</source>
          <target state="translated">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Never hard-code a password within your source code.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; ハードコーディングしないでをソース コード内のパスワード。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Hard-coded passwords can be retrieved from an assembly by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>, by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</source>
          <target state="translated">使用してパスワードをハードコーディング アセンブリから取得できる、 <bpt id="p1">[</bpt>Ildasm.exe (IL 逆アセンブラー)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The password used to derive the key.</source>
          <target state="translated">キーの派生に使用するパスワード。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The size of the random salt that you want the class to generate.</source>
          <target state="translated">クラスを生成するランダム salt のサイズ。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">操作のイテレーションの数。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</source>
          <target state="translated">指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The password or salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">パスワード、または salt が<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;iterations &lt;/code&gt;</ph>is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;iterations &lt;/code&gt;</ph>範囲外です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This parameter requires a non-negative number.</source>
          <target state="translated">このパラメーターには、負でない値が必要です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Derives a cryptographic key from the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">暗号化キーを派生、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</source>
          <target state="translated">この関数は、CryptDeriveKey() Crypto API 関数のラッパーであり、Crypto API を使用するアプリケーションとの相互運用性を提供するためのものでは、します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`keySize`</ph> parameter is set to 0 bits, the default key size for the specified algorithm is used.</source>
          <target state="translated">場合、<ph id="ph1">`keySize`</ph>パラメーターが 0 のビットに設定されている、指定したアルゴリズムの既定のキー サイズが使用されます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The algorithm name for which to derive the key.</source>
          <target state="translated">キーを派生させる対象のアルゴリズム名。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The hash algorithm name to use to derive the key.</source>
          <target state="translated">キーの派生に使用するハッシュ アルゴリズムの名前。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The size of the key, in bits, to derive.</source>
          <target state="translated">キーを派生させるためのビット単位のサイズ。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The initialization vector (IV) to use to derive the key.</source>
          <target state="translated">初期化ベクター (IV) を使用して、キーを取得します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The derived key.</source>
          <target state="translated">派生キー。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">keySize</ph><ept id="p1">&lt;/code&gt;</ept> parameter is incorrect.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">keySize</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが正しくありません。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>-or-       The cryptographic service provider (CSP) cannot be acquired.</source>
          <target state="translated">- または - 暗号化サービス プロバイダー (CSP) を取得できません。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">algname</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid algorithm name.</source>
          <target state="translated">- または -、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">algname</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが有効なアルゴリズムの名前ではありません。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">alghashname</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not a valid hash algorithm name.</source>
          <target state="translated">- または -、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">alghashname</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターが有効なハッシュ アルゴリズムの名前ではありません。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.Rfc2898DeriveBytes"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスし、必要に応じてマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose()`</ph>メソッドおよび<ph id="ph2">`Finalize`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph>呼び出す<ph id="ph2">`Dispose`</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;参照。&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; 。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、<ph id="ph1">`Dispose()`</ph>参照される各オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-random key for this object.</source>
          <target state="translated">このオブジェクトの擬似ランダム キーを返します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class implements PBKDF2 functionality by using a pseudorandom number generator based on &lt;xref:System.Security.Cryptography.HMACSHA1&gt;.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;クラスは&lt;xref:System.Security.Cryptography.HMACSHA1&gt;。&lt;/xref:System.Security.Cryptography.HMACSHA1&gt;に基づく擬似乱数ジェネレーターを使用して、PBKDF2 機能を実装&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;する</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt; class takes a password, a salt, and an iteration count, and then generates keys through calls to the GetBytes method.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;クラスは、パスワード、salt、および、反復カウントを受け取るし、GetBytes メソッドを呼び出すことでキーが生成されます&lt;/xref:System.Security.Cryptography.Rfc2898DeriveBytes&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Repeated calls to this method will not generate the same key; instead, appending two calls of the GetBytes method with a <ph id="ph1">`cb`</ph> parameter value of <ph id="ph2">`20`</ph> is the equivalent of calling the GetBytes method once with a <ph id="ph3">`cb`</ph> parameter value of <ph id="ph4">`40`</ph>.</source>
          <target state="translated">このメソッドを繰り返し呼び出すは同じキーを生成しませんGetBytes を使用してメソッドの&amp;2; つの呼び出しを代わりに、追加、<ph id="ph1">`cb`</ph>パラメーターの値<ph id="ph2">`20`</ph>が&amp;1; 回 GetBytes メソッドを呼び出すのと同じ、<ph id="ph3">`cb`</ph>パラメーターの値<ph id="ph4">`40`</ph>です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The number of pseudo-random key bytes to generate.</source>
          <target state="translated">生成する擬似ランダム キー バイトの数。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A byte array filled with pseudo-random key bytes.</source>
          <target state="translated">擬似ランダム キー バイトを格納したバイト配列。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cb &lt;/code&gt;</ph>is out of range.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;cb &lt;/code&gt;</ph>範囲外です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This parameter requires a non-negative number.</source>
          <target state="translated">このパラメーターには、負でない値が必要です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of iterations for the operation.</source>
          <target state="translated">取得または操作のイテレーションの数を設定します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Iteration count is the number of times an operation is performed.</source>
          <target state="translated">イテレーションのカウントが何回の操作を実行します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For this method, the count should be greater than zero.</source>
          <target state="translated">このメソッドのカウントは&amp;0; より大きい値にする必要があります。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The minimum recommended number of iterations is 1000.</source>
          <target state="translated">イテレーションの推奨される最小数は 1000 です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The number of iterations for the operation.</source>
          <target state="translated">操作のイテレーションの数。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The number of iterations is less than 1.</source>
          <target state="translated">イテレーションの数は、1 より小さいです。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Resets the state of the operation.</source>
          <target state="translated">操作の状態をリセットします。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This method is automatically called if the salt or iteration count is modified.</source>
          <target state="translated">Salt またはイテレーションの数が変更された場合、このメソッドは自動的に呼び出されます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Gets or sets the key salt value for the operation.</source>
          <target state="translated">取得または操作するキー salt 値を設定します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</source>
          <target state="translated">Salt、ランダムなデータセット (バイト単位) より難しいメッセージの承認されていない復号化するために使用されます。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</source>
          <target state="translated">辞書攻撃は、攻撃者が事前に計算された暗号化キーの値を最も可能性の高いで暗号化された値を比較することで、暗号化されたメッセージを復号化しようと攻撃です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</source>
          <target state="translated">このような攻撃は salt、またはランダム (バイト単位)、キーの派生前に、パスワードの最後の導入によって非常に困難になります。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The key salt value for the operation.</source>
          <target state="translated">操作のキー salt 値。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The specified salt size is smaller than 8 bytes.</source>
          <target state="translated">指定された salt のサイズは 8 バイト未満です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The salt is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Salt は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>