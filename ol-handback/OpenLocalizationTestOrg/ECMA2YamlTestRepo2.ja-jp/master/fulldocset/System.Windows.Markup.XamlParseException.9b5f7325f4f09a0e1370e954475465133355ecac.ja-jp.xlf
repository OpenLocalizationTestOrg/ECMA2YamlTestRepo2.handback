<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">429230f23e2f8776acee325ad145ec8a9c27e376</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Markup.XamlParseException.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a0b7fa34221c42d14ced2005026f19b63cc3055</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17e9fa0997161a7b3e75cf38105141b709311848</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the exception class for parser-specific exceptions from a WPF XAML parser.</source>
          <target state="translated">WPF XAML パーサーからパーサー固有の例外の例外クラスを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This exception is used in XAML API or WPF XAML parser operations from <ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>, or for specific use of the WPF XAML parser by calling <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> API.</source>
          <target state="translated">この例外は、XAML API または WPF XAML パーサー操作で使用<ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph>と<ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>、または特定の使用を呼び出して、WPF XAML パーサーの<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> API です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XamlParseException is used only for the WPF-implemented XAML parser that performs the XAML parsing and loading for WPF applications.</source>
          <target state="translated">次の処理方法は、WPF アプリケーションの XAML の解析と読み込みを実行する XAML の WPF 実装パーサーにのみ使用されます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Specifically, the exception is only relevant when an application targets <ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>.</source>
          <target state="translated">具体的には、例外は、のみ関連ときに、アプリケーションがターゲット<ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph>と<ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to &lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;).</source>
          <target state="translated">例外が実行されている WPF アプリケーション内での XAML をロードするために XAML の WPF 実装パーサーをフックするための Api への呼び出しの実行時にユーザー コードから取得できますも (たとえば、呼び出し&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;).&lt;/xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the &lt;xref:System.Xaml.XamlParseException&gt; exception that typically reports XAML processing exceptions is defined in a different namespace (&lt;xref:System.Xaml&gt;) and a different assembly (System.Xaml).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>、&lt;xref:System.Xaml.XamlParseException&gt;通常 XAML 処理例外を報告する例外が別の名前空間で定義されている (&lt;xref:System.Xaml&gt;) と、別のアセンブリ (System.Xaml).&lt;/xref:System.Xaml&gt; &lt;/xref:System.Xaml.XamlParseException&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Unless you are writing an equivalent to the WPF XAML parser or working with <ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph> targeting, you generally will not throw XamlParseException from your own code.</source>
          <target state="translated">WPF XAML パーサーに、該当するショートカットを作成しているかを使用しない限り、<ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph>と<ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>を対象にする、一般的にはスローされません XamlParseException 独自のコードからです。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, handling for the exception is sometimes necessary.</source>
          <target state="translated">ただし、例外の処理は必要があります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For application scenarios, where you may want to suppress XAML parse errors, a &lt;xref:System.Windows.Threading.Dispatcher&gt; &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event handler at the application level is one way to handle a run-time XamlParseException.</source>
          <target state="translated">アプリケーションのシナリオで、XAML の解析エラーを抑制することがあります、&lt;xref:System.Windows.Threading.Dispatcher&gt;&lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;アプリケーション レベルのイベント ハンドラーがランタイムの次の処理を処理する方法の&amp;1; つ&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;&lt;/xref:System.Windows.Threading.Dispatcher&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Whether to suppress exceptions or let them surface to user code depends on how you design your application for purposes of loading XAML, and the trust level that you assign to the XAML your application loads.</source>
          <target state="translated">XAML の読み込みのためにアプリケーションを設計する方法に依存する例外を抑制するか、ユーザー コード画面を知らせるされ、アプリケーション、XAML に割り当てることの信頼レベルが読み込まれます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Security Considerations<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or "XAML Security" section of <bpt id="p2">[</bpt>XAML Overview (WPF)<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>XAML セキュリティの考慮事項<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>または"XAML セキュリティ」セクション<bpt id="p2">[</bpt>XAML の概要 (WPF)<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For pages of an application, when the XamlParseException is thrown, it is usually in the context of the <ph id="ph1">`InitializeComponent`</ph> call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level.</source>
          <target state="translated">アプリケーションのページの場合、次の処理がスローされると、これは通常のコンテキストで、<ph id="ph1">`InitializeComponent`</ph>はページごとのレベルでの WPF XAML パーサーの WPF アプリケーション モデルの使用法のエントリ ポイントに、ページ クラスによって実行される呼び出しです。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Therefore another possible handling strategy is to place <ph id="ph1">`try/catch`</ph> blocks in <ph id="ph2">`InitializeComponent`</ph>.</source>
          <target state="translated">そのための戦略の処理が可能に配置されます。<ph id="ph1">`try/catch`</ph>ブロックを<ph id="ph2">`InitializeComponent`</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up <ph id="ph1">`InitializeComponent`</ph>.</source>
          <target state="translated">ただし、この手法は、テンプレート、ビジュアル デザイン サーフェスにもはそぐわないおよびをそのフックをソース生成された他の<ph id="ph1">`InitializeComponent`</ph>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, using the specified exception message string.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス、指定された例外のメッセージ文字列を使用します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The exception message.</source>
          <target state="translated">例外メッセージ。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This constructor is used for serialization when marshaling an exception of this type across an application domain or machine boundary.</source>
          <target state="translated">この型の例外をアプリケーション ドメインまたはコンピューターの境界を越えてマーシャ リングすると、このコンス トラクターはシリアル化に使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Contains all the information that is required to serialize or deserialize the object.</source>
          <target state="translated">オブジェクトを逆シリアル化または逆シリアル化に必要なすべての情報が含まれています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The source and destination of a serialized stream.</source>
          <target state="translated">ソースとシリアル化されたストリームの転送先。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, using the specified exception message string and inner exception.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス、指定された例外のメッセージ文字列と内部例外を使用します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</source>
          <target state="translated">前の例外の直接の結果としてスローされる例外は、前の例外への参照を含める必要があります。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Exception.InnerException%2A&gt; property returns the same value that is passed into the constructor, or <ph id="ph1">`null`</ph> if the &lt;xref:System.Exception.InnerException%2A&gt; property does not supply the inner exception value to the constructor.</source>
          <target state="translated">&lt;xref:System.Exception.InnerException%2A&gt;プロパティは、コンス トラクターに渡されたものと同じ値を返しますまたは<ph id="ph1">`null`</ph>場合、&lt;xref:System.Exception.InnerException%2A&gt;プロパティがコンス トラクターには、内部例外値を指定していません&lt;/xref:System.Exception.InnerException%2A&gt;&lt;/xref:System.Exception.InnerException%2A&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The exception message.</source>
          <target state="translated">例外メッセージ。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The initial exception that occurred.</source>
          <target state="translated">発生した最初の例外。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, using the specified exception message string, and the specified line number and position in the line.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスを使用して、指定した例外メッセージ文字列、および指定した数の行し行の後ろの位置します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The exception message.</source>
          <target state="translated">例外メッセージ。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The line number where the exception occurred.</source>
          <target state="translated">例外が発生した行番号。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The position in the line at which the exception occurred.</source>
          <target state="translated">例外が発生した行の位置。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, using the specified exception message, inner exception, line number, and position in the line.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlParseException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス、指定した例外メッセージ、内部例外、行番号、および行の位置を使用します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</source>
          <target state="translated">前の例外の直接の結果としてスローされる例外は、前の例外への参照を含める必要があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Exception.InnerException%2A&gt; property returns the same value that is passed into the constructor, or <ph id="ph1">`null`</ph> if the &lt;xref:System.Exception.InnerException%2A&gt; property does not supply the inner exception value to the constructor.</source>
          <target state="translated">&lt;xref:System.Exception.InnerException%2A&gt;プロパティは、コンス トラクターに渡されたものと同じ値を返しますまたは<ph id="ph1">`null`</ph>場合、&lt;xref:System.Exception.InnerException%2A&gt;プロパティがコンス トラクターには、内部例外値を指定していません&lt;/xref:System.Exception.InnerException%2A&gt;&lt;/xref:System.Exception.InnerException%2A&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The exception message.</source>
          <target state="translated">例外メッセージ。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The line number where the exception occurred.</source>
          <target state="translated">例外が発生した行番号。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The position in the line at which the exception occurred.</source>
          <target state="translated">例外が発生した行の位置。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The initial exception that occurred.</source>
          <target state="translated">発生した最初の例外。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets base URI information when the exception is thrown.</source>
          <target state="translated">取得のベース URI は、例外がスローされたときにします。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Base URI is potentially available because of parser context when the exception occurred.</source>
          <target state="translated">ベース URI は、可能性のある使用可能なパーサー コンテキストのためと、例外が発生しました。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.</source>
          <target state="translated">知識ベース URI はリソースの解決エラーの根本原因がある場合のデバッグに役立つできます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The parser context base URI.</source>
          <target state="translated">パーサー コンテキストのベース URI。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets the data that is required to serialize the specified object by populating the specified <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">指定した設定することで、指定したオブジェクトをシリアル化するために必要なデータを取得<bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>GetObjectData sets a &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; object with all the exception object data targeted for serialization.</source>
          <target state="translated">GetObjectData セット、&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;シリアル化の対象となるすべての例外オブジェクト データを持つオブジェクト&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt;。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>During deserialization, the exception is reconstituted from the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; transmitted over the stream.</source>
          <target state="translated">逆シリアル化中に例外が再構成されて、 &lt;xref:System.Runtime.Serialization.SerializationInfo&gt;、ストリームで転送します&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The serialization information object to add the serialization data to.</source>
          <target state="translated">シリアル化データを追加するシリアル化情報オブジェクトです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The destination for this serialization.</source>
          <target state="translated">このシリアル化のシリアル化先。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets or sets the key value of the item in a dictionary where the exception occurred.</source>
          <target state="translated">取得または例外が発生したディクショナリの項目のキー値を設定します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The relevant XAML <bpt id="p1">&lt;xref uid="langword_csharp_x:Key" name="x:Key" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value.</source>
          <target state="translated">関連する XAML <bpt id="p1">&lt;xref uid="langword_csharp_x:Key" name="x:Key" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets the line number where the exception occurred.</source>
          <target state="translated">例外が発生した行番号を取得します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The line number.</source>
          <target state="translated">行番号。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets the position in the line where the exception occurred.</source>
          <target state="translated">例外が発生した行の位置を取得します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The line position.</source>
          <target state="translated">行の位置。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets or sets the XAML name of the object where the exception occurred.</source>
          <target state="translated">取得または例外が発生したオブジェクトの XAML 名前を設定します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The XAML name of the object.</source>
          <target state="translated">オブジェクトの XAML の名前。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">[</bpt>x:Uid Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> of the object where the exception occurred.</source>
          <target state="translated">取得または設定、 <bpt id="p1">[</bpt>X:uid Directive<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>の例外が発生したオブジェクト。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;xref uid="langword_csharp_Uid" name="Uid" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> string.</source>
          <target state="translated">値、 <bpt id="p1">&lt;xref uid="langword_csharp_Uid" name="Uid" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>文字列。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>