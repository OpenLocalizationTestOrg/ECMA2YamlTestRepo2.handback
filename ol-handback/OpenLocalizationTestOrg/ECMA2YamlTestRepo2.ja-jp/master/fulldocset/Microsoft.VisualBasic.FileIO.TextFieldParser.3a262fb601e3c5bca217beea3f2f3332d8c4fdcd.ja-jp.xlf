<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bd4f051f259503b6877261552f52f4ab96b9e89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\Microsoft.VisualBasic.FileIO.TextFieldParser.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e465a9c7b2550c6eeb60b528d6f3808681cb04ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2197e266b59025815cbe946fba3a6dd47c332987</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides methods and properties for parsing structured text files.</source>
          <target state="translated">構造化テキストの解析中のメソッドとプロパティを提供するファイル。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextFieldParser`</ph> object provides methods and properties for parsing structured text files.</source>
          <target state="translated"><ph id="ph1">`TextFieldParser`</ph>オブジェクトがメソッドを提供し、構造化テキスト ファイルを解析するためのプロパティです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Parsing a text file with the <ph id="ph1">`TextFieldParser`</ph> is similar to iterating over a text file, while the <ph id="ph2">`ReadFields`</ph> method to extract fields of text is similar to splitting the strings.</source>
          <target state="translated">持つテキスト ファイルの解析、<ph id="ph1">`TextFieldParser`</ph>はテキスト ファイルを反復処理に似ています中に、<ph id="ph2">`ReadFields`</ph>テキストのフィールドを抽出する方法は、文字列の分割に似ています。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TextFieldParser`</ph> can parse two types of files: delimited or fixed-width.</source>
          <target state="translated"><ph id="ph1">`TextFieldParser`</ph>&amp;2; 種類のファイルを解析することができます。 区切り記号または固定幅。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Some properties, such as <ph id="ph1">`Delimiters`</ph> and <ph id="ph2">`HasFieldsEnclosedInQuotes`</ph> are meaningful only when working with delimited files, while the <ph id="ph3">`FieldWidths`</ph> property is meaningful only when working with fixed-width files.</source>
          <target state="translated">一部のプロパティなど<ph id="ph1">`Delimiters`</ph>と<ph id="ph2">`HasFieldsEnclosedInQuotes`</ph>のみ意味が区切られたファイルを使用する場合の中に、<ph id="ph3">`FieldWidths`</ph>プロパティは、固定幅のファイルを扱うときにのみ意味します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`Microsoft.VisualBasic.FileIO.TextFieldParser`</ph> object.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`Microsoft.VisualBasic.FileIO.TextFieldParser`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a delimited text file|<bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a fixed-width text file|<bpt id="p2">[</bpt>How to: Read From Fixed-width Text Files<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a text file with multiple formats|<bpt id="p3">[</bpt>How to: Read From Text Files with Multiple Formats<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |区切られたテキスト ファイルからの読み取り |<bpt id="p1">[</bpt>する方法: コンマ区切りのテキスト ファイルから読み取られた<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|  |固定幅テキスト ファイルから読み取る |<bpt id="p2">[</bpt>する方法: 固定幅テキスト ファイルを読み取る<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>|  |複数の形式を持つテキスト ファイルから読み取る |<bpt id="p3">[</bpt>する方法: 複数の形式を持つテキスト ファイルからの読み取り<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>ファイルを解析またはストリームをオブジェクトとして表されます、<ph id="ph2">`stream`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.Stream&gt;.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The stream to be parsed.</source>
          <target state="translated">解析されるストリーム。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>を読み取ることができません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`reader`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>ファイルを解析またはストリームをオブジェクトとして表されます、<ph id="ph2">`reader`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.TextReader&gt;.</source>
          <target state="translated">&lt;xref:System.IO.TextReader&gt;.&lt;/xref:System.IO.TextReader&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextReader&gt; stream to be parsed.</source>
          <target state="translated">&lt;xref:System.IO.TextReader&gt;解析されるストリーム&lt;/xref:System.IO.TextReader&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file specified by the <ph id="ph2">`path`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>によって指定されたファイルを解析するオブジェクト、<ph id="ph2">`path`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The complete path of the file to be parsed.</source>
          <target state="translated">解析するファイルの完全なパスです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>ファイルを解析またはストリームをオブジェクトとして表されます、<ph id="ph2">`stream`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.Stream&gt;.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The stream to be parsed.</source>
          <target state="translated">解析されるストリーム。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Text.Encoding&gt;.</source>
          <target state="translated">&lt;xref:System.Text.Encoding&gt;.&lt;/xref:System.Text.Encoding&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Default is &lt;xref:System.Text.Encoding.UTF8*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Text.Encoding.UTF8*&gt;。&lt;/xref:System.Text.Encoding.UTF8*&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>を読み取ることができません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file specified by the <ph id="ph2">`path`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>によって指定されたファイルを解析するオブジェクト、<ph id="ph2">`path`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The complete path of the file to be parsed.</source>
          <target state="translated">解析するファイルの完全なパスです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Text.Encoding&gt;.</source>
          <target state="translated">&lt;xref:System.Text.Encoding&gt;.&lt;/xref:System.Text.Encoding&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Default is &lt;xref:System.Text.Encoding.UTF8*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Text.Encoding.UTF8*&gt;。&lt;/xref:System.Text.Encoding.UTF8*&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列または<ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph>は<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>ファイルを解析またはストリームをオブジェクトとして表されます、<ph id="ph2">`stream`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`detectEncoding`</ph> parameter is <ph id="ph2">`True`</ph>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</source>
          <target state="translated">場合、<ph id="ph1">`detectEncoding`</ph>パラメーターは<ph id="ph2">`True`</ph>、このコンス トラクターは、ファイルまたはストリームの最初の&amp;3; バイトで確認して、エンコーディングの検出を試みます。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</source>
          <target state="translated">自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Otherwise, the encoding specified by <ph id="ph1">`defaultEncoding`</ph> is used.</source>
          <target state="translated">それ以外の場合で指定されたエンコーディング<ph id="ph1">`defaultEncoding`</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.Stream&gt;.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The stream to be parsed.</source>
          <target state="translated">解析されるストリーム。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Text.Encoding&gt;.</source>
          <target state="translated">&lt;xref:System.Text.Encoding&gt;.&lt;/xref:System.Text.Encoding&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Default is &lt;xref:System.Text.Encoding.UTF8*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Text.Encoding.UTF8*&gt;。&lt;/xref:System.Text.Encoding.UTF8*&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Indicates whether to look for byte order marks at the beginning of the file.</source>
          <target state="translated">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Default is <bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>を読み取ることができません。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file specified by the <ph id="ph2">`path`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>によって指定されたファイルを解析するオブジェクト、<ph id="ph2">`path`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`detectEncoding`</ph> parameter is <ph id="ph2">`True`</ph>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</source>
          <target state="translated">場合、<ph id="ph1">`detectEncoding`</ph>パラメーターは<ph id="ph2">`True`</ph>、このコンス トラクターは、ファイルまたはストリームの最初の&amp;3; バイトで確認して、エンコーディングの検出を試みます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</source>
          <target state="translated">自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Otherwise, the encoding specified by <ph id="ph1">`defaultEncoding`</ph> is used.</source>
          <target state="translated">それ以外の場合で指定されたエンコーディング<ph id="ph1">`defaultEncoding`</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The complete path of the file to be parsed.</source>
          <target state="translated">解析するファイルの完全なパスです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Text.Encoding&gt;.</source>
          <target state="translated">&lt;xref:System.Text.Encoding&gt;.&lt;/xref:System.Text.Encoding&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Default is &lt;xref:System.Text.Encoding.UTF8*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Text.Encoding.UTF8*&gt;。&lt;/xref:System.Text.Encoding.UTF8*&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Indicates whether to look for byte order marks at the beginning of the file.</source>
          <target state="translated">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Default is <bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;path&lt;/code&gt;</ph>空の文字列または<ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph>は<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">新たに作成<ph id="ph1">`TextFieldParser`</ph>ファイルを解析またはストリームをオブジェクトとして表されます、<ph id="ph2">`stream`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`detectEncoding`</ph> parameter is <ph id="ph2">`True`</ph>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</source>
          <target state="translated">場合、<ph id="ph1">`detectEncoding`</ph>パラメーターは<ph id="ph2">`True`</ph>、このコンス トラクターは、ファイルまたはストリームの最初の&amp;3; バイトで確認して、エンコーディングの検出を試みます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</source>
          <target state="translated">自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Otherwise, the encoding specified by <ph id="ph1">`defaultEncoding`</ph> is used.</source>
          <target state="translated">それ以外の場合で指定されたエンコーディング<ph id="ph1">`defaultEncoding`</ph>を使用します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.Stream&gt;.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The stream to be parsed.</source>
          <target state="translated">解析されるストリーム。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Text.Encoding&gt;.</source>
          <target state="translated">&lt;xref:System.Text.Encoding&gt;.&lt;/xref:System.Text.Encoding&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Default is &lt;xref:System.Text.Encoding.UTF8*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Text.Encoding.UTF8*&gt;。&lt;/xref:System.Text.Encoding.UTF8*&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Indicates whether to look for byte order marks at the beginning of the file.</source>
          <target state="translated">ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Default is <bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Boolean" name="Boolean" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Indicates whether to leave <ph id="ph1">`stream`</ph> open when the <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is closed.</source>
          <target state="translated">ままにするかどうかを示す<ph id="ph1">`stream`</ph>開くときに、 <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクトは閉じられます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Default is <bpt id="p1">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;defaultEncoding&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>を読み取ることができません。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Closes the current <bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">現在の終了<bpt id="p1">&lt;xref uid="langword_csharp_TextFieldParser" name="TextFieldParser" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Defines comment tokens.</source>
          <target state="translated">コメント トークンを定義します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</source>
          <target state="translated">コメント トークンである文字列を行の先頭に配置している場合があること示し行コメント、パーサーによって無視する必要があります。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、<bpt id="p1">**</bpt>すべて<ept id="p1">**</ept>タブです。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Zero-length comment tokens are ignored.</source>
          <target state="translated">長さ&amp;0; のコメント トークンは無視されます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A string array that contains all of the comment tokens for the <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">トークンのすべてのコメントを含む文字列の配列、 <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A comment token includes white space.</source>
          <target state="translated">コメント トークンには、空白文字が含まれています。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Defines the delimiters for a text file.</source>
          <target state="translated">テキスト ファイルの区切り記号を定義します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This property is meaningful only if the &lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt; property is set to <ph id="ph1">`FieldType.Delimited`</ph>.</source>
          <target state="translated">このプロパティは意味のある場合にのみ、&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;プロパティに設定されている<ph id="ph1">`FieldType.Delimited`</ph>&lt;/xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Defining the delimiters for a text file can also be accomplished with the &lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A&gt; method.</source>
          <target state="translated">テキスト ファイルで行うことができますの区切り記号を定義する、&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A&gt;メソッド&lt;/xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A&gt;。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The following table lists an example of a task involving the <ph id="ph1">`Delimiters`</ph> property.</source>
          <target state="translated">次の表に、関連するタスクの例、<ph id="ph1">`Delimiters`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a delimited text file|<bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |区切られたテキスト ファイルからの読み取り |<bpt id="p1">[</bpt>する方法: コンマ区切りのテキスト ファイルからの読み取り<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A string array that contains all of the field delimiters for the <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">すべてのフィールドの区切り記号を含む文字列の配列、 <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A delimiter value is set to a newline character, an empty string, or <bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">改行文字、空の文字列に区切り記号の値が設定されているまたは<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Releases resources used by the <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">によって使用されるリソースを解放、 <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Releases resources used by the <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">によって使用されるリソースを解放、 <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Boolean.</source>
          <target state="translated">ブール値。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> releases both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> releases only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージの両方のリソースを解放します。<bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</source>
          <target state="translated">返します<bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>コメントではないが、現在のカーソル位置と、ファイルの末尾の間で行が空でない場合、します。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This property can be used when reading from files to determine the end of the data being read.</source>
          <target state="translated">このプロパティは、読み取られるデータの end を特定のファイルから読み取るときに使用できます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`EndOfData`</ph> property.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`EndOfData`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a delimited file|<bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a fixed-width file|<bpt id="p2">[</bpt>How to: Read From Fixed-width Text Files<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |<bpt id="p1">[</bpt>する方法: コンマ区切りのテキスト ファイルから読み取られた<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|  |固定幅ファイルからの読み取り |<bpt id="p2">[</bpt>する方法: 固定幅テキスト ファイルを読み取る<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there is no more data to read; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>データを読み取る; がある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Returns the line that caused the most recent <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> exception.</source>
          <target state="translated">最新の原因となったの行を返します<bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>例外。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If no &lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt; exceptions have been thrown, an empty string is returned.</source>
          <target state="translated">ない場合は&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;例外がスローされると、空の文字列が返されます&lt;/xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The &lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A&gt; property can be used to display the number of the line that caused the exception.</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A&gt;例外が発生した行の数を表示するプロパティを使用できます&lt;/xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A&gt;。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`ErrorLine`</ph> property.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`ErrorLine`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a delimited file|<bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a fixed-width file|<bpt id="p2">[</bpt>How to: Read From Fixed-width Text Files<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |<bpt id="p1">[</bpt>する方法: コンマ区切りのテキスト ファイルから読み取られた<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|  |固定幅ファイルからの読み取り |<bpt id="p2">[</bpt>する方法: 固定幅テキスト ファイルを読み取る<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The line that caused the most recent <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> exception.</source>
          <target state="translated">最新の原因となった行<bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>例外。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Returns the number of the line that caused the most recent <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> exception.</source>
          <target state="translated">最新の原因となった行の数を返します<bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>例外。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If no &lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt; exceptions have been thrown, -1 is returned.</source>
          <target state="translated">ない場合は&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;例外がスローされました、-1 が返されます&lt;/xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The &lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A&gt; property can be used to display the number of the line that caused the exception.</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A&gt;例外が発生した行の数を表示するプロパティを使用できます&lt;/xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A&gt;。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Blank lines and comments are not ignored when determining the line number.</source>
          <target state="translated">行番号を調べるときに、空白行とコメントは無視されません。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`ErrorLineNumber`</ph> property.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`ErrorLineNumber`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a delimited file|<bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a fixed-width file|<bpt id="p2">[</bpt>How to: Read From Fixed-width Text Files<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |<bpt id="p1">[</bpt>する方法: コンマ区切りのテキスト ファイルから読み取られた<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|  |固定幅ファイルからの読み取り |<bpt id="p2">[</bpt>する方法: 固定幅テキスト ファイルを読み取る<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The number of the line that caused the most recent <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> exception.</source>
          <target state="translated">最新の原因となった行の番号<bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.MalformedLineException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>例外。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Denotes the width of each column in the text file being parsed.</source>
          <target state="translated">解析するテキスト ファイル内の各列の幅を表します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This property is meaningful only if the &lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt; property is set to <ph id="ph1">`FieldType.FixedWidth`</ph>.</source>
          <target state="translated">このプロパティは意味のある場合にのみ、&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;プロパティに設定されている<ph id="ph1">`FieldType.FixedWidth`</ph>&lt;/xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</source>
          <target state="translated">配列の最後のエントリが&amp;0; に等しいまたはそれよりも小さい場合は、フィールドが可変幅であると見なされます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The &lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A&gt; method can also be used to set field widths.</source>
          <target state="translated">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A&gt;メソッドを使用してのフィールドの幅を設定することもできます&lt;/xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A&gt;。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`FieldWidths`</ph> property.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`FieldWidths`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a fixed-width text file|<bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |固定幅テキスト ファイルから読み取る |<bpt id="p1">[</bpt>する方法: 固定幅テキスト ファイルを読み取る<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An integer array that contains the width of each column in the text file that is being parsed.</source>
          <target state="translated">解析されたテキスト ファイル内の各列の幅を表す整数の配列。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A width value in any location other than the last entry of the array is less than or equal to zero.</source>
          <target state="translated">幅の値の配列の最後のエントリ以外の任意の場所では、0 に等しいまたはそれよりも小さいです。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Allows the <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</source>
          <target state="translated">により、 <bpt id="p1">&lt;xref href="Microsoft.VisualBasic.FileIO.TextFieldParser"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>リソースを解放し、それがガベージ コレクションによって回収される前に、他のクリーンアップ操作を実行しようとするオブジェクト。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</source>
          <target state="translated">区切り記号入りファイルの解析されたときに、フィールドを引用符で囲むかどうかを示します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、<bpt id="p1">**</bpt>すべて<ept id="p1">**</ept>タブです。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the property is <ph id="ph1">`True`</ph>, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</source>
          <target state="translated">プロパティが場合<ph id="ph1">`True`</ph>パーサーは、フィールドが引用符で囲まれていることを想定しています ("") 行の終わりを含めることができます。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If a field is enclosed in quotation marks, for example, <ph id="ph1">`abc, "field2a,field2b", field3`</ph> and this property is <ph id="ph2">`True`</ph>, then all text enclosed in quotation marks will be returned as is; this example would return <ph id="ph3">`abc|field2a,field2b|field3`</ph>.</source>
          <target state="translated">たとえば、フィールドを引用符で囲まれた場合<ph id="ph1">`abc, "field2a,field2b", field3`</ph>し、このプロパティは<ph id="ph2">`True`</ph>が引用符で囲まれたすべてのテキストが返されます。 この例と戻り<ph id="ph3">`abc|field2a,field2b|field3`</ph>です。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Setting this property to <ph id="ph1">`False`</ph> would make this example return <ph id="ph2">`abc|"field2a|field2b"|field3`</ph>.</source>
          <target state="translated">このプロパティを設定<ph id="ph1">`False`</ph>と次の例の戻り値、<ph id="ph2">`abc|"field2a|field2b"|field3`</ph>です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if fields are enclosed in quotation marks; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>フィールドが引用符で囲まれている場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns the current line number, or returns -1 if no more characters are available in the stream.</source>
          <target state="translated">現在の行番号を返します。 または、文字がないが、ストリームで使用可能な場合は-1 を返します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、<bpt id="p1">**</bpt>すべて<ept id="p1">**</ept>タブです。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Blank lines and comments are not ignored when determining the line number.</source>
          <target state="translated">行番号を調べるときに、空白行とコメントは無視されません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The current line number.</source>
          <target state="translated">現在の行番号。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Reads the specified number of characters without advancing the cursor.</source>
          <target state="translated">カーソルを進めずに指定された文字数を読み取ります。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`numberOfChars`</ph> value must be less than the total number of characters in the line.</source>
          <target state="translated"><ph id="ph1">`numberOfChars`</ph>値には、行の文字の合計数より小さくする必要があります。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If it is not, the string returned by <ph id="ph1">`PeekChars`</ph> will be truncated to the length of the line.</source>
          <target state="translated">ない場合は、によって返される文字列<ph id="ph1">`PeekChars`</ph>行の長さに切り詰められます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Blank lines are ignored.</source>
          <target state="translated">空白行は無視されます。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>End-of-line characters are not returned.</source>
          <target state="translated">行末の文字は返されません。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PeekChars`</ph> method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</source>
          <target state="translated"><ph id="ph1">`PeekChars`</ph>解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の末尾として解釈されます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`PeekChars`</ph> method.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`PeekChars`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Determine the format of a field before parsing it|<bpt id="p1">[</bpt>How to: Read From Text Files with Multiple Formats<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |解析する前に、フィールドの形式を決定 |<bpt id="p1">[</bpt>する方法: 複数の形式を持つテキスト ファイルからの読み取り<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_Int32" name="Int32" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Int32" name="Int32" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Number of characters to read.</source>
          <target state="translated">読み取る文字の数です。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="translated">必須。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A string that contains the specified number of characters read.</source>
          <target state="translated">指定された文字数を表す文字列を読み取る。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;numberOfChars&lt;/code&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;numberOfChars&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</source>
          <target state="translated">現在の行のすべてのフィールドを読み取り、文字列の配列として返し、データを含む次の行にカーソルを進めます。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In order to allow users to parse text files in multiple formats, the <ph id="ph1">`ReadFields`</ph> method examines the values of <ph id="ph2">`TextFieldType`</ph>, <ph id="ph3">`Delimiters`</ph>, and <ph id="ph4">`FieldWidths`</ph>, if they are specified, each time it is called.</source>
          <target state="translated">複数の形式でテキスト ファイルを解析できるようにするために、<ph id="ph1">`ReadFields`</ph>メソッドの値が調査<ph id="ph2">`TextFieldType`</ph>、 <ph id="ph3">`Delimiters`</ph>、および<ph id="ph4">`FieldWidths`</ph>が指定されている場合が呼び出されるたび。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Users need to correctly configure the <ph id="ph1">`TextFieldType`</ph> and <ph id="ph2">`FieldWidths`</ph> or <ph id="ph3">`Delimiters`</ph> properties, as appropriate.</source>
          <target state="translated">ユーザーが正しく構成する必要があります、<ph id="ph1">`TextFieldType`</ph>と<ph id="ph2">`FieldWidths`</ph>または<ph id="ph3">`Delimiters`</ph>に応じてのプロパティです。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`TextFieldType`</ph> is set to <ph id="ph2">`Delimited`</ph>, and <ph id="ph3">`Delimiters`</ph> is not set, or if <ph id="ph4">`TextFieldType`</ph> is set to <ph id="ph5">`FixedWidth`</ph> and <ph id="ph6">`FieldWidths`</ph>, an exception is thrown.</source>
          <target state="translated">場合<ph id="ph1">`TextFieldType`</ph>éý ' è <ph id="ph2">`Delimited`</ph>、および<ph id="ph3">`Delimiters`</ph>が設定されていない場合、または<ph id="ph4">`TextFieldType`</ph>に設定<ph id="ph5">`FixedWidth`</ph>と<ph id="ph6">`FieldWidths`</ph>例外がスローされます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`ReadFields`</ph> encounters blank lines, they are skipped and the next non-blank line is returned.</source>
          <target state="translated">場合<ph id="ph1">`ReadFields`</ph>、空白行を検出したはスキップされ、次の空白行が返されます。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`ReadFields`</ph> method cannot parse the current line, it raises an exception and does not move to the next line.</source>
          <target state="translated">場合、<ph id="ph1">`ReadFields`</ph>メソッドは、現在の行を解析できません、例外が発生し、次の行に移動しません。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This enables your application to attempt to parse the line again.</source>
          <target state="translated">これにより、もう一度のコマンドラインを解析しようとするアプリケーション。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`ReadFields`</ph> method.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`ReadFields`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a delimited file|<bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a fixed-width file|<bpt id="p2">[</bpt>How to: Read From Fixed-width Text Files<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |<bpt id="p1">[</bpt>する方法: コンマ区切りのテキスト ファイルから読み取られた<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|  |固定幅ファイルからの読み取り |<bpt id="p2">[</bpt>する方法: 固定幅テキスト ファイルを読み取る<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>An array of strings that contains field values for the current line.</source>
          <target state="translated">現在の行のフィールド値を含む文字列の配列。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A field cannot be parsed by using the specified format.</source>
          <target state="translated">指定された形式を使用してフィールドを解析できません。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Returns the current line as a string and advances the cursor to the next line.</source>
          <target state="translated">文字列として現在の行を返し、次の行にカーソルを進めます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReadLine`</ph> method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</source>
          <target state="translated"><ph id="ph1">`ReadLine`</ph>解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の末尾として解釈されます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Nothing`</ph> is returned if the end of the file is reached.</source>
          <target state="translated"><ph id="ph1">`Nothing`</ph>ファイルの末尾に達したかどうかが返されます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The current line from the file or stream.</source>
          <target state="translated">ファイルまたはストリームから現在の行。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Reads the remainder of the text file and returns it as a string.</source>
          <target state="translated">テキスト ファイルの残りの部分を読み書きを文字列として返します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、<bpt id="p1">**</bpt>すべて<ept id="p1">**</ept>タブです。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If there is nothing more to read because the end of the file has been reached, <ph id="ph1">`Nothing`</ph> is returned.</source>
          <target state="translated">項目詳細で、ファイルの末尾に達しているために、読み取ることがない場合<ph id="ph1">`Nothing`</ph>が返されます。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReadToEnd`</ph> method does not ignore blank lines and comments.</source>
          <target state="translated"><ph id="ph1">`ReadToEnd`</ph>メソッドは、空白行とコメントは無視されません。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The remaining text from the file or stream.</source>
          <target state="translated">ファイルまたはストリームの残りのテキスト。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Sets the delimiters for the reader to the specified values, and sets the field type to <bpt id="p1">&lt;xref uid="langword_csharp_Delimited" name="Delimited" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定された値にリーダーの区切り記号を設定し、フィールドの種類を設定<bpt id="p1">&lt;xref uid="langword_csharp_Delimited" name="Delimited" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The existing contents of the <ph id="ph1">`Delimiters`</ph> property are cleared when this method is set.</source>
          <target state="translated">既存の内容、<ph id="ph1">`Delimiters`</ph>このメソッドが設定されている場合、プロパティはクリアされます。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This method provides a way to set delimiters without creating an array.</source>
          <target state="translated">このメソッドは、配列を作成せずに区切り記号を設定する方法を提供します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The following table lists an example of a task involving the <ph id="ph1">`SetDelimiters`</ph> method.</source>
          <target state="translated">次の表に、関連するタスクの例、<ph id="ph1">`SetDelimiters`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Parse a text file|<bpt id="p1">[</bpt>Parsing Text Files with the TextFieldParser Object<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |テキスト ファイルを解析 |<bpt id="p1">[</bpt>TextFieldParser オブジェクトによるテキスト ファイルの解析<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Array of type <bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">型の配列<bpt id="p1">&lt;xref uid="langword_csharp_String" name="String" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A delimiter is zero-length.</source>
          <target state="translated">区切り記号は長さゼロです。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Sets the delimiters for the reader to the specified values.</source>
          <target state="translated">指定された値にリーダーの区切り記号を設定します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The existing contents of the <ph id="ph1">`Delimiters`</ph> property are cleared when this is set.</source>
          <target state="translated">既存の内容、<ph id="ph1">`Delimiters`</ph>プロパティが設定されているときにクリアされます。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This method provides a way to set delimiters without creating an array.</source>
          <target state="translated">このメソッドは、配列を作成せずに区切り記号を設定する方法を提供します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The following table lists example of tasks involving the <ph id="ph1">`SetFieldWidths`</ph> method.</source>
          <target state="translated">次の表に、関連するタスクの例として、<ph id="ph1">`SetFieldWidths`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Parse a text file.|<bpt id="p1">[</bpt>Parsing Text Files with the TextFieldParser Object<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |テキスト ファイルを解析します |。<bpt id="p1">[</bpt>TextFieldParser オブジェクトによるテキスト ファイルの解析<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Array of <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Array of <bpt id="p1">&lt;xref uid="langword_csharp_Integer" name="Integer" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Indicates whether the file to be parsed is delimited or fixed-width.</source>
          <target state="translated">解析するファイルを区切るかどうか、または固定幅を示します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The default value of this property is delimited.</source>
          <target state="translated">このプロパティの既定値は区切られます。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`TextFieldType`</ph> property.</source>
          <target state="translated">次の表に、関連するタスクの例については、<ph id="ph1">`TextFieldType`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>|To|See|   |--------|---------|   |Read from a delimited text file|<bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a fixed-width text file|<bpt id="p2">[</bpt>How to: Read From Fixed-width Text Files<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>|   |Read from a text file with multiple formats|<bpt id="p3">[</bpt>How to: Read From Text Files with Multiple Formats<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></source>
          <target state="translated">||参照してください |  |--------|---------|  |区切られたテキスト ファイルからの読み取り |<bpt id="p1">[</bpt>する方法: コンマ区切りのテキスト ファイルから読み取られた<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>|  |固定幅テキスト ファイルから読み取る |<bpt id="p2">[</bpt>する方法: 固定幅テキスト ファイルを読み取る<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>|  |複数の形式を持つテキスト ファイルから読み取る |<bpt id="p3">[</bpt>する方法: 複数の形式を持つテキスト ファイルからの読み取り<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">|</ph></target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>A TextFieldType value that indicates whether the file to be parsed is delimited or fixed-width.</source>
          <target state="translated">解析するファイルを区切るかどうか、または固定幅を示す TextFieldType 値。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Indicates whether leading and trailing white space should be trimmed from field values.</source>
          <target state="translated">フィールドの値から先頭および末尾の空白文字をトリムするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The default value for this property is <ph id="ph1">`True`</ph>.</source>
          <target state="translated">このプロパティの既定値は<ph id="ph1">`True`</ph>します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if leading and trailing white space should be trimmed from field values; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_True" name="True" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>先頭および末尾の空白文字をトリムするフィールド値以外の場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_False" name="False" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>