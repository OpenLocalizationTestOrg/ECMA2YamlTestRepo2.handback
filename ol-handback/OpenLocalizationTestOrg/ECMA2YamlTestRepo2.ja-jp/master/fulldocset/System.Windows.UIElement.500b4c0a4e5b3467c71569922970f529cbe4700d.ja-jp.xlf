<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">622666fe3f8113d23c72052accb71885003cda5f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.UIElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b92009817917bca68502b980cda4f11afa3b3f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61e81a5ed112cb763bdff1f73c0fa5ef7a296661</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>UIElement is a base class for WPF core level implementations building on <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> elements and basic presentation characteristics.</source>
          <target state="translated">Ui 要素は、WPF コア レベル実装構築の基本クラス<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>要素および基本表示特性です。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>UIElement provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.</source>
          <target state="translated">Ui 要素は、要素のレイアウト特性、および派生クラス仮想メソッドをオーバーライドできる、表示、要素とその子の動作要素のレイアウトに影響を与える公開の開始点を提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Much of the input and focusing behavior for elements in general is also defined in the UIElement class.</source>
          <target state="translated">多くの入力や要素の動作を個別に一般的には、UIElement クラスも定義されています。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This includes the events for keyboard, mouse and stylus input, and related status properties.</source>
          <target state="translated">これには、キーボード、マウスとスタイラス入力、および関連するステータスのプロパティのイベントが含まれます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</source>
          <target state="translated">ルーティングされたイベントは、これらのイベントの多くは、バブル、両方のルーティングの入力に関連するイベントの多くがあるバージョンだけでなく、イベントのトンネルのバージョン。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These paired events are typically the events of greatest interest to control authors.</source>
          <target state="translated">これらのイベントのペアは、通常、コントロールの作成者に最も関心のあるイベントです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>UIElement also includes <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> that relate to the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> event model, including methods that can raise specified routed events that are sourced from an element instance.</source>
          <target state="translated">Ui 要素も含まれています。<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>以後に、<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>イベント モデルでは、指定させることができるメソッドを含む要素のインスタンスが基づいているイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In terms of architecture, UIElement can be considered roughly equivalent to a window handle in <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> programming, or an Element in <ph id="ph2">[!INCLUDE[TLA#tla_dhtml](~/add/includes/tlasharptla-dhtml-md.md)]</ph> programming.</source>
          <target state="translated">アーキテクチャとしては、ui 要素と見なすのウィンドウ ハンドルとほぼ同等<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>プログラミング、または要素に<ph id="ph2">[!INCLUDE[TLA#tla_dhtml](~/add/includes/tlasharptla-dhtml-md.md)]</ph>プログラミングします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>UIElement is a base element at the WPF core level.</source>
          <target state="translated">Ui 要素は、WPF コア レベルでの基本要素です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A UIElement has the following capabilities that are specifically defined by the UIElement class:      -   Can render as a child element (UIElement derives from &lt;xref:System.Windows.Media.Visual&gt;, a high level graphics class)      -   Contains logic that is used to size and position possible child elements of a UIElement (when interpreted by a layout system)      -   Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)      -   Can raise routed events that travel a route through the logical element tree      -   Supports some aspects of the animation system       &lt;xref:System.Windows.FrameworkElement&gt; is the WPF framework-level implementation class that builds on UIElement, and adds specific interactions with the WPF framework level.</source>
          <target state="translated">UIElement が UIElement クラスによって明示的に定義されている次の機能: の子要素としてレンダリングできます (&lt;xref:System.Windows.Media.Visual&gt;から派生した ui 要素高レベルのグラフィックス クラス) のサイズおよび位置情報 (レイアウト システムによって解釈される) 場合、ui 要素の使用可能な子要素を使用するロジックが含まれています - (ここで入力の送信先にイベントのルーティングの処理を使用してのコントロールを含むユーザー入力に応答できます。、やコマンドのルーティング) の要素の論理ツリー内のルートに移動するルーティング イベントを発生させることができます、アニメーション システムの一部の機能をサポートしている&lt;xref:System.Windows.FrameworkElement&gt;uielement、ビルドされ、WPF フレームワーク レベルの特定の相互作用を追加する WPF フレームワーク レベルの実装クラスです。&lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.Media.Visual&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; adds and defines the following capabilities:      -   Additional framework-specific layout characteristics      -   Support for richer metadata reporting on properties      -   Class-specific implementation of certain input base classes and their attached properties or attached events      -   Style support      -   Further animation support       Another related class is &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;追加し、次の機能を定義します - その他のフレームワーク固有のレイアウト特性のサポート - 豊富なメタデータがレポートのプロパティ - 特定のクラスに固有の実装を基底クラスとその添付プロパティを入力または添付イベントのスタイルのサポート、さらにアニメーションをサポートして別の関連のクラスが&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt; 。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement&gt; class implements many of the same members as does UIElement; the difference between these two classes has to do with their intended place in the overall content model.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement&gt;クラスでは同じメンバーの多くが実装される ui 要素と、これら&amp;2; つのクラス間の違いが、意図したものでは、全体的なコンテンツ モデルに配置する必要があります&lt;/xref:System.Windows.ContentElement&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A UIElement derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.</source>
          <target state="translated">Ui 要素の派生クラスは、通常、比較的固定コンテンツ モデルが、マークアップ内の子要素をどのような要素がありますの制限があることを意味を定義します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There might be capacity for taking less restrictive child content in a UIElement, but that capacity is typically centralized in designated content properties.</source>
          <target state="translated">容量が指定されたコンテンツのプロパティで通常集中管理されているが、UIElement で制限の緩い子コンテンツを作成することの容量がかかることがあります。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.ContentElement&gt; derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.</source>
          <target state="translated">A&lt;xref:System.Windows.ContentElement&gt;派生クラスは通常フロー形式のドキュメントなどのシナリオをサポートするために、コンテンツに関する制限の厳しい&lt;/xref:System.Windows.ContentElement&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Windows.UIElement.Visibility%2A&gt; state affects all input handling by that element.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;&lt;xref:System.Windows.UIElement.Visibility%2A&gt;状態その要素ですべての入力の処理に影響します&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.</source>
          <target state="translated">表示されていない要素がヒット テストに参加していないと、上にマウスが境界要素がある場合でも、入力イベントを受け取りません場合に表示されていた。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creating a new instance that is actually of type &lt;xref:System.Windows.UIElement&gt; is uncommon in application code, because &lt;xref:System.Windows.UIElement&gt; is a base element.</source>
          <target state="translated">型の新しいインスタンスを作成するが、実際&lt;xref:System.Windows.UIElement&gt;アプリケーション コードでは一般的ではありませんので&lt;xref:System.Windows.UIElement&gt;は基本要素です&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>要素の概要を基本<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">現在の要素のハンドラー コレクションにハンドラーを追加する、指定したルーティング イベントのルーティング イベント ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">例外を発生させず、同じイベントのハンドラーは、同じ複数回を追加することができます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">ただし、ハンドラーには、イベントを処理するときに複数回が実際に呼び出されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">そのため、この動作では次の方法で、ハンドラーの実装で考慮するべき副作用がある可能性がありますを検討してください。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">通常、"add"アクセサーの実装を提供するこのメソッドを使用する、<ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph>カスタム ルーティング イベントのイベントのアクセス パターン。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">ルーティング イベントを処理するための識別子です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A reference to the handler implementation.</source>
          <target state="translated">ハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">現在の要素のハンドラー コレクションにハンドラーを追加する、指定したルーティング イベントのルーティング イベント ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specify <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">handledEventsToo</ph><ept id="p1">&lt;/code&gt;</ept> as <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</source>
          <target state="translated">指定<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">handledEventsToo</ph> <ept id="p1">&lt;/code&gt;</ept>として<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>イベント ルート上の別の要素によって処理されるように既にマークされているルーティング イベントのために呼び出される、指定したハンドラーがします。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Processing low-level input events in a practical way is a complex task.</source>
          <target state="translated">複雑なタスクは、実用的な方法で低レベルの入力イベントを処理します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</source>
          <target state="translated">多くのコントロールと、特定のイベントが処理される、マークされた、別のより直観的なイベントに置き換えの動作を実装します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</source>
          <target state="translated">一般に、これを行うための設計上の意図がある場合を処理済みとして、コントロールは、プラットフォームの入力イベントをマークだけです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</source>
          <target state="translated">特定のシナリオでこれらの設計上の意図できない可能性があります、特定の入力イベントの処理が必要です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is for these scenarios that registering handlers with <ph id="ph1">`handledEventsToo`</ph> as <ph id="ph2">`true`</ph> is appropriate.</source>
          <target state="translated">これらのシナリオを登録するハンドラーの<ph id="ph1">`handledEventsToo`</ph>として<ph id="ph2">`true`</ph>が適切です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>But you should not do this routinely.</source>
          <target state="translated">実行しないでこの日常的にします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</source>
          <target state="translated">処理される場合でも、すべてのイベントに応答ハンドラーを呼び出すと、独自のアプリケーション イベントを処理ロジックが複雑になります。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You may see a decrease in performance if the handler logic is substantial.</source>
          <target state="translated">ハンドラーのロジックは大きな場合は、パフォーマンスの低下を参照してください可能性があります。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</source>
          <target state="translated">ここで、検出済みの特定のコントロールは、アプリケーション ロジックで処理するイベントを処理は、開発プロセス中にある場合の処理済みのイベントのハンドラーをアタッチの使用を予約する必要があります。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</source>
          <target state="translated">クラスの処理を特定のイベントとコントロールの組み合わせの動作を回避するためのもう&amp;1; つの方法では、そのイベントのプレビューの代替手段を使用します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, if &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; is marked handled by class handling, you might be able to add handlers for &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt; instead.</source>
          <target state="translated">たとえば場合、&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;処理済みとしてマークは、クラス処理によってことができますのハンドラーを追加する&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;代わりにします&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">例外を発生させず、同じイベントのハンドラーは、同じ複数回を追加することができます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">ただし、ハンドラーには、イベントを処理するときに複数回が実際に呼び出されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">そのため、この動作では次の方法で、ハンドラーの実装で考慮するべき副作用がある可能性がありますを検討してください。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">通常、"add"アクセサーの実装を提供するこのメソッドを使用する、<ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph>カスタム ルーティング イベントのイベントのアクセス パターン。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">ルーティング イベントを処理するための識別子です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A reference to the handler implementation.</source>
          <target state="translated">ハンドラーの実装への参照。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>そのイベント データで処理されるルーティング イベントがマークされている場合でも呼び出されるようにハンドラーを登録するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ことがない既定の条件に、ハンドラーを登録するルーティング イベントは既に設定されて処理される場合に呼び出されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Do not routinely ask to rehandle a routed event.</source>
          <target state="translated">定期的にメッセージを表示しないルーティング イベントを再処理をします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see Remarks.</source>
          <target state="translated">詳細については、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Adds handlers to the specified <bpt id="p1">&lt;xref href="System.Windows.EventRoute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the current <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event handler collection.</source>
          <target state="translated">指定したハンドラーを追加する<bpt id="p1">&lt;xref href="System.Windows.EventRoute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在の<bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>イベント ハンドラーのコレクション。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This method can be used by content host elements (either those that implement &lt;xref:System.Windows.IContentHost&gt; or those that don't) to add handlers for child elements to the &lt;xref:System.Windows.EventRoute&gt;.</source>
          <target state="translated">このメソッドは、コンテンツ ホスト要素で使用できます (いずれかを実装するもの&lt;xref:System.Windows.IContentHost&gt;またはいない場合は) &lt;xref:System.Windows.EventRoute&gt;.&lt;/xref:System.Windows.EventRoute&gt;に子要素のハンドラーを追加する&lt;/xref:System.Windows.IContentHost&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Ordinarily, this is not required for &lt;xref:System.Windows.UIElement&gt;, because handlers are automatically added for all elements found in a completed logical tree.</source>
          <target state="translated">通常、これは必要ありませんの&lt;xref:System.Windows.UIElement&gt;、ハンドラーが完了した論理ツリー内で見つかったすべての要素を自動的に追加します&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, in some cases where &lt;xref:System.Windows.ContentElement&gt; and &lt;xref:System.Windows.UIElement&gt; are mixed in templated trees, intervening elements that came from the template need to be added to a route.</source>
          <target state="translated">ただし、いくつかのケースでは、ここで&lt;xref:System.Windows.ContentElement&gt;と&lt;xref:System.Windows.UIElement&gt;が混在しているルートに追加するテンプレートの必要性から得られた要素の介在するテンプレートのツリー内&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.ContentElement&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Both &lt;xref:System.Windows.ContentElement&gt; and &lt;xref:System.Windows.UIElement&gt; support a version of this method.</source>
          <target state="translated">両方&lt;xref:System.Windows.ContentElement&gt;と&lt;xref:System.Windows.UIElement&gt;このメソッドのバージョンをサポートします&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.ContentElement&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The event route that handlers are added to.</source>
          <target state="translated">イベント ルート ハンドラーに追加されます。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The event data that is used to add the handlers.</source>
          <target state="translated">イベントのデータ ハンドラーを追加するために使用されます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This method uses the &lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt; property of the event data to create the handlers.</source>
          <target state="translated">このメソッドを使用して、&lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;ハンドラーを作成するイベント データのプロパティ&lt;/xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</source>
          <target state="translated">取得またはこの要素をドラッグ アンド ドロップ操作の対象として使用できるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting AllowDrop to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">ドラッグ アンド ドロップ操作が既定では、無効になってし、AllowDrop に設定して意図的に有効にする必要があります<ph id="ph1">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by &lt;xref:System.Windows.UIElement&gt; or any other base element class.</source>
          <target state="translated">この基本的な設定を超えるドラッグ アンド ドロップの動作は完全に特定の実装、&lt;xref:System.Windows.UIElement&gt;またはその他の要素の基本クラス&lt;/xref:System.Windows.UIElement&gt;によって定義されていません。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Certain controls, for example, &lt;xref:System.Windows.Controls.RichTextBox&gt;, do have a default behavior.</source>
          <target state="translated">たとえば、特定のコントロール&lt;xref:System.Windows.Controls.RichTextBox&gt;、既定の動作を持っています&lt;/xref:System.Windows.Controls.RichTextBox&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information on drag and drop, see <bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">ドラッグ アンド ドロップの詳細については、次を参照してください。<bpt id="p1">[</bpt>ドラッグ アンド ドロップの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; overrides the metadata for this dependency property in its implementation.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;実装では、この依存関係プロパティのメタデータをオーバーライドします。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Specifically, &lt;xref:System.Windows.FrameworkElement&gt; designates this property to allow property value inheritance (&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; is <ph id="ph1">`true`</ph> in metadata).</source>
          <target state="translated">具体的には、&lt;xref:System.Windows.FrameworkElement&gt;プロパティ値の継承を有効にするには、このプロパティを指定 (&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;は<ph id="ph1">`true`</ph>メタデータで).&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Property value inheritance in this context means that if there are child elements with no other value for AllowDrop assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.</source>
          <target state="translated">このコンテキストでプロパティ値の継承は、ある値を持たない他のローカル値またはスタイルを使用して割り当てる AllowDrop の子要素がある場合は、し、この値は割り当てられます (ここでものいずれか既定値、またはローカルの値、スタイル)、最も近い親要素の値、親要素から値に割り当てられるすべての以前の未使用の子要素プロパティ システムによってを意味します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id="ph1">`false`</ph>.</source>
          <target state="translated">実際にはつまり、ルート要素でドロップ操作を許可するかどうかを指定することができます、として割り当てられている値は、特にされているすべての子要素に反映されます<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_AllowDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.AllowDropProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_AllowDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.AllowDropProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.AllowDropProperty&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element can be used as the target of a drag-and-drop operation; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素をドラッグ アンド ドロップ操作のターゲットとして使用できる場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.AllowDrop*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.AllowDrop*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.AllowDrop*&gt;。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">この要素で指定した依存関係プロパティをアニメーションを適用します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Any existing animations are stopped and replaced with the new animation.</source>
          <target state="translated">既存のアニメーションが停止され、新しいアニメーションに置き換えられます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">アニメーションのプロパティからを削除するには、そのプロパティの識別子を指定<ph id="ph1">`dp`</ph>指定と<ph id="ph2">`clock`</ph>として<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">これは、アニメーションを切り取ってアニメーションのプロパティがその基本値に設定します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">ただし、最初に関連付けられているアニメーション クロックは停止されません。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">その他のクロックに割り当てられているアニメーションを実行し続けます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The identifier for the property to animate.</source>
          <target state="translated">アニメーション化するプロパティの識別子。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">コントロールして宣言するアニメーション クロック。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</source>
          <target state="translated">この要素で指定した依存関係プロパティをアニメーションを適用、対処方法を指定することはどうプロパティは既に実行中のアニメーション。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">アニメーションのプロパティからを削除するには、そのプロパティの識別子を指定<ph id="ph1">`dp`</ph>指定と<ph id="ph2">`clock`</ph>として<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">これは、アニメーションを切り取ってアニメーションのプロパティがその基本値に設定します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">ただし、最初に関連付けられているアニメーション クロックは停止されません。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">その他のクロックに割り当てられているアニメーションを実行し続けます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The property to animate.</source>
          <target state="translated">アニメーション化するプロパティです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">コントロールして宣言するアニメーション クロック。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>A value of the enumeration.</source>
          <target state="translated">列挙体の値です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.Media.Animation.HandoffBehavior"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which will stop any existing animation and replace with the new one.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.Windows.Media.Animation.HandoffBehavior"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、する既存のアニメーションを停止し、新しいものに置き換えます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is captured to this element.</source>
          <target state="translated">この要素に、少なくとも&amp;1; つのタッチがキャプチャされるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is captured to this element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>タッチを少なくとも&amp;1; つがキャプチャされます。 この要素にそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.AreAnyTouchesCaptured*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.AreAnyTouchesCaptured*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.AreAnyTouchesCaptured*&gt;。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</source>
          <target state="translated">この要素またはそのビジュアル ツリー内のすべての子要素には、少なくとも&amp;1; つのタッチがキャプチャされるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>少なくとも&amp;1; つにタッチがキャプチャをこの要素またはそのビジュアル ツリー内のすべての子要素それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*&gt;。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is pressed over this element.</source>
          <target state="translated">この要素の上には、少なくとも&amp;1; つのタッチが押されたかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is pressed over this element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素上には、少なくとも&amp;1; つのタッチが押された場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</source>
          <target state="translated">この要素またはそのビジュアル ツリー内のすべての子要素の上には、少なくとも&amp;1; つのタッチが押されたかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素またはそのビジュアル ツリー内のすべての子要素の上には、少なくとも&amp;1; つのタッチが押された場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.AreAnyTouchesOver*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.AreAnyTouchesOver*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.AreAnyTouchesOver*&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Positions child elements and determines a size for a <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">子要素を配置しのサイズを決定する<bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Parent elements call this method from their &lt;xref:System.Windows.UIElement.ArrangeCore*&gt; implementation (or a WPF framework-level equivalent) to form a recursive layout update.</source>
          <target state="translated">親要素からこのメソッドを呼び出して、&lt;xref:System.Windows.UIElement.ArrangeCore*&gt;実装 (または WPF フレームワーク レベルの同等) を再帰的なレイアウトの更新を形成します&lt;/xref:System.Windows.UIElement.ArrangeCore*&gt;。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This method constitutes the second pass of a layout update.</source>
          <target state="translated">このメソッドは、レイアウト更新の&amp;2; 番目のパスを構成します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For WPF framework-level element deriving scenarios, behavior for Arrange should not (and cannot, unless you shadow) be changed.</source>
          <target state="translated">WPF フレームワーク レベルの要素が派生シナリオ、配置の動作しないように (およびできません、シャドウする場合を除き) 変更。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Instead, you should override the &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt; implementation in your class.</source>
          <target state="translated">代わりに、 &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;、クラスの実装&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;をオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Your &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt; implementation is called internally by Arrange as part of default WPF framework-level layout operations.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;実装配置によって既定の WPF フレームワーク レベルのレイアウトの操作の一部としては、内部的に呼び出さ&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Your &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; implementation should also call &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt; on each child element, if it has child elements.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;実装を呼び出す必要がありますも&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;子要素がある場合、各子要素です&lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;&lt;/xref:System.Windows.UIElement.ArrangeCore%2A&gt;。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For WPF core-level element deriving scenarios, the behavior for Arrange should not (and cannot, unless you shadow) be changed.</source>
          <target state="translated">WPF コア レベルの要素が派生シナリオ、配置の動作しないように (およびできません、シャドウする場合を除き) 変更。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Instead, you should override &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; in your class.</source>
          <target state="translated">代わりに&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;、クラスで&lt;/xref:System.Windows.UIElement.ArrangeCore%2A&gt;オーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Your &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; implementation is called internally by Arrange as part of default WPF framework-level layout operations.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;実装配置によって既定の WPF フレームワーク レベルのレイアウトの操作の一部としては、内部的に呼び出さ&lt;/xref:System.Windows.UIElement.ArrangeCore%2A&gt;。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the &lt;xref:System.Windows.UIElement&gt; base element class.</source>
          <target state="translated">ただし、この前提としています WPF フレームワーク レベルのレイアウトとは多くの場合、ない場合、&lt;xref:System.Windows.UIElement&gt;要素の基本クラス&lt;/xref:System.Windows.UIElement&gt;から WPF コア レベルにある要素を具体的には派生する場合、レイアウト システムを使用しています。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Your &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; implementation should also call Arrange on each child element, if it has child elements.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;実装も、子要素がある場合、各子要素の配置を呼び出す必要があります&lt;/xref:System.Windows.UIElement.ArrangeCore%2A&gt;。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Note that the WPF core-level scenario implies that you are not using a &lt;xref:System.Windows.FrameworkElement&gt; derived class, because &lt;xref:System.Windows.FrameworkElement&gt; seals &lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;.</source>
          <target state="translated">注 WPF コア レベルのシナリオは、使用しないことを意味する&lt;xref:System.Windows.FrameworkElement&gt;ために、派生クラスに&lt;xref:System.Windows.FrameworkElement&gt;シール&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Computation of WPF framework-level layout positioning in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> consists of a &lt;xref:System.Windows.UIElement.Measure%2A&gt; call and an Arrange call.</source>
          <target state="translated">WPF フレームワーク レベルのレイアウトの配置の計算<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>から成る、&lt;xref:System.Windows.UIElement.Measure%2A&gt;配置呼び出しと呼び出し&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>During the &lt;xref:System.Windows.UIElement.Measure%2A&gt; call, the layout system determines an element's size requirements using a provided &lt;xref:System.Windows.Size&gt; (<ph id="ph1">`availableSize`</ph>) argument.</source>
          <target state="translated">中に、&lt;xref:System.Windows.UIElement.Measure%2A&gt;呼び出し、レイアウト システムが提供されたを使用して要素のサイズ要件を決定する&lt;xref:System.Windows.Size&gt;(<ph id="ph1">`availableSize`</ph>) 引数&lt;/xref:System.Windows.Size&gt;&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>During the Arrange call, the layout system finalizes the size and position of an element's bounding box.</source>
          <target state="translated">配置の呼び出し中には、レイアウト システムは、要素の境界ボックスの位置とサイズを終了します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Layout<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>レイアウト<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`availableSize`</ph> can be any number from zero to infinity.</source>
          <target state="translated"><ph id="ph1">`availableSize`</ph>0 から無限大までの任意の数を指定できます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Elements to be laid out return the minimum &lt;xref:System.Windows.Size&gt; they require through the <ph id="ph1">`availableSize`</ph> parameter.</source>
          <target state="translated">要素をレイアウトするのには、最小値を返す&lt;xref:System.Windows.Size&gt;を必要とする、<ph id="ph1">`availableSize`</ph>パラメーター&lt;/xref:System.Windows.Size&gt; 。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>When a layout is first instantiated, it always receives a &lt;xref:System.Windows.UIElement.Measure%2A&gt; call before Arrange.</source>
          <target state="translated">常に受信レイアウトが最初にインスタンス化されるとき、&lt;xref:System.Windows.UIElement.Measure%2A&gt;配置する前に呼び出します&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>However, after the first layout pass, it may receive an Arrange call without a &lt;xref:System.Windows.UIElement.Measure%2A&gt;; this can happen when a property that affects only Arrange is changed (such as alignment), or when the parent receives an Arrange without a &lt;xref:System.Windows.UIElement.Measure%2A&gt;.</source>
          <target state="translated">ただし、最初のレイアウト パスの後にそのことがあります配置の呼び出しを受信せず、&lt;xref:System.Windows.UIElement.Measure%2A&gt;これは、(などの配置)、配置のみに影響するプロパティが変更されたとき、または親受信&lt;xref:System.Windows.UIElement.Measure%2A&gt;。&lt;/xref:System.Windows.UIElement.Measure%2A&gt;せず、配置に発生することができます。&lt;/xref:System.Windows.UIElement.Measure%2A&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.UIElement.Measure%2A&gt; call will automatically invalidate an Arrange call.</source>
          <target state="translated">A&lt;xref:System.Windows.UIElement.Measure%2A&gt;呼び出しは、配置の呼び出しを自動的に無効にします&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Layout updates generally occur asynchronously (at a time determined by the layout system).</source>
          <target state="translated">レイアウトの更新は、通常、非同期的に (レイアウト システムによって決定時) に発生します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An element might not immediately reflect changes to properties that affect element sizing (such as &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;).</source>
          <target state="translated">要素は要素のサイズ設定に影響を与えるプロパティの変更をすぐに反映されない可能性があります (など&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;).&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Layout updates can be forced by using the &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用してレイアウトの更新を強制することができます、&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;メソッドですただし、この関数を呼び出すことは推奨されていません、通常は必要であり、パフォーマンスの低下が発生することができます。&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In many situations where calling &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; might be appropriate, the layout system will probably already be processing updates.</source>
          <target state="translated">多くの状況で呼び出して、&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;適切な場合があります、レイアウト システムおそらく既に処理する更新プログラム&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.</source>
          <target state="translated">レイアウト システムは、パッケージの一部としてすべての必要な更新プログラムを最適化する方法のレイアウトの変更を処理できます。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The layout system keeps two separate queues of invalid layouts, one for &lt;xref:System.Windows.UIElement.Measure%2A&gt; and one for Arrange.</source>
          <target state="translated">レイアウト システムは無効なレイアウトのいずれかの&amp;2; つの異なるキュー&lt;xref:System.Windows.UIElement.Measure%2A&gt;と配置の&amp;1; つ&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The layout queue is sorted based upon the order of elements in the visual tree.</source>
          <target state="translated">レイアウトのキューは、ビジュアル ツリー内の要素の順序に基づいて並べ替えられます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.</source>
          <target state="translated">ツリーの上位の要素は、親の変更を繰り返すことによって、冗長なレイアウトを回避するために、キューの上部にあるがします。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.</source>
          <target state="translated">重複するエントリは、キューから自動的に削除されが既に有効である要素も、キューから自動的に削除します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>When updating layout, the &lt;xref:System.Windows.UIElement.Measure%2A&gt; queue is emptied first, followed by the Arrange queue.</source>
          <target state="translated">レイアウトを更新するときに、&lt;xref:System.Windows.UIElement.Measure%2A&gt;キューが空に最初に、配置キュー続く&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>An element in the Arrange queue will never be arranged if there is an element in the &lt;xref:System.Windows.UIElement.Measure%2A&gt; queue.</source>
          <target state="translated">内の要素がある場合、配置キュー内の要素を配置しないされます、&lt;xref:System.Windows.UIElement.Measure%2A&gt;キュー&lt;/xref:System.Windows.UIElement.Measure%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The final size that the parent computes for the child element, provided as a <bpt id="p1">&lt;xref href="System.Windows.Rect"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">親として指定された、子要素に対して計算される最終的なサイズ、 <bpt id="p1">&lt;xref href="System.Windows.Rect"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>インスタンス。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Defines the template for WPF core-level arrange layout definition.</source>
          <target state="translated">WPF コア レベルの配置レイアウト定義のテンプレートを定義します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The final area within the parent that element should use to arrange itself and its child elements.</source>
          <target state="translated">その要素の親の末尾の領域自体とその子要素を配置に使用してください。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">この要素で指定したプロパティのアニメーションを開始します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">プロパティをアニメーション化するかどうかをチェックするとしているアニメーションが開始されますと見なされるアニメーションをアニメーション化されていないの開始位置を超える最初のフレームがレンダリングされます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt; for <ph id="ph1">`animation`</ph> is <ph id="ph2">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">場合、&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;の<ph id="ph1">`animation`</ph>は<ph id="ph2">`null`</ph>してから、現在のアニメーションは削除し、プロパティの現在の値が保持されている&lt;/xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">場合全体<ph id="ph1">`animation`</ph>値は<ph id="ph2">`null`</ph>、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">ただし、最初に関連付けられているアニメーション タイムラインは停止されません。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">タイムラインに割り当てられているその他のアニメーションを実行し続けます。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The property to animate, which is specified as a dependency property identifier.</source>
          <target state="translated">依存関係プロパティの識別子として指定する、アニメーション化するプロパティです。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The timeline of the animation to start.</source>
          <target state="translated">開始するアニメーションのタイムラインになります。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</source>
          <target state="translated">新機能を指定するオプションを使用して、この要素で指定したアニメーション化されたプロパティの特定のアニメーションの場合は、プロパティは既に実行中のアニメーションを開始します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">プロパティをアニメーション化するかどうかをチェックするとしているアニメーションが開始されますと見なされるアニメーションをアニメーション化されていないの開始位置を超える最初のフレームがレンダリングされます。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt; for <ph id="ph1">`animation`</ph> is <ph id="ph2">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">場合、&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;の<ph id="ph1">`animation`</ph>は<ph id="ph2">`null`</ph>してから、現在のアニメーションは削除し、プロパティの現在の値が保持されている&lt;/xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">場合全体<ph id="ph1">`animation`</ph>値は<ph id="ph2">`null`</ph>、すべてのアニメーションがプロパティから削除され、プロパティ値がその基本値に戻ります。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">ただし、最初に関連付けられているアニメーション タイムラインは停止されません。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">タイムラインに割り当てられているその他のアニメーションを実行し続けます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The property to animate, which is specified as the dependency property identifier.</source>
          <target state="translated">依存関係プロパティの識別子として指定する、アニメーション化するプロパティです。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The timeline of the animation to be applied.</source>
          <target state="translated">適用されるアニメーションのタイムラインになります。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</source>
          <target state="translated">新しいアニメーションがプロパティの値が既に影響を受けている現在の (実行中) アニメーションとやり取りする方法を指定する列挙体の値です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Gets or sets a bitmap effect that applies directly to the rendered content for this element.</source>
          <target state="translated">取得またはこの要素に描画された内容に直接適用するビットマップ効果を設定します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt; is an abstract type, therefore the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage requires an implemented derived class of &lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;, such as &lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;そのため、抽象型は、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>使用状況の実装の派生クラスを必要と&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;、 &lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;.&lt;/xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;など&lt;/xref:System.Windows.Media.Effects.BitmapEffect&gt;&lt;/xref:System.Windows.Media.Effects.BitmapEffect&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Note that one implemented derived class is a collection type that allows you to specify more than one sequential &lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;, using a nested tag syntax.</source>
          <target state="translated">派生したクラスが実装されている&amp;1; つはシーケンシャルを使用すると、複数のいずれかを指定するコレクション型&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;、入れ子になったタグの構文を使用します&lt;/xref:System.Windows.Media.Effects.BitmapEffect&gt;。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>No existing derived class of &lt;xref:System.Windows.Media.Effects.BitmapEffect&gt; supports a type converter, so the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> syntax that you use for this property is generally property element syntax.</source>
          <target state="translated">既存のクラスの派生できない&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;型コンバーターをサポートしているため、<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>このプロパティを使用する構文は、プロパティ要素構文では、通常、&lt;/xref:System.Windows.Media.Effects.BitmapEffect&gt; 。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_BitmapEffect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.BitmapEffectProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_BitmapEffect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.BitmapEffectProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.BitmapEffectProperty&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The bitmap effect to apply.</source>
          <target state="translated">適用するビットマップ効果。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.</source>
          <target state="translated">取得またはこの要素に描画された内容に直接適用するビットマップ効果用の入力ソースを設定します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_BitmapEffectInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.BitmapEffectInputProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_BitmapEffectInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.BitmapEffectInputProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.BitmapEffectInputProperty&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The source for bitmap effects.</source>
          <target state="translated">ビットマップ効果のソース。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.BitmapEffectInput*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.BitmapEffectInput*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.BitmapEffectInput*&gt;。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.BitmapEffect*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.BitmapEffect*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.BitmapEffect*&gt;。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets or sets a cached representation of the <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定のキャッシュされた表現、 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Set the CacheMode property when you need to increase performance for content that is time consuming to render.</source>
          <target state="translated">表示するために時間がかかるがコンテンツのパフォーマンスを向上させる必要がある場合は、CacheMode プロパティを設定します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Windows.Media.BitmapCache&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.Media.BitmapCache&gt;。&lt;/xref:System.Windows.Media.BitmapCache&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Media.CacheMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that holds a cached representation of the <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Media.CacheMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のキャッシュされた表現を保持する、 <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.CacheMode*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.CacheMode*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.CacheMode*&gt;。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of the mouse to this element.</source>
          <target state="translated">この要素にマウスのキャプチャを強制しようとしています。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">キャプチャするのには、要素を有効にする必要があります。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Check whether &lt;xref:System.Windows.UIElement.IsEnabled%2A&gt; is <ph id="ph1">`true`</ph> before you call CaptureMouse.</source>
          <target state="translated">確認するかどうか&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;は<ph id="ph1">`true`</ph>ことでを呼び出す前にします&lt;/xref:System.Windows.UIElement.IsEnabled%2A&gt;。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>If calling CaptureMouse returns <ph id="ph1">`true`</ph>, then &lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt; is also <ph id="ph2">`true`</ph>.</source>
          <target state="translated">呼び出すことで返されます場合<ph id="ph1">`true`</ph>、し&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;も<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>If calling CaptureMouse returns <ph id="ph1">`true`</ph>, then the &lt;xref:System.Windows.UIElement.GotMouseCapture&gt; and &lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt; events are raised, with &lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt; in the event data reported as the element where the CaptureMouse method is called.</source>
          <target state="translated">呼び出すことで返す場合<ph id="ph1">`true`</ph>、&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;と&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;イベントが発生すると&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt;ことでメソッドが呼び出された場合、要素としてデータを報告するイベントです&lt;/xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;&lt;/xref:System.Windows.UIElement.GotMouseCapture&gt;。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</source>
          <target state="translated">既存のキャプチャと干渉する可能性のキャプチャを強制した場合、特にのマウスでドラッグ アンド ドロップに関連するキャプチャします。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To clear mouse capture from all elements, call &lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt; with the <ph id="ph1">`element`</ph> parameter provided as <ph id="ph2">`null`</ph>.</source>
          <target state="translated">すべての要素からマウスのキャプチャをクリアする呼び出し&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt;で、<ph id="ph1">`element`</ph>として指定されたパラメーター <ph id="ph2">`null`</ph>&lt;/xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the mouse is successfully captured; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マウスが正常にキャプチャされた場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of the stylus to this element.</source>
          <target state="translated">この要素にスタイラスのキャプチャを強制しようとしています。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The default implementation based on the underlying default stylus device always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">既定の実装を常に基になる既定のスタイラス デバイスに基づいて<ph id="ph1">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</source>
          <target state="translated">ただし、入力システムのデバイスの実装を提供する入力デバイスを拡張する場合、異なる結果を返す可能性のある代替のスタイラス デバイスの実装と、システムを作成することはできます。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</source>
          <target state="translated">要素がスタイラスをキャプチャ、ときに、スタイラスが境界外にある場合でも、スタイラス入力を受け取ります。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">スタイラスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Calling this method calls an underlying static &lt;xref:System.Windows.Input.Stylus&gt; method &lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;.</source>
          <target state="translated">基になる静的&lt;xref:System.Windows.Input.Stylus&gt;&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;。&lt;/xref:System.Windows.Input.Stylus.Capture%2A&gt;メソッド&lt;/xref:System.Windows.Input.Stylus&gt;を呼び出すこのメソッドを呼び出す</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The actual capture behavior is implemented by the active stylus device implementation.</source>
          <target state="translated">実際のキャプチャの動作は、アクティブなスタイラス デバイスの実装によって実装されます。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">キャプチャするのには、要素を有効にする必要があります。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Check whether &lt;xref:System.Windows.UIElement.IsEnabled%2A&gt; is <ph id="ph1">`true`</ph> return before you call CaptureStylus.</source>
          <target state="translated">確認するかどうか&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;は<ph id="ph1">`true`</ph>CaptureStylus を呼び出す前に戻ります&lt;/xref:System.Windows.UIElement.IsEnabled%2A&gt;。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If calling CaptureStylus returns <ph id="ph1">`true`</ph>, &lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt; is also <ph id="ph2">`true`</ph>.</source>
          <target state="translated">CaptureStylus 返しますを呼び出している場合は<ph id="ph1">`true`</ph>、&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;も<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stylus was successfully captured; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スタイラスが正常にキャプチャされた場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of a touch to this element.</source>
          <target state="translated">この要素に強制的にタッチをキャプチャしようとしています。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>CaptureTouch will return <ph id="ph1">`false`</ph> if the &lt;xref:System.Windows.Input.TouchDevice&gt; is currently captured to another element.</source>
          <target state="translated">CaptureTouch が返されます<ph id="ph1">`false`</ph>場合、&lt;xref:System.Windows.Input.TouchDevice&gt;別の要素に現在キャプチャされています&lt;/xref:System.Windows.Input.TouchDevice&gt;。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If CaptureTouch returns <ph id="ph1">`true`</ph>, then the &lt;xref:System.Windows.UIElement.GotTouchCapture&gt; event is raised.</source>
          <target state="translated">CaptureTouch を返す場合<ph id="ph1">`true`</ph>、続いて、&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;イベントが発生します&lt;/xref:System.Windows.UIElement.GotTouchCapture&gt;。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>To release capture of a single touch from this element, use the &lt;xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt; method and specify the touch device to release.</source>
          <target state="translated">解放するにはこの要素から&amp;1; つのタッチのキャプチャを使用して、&lt;xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt;メソッドを解放する、タッチ デバイスを指定します&lt;/xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To release all touches from this element, use the &lt;xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt; method.</source>
          <target state="translated">解放するにはこの要素からすべての調整を使用して、&lt;xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt;メソッド&lt;/xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt;。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The device to capture.</source>
          <target state="translated">キャプチャするデバイスです。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified touch is captured to this element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素に指定したタッチがキャプチャされる場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Gets or sets the geometry used to define the outline of the contents of an element.</source>
          <target state="translated">取得または要素の内容の輪郭の定義に使用されるジオメトリを設定します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Elements outside the geometry will be visually clipped in the rendered layout.</source>
          <target state="translated">ジオメトリ外側にある要素は、レンダリングされたレイアウトで視覚的にクリッピングされます。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The geometry does not have to be rectangular.</source>
          <target state="translated">ジオメトリを四角形にする必要はありません。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Clip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ClipProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Clip"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ClipProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.ClipProperty&gt;</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The geometry to be used for clipping area sizing.</source>
          <target state="translated">クリッピング領域のサイズ設定に使用するジオメトリ。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The default is a null <bpt id="p1">&lt;xref href="System.Windows.Media.Geometry"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は null <bpt id="p1">&lt;xref href="System.Windows.Media.Geometry"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.Clip*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.Clip*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.Clip*&gt;。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.</source>
          <target state="translated">取得またはコンテナーの要素のサイズに収まるようにこの要素 (またはこの要素の子要素) のコンテンツをクリップするかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>For child elements, ClipToBounds has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; / &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; or &lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; / &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.</source>
          <target state="translated">子要素、ClipToBounds があるかどうか、親要素の幅と高さはされているによって決まりますによってレイアウト動作にさまざまな影響&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;/&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;または&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;/ &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;.&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt; / &lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; of the parent element are always respected regardless of the value of ClipToBounds and the effective clipping will always clip the content based on these maximums.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;/&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;親の要素が常に守られて ClipToBounds の値に関係なく、効果的な領域はこれらの最大値に基づいて、コンテンツをクリップします常にします。&lt;/xref:System.Windows.FrameworkElement.MaxWidth%2A&gt; 。&lt;/xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The parent's &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; / &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; settings will not clip the content when ClipToBounds is <ph id="ph1">`false`</ph>, but will clip the content if ClipToBounds is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">親の&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;/ &lt;xref:System.Windows.FrameworkElement.Width%2A&gt;ClipToBounds は、ときに、設定に、コンテンツはクリップされません<ph id="ph1">`false`</ph>、ClipToBounds は場合、コンテンツがクリップされますが、 <ph id="ph2">`true`</ph>&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt; &lt;/xref:System.Windows.FrameworkElement.Height%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Note that defaulting to <ph id="ph1">`false`</ph> is the general behavior as implemented in the &lt;xref:System.Windows.UIElement&gt; class.</source>
          <target state="translated">その既定値に注意してください<ph id="ph1">`false`</ph>&lt;xref:System.Windows.UIElement&gt;クラス&lt;/xref:System.Windows.UIElement&gt;に実装されている一般的な動作は、</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>It is possible for any given element that derives from &lt;xref:System.Windows.UIElement&gt; to override the dependency property metadata for this property in that instance to default to <ph id="ph1">`true`</ph> instead.</source>
          <target state="translated">派生した任意の要素のことが&lt;xref:System.Windows.UIElement&gt;このプロパティに既定値には、そのインスタンス内の依存関係プロパティのメタデータをオーバーライドする<ph id="ph1">`true`</ph>代わりにします&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Several existing derived classes override this metadata and/or adjust the dependency property default value.</source>
          <target state="translated">いくつかの既存の派生クラスでは、このメタデータをオーバーライドまたは依存関係プロパティの既定値を調整します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.InkCanvas&gt;, &lt;xref:System.Windows.Controls.InkPresenter&gt;, and &lt;xref:System.Windows.Controls.Primitives.Popup&gt; each override the default value to be <ph id="ph1">`true`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.InkCanvas&gt;、 &lt;xref:System.Windows.Controls.InkPresenter&gt;、および&lt;xref:System.Windows.Controls.Primitives.Popup&gt;既定値をそれぞれオーバーライド<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Controls.Primitives.Popup&gt; &lt;/xref:System.Windows.Controls.InkPresenter&gt;&lt;/xref:System.Windows.Controls.InkCanvas&gt;</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; overrides the metadata for this dependency property.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;この依存関係プロパティのメタデータをオーバーライドします。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Specifically, &lt;xref:System.Windows.FrameworkElement&gt; designates this property to allow property value inheritance (&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; is <ph id="ph1">`true`</ph> in metadata).</source>
          <target state="translated">具体的には、&lt;xref:System.Windows.FrameworkElement&gt;プロパティ値の継承を有効にするには、このプロパティを指定 (&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;は<ph id="ph1">`true`</ph>メタデータで).&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Property value inheritance in this context means that if there are child elements with no other value for ClipToBounds assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.</source>
          <target state="translated">このコンテキストでプロパティ値の継承は、値を持たない他のローカル値またはスタイルを使用して割り当てる ClipToBounds の子要素がある場合は、この値を持つ最も近い親要素の値割り当てられていることを意味 (スタイルは、既定値のいずれか、またはローカル値)、プロパティ システムによって、すべての未使用の子要素に親要素から値が割り当てられる、します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id="ph1">`false`</ph>.</source>
          <target state="translated">実際にはつまり、ルート要素の境界にクリップを許可するかどうかを指定することができます、として割り当てられている値は、特にされているすべての子要素に反映されます<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_ClipToBounds"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ClipToBoundsProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_ClipToBounds"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ClipToBoundsProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.ClipToBoundsProperty&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the content should be clipped; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、コンテンツをクリップする必要があります。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.ClipToBounds*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.ClipToBounds*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.ClipToBounds*&gt;。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Gets a collection of <bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects associated with this element.</source>
          <target state="translated">コレクションを取得<bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素に関連付けられているオブジェクト。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この要素のコマンドの処理を有効にし、コマンド、そのイベントでは、この要素にアタッチされたハンドラー間のリンケージが宣言されます。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Another typical way to populate the CommandBindings collection is to use &lt;xref:System.Windows.Input.CommandManager&gt; methods programmatically.</source>
          <target state="translated">踏み込んで言うとコレクションを設定するもう&amp;1; つの一般的な方法を使用して&lt;xref:System.Windows.Input.CommandManager&gt;メソッド プログラムによって&lt;/xref:System.Windows.Input.CommandManager&gt;。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_CommandBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.CommandBindings&gt;       oneOrMoreCommandBindings     &lt;/object.CommandBindings&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_CommandBindings"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreCommandBindings<ept id="p3">*</ept>    One or more &lt;xref:System.Windows.Input.CommandBinding&gt; elements.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_CommandBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML プロパティ要素の使用<ph id="ph1">```   &lt;object&gt;     &lt;object.CommandBindings&gt;       oneOrMoreCommandBindings     &lt;/object.CommandBindings&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_CommandBindings"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>oneOrMoreCommandBindings<ept id="p3">*</ept>&amp;1; つまたは複数&lt;xref:System.Windows.Input.CommandBinding&gt;要素&lt;/xref:System.Windows.Input.CommandBinding&gt;。      </target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Each of these should have a &lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt; attribute set to a known command, and attributes set for the &lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt; and &lt;xref:System.Windows.Input.CommandBinding.Executed&gt; handler implementations.</source>
          <target state="translated">これらの各が必要、&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;既知のコマンドに属性が設定され、に対して属性が設定、&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;と&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;ハンドラーの実装&lt;/xref:System.Windows.Input.CommandBinding.Executed&gt;&lt;/xref:System.Windows.Input.CommandBinding.CanExecute&gt;&lt;/xref:System.Windows.Input.CommandBinding.Command%2A&gt;。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>For more information see &lt;xref:System.Windows.Input.CommandBinding&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.Input.CommandBinding&gt;。&lt;/xref:System.Windows.Input.CommandBinding&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The collection of all <bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">すべてのコレクション<bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Gets the size that this element computed during the measure pass of the layout process.</source>
          <target state="translated">この要素が測定パス レイアウト処理の中に計算されたサイズを取得します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The value returned by this property will only be a valid measurement if the value of the &lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt; property is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">場合は、このプロパティによって返される値に有効な測定にのみの値、&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;プロパティは<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.UIElement.IsMeasureValid%2A&gt;。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>DesiredSize is typically checked as one of the measurement factors when you implement layout behavior overrides such as &lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;, &lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;, or &lt;xref:System.Windows.UIElement.OnRender%2A&gt; (in the &lt;xref:System.Windows.UIElement.OnRender%2A&gt; case, you might check &lt;xref:System.Windows.UIElement.RenderSize%2A&gt; instead, but this depends on your implementation).</source>
          <target state="translated">レイアウトの動作を実装するときに測定要因の&amp;1; つをオーバーライドなど、DesiredSize がチェック通常&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;、 &lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;、または&lt;xref:System.Windows.UIElement.OnRender%2A&gt;(で、&lt;xref:System.Windows.UIElement.OnRender%2A&gt;大文字と小文字、チェックする可能性があります&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;代わりに、実装によって異なりますが、).&lt;/xref:System.Windows.UIElement.RenderSize%2A&gt; &lt;/xref:System.Windows.UIElement.OnRender%2A&gt; &lt;/xref:System.Windows.UIElement.OnRender%2A&gt; &lt;/xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt; &lt;/xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Depending on the scenario, DesiredSize might be fully respected by your implementation logic, constraints on DesiredSize might be applied, and such constraints might also change other characteristics of either the parent element or child element.</source>
          <target state="translated">シナリオによって実装ロジックによって、DesiredSize を完全に遵守する可能性があります、DesiredSize に対する制約を適用することが、このような制約も変更されていたり親要素または子要素のいずれかの他の特性。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to DesiredSize.</source>
          <target state="translated">たとえば、コントロールをスクロール可能な領域をサポートしています (ただし、スクロール可能な領域を既に有効にする WPF フレームワーク レベル コントロールから派生していないことを選択) は、DesiredSize に利用可能なサイズを比較することもします。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The control could then set an internal state that enabled scrollbars in the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> for that control.</source>
          <target state="translated">コントロールのスクロール バーを有効になっている内部の状態を設定し、でした、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph>を制御するためです。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Or, DesiredSize could potentially also be ignored in certain scenarios.</source>
          <target state="translated">または、DesiredSize が可能性がある可能性がありますも特定のシナリオでは無視されます。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The computed size, which becomes the desired size for the arrange pass.</source>
          <target state="translated">配置パスの目的のサイズになります計算されたサイズ。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">入力システムがこの要素をドラッグ先と、基になるドラッグ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event for this class, so that DragEnter is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;DragEnter が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the DragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">DragEnter イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_DragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.DragEnterEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_DragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.DragEnterEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;.&lt;/xref:System.Windows.UIElement.PreviewDragEnter&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.DragEnterEvent&gt;</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnDragEnter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.DragEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.DragEnter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">入力システムがこの要素をドラッグ元に、基になるドラッグ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event for this class so that DragLeave is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;いくつかが一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the DragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">いくつかのイベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_DragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.DragLeaveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_DragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.DragLeaveEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;.&lt;/xref:System.Windows.DragDrop.PreviewDragLeave&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.DragLeaveEvent&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnDragLeave%2A&gt;。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.DragLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.DragLeave"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">入力システムが潜在的なドロップ ターゲットとしてこの要素で、基になるドラッグ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This event occurs even if the drag originates in the element bounds.</source>
          <target state="translated">このイベントは、要素の境界のドラッグを開始した場合でも発生します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>If the drag starts outside the bounds and then moves inside, this event is also raised, as well as &lt;xref:System.Windows.UIElement.DragEnter&gt; and related preview events.</source>
          <target state="translated">ドラッグ アンドが境界の外側を開始し、このイベントを発生すると、内側、移動だけでなく&lt;xref:System.Windows.UIElement.DragEnter&gt;とプレビュー イベントを関連&lt;/xref:System.Windows.UIElement.DragEnter&gt;。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event for this class so that DragOver is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;ドラッグされたが一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the DragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">ドラッグされたイベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_DragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.DragOverEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_DragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.DragOverEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;.&lt;/xref:System.Windows.DragDrop.PreviewDragOver&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.DragOverEvent&gt;</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnDragOver%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnDragOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.DragOver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.DragOver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event for this class so that Drop is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;添付イベントをドロップ一部であるため、このクラスのクラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the Drop event are attached to the underlying &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">ドロップのイベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_Drop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.DropEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewDrop&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_Drop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.DropEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewDrop&gt;.&lt;/xref:System.Windows.UIElement.PreviewDrop&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.DropEvent&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnDrop%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnDrop%2A&gt;。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.Drop"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.Drop"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Gets or sets the bitmap effect to apply to the <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定を適用するビットマップ効果、 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Use the Effect property to apply a bitmap effect to a &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;ビットマップ効果を適用する効果プロパティを使用してください。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Effect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.EffectProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Effect"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.EffectProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.EffectProperty&gt;</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Windows.Media.Effects.Effect"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the bitmap effect.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Media.Effects.Effect"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を表すビットマップ効果。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.Effect*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.Effect*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.Effect*&gt;。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Attempts to set focus to this element.</source>
          <target state="translated">この要素にフォーカスを設定しようとしています。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>To be focusable, &lt;xref:System.Windows.UIElement.Focusable%2A&gt; and &lt;xref:System.Windows.UIElement.IsEnabled%2A&gt; must both be <ph id="ph1">`true`</ph>.</source>
          <target state="translated">フォーカスを&lt;xref:System.Windows.UIElement.Focusable%2A&gt;と&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;両方必要があります<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.UIElement.IsEnabled%2A&gt;&lt;/xref:System.Windows.UIElement.Focusable%2A&gt;。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">場合でも、要素は、特定のツリー内でフォーカスを設定し、有効なイベント処理が、フォーカスがある、許可しないことによって、プレビューのフォーカス イベントに応答 (複合コントロールなど) ためこのメソッドは<ph id="ph1">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</source>
          <target state="translated">一般にフォーカスが&amp;2; つの異なる概念によって拘束されます: キーボード フォーカスと論理フォーカスが常に一致しません。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> or <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>フォーカス概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>または<bpt id="p2">[</bpt>入力概要<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If calling Focus returns <ph id="ph1">`true`</ph>, &lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt; and &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt; are also <ph id="ph2">`true`</ph>.</source>
          <target state="translated">フォーカスを返しますを呼び出している場合は<ph id="ph1">`true`</ph>、&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;と&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;も<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;&lt;/xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>If the related properties are not already <ph id="ph1">`true`</ph>, when you call  Focus, one or more of the following events are raised in the following order: &lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;, &lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt; (source is the new focus target), &lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;, &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;, &lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;, &lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt; (source is the new focus target).</source>
          <target state="translated">場合は、関連するプロパティは、既に<ph id="ph1">`true`</ph>、フォーカスを呼び出すときに、次の順序で発生するか、次のイベントの&amp;1; つ以上: &lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;、 &lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;(ソースは、新しいフォーカス ターゲット)、 &lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;、 &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;、 &lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;、 &lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;(ソースは、新しいフォーカス ターゲット).&lt;/xref:System.Windows.UIElement.GotKeyboardFocus&gt; &lt;/xref:System.Windows.UIElement.LostKeyboardFocus&gt; &lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt; &lt;/xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt; &lt;/xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt; &lt;/xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>In order for this call to be successful, some other element in the application needed to have focus previously.</source>
          <target state="translated">この呼び出しを成功させるためには、以前にフォーカスがあることをアプリケーションでその他の要素が必要です。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if keyboard focus and logical focus were set to this element; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if only logical focus was set to this element, or if the call to this method did not force the focus to change.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素にキーボード フォーカスと論理フォーカスが設定されている場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>またはこの要素に論理フォーカスが設定されただけの場合、このメソッドを呼び出すが、フォーカスの変更が強制されない場合。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the element can receive focus.</source>
          <target state="translated">取得または要素がフォーカスを受け取るかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Only the focused element receives keyboard input.</source>
          <target state="translated">フォーカスのある要素のみでは、キーボード入力を受け取ります。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Focusable is the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.</source>
          <target state="translated">フォーカスを設定できるは、<ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph>新機能は、実際には、依存関係プロパティのプロパティ アクセサー。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly in controls.</source>
          <target state="translated">この特定の依存関係プロパティでは、見かけ上の「既定」値がコントロールに特に、派生した要素のクラスに異なる設定がよくあります。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>This commonly occurs in one of two ways:      -   The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</source>
          <target state="translated">これは、問題は&amp;2; つの方法のいずれかで発生します。 - 依存関係プロパティが特定の派生クラスで継承されたが、その派生クラスは、依存関係プロパティのメタデータをオーバーライドし、プロパティの既定値を変更します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>-   A style or template is applied to an element, which sets that dependency property value differently.</source>
          <target state="translated">スタイルまたはテンプレートは、その依存関係プロパティの値を異なる方法で設定する要素に適用されます。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>For example, the apparent "default" of Focusable for a &lt;xref:System.Windows.Controls.Button&gt; control will be <ph id="ph1">`true`</ph>, even though &lt;xref:System.Windows.Controls.Button&gt; inherits Focusable as a <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> property directly from &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">たとえば、明らかな「既定」の Focusable の&lt;xref:System.Windows.Controls.Button&gt;コントロールになります<ph id="ph1">`true`</ph>場合でも、&lt;xref:System.Windows.Controls.Button&gt;として Focusable の継承、 <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> &lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;から直接プロパティ&lt;/xref:System.Windows.Controls.Button&gt;&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>This is because the applied metadata value for the Focusable dependency property was overridden within the static constructor of the &lt;xref:System.Windows.Controls.Control&gt; base class, which is situated between &lt;xref:System.Windows.Controls.Button&gt; and &lt;xref:System.Windows.UIElement&gt; in the class hierarchy.</source>
          <target state="translated">これは、フォーカス可能な依存関係プロパティの適用されているメタデータの値がの静的コンス トラクター内でオーバーライドされたため、&lt;xref:System.Windows.Controls.Control&gt;基底クラスで、間に置か&lt;xref:System.Windows.Controls.Button&gt;と&lt;xref:System.Windows.UIElement&gt;クラス階層&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Controls.Button&gt;&lt;/xref:System.Windows.Controls.Control&gt;。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>When inherited by &lt;xref:System.Windows.Controls.Control&gt; or its derived classes, &lt;xref:System.Windows.Controls.Control&gt; redefines the default value of this property to be <ph id="ph1">`true`</ph>.</source>
          <target state="translated">継承&lt;xref:System.Windows.Controls.Control&gt;またはその派生クラスでは、&lt;xref:System.Windows.Controls.Control&gt;にするには、このプロパティの既定値を再定義<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Controls.Control&gt;&lt;/xref:System.Windows.Controls.Control&gt;。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>When inherited by &lt;xref:System.Windows.Controls.Label&gt; (which is a &lt;xref:System.Windows.Controls.Control&gt; derived class), the default value is again redefined to be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">継承された場合&lt;xref:System.Windows.Controls.Label&gt;(これは、&lt;xref:System.Windows.Controls.Control&gt;派生クラス)、既定値がもう一度再定義する<ph id="ph1">`false`</ph>&lt;/xref:System.Windows.Controls.Control&gt;&lt;/xref:System.Windows.Controls.Label&gt;。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Focusable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.FocusableProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Focusable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.FocusableProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.FocusableProperty&gt;</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is focusable; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要素がフォーカスを設定できる場合それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, but see Remarks.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は、「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.Focusable*&gt; property changes.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.Focusable*&gt;プロパティが変更された&lt;/xref:System.Windows.UIElement.Focusable*&gt;。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.Focusable*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.Focusable*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.Focusable*&gt;。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</source>
          <target state="translated">この要素の可能性のあるすべての指定したプロパティの基本プロパティ値が、実行中の値をアニメーション化または停止済みのアニメーションを返します。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>If no animations are attached to the property, then the GetAnimationBaseValue return value is always identical to the &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt; return value.</source>
          <target state="translated">プロパティのアニメーションが添付されていないかどうかは、GetAnimationBaseValue 戻り値は常に、&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;値を返します&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</source>
          <target state="translated">添付されたアニメーションがある場合は、可能なすべてのアニメーションが開始を含む値を派生し、停止の値は無視され、プロパティの値はその他のすべての可能な入力に基づいて決定されます。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>依存関係プロパティの値の優先順位<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The dependency property to check.</source>
          <target state="translated">確認する依存関係プロパティ。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The property value as if no animations are attached to the specified dependency property.</source>
          <target state="translated">プロパティ値の指定した依存関係プロパティにアニメーションが添付されていないかのようです。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Returns an alternative clipping geometry that represents the region that would be clipped if &lt;xref:System.Windows.UIElement.ClipToBounds*&gt; were set to <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">場合、クリッピングされる領域を表す代替クリッピング ジオメトリを返します&lt;xref:System.Windows.UIElement.ClipToBounds*&gt;に設定された<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.UIElement.ClipToBounds*&gt; 。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The default implementation will return a legitimate value, but does not use the <ph id="ph1">`layoutSlotSize`</ph> parameter in its calculations.</source>
          <target state="translated">既定の実装は、正規の値が返されますが、使用しない、<ph id="ph1">`layoutSlotSize`</ph>計算内のパラメーターです。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Instead it uses the value of &lt;xref:System.Windows.UIElement.RenderSize%2A&gt;.</source>
          <target state="translated">代わりに&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;。&lt;/xref:System.Windows.UIElement.RenderSize%2A&gt;の値を使用して</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>This method is substantially overridden by the immediately derived &lt;xref:System.Windows.FrameworkElement&gt; class, and the &lt;xref:System.Windows.FrameworkElement&gt; override produces a more sophisticated behavior for general WPF framework-level elements.</source>
          <target state="translated">このメソッドはオーバーライド大幅にすぐに派生して&lt;xref:System.Windows.FrameworkElement&gt;クラス、および&lt;xref:System.Windows.FrameworkElement&gt;一般的な WPF フレームワーク レベルの要素のより高度な動作が生成される上書き&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>For details, see &lt;xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName&gt;。&lt;/xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The available size provided by the element.</source>
          <target state="translated">要素によって提供される使用可能なサイズです。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The potential clipping geometry.</source>
          <target state="translated">潜在的なクリッピング ジオメトリ。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns an alternative <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.</source>
          <target state="translated">派生クラスでオーバーライドされると、返す代わりに<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>ビジュアル親が存在しない場合、この要素の親です。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The default virtual implementation of this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このメソッドの既定の仮想実装<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkElement&gt; provides a practical implementation.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;実際の実装を提供します。&lt;/xref:System.Windows.FrameworkElement&gt;</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</source>
          <target state="translated">別の親は、できるように、そのイベントは、標準の親のビジュアル ツリーをルーティングの標準的なパターンから逸脱した方法でルーティングまたはプレビューのルーティング方法で下方向に要素が代替の親構造体を作成する場所の場合、イベントのルーティングに使用されます。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>An object, if implementation of a derived class has an alternate parent connection to report.</source>
          <target state="translated">派生クラスの実装がレポートに代替の親接続を持つ場合のオブジェクト。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</source>
          <target state="translated">入力システムがこの要素は、基になるドラッグ アンド ドロップ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The GiveFeedback event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated">GiveFeedback イベントは、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更するドラッグ イベントのソースを使用します。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The visual feedback reinforces that a drag-and-drop operation is in process.</source>
          <target state="translated">視覚的なフィードバックは、ドラッグ アンド ドロップ操作が、プロセスを助けます。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event for this class so that GiveFeedback is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;GiveFeedback が一部になるように、このクラスのイベントを接続されているクラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">GiveFeedback イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.GiveFeedbackEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.GiveFeedbackEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;.&lt;/xref:System.Windows.UIElement.PreviewGiveFeedback&gt; &lt;/xref:System.Windows.GiveFeedbackEventHandler&gt; &lt;/xref:System.Windows.UIElement.GiveFeedbackEvent&gt;</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GiveFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GiveFeedback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets logical focus.</source>
          <target state="translated">この要素が論理フォーカスを取得したときに発生します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">フォーカスがメソッド呼び出しを使用して強制的に意図的には、直前のキーボード フォーカスが別のスコープに存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>In this scenario, keyboard focus remains where it is and the element where a &lt;xref:System.Windows.UIElement.Focus%2A&gt; method is called still gets logical focus.</source>
          <target state="translated">ここでは、要素にキーボード フォーカスが残り、このシナリオで場所、&lt;xref:System.Windows.UIElement.Focus%2A&gt;メソッドが呼び出されたが論理フォーカスを取得します&lt;/xref:System.Windows.UIElement.Focus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>A more precise interpretation of this event is that it is raised when the value of the &lt;xref:System.Windows.UIElement.IsFocused%2A&gt; property of an element in the route is changed from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">このイベントをより正確に解釈というものが発生したときの値、&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;からルート内の要素のプロパティが変更された<ph id="ph1">`false`</ph>に<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.UIElement.IsFocused%2A&gt;。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、フォーカスを受け取る要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that gained focus.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;フォーカスを得られる実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.GotFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|      -   There is no corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.GotFocusEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.RoutedEventHandler&gt;|     イベントはありません対応するトンネリング&lt;/xref:System.Windows.RoutedEventHandler&gt;&lt;/xref:System.Windows.UIElement.GotFocusEvent&gt;。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnGotFocus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">キーボードは、この要素にフォーカスがあるときに発生します。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt; is a similar event that tracks status changes in a property that maintains the focus state for an element; the GotKeyboardFocus event is raised in many of the same circumstances.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;類似するイベントです。 要素のフォーカス状態を保持するプロパティで状態の変更を追跡します。GotKeyboardFocus イベントです。&lt;/xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、フォーカスを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has focus.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;フォーカスのある実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event for this class so that GotKeyboardFocus is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;GotKeyboardFocus が一部になるように、このクラスのイベントを接続されているクラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">GotKeyboardFocus イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.GotKeyboardFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.GotKeyboardFocusEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;.&lt;/xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.UIElement.GotKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotKeyboardFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Occurs when this element captures the mouse.</source>
          <target state="translated">この要素がマウスをキャプチャしたときに発生します。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</source>
          <target state="translated">要素がマウスをキャプチャは、境界外にマウス ポインターがあってもマウス入力を受け取ります。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">マウスでは、ドラッグ アンド ドロップ操作中にのみがキャプチャ通常され、ドラッグ アンド ドロップ操作の削除アクションが発生するまでにキャプチャされたままです。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、キャプチャを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has mouse capture.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;マウスのある実際の要素を決定するデータのキャプチャのイベント&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event for  this class so that GotMouseCapture is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;GotMouseCapture が一部になるように、このクラスのイベントを接続されているクラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GotMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">GotMouseCapture イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.GotMouseCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.GotMouseCaptureEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -、定義済みの対応するトンネリング イベントはありません&lt;/xref:System.Windows.Input.MouseEventHandler&gt;&lt;/xref:System.Windows.UIElement.GotMouseCaptureEvent&gt;。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotMouseCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotMouseCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Occurs when this element captures the stylus.</source>
          <target state="translated">この要素がスタイラスをキャプチャしたときに発生します。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">要素がスタイラスをキャプチャ、ときに、ポインターが境界外にある場合でも、スタイラス入力を受け取ります。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">スタイラスは、通常、ドラッグ アンド ドロップ操作中にのみキャプチャし、ドラッグ アンド ドロップ操作の削除アクションが発生するまでにキャプチャを保持します。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、キャプチャを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has capture.</source>
          <target state="translated">チェック、 &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;、イベント データを実際のキャプチャを持つ要素を決定します&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the attached event for this class so that GotStylusCapture is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">GotStylusCapture が一部になるように、このイベントがこのクラスの添付イベントのエイリアスを作成、クラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GotStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">GotStylusCapture イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.GotStylusCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.GotStylusCaptureEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -、定義済みの対応するトンネリング イベントはありません&lt;/xref:System.Windows.Input.StylusEventHandler&gt;&lt;/xref:System.Windows.UIElement.GotStylusCaptureEvent&gt;。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotStylusCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotStylusCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Occurs when a touch is captured to this element.</source>
          <target state="translated">この要素にタッチがキャプチャされるときに発生します。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.GotTouchCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.GotTouchCaptureEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     -オーバーライド&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;&lt;/xref:System.Windows.Input.TouchEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.GotTouchCaptureEvent&gt;。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotTouchCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this element has any animated properties.</source>
          <target state="translated">この要素がアニメーション化されたプロパティを持つかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>This property returns <ph id="ph1">`true`</ph> either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.</source>
          <target state="translated">このプロパティを返します<ph id="ph1">`true`</ph>(ロック、常に実行されている) のアニメーションの永続的なまたは特定のタイムラインのアニメーションのいずれか。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element has animations attached to any of its properties; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素があるアニメーションのプロパティのいずれかに接続されている場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has focus.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>にフォーカスがあります。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Subclasses can override this property to specify when the element has keyboard focus.</source>
          <target state="translated">サブクラスは、要素にキーボード フォーカスがあるときに指定するには、このプロパティをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>This is useful when your &lt;xref:System.Windows.UIElement&gt; contains elements that can have keyboard focus and you want your element to report that it has focus.</source>
          <target state="translated">これが役ときに、&lt;xref:System.Windows.UIElement&gt;キーボード フォーカスを持つことができる要素を含む要素にフォーカスがあるレポートをして&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has focus; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>フォーカスがある、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Implements <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> to supply base element hit testing behavior (returning <bpt id="p1">&lt;xref href="System.Windows.Media.GeometryHitTestResult"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">実装して<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> base を指定する要素のヒット テスト動作 (返す<bpt id="p1">&lt;xref href="System.Windows.Media.GeometryHitTestResult"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>See the original virtual method &lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt; for information on overriding this method in further derived classes.</source>
          <target state="translated">元の仮想メソッドを参照してください&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt;についてはさらにこのメソッドをオーバーライドする派生クラス&lt;/xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Note that several specific controls (&lt;xref:System.Windows.Controls.TextBlock&gt;, for example) do have distinct implementations, which override this one.</source>
          <target state="translated">なおいくつかの特定のコントロール (&lt;xref:System.Windows.Controls.TextBlock&gt;、たとえば) が個別の実装は、この&amp;1; つをオーバーライドします&lt;/xref:System.Windows.Controls.TextBlock&gt;。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>This method is not intended to be called from your application code.</source>
          <target state="translated">このメソッドは、アプリケーション コードから呼び出すものではありません。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</source>
          <target state="translated">このメソッドは、(にマウス ポインターが要素上など) かどうかは、入力のシステムのさまざまな側面によって公開される内部のヒット テストの動作をサポートします。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Describes the hit test to perform, including the initial hit point.</source>
          <target state="translated">初期ヒット ポイントなどを実行するヒット テストをについて説明します。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Results of the test, including the evaluated geometry.</source>
          <target state="translated">評価されたジオメトリを含むテストの結果。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Implements &lt;xref:System.Windows.Media.Visual.HitTestCore*&gt; to supply base element hit testing behavior (returning <bpt id="p1">&lt;xref href="System.Windows.Media.HitTestResult"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">実装して&lt;xref:System.Windows.Media.Visual.HitTestCore*&gt;base を指定する要素のヒット テスト動作 (返す<bpt id="p1">&lt;xref href="System.Windows.Media.HitTestResult"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>).&lt;/xref:System.Windows.Media.Visual.HitTestCore*&gt;</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>See the original virtual method &lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt; for information on overriding this method in further derived classes.</source>
          <target state="translated">元の仮想メソッドを参照してください&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt;についてはさらにこのメソッドをオーバーライドする派生クラス&lt;/xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Note that several specific controls (&lt;xref:System.Windows.Controls.TextBlock&gt;, for example) do have distinct implementations, which override HitTestCore as defined by &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">いくつかの特定のコントロール (&lt;xref:System.Windows.Controls.TextBlock&gt;、たとえば) &lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;で定義されている HitTestCore をオーバーライドする個別の実装にが&lt;/xref:System.Windows.Controls.TextBlock&gt;</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>This method is not intended to be called from your application code.</source>
          <target state="translated">このメソッドは、アプリケーション コードから呼び出すものではありません。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).</source>
          <target state="translated">このメソッドは、(にマウス ポインターが要素上など) かどうかは、入力のシステムのさまざまな側面によって公開される内部のヒット テストの動作をサポートします。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Describes the hit test to perform, including the initial hit point.</source>
          <target state="translated">初期ヒット ポイントなどを実行するヒット テストをについて説明します。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Results of the test, including the evaluated point.</source>
          <target state="translated">評価されたポイントを含むテストの結果。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Gets the collection of input bindings associated with this element.</source>
          <target state="translated">この要素に関連付けられている入力バインドのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Input bindings support the binding of commands to input devices.</source>
          <target state="translated">入力バインディングは、コマンド入力デバイスへのバインディングをサポートします。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>For example, &lt;xref:System.Windows.Input.MouseBinding&gt; implements input bindings that include properties that are particular to mouse devices.</source>
          <target state="translated">たとえば、&lt;xref:System.Windows.Input.MouseBinding&gt;を実装して入力をマウス デバイスに特定のプロパティを含むバインド&lt;/xref:System.Windows.Input.MouseBinding&gt;。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</source>
          <target state="translated">両方の型に関連するだけでなく、インスタンスで宣言されている入力バインド入力バインドのコレクションが含まれます。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>A related property, &lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;, maintains a collection of command bindings.</source>
          <target state="translated">関連するプロパティ、 &lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;、コマンドのショートカット キーのコレクションを保持します&lt;/xref:System.Windows.UIElement.CommandBindings%2A&gt;。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</source>
          <target state="translated">これらとは異なり、入力バインディングとコマンドの処理 - 既知のコマンドに関連付けられているアクションの下の次のレベルを表しています。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_InputBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.InputBindings&gt;       oneOrMoreInputBindings     &lt;/object.InputBindings&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_InputBindings"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreInputBindings<ept id="p3">*</ept>    One or more &lt;xref:System.Windows.Input.InputBinding&gt; elements (typically the &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt; derived classes).</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_InputBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML プロパティ要素の使用<ph id="ph1">```   &lt;object&gt;     &lt;object.InputBindings&gt;       oneOrMoreInputBindings     &lt;/object.InputBindings&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_InputBindings"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML 値<bpt id="p3">*</bpt>oneOrMoreInputBindings<ept id="p3">*</ept>&amp;1; つまたは複数&lt;xref:System.Windows.Input.InputBinding&gt;要素 (通常、&lt;xref:System.Windows.Input.KeyBinding&gt;または&lt;xref:System.Windows.Input.MouseBinding&gt;派生クラス).&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;      </target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Each of these is expected to have a &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt; and &lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt; attribute set.</source>
          <target state="translated">これらの各が予期、&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;と&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;属性が設定されます&lt;/xref:System.Windows.Input.InputBinding.Gesture%2A&gt;&lt;/xref:System.Windows.Input.InputBinding.Command%2A&gt;。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The collection of input bindings.</source>
          <target state="translated">入力バインドのコレクション。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.</source>
          <target state="translated">現在の要素の原点に対する、指定した座標には、現在の要素内の入力要素を返します。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.IInputElement&gt; is returned as the return type, because that type is a common interface for both &lt;xref:System.Windows.UIElement&gt; and &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.IInputElement&gt;その型は両方&lt;xref:System.Windows.UIElement&gt;と&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.UIElement&gt;の共通のインターフェイスであるため、戻り値の型として返されます&lt;/xref:System.Windows.IInputElement&gt;</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the &lt;xref:System.Windows.IInputElement&gt; interface.</source>
          <target state="translated">戻り値の型を適切にキャストまたはがインターフェイスのインスタンスで定義されている特定のメンバーを使用することができますし、&lt;xref:System.Windows.IInputElement&gt;インターフェイス&lt;/xref:System.Windows.IInputElement&gt;。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>This method typically is not called from your application code.</source>
          <target state="translated">このメソッドは、通常、アプリケーション コードからは呼び出されません。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.</source>
          <target state="translated">このメソッドを呼び出すことは、かなりの低レベルの入力機能が既に存在し、マウス デバイス ロジックを再作成などを再実装する場合に適してはのみです。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.IContentHost&gt; contracts an &lt;xref:System.Windows.IContentHost.InputHitTest%2A&gt; method with the same signature, which some elements choose to implement explicitly.</source>
          <target state="translated">&lt;xref:System.Windows.IContentHost&gt;コントラクト、&lt;xref:System.Windows.IContentHost.InputHitTest%2A&gt;明示的に実装を選択するいくつかの要素が同じシグネチャを持つメソッドです&lt;/xref:System.Windows.IContentHost.InputHitTest%2A&gt;。&lt;/xref:System.Windows.IContentHost&gt;</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The offset coordinates within this element.</source>
          <target state="translated">この要素内のオフセットを調整します。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>The element child that is located at the given position.</source>
          <target state="translated">指定された位置にある子要素です。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Invalidates the arrange state (layout) for the element.</source>
          <target state="translated">要素の配置状態 (レイアウト) を無効にします。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by &lt;xref:System.Windows.UIElement.UpdateLayout*&gt;.</source>
          <target state="translated">無効化、要素が得られます、レイアウト更新&lt;xref:System.Windows.UIElement.UpdateLayout*&gt;。&lt;/xref:System.Windows.UIElement.UpdateLayout*&gt;によって強制されない限り非同期に行われます</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Frequent calls to InvalidateArrange or in particular to &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; have significant performance consequences.</source>
          <target state="translated">頻繁に使用する呼び出し InvalidateArrange になどに特に&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;大幅なパフォーマンスに影響があります&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.</source>
          <target state="translated">したがって、他の後続の呼び出しの状態の正確なレイアウトを絶対に必要ない限り、このメソッドを呼び出す<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>コードにします。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>An advanced scenario where you might call InvalidateArrange is if you are creating a &lt;xref:System.Windows.PropertyChangedCallback&gt; for a dependency property that is not on a &lt;xref:System.Windows.Freezable&gt; or &lt;xref:System.Windows.FrameworkElement&gt; derived class that still influences the arrange pass of layout when it changes.</source>
          <target state="translated">高度なシナリオ InvalidateArrange を呼び出すことができますが、作成するかどうかは、 &lt;xref:System.Windows.PropertyChangedCallback&gt;on ではない依存関係プロパティの&lt;xref:System.Windows.Freezable&gt;または&lt;xref:System.Windows.FrameworkElement&gt;が変更されたときのレイアウトの配置パスに影響を与えるまだクラスを派生します&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.Freezable&gt;&lt;/xref:System.Windows.PropertyChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Invalidates the measurement state (layout) for the element.</source>
          <target state="translated">要素の測定状態 (レイアウト) を無効にします。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Calling this method also calls &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt; internally, there is no need to call InvalidateMeasure and &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt; in succession.</source>
          <target state="translated">また呼び出しでこのメソッドを呼び出す&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;内部的には、代わりに必要はありませんし&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;続けて&lt;/xref:System.Windows.UIElement.InvalidateArrange%2A&gt;&lt;/xref:System.Windows.UIElement.InvalidateArrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>After the invalidation, the element will have its layout updated, which will occur asynchronously, unless &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; is called to force a synchronous layout change.</source>
          <target state="translated">無効化、後に要素がレイアウト更新しない限り、非同期的に行われます&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;同期レイアウト変更を強制すると呼びます&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.</source>
          <target state="translated">WPF フレームワーク レベルのレイアウト システムは、要素のビジュアル ツリー内の変更の処理を行い、レイアウト システムが必要な場合に、このメソッドの該当するショートカットを呼び出して最も一般的なレイアウトの無効化の場合。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.</source>
          <target state="translated">直接操作する、要素ツリーのまたは類似したシナリオを高度なレイアウトを完全な実装を作成する場合にのみ、このメソッドを呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>One such advanced scenario is if you are creating a &lt;xref:System.Windows.PropertyChangedCallback&gt; for a dependency property that is not on a &lt;xref:System.Windows.Freezable&gt; or &lt;xref:System.Windows.FrameworkElement&gt; derived class that still influences the measure pass of layout when it changes.</source>
          <target state="translated">このような高度なシナリオの&amp;1; つは、作成するかどうかは、&lt;xref:System.Windows.PropertyChangedCallback&gt;に含まれていない依存関係プロパティの&lt;xref:System.Windows.Freezable&gt;または&lt;xref:System.Windows.FrameworkElement&gt;派生クラスで、まだが変更されたときのレイアウトの測定パスに影響を与えます&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.Freezable&gt;&lt;/xref:System.Windows.PropertyChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Frequent calls to InvalidateMeasure or in particular to &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; have significant performance consequences.</source>
          <target state="translated">代わりに特定の呼び出しを頻繁に&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;大幅なパフォーマンスに影響があります&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.</source>
          <target state="translated">したがって、他の後続の呼び出しの状態の正確なレイアウトを絶対に必要ない限り、このメソッドを呼び出す<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>コードにします。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Invalidates the rendering of the element, and forces a complete new layout pass.</source>
          <target state="translated">要素のレンダリングを無効にし、完全な新しいレイアウト パスを強制します。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.OnRender*&gt; is called after the layout cycle is completed.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.OnRender*&gt;レイアウト サイクルが完了した後は呼び出されます。&lt;/xref:System.Windows.UIElement.OnRender*&gt;</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>This method calls &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt; internally.</source>
          <target state="translated">このメソッドを呼び出す&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;内部的にします&lt;/xref:System.Windows.UIElement.InvalidateArrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>This method is not generally called from your application code.</source>
          <target state="translated">一般に、このメソッドは、アプリケーション コードからは呼び出されません。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.</source>
          <target state="translated">WPF フレームワーク レベルのレイアウト システムは、要素のビジュアル ツリー内の変更の処理、必要な場合に、このメソッドの該当するショートカットを呼び出すことが既にです。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Calling this method is necessary only for advanced scenarios.</source>
          <target state="translated">このメソッドを呼び出すことは、高度なシナリオでのみ必要があります。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>One such advanced scenario is if you are creating a &lt;xref:System.Windows.PropertyChangedCallback&gt; for a dependency property that is not on a &lt;xref:System.Windows.Freezable&gt; or &lt;xref:System.Windows.FrameworkElement&gt; derived class that still influences the layout when it changes.</source>
          <target state="translated">このような高度なシナリオの&amp;1; つは、作成するかどうかは、 &lt;xref:System.Windows.PropertyChangedCallback&gt;on ではない依存関係プロパティの&lt;xref:System.Windows.Freezable&gt;または&lt;xref:System.Windows.FrameworkElement&gt;を変更するとき、レイアウトに影響を与えるまだクラスを派生します&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.Freezable&gt;&lt;/xref:System.Windows.PropertyChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.</source>
          <target state="translated">この要素のレイアウト内の子要素の位置とサイズの計算が有効かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>You can force arrangement to be invalidated by calling &lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt; on this element (or its parents).</source>
          <target state="translated">呼び出すことによって無効にする方法を強制する&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;この要素 (またはその親) にします&lt;/xref:System.Windows.UIElement.InvalidateArrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>This flags the layout for recomposition at such time as the layout system determines.</source>
          <target state="translated">フラグを設定のレイアウトを再構成するタイミングで、レイアウト システムを決定します。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Alternatively, an immediate call to &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).</source>
          <target state="translated">またはを即時に呼び出す&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;できても、これは、これ以上の無効化が保留になっていないことが確実である場合にのみ実行してありますが、(多数の強制が不必要に更新は、パフォーマンスへの影響を持つ).&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>IsArrangeValid cannot be <ph id="ph1">`true`</ph> unless &lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt; is also <ph id="ph2">`true`</ph> (in the layout process, arrangement cannot be valid without measurement first being valid).</source>
          <target state="translated">IsArrangeValid をすることはできません<ph id="ph1">`true`</ph>しない限り、&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;も<ph id="ph2">`true`</ph>(レイアウト プロセスで配置することはできません有効な最初される有効な測定値なし).&lt;/xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the size and position of layout are valid; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、サイズとレイアウトの位置が無効です。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether this element is enabled in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">取得または設定でこの要素が有効になっているかどうかを示す値、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Note that this property is influenced by class-specific implementations of &lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt; on particular elements, often at runtime.</source>
          <target state="translated">このプロパティがクラスに固有の実装によって影響を受けることに注意してください&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;、特定の要素、実行時に多くの場合&lt;/xref:System.Windows.UIElement.IsEnabledCore%2A&gt;。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Therefore, the default value listed here is sometimes not effective.</source>
          <target state="translated">したがって、ここで示されている既定値がありますいない効果的です。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>For instance, a &lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt; will be IsEnabled <ph id="ph1">`false`</ph> whenever it is determined that there is no need to support a scrollbar.</source>
          <target state="translated">インスタンス、 &lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;IsEnabled なります<ph id="ph1">`false`</ph>スクロール バーをサポートする必要がないと判断されたときにします&lt;/xref:System.Windows.Controls.Primitives.ScrollBar&gt;。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Attempting to set this value will also potentially be overridden by the value returned by &lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;.</source>
          <target state="translated">この値を設定しようとしても可能性があるとオーバーライドされます&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;。&lt;/xref:System.Windows.UIElement.IsEnabledCore%2A&gt;によって返される値</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</source>
          <target state="translated">有効になっていない要素は、ヒット テストやフォーカスに参加していないと、そのため、入力イベントのソースはできません。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsEnabled"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsEnabledProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsEnabled"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsEnabledProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsEnabledProperty&gt;</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is enabled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要素が有効である場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsEnabled*&gt; property on this element changes.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsEnabled*&gt;プロパティをこの要素を変更します&lt;/xref:System.Windows.UIElement.IsEnabled*&gt;。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Gets a value that becomes the return value of &lt;xref:System.Windows.UIElement.IsEnabled*&gt; in derived classes.</source>
          <target state="translated">戻り値になる値を取得&lt;xref:System.Windows.UIElement.IsEnabled*&gt;派生クラス&lt;/xref:System.Windows.UIElement.IsEnabled*&gt;。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is enabled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要素が有効である場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsEnabled*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsEnabled*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsEnabled*&gt;。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether this element has logical focus.</source>
          <target state="translated">この要素に論理フォーカスがあるかどうかを決定する値を取得します。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</source>
          <target state="translated">アプリケーションは、複数のフォーカス区分をなど、メニューの内容と、アプリケーションの残りの部分の間に、論理フォーカスはキーボード フォーカスと異なる可能性があります。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</source>
          <target state="translated">このシナリオでは、アプリケーションの UI の&amp;1; つの要素にキーボード フォーカスが設定できるだけ、ただし、他のフォーカス区分の特定の要素も保持したまま論理フォーカスします。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>For more information on logical focus, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">論理フォーカスの詳細については、次を参照してください。<bpt id="p1">[</bpt>フォーカス概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>You do not set focus by setting this property (it is read-only).</source>
          <target state="translated">(これは読み取り専用)、このプロパティを設定してフォーカスを設定しないとします。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The typical use for this property is to use it as a dependency property for a &lt;xref:System.Windows.Setter&gt; or &lt;xref:System.Windows.EventTrigger&gt;.</source>
          <target state="translated">このプロパティの典型的な使用は、&lt;xref:System.Windows.Setter&gt;または&lt;xref:System.Windows.EventTrigger&gt;。&lt;/xref:System.Windows.EventTrigger&gt;&lt;/xref:System.Windows.Setter&gt;の依存関係プロパティとして使用するには</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>To set focus programmatically, call &lt;xref:System.Windows.UIElement.Focus%2A&gt;.</source>
          <target state="translated">フォーカスをプログラムで設定するには、呼び出す&lt;xref:System.Windows.UIElement.Focus%2A&gt;。&lt;/xref:System.Windows.UIElement.Focus%2A&gt;</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</source>
          <target state="translated">ユーザーの操作によって、またはコントロールの実装は、マウスのキャプチャの動作を含む可能性が、フォーカスを設定もできます。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsFocusedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsFocusedProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsFocusedProperty&gt;</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element has logical focus; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素が論理フォーカスがある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsFocused*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsFocused*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsFocused*&gt;。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</source>
          <target state="translated">取得またはこの要素ができる、表示される内容の一部からヒット テストの結果として可能性のある返されるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</source>
          <target state="translated">このプロパティの有効な値は、ヒット テスト可能な要素の論理ツリー内の相対位置に影響されます。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain <ph id="ph1">`false`</ph>, even if attempting to set that value locally.</source>
          <target state="translated">たとえば、要素の子要素にある要素のないヒット テストの表示、子のプロパティの有効な値は残ります<ph id="ph1">`false`</ph>場合でも、その値をローカルに設定しようとしています。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>For this reason, it is important that you do not set IsHitTestVisible to <ph id="ph1">`false`</ph> on a composited control unless you do not want any input or hit testing on that control.</source>
          <target state="translated">このため、ことが重要 IsHitTestVisible を設定しないでください<ph id="ph1">`false`</ph>複合コントロールで任意の入力を必要またはそのコントロールのヒット テストしない限り、します。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>For more information on hit testing, see <bpt id="p1">[</bpt>Hit Testing in the Visual Layer<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">ヒット テストの詳細については、次を参照してください。<bpt id="p1">[</bpt>ビジュアルの層でのテスト ヒット<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsHitTestVisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsHitTestVisibleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsHitTestVisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsHitTestVisibleProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsHitTestVisibleProperty&gt;</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element could be returned as a hit test result from at least one point; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素は、少なくとも&amp;1; つの点からヒット テストの結果として返される可能性があります場合、それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsHitTestVisible*&gt; dependency property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsHitTestVisible*&gt;この要素に依存関係プロパティの変更&lt;/xref:System.Windows.UIElement.IsHitTestVisible*&gt;。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsHitTestVisible*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsHitTestVisible*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsHitTestVisible*&gt;。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether an input method system, such as an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]</ph>,  is enabled for processing the input to this element.</source>
          <target state="translated">入力方式システムかどうかを示す値を取得など、 <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]</ph>、この要素への入力の処理が有効になっています。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>This property returns the value that is returned by the attached property &lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt; for the currently enabled input methods (keyboard, speech, and other input devices).</source>
          <target state="translated">このプロパティが添付プロパティによって返される値を返します&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt;現在有効な入力メソッドでは (キーボード、音声、およびその他の入力デバイス).&lt;/xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if an input method is active; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>入力方式がアクティブである場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The default value of the underlying attached property is <bpt id="p1">&lt;xref uid="langword_csharp_true;" name="true;" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> however, this will be influenced by the actual state of input methods at runtime.</source>
          <target state="translated">基になる添付プロパティの既定値は<bpt id="p1">&lt;xref uid="langword_csharp_true;" name="true;" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ただし、これが影響を受けること実行時に入力方式の実際の状態。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this element has keyboard focus.</source>
          <target state="translated">この要素にキーボード フォーカスがあるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Changes to the determined value of this property may be accompanied by focus-related events.</source>
          <target state="translated">フォーカスに関連するイベントは、このプロパティの値への変更を伴うことができます。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>IsKeyboardFocused and &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt; are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</source>
          <target state="translated">IsKeyboardFocused と&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;でよく使われるクラスのイベント ハンドラー内の他の入力に関連するイベント、インスタンスの要素にキーボード フォーカスは既にまたはときにマウスを決定するイベントとキーボード イベントが発生する組み合わせてかどうかを判断します&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsKeyboardFocusedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsKeyboardFocusedProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsKeyboardFocusedProperty&gt;</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element has keyboard focus; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素がキーボード フォーカスがある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsKeyboardFocused*&gt; property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsKeyboardFocused*&gt;この要素でプロパティが変更された&lt;/xref:System.Windows.UIElement.IsKeyboardFocused*&gt;。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsKeyboardFocused*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsKeyboardFocused*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsKeyboardFocused*&gt;。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</source>
          <target state="translated">キーボード フォーカスが要素またはそのビジュアル ツリーの子要素内の任意の場所かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Changes to the value of this property typically raise the &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt; event, unless a derived class has overridden &lt;xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt; to suppress the event.</source>
          <target state="translated">このプロパティの値に変更が通常発生させる、&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;イベント、派生クラスがオーバーライドしない限り、&lt;xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt;を抑制する状況イベント&lt;/xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt;&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>You do not set this property directly, but you can set the focus to an element by calling &lt;xref:System.Windows.UIElement.Focus%2A&gt;, or by making a &lt;xref:System.Windows.UIElement.MoveFocus%2A&gt; request.</source>
          <target state="translated">このプロパティを直接設定しないが、要素にフォーカスを設定するには呼び出すことによって&lt;xref:System.Windows.UIElement.Focus%2A&gt;、またはすることにより、&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;要求&lt;/xref:System.Windows.UIElement.MoveFocus%2A&gt;&lt;/xref:System.Windows.UIElement.Focus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Either of these method calls might change this property value.</source>
          <target state="translated">このプロパティの値を変更するこれらのメソッド呼び出しのいずれかの可能性があります。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt; and IsKeyboardFocusWithin are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;IsKeyboardFocusWithin 用いられますクラスのイベント ハンドラー内で他の入力に関連するイベントのインスタンスの要素にキーボード フォーカスは既にまたはときにマウスを決定するイベントとキーボード イベントが発生する組み合わせてかどうかを判断します。&lt;/xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocusWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocusWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty&gt;</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if keyboard focus is on the element or its child elements; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要素またはその子要素にキーボード フォーカスがある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the IsKeyboardFocusWithinChanged property changes on this element.</source>
          <target state="translated">この要素の IsKeyboardFocusWithinChanged プロパティの値が変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithin*&gt;。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether manipulation events are enabled on this <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この操作のイベントを有効にするかどうかを示す値を取得または<bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Set this property to true if you want the &lt;xref:System.Windows.UIElement&gt; to receive the &lt;xref:System.Windows.UIElement.ManipulationStarting&gt;, &lt;xref:System.Windows.UIElement.ManipulationStarted&gt;, &lt;xref:System.Windows.UIElement.ManipulationDelta&gt;, &lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;, &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;, and &lt;xref:System.Windows.UIElement.ManipulationCompleted&gt; events.</source>
          <target state="translated">このプロパティは、する場合は true に設定、&lt;xref:System.Windows.UIElement&gt;を受信する、 &lt;xref:System.Windows.UIElement.ManipulationStarting&gt;、 &lt;xref:System.Windows.UIElement.ManipulationStarted&gt;、 &lt;xref:System.Windows.UIElement.ManipulationDelta&gt;、 &lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;、 &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;、および&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationCompleted&gt;&lt;/xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;&lt;/xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;&lt;/xref:System.Windows.UIElement.ManipulationDelta&gt;&lt;/xref:System.Windows.UIElement.ManipulationStarted&gt;&lt;/xref:System.Windows.UIElement.ManipulationStarting&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作の詳細については、次を参照してください。、<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作に応答するアプリケーションの例は、次を参照してください。<bpt id="p1">[</bpt>チュートリアル: 初めて、タッチ アプリケーションの作成<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if manipulation events are enabled on this <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この操作のイベントが有効になっている場合<bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsManipulationEnabled*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsManipulationEnabled*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsManipulationEnabled*&gt;。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the current size returned by layout measure is valid.</source>
          <target state="translated">レイアウト メジャーによって返される現在のサイズが有効かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>You can force measurement and arrangement to be invalidated by calling &lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt; on this element (or any parent element up the visual tree).</source>
          <target state="translated">測定と配置を呼び出すことによって無効化を強制する&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;この要素 (またはビジュアル ツリーの親要素).&lt;/xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.</source>
          <target state="translated">これにより、レイアウト再構成されるように、非同期的にレイアウト システムによって決定時に発生します。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Alternatively, you could make an immediate call to &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;.</source>
          <target state="translated">代わりに、行うことができる&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;。&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;への直接呼び出し</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>However, you should only call &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).</source>
          <target state="translated">だけに呼び出す必要がありますただし、する&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;かどうかそれ以上の無効化が保留になっていないことが可能性があります (強制不必要に更新プログラムの数が多いはパフォーマンスの結果になります).&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>If IsMeasureValid is <ph id="ph1">`false`</ph>, &lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt; must also be <ph id="ph2">`false`</ph> (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).</source>
          <target state="translated">IsMeasureValid 場合<ph id="ph1">`false`</ph>、&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;必要もあります<ph id="ph2">`false`</ph>(レイアウト処理の実施、ロジックで配置することはできません有効な最初される有効な測定値なし).&lt;/xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the measure pass of layout returned a valid and current value; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>測定パス レイアウト場合、有効なと現在の値です。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the mouse is captured to this element.</source>
          <target state="translated">この要素にマウスがキャプチャされるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Mouse capture state is related to in-process drag-and-drop operations.</source>
          <target state="translated">マウスのキャプチャ状態は、インプロセスのドラッグ アンド ドロップ操作に関連付けられます。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsMouseCapturedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsMouseCapturedProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsMouseCapturedProperty&gt;</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element has mouse capture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要素がマウス キャプチャがある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsMouseCaptured*&gt; property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsMouseCaptured*&gt;この要素でプロパティが変更された&lt;/xref:System.Windows.UIElement.IsMouseCaptured*&gt;。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsMouseCaptured*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsMouseCaptured*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsMouseCaptured*&gt;。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</source>
          <target state="translated">この要素またはそのビジュアル ツリー内の子要素にマウスのキャプチャを保持するかどうかを決定する値を取得します。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsMouseCaptureWithinProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsMouseCaptureWithinProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsMouseCaptureWithinProperty&gt;</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element or a contained element has mouse capture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素または格納されている要素がマウス キャプチャを持つ場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseCaptureWithinProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> changes on this element.</source>
          <target state="translated">発生したときの値、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseCaptureWithinProperty"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この要素に変更します。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsMouseCaptureWithin*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsMouseCaptureWithin*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsMouseCaptureWithin*&gt;。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">マウス ポインターの位置がヒット テストの結果は、要素の構成を考慮に対応しているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Unlike &lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;, this property is only <ph id="ph1">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.</source>
          <target state="translated">異なり&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;、のみ、このプロパティは<ph id="ph1">`true`</ph>literal 要素上にマウス ポインターが場合などはヒット テストの&lt;/xref:System.Windows.UIElement.IsMouseOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">子要素の上にマウス ポインターが代わりに場合、具体的には要素のより深いテンプレートおよび複合の一部である要素をこのプロパティはなります<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">コントロールは合成する方法がわかっていなければ (たとえば、プロパティを使用するこのカスタム コントロール テンプレートで定義したコントロールの)、このプロパティは、予期しない結果を返す可能性があります。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>For most scenarios where you are not authoring controls, use &lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt; instead.</source>
          <target state="translated">コントロールをいないオーサリングは、ほとんどのシナリオを使用して&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;代わりにします&lt;/xref:System.Windows.UIElement.IsMouseOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>If the mouse is captured by this element, and this property is <ph id="ph1">`true`</ph> at time of capture, this property will continue to return <ph id="ph2">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.</source>
          <target state="translated">この要素にマウスがキャプチャされるかどうかと、このプロパティは、<ph id="ph1">`true`</ph>のキャプチャ時に、このプロパティを返し続けます<ph id="ph2">`true`</ph>までマウスのキャプチャが失われ、その境界上にポインターがありません。</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsMouseDirectlyOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the mouse pointer is over the same element result as a hit test; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マウス ポインターがヒット テストと同じ要素結果の上にある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsMouseDirectlyOver*&gt; property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver*&gt;この要素でプロパティが変更された&lt;/xref:System.Windows.UIElement.IsMouseDirectlyOver*&gt;。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsMouseDirectlyOver*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsMouseDirectlyOver*&gt;。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</source>
          <target state="translated">マウス ポインターがこの要素 (ビジュアル ツリー内の子要素を含む) 上にあるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</source>
          <target state="translated">通常、(ビジュアル ツリーを)、コントロール内のさまざまな要素はすべて報告コンテナー コントロールのマウスの状態になるようコントロールは複合コントロール。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>For example, a &lt;xref:System.Windows.Controls.ListBox&gt; style control will report IsMouseOver as <ph id="ph1">`true`</ph> if the mouse is anywhere over its geometry, including any &lt;xref:System.Windows.Controls.ListBoxItem&gt;.</source>
          <target state="translated">たとえば、&lt;xref:System.Windows.Controls.ListBox&gt;スタイルのコントロールとして IsMouseOver が報告されます<ph id="ph1">`true`</ph>の geometry 上にマウスが任意の場所も含める場合は、 &lt;xref:System.Windows.Controls.ListBoxItem&gt;.&lt;/xref:System.Windows.Controls.ListBoxItem&gt; &lt;/xref:System.Windows.Controls.ListBox&gt;</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</source>
          <target state="translated">類似しています"IsMouseOverChanged"イベントが存在しないいくつかの類似イベントを行います。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>For example, you can handle &lt;xref:System.Windows.UIElement.MouseEnter&gt;, &lt;xref:System.Windows.UIElement.MouseMove&gt;, and &lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;.</source>
          <target state="translated">たとえば、処理&lt;xref:System.Windows.UIElement.MouseEnter&gt;、 &lt;xref:System.Windows.UIElement.MouseMove&gt;、 &lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;&lt;/xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt; &lt;/xref:System.Windows.UIElement.MouseMove&gt; &lt;/xref:System.Windows.UIElement.MouseEnter&gt; 。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>If this element captures the mouse, this property remains <ph id="ph1">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.</source>
          <target state="translated">この要素がマウスをキャプチャする場合に、このプロパティが残ります<ph id="ph1">`true`</ph>マウスのキャプチャが失われ、マウス ポインターが要素の境界を離れるまでです。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</source>
          <target state="translated">一部のコントロールは、意図的がマウスに直接関係しない特定の操作上にマウス ポインターをキャプチャします。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>This can lead to IsMouseOver being <ph id="ph1">`true`</ph> even though the mouse has not apparently moved.</source>
          <target state="translated">IsMouseOver になるようにつながります<ph id="ph1">`true`</ph>場合でも、マウスが移動明らかです。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsMouseOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsMouseOverProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsMouseOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if mouse pointer is over the element or its child elements; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マウス ポインターが要素またはその子要素の上にある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsMouseOver*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsMouseOver*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsMouseOver*&gt;。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the stylus is captured by this element.</source>
          <target state="translated">この要素によってスタイラスがキャプチャされるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsStylusCapturedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsStylusCapturedProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsStylusCapturedProperty&gt;</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element has stylus capture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要素がスタイラス キャプチャを持つ場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsStylusCaptured*&gt; property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsStylusCaptured*&gt;この要素でプロパティが変更された&lt;/xref:System.Windows.UIElement.IsStylusCaptured*&gt;。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsStylusCaptured*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsStylusCaptured*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsStylusCaptured*&gt;。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</source>
          <target state="translated">スタイラスをキャプチャするかどうかを決定する値の保持がこの要素または要素の境界とそのビジュアル ツリー内の要素を取得します。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Touch Input Support in Windows Vista<ept id="p1">](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Windows Vista でタッチ入力サポート<ept id="p1">](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept>と<bpt id="p2">[</bpt>入力概要<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsStylusCaptureWithinProperty&gt;</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element or a contained element has stylus capture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素または格納されている要素がスタイラス キャプチャを持つ場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsStylusCaptureWithin*&gt; property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin*&gt;この要素でプロパティが変更された&lt;/xref:System.Windows.UIElement.IsStylusCaptureWithin*&gt;。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>This is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">これは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsStylusCaptureWithin*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsStylusCaptureWithin*&gt;。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">スタイラスの位置がヒット テストの結果は、要素の構成を考慮に対応しているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Unlike &lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;, this property is only <ph id="ph1">`true`</ph> if the stylus is over the element.</source>
          <target state="translated">異なり&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;、のみ、このプロパティは<ph id="ph1">`true`</ph>要素の上にスタイラスがある場合&lt;/xref:System.Windows.UIElement.IsStylusOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">スタイラスが代わりに子要素上、または要素は要素のより深い複合 (ビジュアル ツリー) の一部である場合、このプロパティはなって<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">コントロールは合成する方法がわかっていなければ (たとえば、プロパティを使用するこのカスタム コントロール テンプレートで定義したコントロールの)、このプロパティは、予期しない結果を返す可能性があります。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>For most scenarios where you are not authoring controls, use &lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt; instead.</source>
          <target state="translated">コントロールをいないオーサリングは、ほとんどのシナリオを使用して&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;代わりにします&lt;/xref:System.Windows.UIElement.IsStylusOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>If this element has stylus capture and this property is <ph id="ph1">`true`</ph> at the time of capture, this property remains <ph id="ph2">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.</source>
          <target state="translated">この要素がスタイラス キャプチャを持つプロパティは、この場合<ph id="ph1">`true`</ph>のキャプチャ時に、このプロパティの値<ph id="ph2">`true`</ph>までスタイラスのキャプチャが失われ、その境界上にスタイラスがありません。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsStylusDirectlyOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stylus pointer is over the same element result as a hit test; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スタイラス ポインターがヒット テストと同じ要素結果の上にある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsStylusDirectlyOver*&gt; property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver*&gt;この要素でプロパティが変更された&lt;/xref:System.Windows.UIElement.IsStylusDirectlyOver*&gt;。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsStylusDirectlyOver*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsStylusDirectlyOver*&gt;。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</source>
          <target state="translated">スタイラスのカーソルがこの要素 (子ビジュアル要素を含む) 上にあるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>If this element has stylus capture, this property will continue to return <ph id="ph1">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.</source>
          <target state="translated">この要素にスタイラスのキャプチャがある場合は、このプロパティは返す引き続き<ph id="ph1">`true`</ph>スタイラスのキャプチャが失われ、ポインターがその範囲外になるまでです。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsStylusOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsStylusOverProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsStylusOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if stylus cursor is over the element or its child elements; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>スタイラスのカーソルが要素またはその子要素の上にある場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsStylusOver*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsStylusOver*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsStylusOver*&gt;。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this element is visible in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">この要素をで表示するかどうかを示す値を取得、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Determination of the IsVisible value takes all factors of layout into account.</source>
          <target state="translated">IsVisible 値の決定は、レイアウトのすべての要因は考慮します。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>In contrast, &lt;xref:System.Windows.UIElement.Visibility%2A&gt;, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</source>
          <target state="translated">これに対し、 &lt;xref:System.Windows.UIElement.Visibility%2A&gt;、プログラムによって、要素を表示または非表示の目的は、これは、設定可能なプロパティのみを示します&lt;/xref:System.Windows.UIElement.Visibility%2A&gt;。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Elements where IsVisible is <ph id="ph1">`false`</ph> do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</source>
          <target state="translated">要素の IsVisible は<ph id="ph1">`false`</ph>いない入力イベント (またはコマンド) に参加での操作を行っていないか、メジャーに影響を与えるまたは配置レイアウトのパス、フォーカスを設定していない、タブの順序ではありませんおよびヒット テストで報告されません。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>In contrast, elements where &lt;xref:System.Windows.UIElement.IsEnabled%2A&gt; is <ph id="ph1">`false`</ph> will still participate in events and commands, and hit testing, but are also not focusable.</source>
          <target state="translated">要素とは異なり、ここで&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;は<ph id="ph1">`false`</ph>イベントおよびコマンド、およびヒット テストには参加してこれにフォーカスを設定します&lt;/xref:System.Windows.UIElement.IsEnabled%2A&gt;。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsVisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.IsVisibleProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsVisible"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.IsVisibleProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.IsVisibleProperty&gt;</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is visible; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要素を表示する場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.UIElement.IsVisible*&gt; property changes on this element.</source>
          <target state="translated">発生したときの値、&lt;xref:System.Windows.UIElement.IsVisible*&gt;この要素でプロパティが変更された&lt;/xref:System.Windows.UIElement.IsVisible*&gt;。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the &lt;xref:System.Windows.UIElement.IsVisible%2A&gt; property.</source>
          <target state="translated">要素はレイアウト システムの値以外の理由でレンダリングされていない場合、このイベントは発生しませんが、&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;プロパティ&lt;/xref:System.Windows.UIElement.IsVisible%2A&gt;。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>For example, the element might not have an associated visual.</source>
          <target state="translated">たとえば、要素には必要ビジュアルが関連付けられていない場合があります。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.IsVisible*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.IsVisible*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.IsVisible*&gt;。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">この要素にフォーカスがあるときにキーが押されると発生します。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">キーの処理は、コマンド実行やテキストの合成などの他のプラットフォーム機能と対話します。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The KeyDown event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">KeyDown イベントは使用する低レベルのテキスト入力イベントを特定のコントロールで期待どおりに動作しない可能性があります。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">これは、一部のコントロールがコントロールの複合か、テキストの上位レベルのバージョンを提供するクラスの処理が処理を入力し、関連するイベントです。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event for this class so that KeyDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;KeyDown が一部になるように、このクラスのイベントを接続されているクラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the KeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">KeyDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_KeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.KeyDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_KeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.KeyDownEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;.&lt;/xref:System.Windows.UIElement.PreviewKeyDown&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.UIElement.KeyDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnKeyDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.KeyDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.KeyDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">この要素にフォーカスがあるときにキーが離されると発生します。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event for this class so that  KeyUp is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;KeyUp が一部になるように、このクラスのイベントを接続されているクラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the KeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">KeyUp イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_KeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.KeyUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_KeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.KeyUpEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;.&lt;/xref:System.Windows.UIElement.PreviewKeyUp&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.UIElement.KeyUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnKeyUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.KeyUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.KeyUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Occurs when the layout of the various visual elements associated with the current <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> changes.</source>
          <target state="translated">さまざまな視覚的な要素のレイアウトに現在関連付けられているときに発生<bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変更します。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>A layout update can occur as a result of a property change, a window resize, or an explicit user request.</source>
          <target state="translated">レイアウトの更新は、プロパティの変更、ウィンドウ サイズの変更、または明示的なユーザー要求の結果として発生します。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">このメンバーは、<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>イベントは、ルーティングされたイベントではありません。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses logical focus.</source>
          <target state="translated">この要素が論理フォーカスを失ったときに発生します。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">フォーカスが意図的に外してメソッド呼び出しを使用しているにもかかわらず直前のキーボード フォーカスが別のスコープに存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>In this scenario, keyboard focus remains where it is, and the element where a &lt;xref:System.Windows.UIElement.Focus%2A&gt; method is called still gets logical focus.</source>
          <target state="translated">ここでは、キーボード フォーカスは残りますが、および要素の位置、&lt;xref:System.Windows.UIElement.Focus%2A&gt;メソッドが呼び出されたが論理フォーカスを取得します&lt;/xref:System.Windows.UIElement.Focus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>A more precise interpretation of this event is that it is raised when the value of the &lt;xref:System.Windows.UIElement.IsFocused%2A&gt; property of an element in the route changes from <ph id="ph1">`true`</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">このイベントをより正確に解釈というものが発生したときの値、&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;からルート内の要素のプロパティが変更される<ph id="ph1">`true`</ph>に<ph id="ph2">`false`</ph>&lt;/xref:System.Windows.UIElement.IsFocused%2A&gt;。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that gained focus.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;フォーカスを得られる実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.LostFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|      -   There is no corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.LostFocusEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.RoutedEventHandler&gt;|     イベントはありません対応するトンネリング&lt;/xref:System.Windows.RoutedEventHandler&gt;&lt;/xref:System.Windows.UIElement.LostFocusEvent&gt;。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnLostFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnLostFocus%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnLostFocus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is no longer focused on this element,.</source>
          <target state="translated">キーボードは、この要素にフォーカスが離れたときに発生します。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost focus.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;フォーカスが失われた実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that LostKeyboardFocus is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;LostKeyboardFocus が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the LostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">LostKeyboardFocus イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.LostKeyboardFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.LostKeyboardFocusEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;.&lt;/xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.UIElement.LostKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostKeyboardFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses mouse capture.</source>
          <target state="translated">この要素がマウス キャプチャを失ったときに発生します。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</source>
          <target state="translated">要素がマウスをキャプチャは、境界外にポインターがあってもマウス入力を受け取ります。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>The mouse is typically captured only during drag-and-drop operations.</source>
          <target state="translated">マウスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、キャプチャを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost capture.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;キャプチャを失った実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event for this class, so that LostMouseCapture is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;LostMouseCapture が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the LostMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">LostMouseCapture イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.LostMouseCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.LostMouseCaptureEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -、定義済みの対応するトンネリング イベントはありません&lt;/xref:System.Windows.Input.MouseEventHandler&gt;&lt;/xref:System.Windows.UIElement.LostMouseCaptureEvent&gt;。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostMouseCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostMouseCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses stylus capture.</source>
          <target state="translated">この要素がスタイラス キャプチャを失ったときに発生します。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">要素がスタイラスをキャプチャ、ときに、ポインターが境界外にある場合でも、スタイラス入力を受け取ります。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">スタイラスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost focus.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;フォーカスが失われた実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event for this class, so that LostStylusCapture is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;LostStylusCapture が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the LostStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">LostStylusCapture イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.LostStylusCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.LostStylusCaptureEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -、定義済みの対応するトンネリング イベントはありません&lt;/xref:System.Windows.Input.StylusEventHandler&gt;&lt;/xref:System.Windows.UIElement.LostStylusCaptureEvent&gt;。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostStylusCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostStylusCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses a touch capture.</source>
          <target state="translated">この要素は、タッチのキャプチャを失ったときに発生します。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.LostTouchCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.LostTouchCaptureEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     -オーバーライド&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;&lt;/xref:System.Windows.Input.TouchEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.LostTouchCaptureEvent&gt;。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostTouchCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Occurs when the manipulation encounters a boundary.</source>
          <target state="translated">操作は、境界を検出したときに発生します。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;.|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;.|&lt;/xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent&gt;</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Occurs when a manipulation and inertia on the <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is complete.</source>
          <target state="translated">操作と慣性のときに発生、 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクトが完了しました。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>You can use this event to get information about the manipulation when it completes.</source>
          <target state="translated">このイベントを使用すると、完了時に操作に関する情報を取得します。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>For example, you can use the &lt;xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName&gt; property to determine the total amount the position of the manipulation changed.</source>
          <target state="translated">たとえば、使用することができます、&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName&gt;合計量操作の位置を決定するプロパティを変更します&lt;/xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作の詳細については、次を参照してください。、<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作に応答するアプリケーションの例は、次を参照してください。<bpt id="p1">[</bpt>チュートリアル: 初めて、タッチ アプリケーションの作成<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ManipulationCompleted"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ManipulationCompletedEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;.|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ManipulationCompleted"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ManipulationCompletedEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;.|&lt;/xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.ManipulationCompletedEvent&gt;</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationCompleted"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationCompleted"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Occurs when the input device changes position during a manipulation.</source>
          <target state="translated">入力デバイス操作中の位置が変更されたときに発生します。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>The ManipulationDelta event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.</source>
          <target state="translated">ManipulationDelta イベントは、ときに、ユーザーがドラッグ指が画面上で操作中に、もう一度慣性が発生したときに、複数回を発生します。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>You can use the &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt; property to check whether the event is occurring during inertia.</source>
          <target state="translated">使用することができます、&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt;慣性中に、イベントが発生しているかどうかを確認するプロパティ&lt;/xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt;。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>The element on with ManipulationDelta event occurs is not affected in any way when the event occurs.</source>
          <target state="translated">イベントが発生した ManipulationDelta で上にある要素は、イベントが発生したときに任意の方法に影響はありません。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>You must provide the logic to the element that is to be manipulated.</source>
          <target state="translated">操作される要素にロジックを提供する必要があります。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt; and &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt; properties, which are of type &lt;xref:System.Windows.Input.ManipulationDelta&gt;, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.</source>
          <target state="translated">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;と&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;のプロパティの型は&lt;xref:System.Windows.Input.ManipulationDelta&gt;操作の位置の変更に関するデータを含む、移動、サイズ変更、またはオブジェクトの回転として解釈されます&lt;/xref:System.Windows.Input.ManipulationDelta&gt;&lt;/xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;&lt;/xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>You apply that information to the element that is to be manipulated.</source>
          <target state="translated">操作される要素には、その情報を適用します。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作の詳細については、次を参照してください。、<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作に応答するアプリケーションの例は、次を参照してください。<bpt id="p1">[</bpt>チュートリアル: 初めて、タッチ アプリケーションの作成<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ManipulationDelta"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ManipulationDeltaEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;.|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ManipulationDelta"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ManipulationDeltaEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;.|&lt;/xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.ManipulationDeltaEvent&gt;</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationDelta"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationDelta"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Occurs when the input device loses contact with the <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object during a manipulation and inertia begins.</source>
          <target state="translated">入力デバイスとの接続を失ったときに発生、 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>操作と慣性の中にオブジェクトを開始します。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>The ManipulationInertiaStarting event occurs when the user lifts all of the fingers from the screen during a manipulation.</source>
          <target state="translated">ManipulationInertiaStarting イベントは、ユーザーが操作中のすべての画面から指を離したときに発生します。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>For example, if a user "throws" a &lt;xref:System.Windows.UIElement&gt; across a surface, the user will touch the &lt;xref:System.Windows.UIElement&gt; to begin the action, move the finger across the screen for a short distance, and then release the &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">たとえば、ユーザー「をスロー」&lt;xref:System.Windows.UIElement&gt;サーフェス全体で、ユーザーはタッチ&lt;xref:System.Windows.UIElement&gt;アクションを開始する短い距離では、画面上で指を移動し&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;をリリース&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>When the user releases the element, inertia begins and the ManipulationInertiaStarting event occurs.</source>
          <target state="translated">ユーザーは、要素をリリースするときは、慣性開始し、ManipulationInertiaStarting イベントが発生します。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement&gt; continues to receive &lt;xref:System.Windows.UIElement.ManipulationDelta&gt; events to indicate that inertia is occurring on the element.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement&gt;の受信を継続&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;慣性が要素で発生していることを通知するイベントです&lt;/xref:System.Windows.UIElement.ManipulationDelta&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>You can use this event to specify the behavior of the inertia.</source>
          <target state="translated">このイベントを使用して、慣性の動作を指定することができます。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>For example, you can set the initial velocity that is used when inertia begins.</source>
          <target state="translated">たとえば、慣性が開始されるときに使用される初期速度を設定できます。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.</source>
          <target state="translated">必要な減速を設定するか、目的の配置を設定しても、慣性の量を指定できます。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>You can set these values for each type of manipulation (translation, expansion, or rotation) independently.</source>
          <target state="translated">これらの値 (変換、拡張、または回転) 操作の種類ごとに個別に設定できます。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;。&lt;/xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作の詳細については、次を参照してください。、<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作に応答するアプリケーションの例は、次を参照してください。<bpt id="p1">[</bpt>チュートリアル: 初めて、タッチ アプリケーションの作成<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ManipulationInertiaStarting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ManipulationInertiaStartingEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;.|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ManipulationInertiaStarting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ManipulationInertiaStartingEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;.|&lt;/xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.ManipulationInertiaStartingEvent&gt;</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationInertiaStarting"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationInertiaStarting"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Occurs when an input device begins a manipulation on the <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">入力デバイスの操作を開始するときに発生、 <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>The ManipulationStarted event occurs after the &lt;xref:System.Windows.UIElement.ManipulationStarting&gt; event.</source>
          <target state="translated">ManipulationStarted イベントが発生した後、&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationStarting&gt;。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>You can do the following with the &lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;:      -   Get the element that the manipulation's position is relative to by using the &lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt; property.</source>
          <target state="translated">使用して、次を行うことができます、 &lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;: のある操作の位置に対して相対的なを使用して要素を取得、&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt;プロパティ&lt;/xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt;&lt;/xref:System.Windows.Input.ManipulationStartedEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>-   Get the origin of the manipulation by using the &lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt; property.</source>
          <target state="translated">-を使用して、操作の始点を取得、&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt;プロパティ&lt;/xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>-   Cancel the manipulation by calling the &lt;xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt; method.</source>
          <target state="translated">-を呼び出して、操作を取り消す、&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt;メソッド&lt;/xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt;。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作の詳細については、次を参照してください。、<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作に応答するアプリケーションの例は、次を参照してください。<bpt id="p1">[</bpt>チュートリアル: 初めて、タッチ アプリケーションの作成<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ManipulationStarted"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ManipulationStartedEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;.|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ManipulationStarted"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ManipulationStartedEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;.|&lt;/xref:System.Windows.Input.ManipulationStartedEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.ManipulationStartedEvent&gt;</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarted"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarted"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Occurs when the manipulation processor is first created.</source>
          <target state="translated">操作プロセッサが最初に作成したときに発生します。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>The ManipulationStarting event occurs on an element that has the &lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt; property set to <ph id="ph1">`true`</ph> when the user puts a finger on it.</source>
          <target state="translated">ManipulationStarting イベントを持つ要素で発生する、&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;プロパティに設定<ph id="ph1">`true`</ph>でユーザーが指を配置するときに&lt;/xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>By default, subsequent manipulation events report the position of the manipulation relative to the element that has &lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt; set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">既定では、後続の操作イベントを持つ要素を基準とした操作の位置をレポート&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;'éý' <ph id="ph1">`true`</ph>&lt;/xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>You can specify that the position should be relative to another element by setting the &lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt; property.</source>
          <target state="translated">設定して別の要素に相対的な位置をする必要がありますを指定することができます、&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;プロパティ&lt;/xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>For example, you can make the manipulation relative to the parent of the element.</source>
          <target state="translated">たとえば、要素の親を基準とした操作を行うことができます。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>You can also do the following in an event handler for ManipulationStarting:      -   Specify whether the user needs more than one finger to perform the manipulations by setting the &lt;xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">ManipulationStarting のイベント ハンドラーでは、次を行うことができます:-ユーザーに設定して、操作を実行する&amp;1; つ以上の本の指が必要かどうかを指定して、&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName&gt;プロパティ&lt;/xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>-   Specify which types of manipulation are enabled by setting the &lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName&gt; property to a &lt;xref:System.Windows.Input.ManipulationModes&gt; enumeration.</source>
          <target state="translated">指定を設定して操作の種類が有効になっている、&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName&gt;プロパティを&lt;xref:System.Windows.Input.ManipulationModes&gt;列挙体です&lt;/xref:System.Windows.Input.ManipulationModes&gt;&lt;/xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>-   Specify the center of a single-finger rotation by setting the &lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">-1 本指の回転の中心を設定して指定、&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName&gt;プロパティ&lt;/xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>-   Cancel the manipulation by calling the &lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">-を呼び出して、操作を取り消す、&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>For more information about manipulations, see the <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作の詳細については、次を参照してください。、<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>For an example of an application that responds to manipulations, see <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作に応答するアプリケーションの例は、次を参照してください。<bpt id="p1">[</bpt>チュートリアル: 初めて、タッチ アプリケーションの作成<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_ManipulationStarting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.ManipulationStartingEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationStartingEventArgs&gt;.|</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_ManipulationStarting"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.ManipulationStartingEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.ManipulationStartingEventArgs&gt;.|&lt;/xref:System.Windows.Input.ManipulationStartingEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.ManipulationStartingEvent&gt;</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarting"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarting"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Updates the &lt;xref:System.Windows.UIElement.DesiredSize<bpt id="p1">*</bpt>&gt; of a <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>. Parent elements call this method from their own &lt;xref:System.Windows.UIElement.MeasureCore<ept id="p1">*</ept>&gt; implementations to form a recursive layout update.</source>
          <target state="translated">Updates the &lt;&gt;<bpt id="p1">*</bpt>&gt; of a <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.親要素では、このメソッドを呼び出す独自から&lt;&gt; <ept id="p1">*</ept>&gt; レイアウトを再帰的に実装を更新します。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>Calling this method constitutes the first pass (the "Measure" pass) of a layout update.</source>
          <target state="translated">このメソッドを呼び出すと、レイアウト更新の最初のパス (「メジャー」パス) が構成されます。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Computation of layout positioning in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> is comprised of a Measure call and an &lt;xref:System.Windows.UIElement.Arrange%2A&gt; call.</source>
          <target state="translated">レイアウトの配置で計算<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>で構成されていますメジャー呼び出しのおよび&lt;xref:System.Windows.UIElement.Arrange%2A&gt;呼び出します&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>During the Measure call, an element determines its size requirements by using an <ph id="ph1">`availableSize`</ph> input.</source>
          <target state="translated">メジャーの呼び出し中に、要素を使用してそのサイズ要件を決定する<ph id="ph1">`availableSize`</ph>入力します。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>During the &lt;xref:System.Windows.UIElement.Arrange%2A&gt; call, the element size is finalized.</source>
          <target state="translated">中に、&lt;xref:System.Windows.UIElement.Arrange%2A&gt;呼び出し、要素のサイズが終了します&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`availableSize`</ph> can be any number from zero to infinite.</source>
          <target state="translated"><ph id="ph1">`availableSize`</ph>無制限にゼロから任意の数を指定できます。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>Elements participating in layout should return the minimum &lt;xref:System.Windows.Size&gt; they require for a given <ph id="ph1">`availableSize`</ph>.</source>
          <target state="translated">レイアウトに参加している要素は、最小値を返す必要があります&lt;xref:System.Windows.Size&gt;の必要な指定された<ph id="ph1">`availableSize`</ph>&lt;/xref:System.Windows.Size&gt;。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>When a layout is first instantiated, it always receives a Measure call before &lt;xref:System.Windows.UIElement.Arrange%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;。&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;の前にメジャー呼び出しを常に受信レイアウトが最初にインスタンス化されるとき</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>However, after the first layout pass, it may receive an &lt;xref:System.Windows.UIElement.Arrange%2A&gt; call without a Measure; this can happen when a property that affects only &lt;xref:System.Windows.UIElement.Arrange%2A&gt; is changed (such as alignment), or when the parent receives an &lt;xref:System.Windows.UIElement.Arrange%2A&gt; without a Measure.</source>
          <target state="translated">ただし、最初のレイアウト パスに受け取ることがあります、&lt;xref:System.Windows.UIElement.Arrange%2A&gt;メジャーせずに呼び出す以外の場合のみに影響を与えるプロパティ&lt;xref:System.Windows.UIElement.Arrange%2A&gt;(配置) などが変更された親を受け取ったとき、または、&lt;xref:System.Windows.UIElement.Arrange%2A&gt;メジャーなし&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>A Measure call will automatically invalidate an &lt;xref:System.Windows.UIElement.Arrange%2A&gt; call.</source>
          <target state="translated">メジャーの呼び出しが自動的に無効になり、&lt;xref:System.Windows.UIElement.Arrange%2A&gt;呼び出します&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.</source>
          <target state="translated">レイアウトの更新は、あらゆるレイアウトの変更のメイン スレッドが待機していないように、非同期的に発生します。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; property, for example).</source>
          <target state="translated">分離コードのプロパティの値のチェックを使用して要素のクエリを実行しても、そのサイズ変更、またはレイアウトの特性を持つ対話プロパティへの変更がすぐに反映可能性がありますされない (、&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;プロパティなど).&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Layout updates can be forced by using the &lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt; method.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; を使用してレイアウトの更新を強制することができます、&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;メソッド&lt;/xref:System.Windows.UIElement.UpdateLayout%2A&gt;。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>However, calling this method is usually unnecessary and can cause poor performance.</source>
          <target state="translated">ただし、このメソッドを呼び出すことは通常必要はありません、パフォーマンスの低下が発生することができます。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>The layout system keeps two separate queues of invalid layouts, one for Measure and one for &lt;xref:System.Windows.UIElement.Arrange%2A&gt;.</source>
          <target state="translated">レイアウト システムはメジャー用と&lt;xref:System.Windows.UIElement.Arrange%2A&gt;。&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;の無効なレイアウトの&amp;2; つの異なるキュー</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.</source>
          <target state="translated">レイアウトのキューはレイアウトを実行する要素のビジュアル ツリー内の要素の順序に基づいて並べ替えられますツリーの上位の要素は、親の変更を繰り返すことによって、冗長なレイアウトを避けるために、キューの上部にあるがします。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.</source>
          <target state="translated">重複するエントリは、キューから自動的に削除され、レイアウト検証はすでに要素も、キューから自動的に削除します。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>When updating layout, the Measure queue is emptied first, followed by the &lt;xref:System.Windows.UIElement.Arrange%2A&gt; queue.</source>
          <target state="translated">レイアウトを更新するときに、メジャー キューが空に最初に、続けて、&lt;xref:System.Windows.UIElement.Arrange%2A&gt;キュー&lt;/xref:System.Windows.UIElement.Arrange%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>An element in the &lt;xref:System.Windows.UIElement.Arrange%2A&gt; queue will never be arranged if there is an element in the Measure queue.</source>
          <target state="translated">内の要素、&lt;xref:System.Windows.UIElement.Arrange%2A&gt;メジャー キュー内の要素がある場合、キューは配置されません&lt;/xref:System.Windows.UIElement.Arrange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>The available space that a parent element can allocate a child element.</source>
          <target state="translated">使用可能な領域は親要素が子要素を割り当てることができます。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</source>
          <target state="translated">子要素は、新機能が利用できるよりも大きな空間を要求できます。スクロール可能な場合は、現在の要素のコンテンツ モデルでは、指定されたサイズを対応可能性があります。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.</source>
          <target state="translated">派生クラスでオーバーライドされるの任意の子要素の内容のサイズも考慮して、この要素を適切にサイズ調整測定ロジックを提供します。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>It is more common to derive an element from &lt;xref:System.Windows.FrameworkElement&gt; rather than &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">一般的&lt;xref:System.Windows.FrameworkElement&gt;ではなく&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;から要素を派生させる</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>If you are deriving from &lt;xref:System.Windows.FrameworkElement&gt;, note that an override of MeasureCore on &lt;xref:System.Windows.FrameworkElement&gt; seals the MeasureCore method.</source>
          <target state="translated">派生する場合&lt;xref:System.Windows.FrameworkElement&gt;、なおで MeasureCore のオーバーライド&lt;xref:System.Windows.FrameworkElement&gt;MeasureCore メソッドをシールします&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>Therefore, you only override MeasureCore as a means to alter layout measure characteristics if you derive from &lt;xref:System.Windows.UIElement&gt; through an inheritance that does not include &lt;xref:System.Windows.FrameworkElement&gt;.</source>
          <target state="translated">したがって、のみをオーバーライドする MeasureCore &lt;xref:System.Windows.UIElement&gt; &lt;xref:System.Windows.FrameworkElement&gt;。&lt;/xref:System.Windows.FrameworkElement&gt;が含まれていない、継承によって&lt;/xref:System.Windows.UIElement&gt;から派生した場合は、レイアウトのメジャーの特性を変更するための手段として</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>This might be the case if you are attempting to build your own implementation on the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> core-level.</source>
          <target state="translated">これがある場合、独自の実装を構築しようとしている場合、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>コア レベル。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Otherwise, if you are deriving from &lt;xref:System.Windows.FrameworkElement&gt;, then the implementation template for Measure behavior is the &lt;xref:System.Windows.FrameworkElement&gt; implementation of .&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;.</source>
          <target state="translated">それ以外の場合から派生した&lt;xref:System.Windows.FrameworkElement&gt;、メジャーの動作の実装のテンプレートは、&lt;xref:System.Windows.FrameworkElement&gt;の実装&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;。&lt;/xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt; &lt;/xref:System.Windows.FrameworkElement&gt; &lt;/xref:System.Windows.FrameworkElement&gt; 。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>A parent element with child elements must call &lt;xref:System.Windows.UIElement.Measure%2A&gt; on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.</source>
          <target state="translated">子要素を含む親要素を呼び出す必要があります&lt;xref:System.Windows.UIElement.Measure%2A&gt;、それぞれの子にそれ以外の場合これらの子要素またはされていないサイズの配置とはレイアウトから効果的に表示されなくなります&lt;/xref:System.Windows.UIElement.Measure%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>The available size that the parent element can allocate for the child.</source>
          <target state="translated">親要素が子に割り当てることが使用可能なサイズです。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>The desired size of this element in layout.</source>
          <target state="translated">この要素のレイアウトでの目的のサイズ。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">この要素の上にポインターが、任意のマウス ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event for this class, so that MouseDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;MouseDown が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">MouseDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>The MouseDown event is often raised together with either &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; or &lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">いずれかと共に MouseDown イベントが発生した多くの場合、&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;または&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;、2 つの標準のマウス ボタンのいずれかのキーを押してに対応する&lt;/xref:System.Windows.UIElement.MouseRightButtonDown&gt;&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; and &lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;イベント イベント ルート上には、この要素に到達します&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.MouseRightButtonDown&gt;。&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; or &lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;または&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;。&lt;/xref:System.Windows.UIElement.MouseRightButtonDown&gt;&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;の「解説」を参照してください</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Some controls might have inherent class handling for mouse button events.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 一部のコントロールは、固有のクラスのマウス ボタンのイベント処理を必要があります。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">イベントをマウスの左ボタンは、クラス、コントロールで処理が最も可能性の高いイベントです。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>The class handling often marks the underlying &lt;xref:System.Windows.Input.Mouse&gt; class event as handled.</source>
          <target state="translated">多くの場合、処理するクラスは、基になるをマーク&lt;xref:System.Windows.Input.Mouse&gt;クラス イベントを処理します&lt;/xref:System.Windows.Input.Mouse&gt;。</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">イベントが処理済みとマークされるとその要素に関連付けられている他のインスタンス ハンドラーは通常は発生しません。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">その他のクラスまたはインスタンス ハンドラー、バブルに向かう方向 UI ツリーのルート内の要素に関連付けられている通常も発生します。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive MouseDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:      -   Attach handlers for the &lt;xref:System.Windows.UIElement.PreviewMouseDown&gt; event, which is not marked as handled by the controls.</source>
          <target state="translated">前の「重要に記載されているしマウスの左ボタンを押すをこれらのソリューションのいずれかを使用処理するクラスを持つ派生クラスでイベント MouseDown イベントいる問題を解決することができます:-ハンドラーのアタッチ、&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;コントロールによって処理済みとしてマークされていないイベント&lt;/xref:System.Windows.UIElement.PreviewMouseDown&gt;。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">これはプレビュー イベントであるため、ルート ルートから始まり、トンネルをコントロールに注意してください。</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>-   Register a handler on the control procedurally by calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt; and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">ハンドラーを登録コントロールの手続きを呼び出して&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;により、ルーティングされたイベント データの処理済みとしてマークされている場合でも、イベントをリッスンするハンドラーの署名オプションを選択します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseDownEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;.&lt;/xref:System.Windows.UIElement.PreviewMouseDown&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.MouseDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer enters the bounds of this element.</source>
          <target state="translated">マウス ポインターがこの要素の境界に入ったときに発生します。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>MouseEnter is a  that uses the direct event handling routing strategy.</source>
          <target state="translated">MouseEnter は、直接のイベントを処理ルーティング方法を使用します。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>Although MouseEnter tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the &lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt; property value has changed from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph> on this element.</source>
          <target state="translated">MouseEnter を追跡、マウス ポインターが要素の境界に入ったときに、このイベントよりリテラルを報告している、&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;からプロパティ値が変更された<ph id="ph1">`false`</ph>に<ph id="ph2">`true`</ph>この要素上です&lt;/xref:System.Windows.UIElement.IsMouseOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event for this class, so that MouseEnter is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;MouseEnter が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseEnter event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">MouseEnter イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Controls.Button&gt; (or any &lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt; derived class) has native handling for a &lt;xref:System.Windows.UIElement.KeyDown&gt; event when the button has focus, and the pressed key is the space bar.</source>
          <target state="translated">A &lt;xref:System.Windows.Controls.Button&gt;(または any&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;派生クラス) は&lt;xref:System.Windows.UIElement.KeyDown&gt;、ボタンにフォーカスおよび押されたキーは、容量バーしたときにイベント&lt;/xref:System.Windows.UIElement.KeyDown&gt;の処理をネイティブ&lt;/xref:System.Windows.Controls.Primitives.ButtonBase&gt;&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>The native handling raises the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.</source>
          <target state="translated">ネイティブの処理が発生し、&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;イベント ソースとして、ボタンも移動するにマウス ポインターがない場合でも、マウスをキャプチャし、&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; 。</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>As a result of the mouse capture, a MouseEnter event is also raised with the button as the source.</source>
          <target state="translated">マウスのキャプチャの結果として、MouseEnter もイベントはボタンで、ソースとして。</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>In general, if an element captures the mouse, then MouseEnter is raised, as well as &lt;xref:System.Windows.UIElement.GotMouseCapture&gt; and possibly other control-specific events.</source>
          <target state="translated">一般に、要素がマウスをキャプチャする場合は、MouseEnter が発生、だけでなく&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;およびその他のコントロールに固有のイベント可能性があります&lt;/xref:System.Windows.UIElement.GotMouseCapture&gt;。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseEnterEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnMouseEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseEnterEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnMouseEnter%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseEnter%2A&gt;&lt;/xref:System.Windows.Input.MouseEventHandler&gt;&lt;/xref:System.Windows.UIElement.MouseEnterEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseEnter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer leaves the bounds of this element.</source>
          <target state="translated">マウス ポインターがこの要素の境界から出たときに発生します。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>MouseLeave is a  that uses the direct event handling routing strategy.</source>
          <target state="translated">MouseLeave は、直接のイベントを処理ルーティング方法を使用します。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>Although MouseLeave tracks when the mouse leaves an element, this event more literally reports that the &lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt; property value has changed from <ph id="ph1">`true`</ph> to <ph id="ph2">`false`</ph> on this element.</source>
          <target state="translated">MouseLeave を追跡、マウスが要素を離れると、このイベントよりリテラルを報告している、&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;からプロパティ値が変更された<ph id="ph1">`true`</ph>に<ph id="ph2">`false`</ph>この要素上です&lt;/xref:System.Windows.UIElement.IsMouseOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event for this class, so that MouseLeave is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;MouseLeave が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseLeave event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">MouseLeave イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseLeaveEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnMouseLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseLeaveEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnMouseLeave%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseLeave%2A&gt;&lt;/xref:System.Windows.Input.MouseEventHandler&gt;&lt;/xref:System.Windows.UIElement.MouseLeaveEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeave"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの左ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>If you mark MouseLeftButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">処理 MouseLeftButtonDown をマークする場合は、マークしている本質的に&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>This possibly includes class-handler generated events such as &lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;.</source>
          <target state="translated">これは、可能性のある&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;。&lt;/xref:System.Windows.Controls.Control.MouseDoubleClick&gt;などのクラス ハンドラーが生成されたイベントが含まれています</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Some control classes might have inherent class handling for mouse button events.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; 一部のコントロール クラスに固有のクラスのマウス ボタンのイベント処理を必要があります。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">イベントをマウスの左ボタンは、クラス、コントロールで処理が最も可能性の高いイベントです。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>The class handling often marks the underlying &lt;xref:System.Windows.Input.Mouse&gt; class event as handled.</source>
          <target state="translated">多くの場合、処理するクラスは、基になるをマーク&lt;xref:System.Windows.Input.Mouse&gt;クラス イベントを処理します&lt;/xref:System.Windows.Input.Mouse&gt;。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">イベントが処理済みとマークされるとその要素に関連付けられている他のインスタンス ハンドラーは通常は発生しません。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">その他のクラスまたはインスタンス ハンドラー、バブルに向かう方向 UI ツリーのルート内の要素に関連付けられている通常も発生します。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive MouseLeftButtonDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:      -   Attach handlers for the &lt;xref:System.Windows.UIElement.PreviewMouseDown&gt; event, which is not marked as handled by the controls.</source>
          <target state="translated">前の「重要に記載されているしマウスの左ボタンを押すをこれらのソリューションのいずれかを使用処理するクラスを持つ派生クラスでイベント MouseLeftButtonDown イベントいる問題を解決することができます:-ハンドラーのアタッチ、&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;コントロールによって処理済みとしてマークされていないイベント&lt;/xref:System.Windows.UIElement.PreviewMouseDown&gt;。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">これはプレビュー イベントであるため、ルート ルートから始まり、トンネルをコントロールに注意してください。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>-   Register a handler on the control procedurally by calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt; and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">ハンドラーを登録コントロールの手続きを呼び出して&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;により、ルーティングされたイベント データの処理済みとしてマークされている場合でも、イベントをリッスンするハンドラーの署名オプションを選択します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseLeftButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseLeftButtonDownEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.MouseLeftButtonDownEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの左ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>If you mark MouseLeftButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">処理 MouseLeftButtonUp をマークする場合は、マークしている本質的に&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseLeftButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseLeftButtonUpEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.MouseLeftButtonUpEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer moves while over this element.</source>
          <target state="translated">この要素上にマウス ポインターが移動したときに発生します。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event for this class, so that MouseMove is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;MouseMove が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">MouseMove イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseMoveEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;.&lt;/xref:System.Windows.UIElement.PreviewMouseMove&gt; &lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.UIElement.MouseMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの右ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>If you mark MouseRightButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">処理 MouseRightButtonDown をマークする場合は、マークしている本質的に&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>This possibly includes class-handler generated events such as &lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;.</source>
          <target state="translated">これは、可能性のある&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;。&lt;/xref:System.Windows.Controls.Control.MouseDoubleClick&gt;などのクラス ハンドラーが生成されたイベントが含まれています</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Right button mouse events frequently have native handling in application scenarios.</source>
          <target state="translated">右ボタンをマウス イベントは、アプリケーション シナリオでネイティブの処理を頻繁にあります。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>For instance, a right mouse button down might display a context menu.</source>
          <target state="translated">たとえば、マウスの右ボタンを押すは、コンテキスト メニューを表示する可能性があります。</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>ContextMenu 概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseRightButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseRightButtonDownEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.MouseRightButtonDownEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの右ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてバブルのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>If you mark MouseRightButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">処理 MouseRightButtonUp をマークする場合は、マークしている本質的に&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseRightButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseRightButtonUpEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.MouseRightButtonUpEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is released over this element.</source>
          <target state="translated">この要素上で任意のマウス ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event for this class, so that MouseUp is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;MouseUp が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">MouseUp イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>The MouseUp event is often raised together with either &lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt; or &lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;, which correspond to a release of one of the two standard mouse buttons.</source>
          <target state="translated">いずれかと共に MouseUp イベントが発生した多くの場合、&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;または&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;、2 つの標準のマウス ボタンのいずれかのリリースに対応する&lt;/xref:System.Windows.UIElement.MouseRightButtonUp&gt;&lt;/xref:System.Windows.UIElement.MouseLeftButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt; and &lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;イベント イベント ルート上には、この要素に到達します&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.MouseRightButtonUp&gt;。&lt;/xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt; or &lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;または&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;。&lt;/xref:System.Windows.UIElement.MouseRightButtonUp&gt;&lt;/xref:System.Windows.UIElement.MouseLeftButtonUp&gt;の「解説」を参照してください</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseUpEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;.&lt;/xref:System.Windows.UIElement.PreviewMouseUp&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.MouseUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">この要素の上にマウス ポインターが、ユーザーがマウスのホイールを回転させるときに発生します。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the MouseWheel event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">フォーカスまたはマウスのキャプチャ、マウス ポインターが; よりも優先します。このため、対象を絞ったまたはキャプチャした要素からマウス ホイールのイベントを受信する場合、マウス ポインター実際にあります別の要素上です。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event for this class, so that MouseWheel is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;マウス ホイールが一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseWheel event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">マウス ホイールのイベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.MouseWheelEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewMouseWheel&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.MouseWheelEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewMouseWheel&gt;.&lt;/xref:System.Windows.UIElement.PreviewMouseWheel&gt; &lt;/xref:System.Windows.Input.MouseWheelEventHandler&gt; &lt;/xref:System.Windows.UIElement.MouseWheelEvent&gt;</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnMouseWheel%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseWheel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseWheel"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>Attempts to move focus from this element to another element.</source>
          <target state="translated">この要素から別の要素にフォーカスを移動しようとしています。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</source>
          <target state="translated">ガイダンスの方向になり、この要素のビジュアルの親の組織内で解釈されますが、フォーカスを移動する方向を指定します。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>Make sure you check the return value of this method.</source>
          <target state="translated">このメソッドの戻り値を確認してください。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>A return value of <ph id="ph1">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</source>
          <target state="translated">戻り値の<ph id="ph1">`false`</ph>コントロールの構成で定義されているタブ ストップの検査を実行し、走査の各要求はラップを要求していないかどうかに返される可能性があります。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</source>
          <target state="translated">走査の各要求を視覚的に移動する既存のタブ オーダーまたはを方向で走査するモードにはいずれかを示すプロパティが含まれています。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the requested traversal was performed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>要求された検査が実行された場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Provides class handling for when an access key that is meaningful for this element is invoked.</source>
          <target state="translated">呼び出されるときはこの要素の意味のあるアクセス キーのクラス処理を提供します。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>There is no actual AccessKey event in the &lt;xref:System.Windows.UIElement&gt; class, or elsewhere, which you can raise or attach handlers for.</source>
          <target state="translated">実際の AccessKey イベントではありません、&lt;xref:System.Windows.UIElement&gt;クラス、または別の場所を上げたり下げたりするアタッチするハンドラーのデータ型&lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>Instead, the event is originated via a dedicated manager class, &lt;xref:System.Windows.Input.AccessKeyManager&gt;, which post-processes all input to search for access keys that are applicable to the entire input model.</source>
          <target state="translated">専用マネージャー クラスを使用して、イベントの代わりに、発生元が&lt;xref:System.Windows.Input.AccessKeyManager&gt;、後に入力モデル全体に適用されるアクセス キーを検索するすべての入力を処理する&lt;/xref:System.Windows.Input.AccessKeyManager&gt;。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>The event data to the access key event.</source>
          <target state="translated">アクセス キー イベントをイベントのデータ。</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>The event data reports which key was invoked, and indicate whether the <bpt id="p1">&lt;xref href="System.Windows.Input.AccessKeyManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that controls the sending of these events also sent this access key invocation to other elements.</source>
          <target state="translated">イベント データ レポートがどのキーが呼び出され、指定するかどうか、 <bpt id="p1">&lt;xref href="System.Windows.Input.AccessKeyManager"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これらのイベントの送信を制御するオブジェクトが他の要素にもこのアクセス キーの呼び出しを送信します。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Supports layout behavior when a child element is resized.</source>
          <target state="translated">子要素がサイズ変更されると、レイアウトの動作をサポートしています。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>This method is typically not called by your application code.</source>
          <target state="translated">このメソッドは通常、アプリケーション コードで呼び出されません。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.</source>
          <target state="translated">公開されるため、独自のレイアウトが無効な可能性のある状態でのクラスで、派生した要素を確認します。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.</source>
          <target state="translated">クラスでは、子要素にサイズ変更に基づき、レイアウト パスの処理時間を最小限に抑えるの最適化を試みることもなります。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>An example derived element class that implements OnChildDesiredSizeChanged is the &lt;xref:System.Windows.Controls.Grid&gt; control.</source>
          <target state="translated">例の派生した要素クラス OnChildDesiredSizeChanged を実装する、&lt;xref:System.Windows.Controls.Grid&gt;コントロール&lt;/xref:System.Windows.Controls.Grid&gt;。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>The child element that is being resized.</source>
          <target state="translated">サイズが変更される子要素。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>Returns class-specific <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementations for the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> infrastructure.</source>
          <target state="translated">特定のクラスを返します<bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>の実装、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>インフラストラクチャです。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>The type-specific <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">型固有<bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>実装します。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event by using the event data provided.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>渡されたイベント データを使用して、ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>This event data must contain the identifier for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">このイベント データの識別子を含める必要があります、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch is captured to this element.</source>
          <target state="translated">クラスの処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.GotTouchCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチがこの要素にキャプチャされるときに発生するイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>The OnGotTouchCapture method has no default implementation.</source>
          <target state="translated">OnGotTouchCapture メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>Override OnGotTouchCapture in a derived class to handle the &lt;xref:System.Windows.UIElement.GotTouchCapture&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnGotTouchCapture、&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;イベント&lt;/xref:System.Windows.UIElement.GotTouchCapture&gt;。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnGotTouchCapture method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnGotTouchCapture 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsKeyboardFocusedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.IsKeyboardFocusedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt; dependency property changes.</source>
          <target state="translated">この仮想メソッドが発生したときの値、&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;依存関係プロパティの変更&lt;/xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">続いて、&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;同じイベント データ インスタンスをイベントが発生します&lt;/xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>Notice that the  &lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt; event is not a routed event.</source>
          <target state="translated">注意して、&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;イベントは、ルーティングされたイベントではありません&lt;/xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>Invoked just before the <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsKeyboardFocusWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised by this element.</source>
          <target state="translated">直前に呼び出される、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsKeyboardFocusWithinChanged"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントは、この要素で発生します。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt; dependency property changes .</source>
          <target state="translated">この仮想メソッドが発生したときの値、&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;依存関係プロパティの変更&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">続いて、&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;同じイベント データ インスタンスをイベントが発生します&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt; event is not a routed event.</source>
          <target state="translated">注意して、&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;イベントは、ルーティングされたイベントではありません&lt;/xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt; dependency property changes its value.</source>
          <target state="translated">この仮想メソッドが発生したときの値、&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;依存関係プロパティの値が変更します&lt;/xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">続いて、&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;同じイベント データ インスタンスをイベントが発生します&lt;/xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt; event is not a routed event; Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;イベントが; ルーティングされたイベントではないことに注意してください。そのため、できませんとしてマークする、クラス ハンドラーで処理します&lt;/xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.IsMouseDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt; dependency property changes its value.</source>
          <target state="translated">この仮想メソッドが発生したときの値、&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt;依存関係プロパティの値が変更します&lt;/xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">続いて、&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;同じイベント データ インスタンスをイベントが発生します&lt;/xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt; event is not a routed event.</source>
          <target state="translated">注意して、&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;イベントは、ルーティングされたイベントではありません&lt;/xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsStylusCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.IsStylusCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt; dependency property changes its value.</source>
          <target state="translated">この仮想メソッドが発生したときの値、&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;依存関係プロパティの値が変更します&lt;/xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.UIElement.IsStylusCapturedChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">続いて、&lt;xref:System.Windows.UIElement.IsStylusCapturedChanged&gt;同じイベント データ インスタンスをイベントが発生します&lt;/xref:System.Windows.UIElement.IsStylusCapturedChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">イベントがルーティングされたイベントではないことに注意してください。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsStylusCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.IsStylusCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt; dependency property changes its value.</source>
          <target state="translated">この仮想メソッドが発生したときの値、&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt;依存関係プロパティの値が変更します&lt;/xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">続いて、&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt;同じイベント データ インスタンスをイベントが発生します&lt;/xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">イベントがルーティングされたイベントではないことに注意してください。</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.IsStylusDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.IsStylusDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt; dependency property changes its value.</source>
          <target state="translated">この仮想メソッドが発生したときの値、&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt;依存関係プロパティの値が変更します&lt;/xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">仮想メソッドは、最初に発生し、必要に応じて、イベント データを操作できます。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">続いて、&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt;同じイベント データ インスタンスをイベントが発生します&lt;/xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt;。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">イベントがルーティングされたイベントではないことに注意してください。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>Therefore you cannot mark it as handled in the class handler.</source>
          <target state="translated">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event by using the event data that is provided.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>提供されているイベント データを使用して、ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>This event data must contain the identifier for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">このイベント データの識別子を含める必要があります、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when this element loses a touch capture.</source>
          <target state="translated">クラス処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.LostTouchCapture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントにこの要素は、タッチのキャプチャを失ったときに発生します。</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>The OnLostTouchCapture method has no default implementation.</source>
          <target state="translated">OnLostTouchCapture メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>Override OnLostTouchCapture in a derived class to handle the &lt;xref:System.Windows.UIElement.LostTouchCapture&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnLostTouchCapture、&lt;xref:System.Windows.UIElement.LostTouchCapture&gt;イベント&lt;/xref:System.Windows.UIElement.LostTouchCapture&gt;。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnLostTouchCapture method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnLostTouchCapture 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
          <target state="translated">ときに呼び出されます、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationBoundaryFeedback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>The OnManipulationBoundaryFeedback method has no default implementation.</source>
          <target state="translated">OnManipulationBoundaryFeedback メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>Override OnManipulationBoundaryFeedback in a derived class to handle the &lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnManipulationBoundaryFeedback、&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;。</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Be sure to call the OnManipulationBoundaryFeedback method of the base class so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、OnManipulationBoundaryFeedback 基底クラスの基本クラスは、イベントを受け取るようにしてください。</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
          <target state="translated">イベントのデータ。</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationCompleted"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
          <target state="translated">ときに呼び出されます、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationCompleted"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>The OnManipulationCompleted method has no default implementation.</source>
          <target state="translated">OnManipulationCompleted メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>Override OnManipulationCompleted in a derived class to handle the &lt;xref:System.Windows.UIElement.ManipulationCompleted&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnManipulationCompleted、&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationCompleted&gt;。</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source>Be sure to call the OnManipulationCompleted method of the base class so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、OnManipulationCompleted 基底クラスの基本クラスは、イベントを受け取るようにしてください。</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
          <target state="translated">イベントのデータ。</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationDelta"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
          <target state="translated">ときに呼び出されます、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationDelta"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>The OnManipulationDelta method has no default implementation.</source>
          <target state="translated">OnManipulationDelta メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>Override OnManipulationDelta in a derived class to handle the &lt;xref:System.Windows.UIElement.ManipulationDelta&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnManipulationDelta、&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationDelta&gt;。</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>Be sure to call the OnManipulationDelta method of the base class so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、OnManipulationDelta 基底クラスの基本クラスは、イベントを受け取るようにしてください。</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
          <target state="translated">イベントのデータ。</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationInertiaStarting"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
          <target state="translated">ときに呼び出されます、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationInertiaStarting"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>The OnManipulationInertiaStarting method has no default implementation.</source>
          <target state="translated">OnManipulationInertiaStarting メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Override OnManipulationInertiaStarting in a derived class to handle the &lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnManipulationInertiaStarting、&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;。</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>Be sure to call the OnManipulationInertiaStarting method of the base class so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、OnManipulationInertiaStarting 基底クラスの基本クラスは、イベントを受け取るようにしてください。</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
          <target state="translated">イベントのデータ。</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>Called when the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarted"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event occurs.</source>
          <target state="translated">ときに呼び出されます、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarted"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>The OnManipulationStarted method has no default implementation.</source>
          <target state="translated">OnManipulationStarted メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>Override OnManipulationStarted in a derived class to handle the &lt;xref:System.Windows.UIElement.ManipulationStarted&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnManipulationStarted、&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationStarted&gt;。</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>Be sure to call the OnManipulationStarted method of the base class so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、OnManipulationStarted 基底クラスの基本クラスは、イベントを受け取るようにしてください。</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>The data for the event.</source>
          <target state="translated">イベントのデータ。</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarting"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when the manipulation processor is first created.</source>
          <target state="translated">クラスの処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.ManipulationStarting"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>操作プロセッサは最初、するときに発生するルーティング イベントを作成します。</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>The OnManipulationStarting method has no default implementation.</source>
          <target state="translated">OnManipulationStarting メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Override OnManipulationStarting in a derived class to handle the &lt;xref:System.Windows.UIElement.ManipulationStarting&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnManipulationStarting、&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;イベント&lt;/xref:System.Windows.UIElement.ManipulationStarting&gt;。</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnManipulationStarting method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnManipulationStarting 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.ManipulationStartingEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.ManipulationStartingEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>This event data reports details about the mouse button that was pressed and the handled state.</source>
          <target state="translated">このイベント データは、押されたマウス ボタンおよび処理済みの状態に関する詳細を報告します。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的がに似ていますが、<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">ここでは、照合イベントは、直接ルーティング戦略のルーティング イベントです。</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">標準的なインスタンス ハンドラーでも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的がに似ていますが、<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">ここでは、照合イベントは、直接ルーティング戦略のルーティング イベントです。</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">標準的なインスタンス ハンドラーでも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event is raised on this element.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;ルーティングと、バブルを基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;。&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.MouseLeftButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnMouseLeftButtonDown.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnMouseLeftButtonDown をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseLeftButtonDown.</source>
          <target state="translated">呼び出しに失敗すると、OnMouseLeftButtonDown を起動しようとしても親クラスでは、そのマウス イベントの既定の入力処理が無効にします。</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Button&gt; and override OnMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event.</source>
          <target state="translated">派生するなど、&lt;xref:System.Windows.Controls.Button&gt;基本実装を呼び出さずに派生クラスでオーバーライドして OnMouseLeftButtonDown ですただし、これをオーバーライドを無効にし、&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;イベント。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; &lt;/xref:System.Windows.Controls.Button&gt; 。</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">イベント データは、マウスの左ボタンが押されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します&lt;/xref:System.Windows.UIElement.MouseLeftButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;ルーティングと、バブルを基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;。&lt;/xref:System.Windows.UIElement.MouseLeftButtonUp&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.MouseLeftButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnMouseLeftButtonUp.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnMouseLeftButtonUp をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">イベント データは、マウスの左ボタンが離されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します&lt;/xref:System.Windows.UIElement.MouseRightButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;ルーティングと、バブルを基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;。&lt;/xref:System.Windows.UIElement.MouseRightButtonDown&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.MouseRightButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnMouseRightButtonDown.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnMouseRightButtonDown をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseRightButtonDown.</source>
          <target state="translated">呼び出しに失敗すると、OnMouseRightButtonDown を起動しようとしても親クラスでは、そのマウス イベントの既定の入力処理が無効にします。</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Control&gt; and override OnMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the &lt;xref:System.Windows.Controls.Control&gt; default behavior.</source>
          <target state="translated">たとえばから派生できます&lt;xref:System.Windows.Controls.Control&gt;呼び出しベースせず派生クラスでオーバーライドして OnMouseRightButtonDown ですただし、このオーバーライドが含まれる、コントロール上のコンテキスト メニュー サービスを無効にし、の、&lt;xref:System.Windows.Controls.Control&gt;既定の動作。&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Control&gt; 。</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">イベント データは、マウスの右ボタンが押されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;イベントをバブルの経路を通るが表示されますが、間接的な方法で実際に移動します&lt;/xref:System.Windows.UIElement.MouseRightButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;ルーティングと、バブルを基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;。&lt;/xref:System.Windows.UIElement.MouseRightButtonUp&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.MouseRightButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnMouseRightButtonUp.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnMouseRightButtonUp をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">イベント データは、マウスの右ボタンが離されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>The event data reports that the mouse button was released.</source>
          <target state="translated">イベント データは、マウス ボタンが離されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>The event data reports that one or more mouse buttons were pressed.</source>
          <target state="translated">イベント データは、1 つ以上のマウス ボタンが押されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;トンネル ルートである基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;。&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnPreviewMouseLeftButtonDown.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnPreviewMouseLeftButtonDown をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseLeftButtonDown.</source>
          <target state="translated">呼び出しに失敗すると、OnPreviewMouseLeftButtonDown を起動しようとしても親クラスでは、そのマウス イベントの既定の入力処理が無効にします。</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Button&gt; and override OnPreviewMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event.</source>
          <target state="translated">派生するなど、&lt;xref:System.Windows.Controls.Button&gt;基本実装を呼び出さずに派生クラスでオーバーライドして OnPreviewMouseLeftButtonDown ですただし、これをオーバーライドを無効にし、&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;イベント。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; &lt;/xref:System.Windows.Controls.Button&gt; 。</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">イベント データは、マウスの左ボタンが押されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;トンネル ルートである基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;。&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnPreviewMouseLeftButtonUp.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnPreviewMouseLeftButtonUp をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">イベント データは、マウスの左ボタンが離されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;トンネル ルートである基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;。&lt;/xref:System.Windows.UIElement.MouseRightButtonDown&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnPreviewMouseRightButtonDown.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnPreviewMouseRightButtonDown をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">代わりに、特定のマウスの状態のイベント処理を変更するためにこのメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">基本実装を呼び出すを選択するかどうかは、シナリオによって異なります。</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseRightButtonDown.</source>
          <target state="translated">呼び出しに失敗すると、OnPreviewMouseRightButtonDown を起動しようとしても親クラスでは、そのマウス イベントの既定の入力処理が無効にします。</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Control&gt; and override OnPreviewMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the &lt;xref:System.Windows.Controls.Control&gt; default behavior.</source>
          <target state="translated">たとえばから派生できます&lt;xref:System.Windows.Controls.Control&gt;呼び出しベースせず派生クラスでオーバーライドして OnPreviewMouseRightButtonDown ですただし、このオーバーライドが含まれる、コントロール上のコンテキスト メニュー サービスを無効にし、の、&lt;xref:System.Windows.Controls.Control&gt;既定の動作。&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Control&gt; 。</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">イベント データは、マウスの右ボタンが押されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;イベントは、トンネリングのルートで伝送に見えますが、実際には、間接的な方法で移動します&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.UIElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;トンネル ルートである基になるイベントと各&lt;xref:System.Windows.UIElement&gt;イベントに沿ったルートを使用して直接ルーティングされたイベント&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;。&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;を生成する処理と同じ&lt;/xref:System.Windows.UIElement&gt;には&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">マークすることができますが、&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;イベントをこの要素の目的の処理、処理済みの状態はイベント ルート上の他の要素は永続化されません&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">イベントを全般インスタンス ハンドラーを防ぐために処理済みとしてマークするただし、(を指定しなかったもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.UIElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">一般的なマウスのイベント処理の既定の実装&lt;xref:System.Windows.UIElement&gt;リッスン&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;適切なローカル イベントに変換します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">派生クラスの静的コンス トラクターで&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;の代替クラス ハンドラーを登録します</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.UIElement&gt; by overriding OnPreviewMouseRightButtonUp.</source>
          <target state="translated">マウスの処理の動作を変更することはできません&lt;xref:System.Windows.UIElement&gt;OnPreviewMouseRightButtonUp をオーバーライドすることで&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">イベント データは、マウスの右ボタンが離されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>The event data reports that one or more mouse buttons were released.</source>
          <target state="translated">イベント データは、1 つ以上のマウス ボタンが離されたことを報告します。</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch presses this element.</source>
          <target state="translated">クラスの処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチは、この要素を押したときに発生するイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>The OnPreviewTouchDown method has no default implementation.</source>
          <target state="translated">OnPreviewTouchDown メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>Override OnPreviewTouchDown in a derived class to handle the &lt;xref:System.Windows.UIElement.PreviewTouchDown&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnPreviewTouchDown、&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;イベント&lt;/xref:System.Windows.UIElement.PreviewTouchDown&gt;。</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnPreviewTouchDown method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnPreviewTouchDown 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">クラス処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチは、この要素の中に内部動かしたときに発生するイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>The OnPreviewTouchMove method has no default implementation.</source>
          <target state="translated">OnPreviewTouchMove メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source>Override OnPreviewTouchMove in a derived class to handle the &lt;xref:System.Windows.UIElement.PreviewTouchMove&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnPreviewTouchMove、&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;イベント&lt;/xref:System.Windows.UIElement.PreviewTouchMove&gt;。</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnPreviewTouchMove method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnPreviewTouchMove 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">クラスの処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチがこの要素内にリリースされたときに発生するイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>The OnPreviewTouchUp method has no default implementation.</source>
          <target state="translated">OnPreviewTouchUp メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>Override OnPreviewTouchUp in a derived class to handle the &lt;xref:System.Windows.UIElement.PreviewTouchUp&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnPreviewTouchUp、&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;イベント&lt;/xref:System.Windows.UIElement.PreviewTouchUp&gt;。</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnPreviewTouchUp method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnPreviewTouchUp 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.QueryCursorEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.QueryCursorEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, participates in rendering operations that are directed by the layout system.</source>
          <target state="translated">派生クラスでオーバーライドされると、レイアウト システムによって送られるレンダリング操作に参加します。</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.</source>
          <target state="translated">この要素のレンダリング指示は、このメソッドが呼び出される場合、直接は使用されませんしレイアウトと描画して非同期後で使用できる代わりに保持されます。</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>This method has no default implementation in the &lt;xref:System.Windows.UIElement&gt; class.</source>
          <target state="translated">このメソッドの&lt;xref:System.Windows.UIElement&gt;クラス&lt;/xref:System.Windows.UIElement&gt;の既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>The drawing instructions for a specific element.</source>
          <target state="translated">特定の要素の描画の命令。</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source>This context is provided to the layout system.</source>
          <target state="translated">このコンテキストは、レイアウト システムに提供されます。</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, participates in rendering operations that are directed by the layout system.</source>
          <target state="translated">派生クラスでオーバーライドされると、レイアウト システムによって送られるレンダリング操作に参加します。</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>This method is invoked after layout update, and before rendering, if the element's &lt;xref:System.Windows.UIElement.RenderSize*&gt; has changed as a result of layout update.</source>
          <target state="translated">このメソッドは、レイアウトの更新の後と、レンダリングの前に呼び出される場合、要素の&lt;xref:System.Windows.UIElement.RenderSize*&gt;がレイアウトの更新の結果として変更されました&lt;/xref:System.Windows.UIElement.RenderSize*&gt;。</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>A typical WPF framework-level element uses the override implementation from &lt;xref:System.Windows.FrameworkElement&gt;.</source>
          <target state="translated">一般的な WPF フレームワーク レベル要素&lt;xref:System.Windows.FrameworkElement&gt;。&lt;/xref:System.Windows.FrameworkElement&gt;オーバーライドの実装を使用します。</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.FrameworkElement&gt; implementation invalidates the &lt;xref:System.Windows.FrameworkElement.Width%2A&gt; and &lt;xref:System.Windows.FrameworkElement.Height%2A&gt; properties and handles the basics of remaking the layout.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkElement&gt;実装が無効化、&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;と&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;プロパティとレイアウトを再構築の基本のハンドル&lt;/xref:System.Windows.FrameworkElement.Height%2A&gt;&lt;/xref:System.Windows.FrameworkElement.Width%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>Overriding OnRenderSizeChanged at the &lt;xref:System.Windows.UIElement&gt; level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.</source>
          <target state="translated">OnRenderSizeChanged をオーバーライドする、&lt;xref:System.Windows.UIElement&gt;レベルことを示します、要素の実装は WPF フレームワーク レベルの実装を使用して意図的にないため、要素必要がありますのレイアウト ロジックよりを直接処理、通常置換レイアウト システムを記述しています&lt;/xref:System.Windows.UIElement&gt;。</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>The packaged parameters (<bpt id="p1">&lt;xref href="System.Windows.SizeChangedInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>), which includes old and new sizes, and which dimension actually changes.</source>
          <target state="translated">パッケージのパラメーター (<bpt id="p1">&lt;xref href="System.Windows.SizeChangedInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>)、新旧のサイズが含まれているし、どのディメンションが実際に変更します。</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised by this element.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的はのような<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">ここでは、照合イベントは、ルーティングされたイベントです。</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">通常のインスタンス ハンドラーを禁止する場合にも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised by this element.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがこの要素で発生します。</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">このメソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">継承の中間クラスには、このメソッドを実装可能性があります、ため、実装で基底の実装を呼び出すことをお勧めします。</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">呼び出すことが基本の前に、または後に特別な処理の要件に応じて、します。</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">このメソッドの目的はのような<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>でのイベント パターン * メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することによって派生クラスからの一致するイベントを処理するための手段を提供します。</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">ここでは、照合イベントは、ルーティングされたイベントです。</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">通常のインスタンス ハンドラーを禁止する場合にも役立ちますが、イベントを処理済みとしてマーク (が指定されていないもの<ph id="ph1">`handledEventsToo`</ph>) が呼び出されているからです。</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">未処理のときに呼び出される<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>添付イベントがそのルート上でこのクラスから派生した要素に到達します。</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch presses inside this element.</source>
          <target state="translated">クラス処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチがこの要素の内部を押したときに発生するイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>The OnTouchDown method has no default implementation.</source>
          <target state="translated">OnTouchDown メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>Override OnTouchDown in a derived class to handle the &lt;xref:System.Windows.UIElement.TouchDown&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnTouchDown、&lt;xref:System.Windows.UIElement.TouchDown&gt;イベント&lt;/xref:System.Windows.UIElement.TouchDown&gt;。</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchDown method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnTouchDown 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">クラスの処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchEnter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチから移動するときに発生するルーティング イベントをこの要素の境界内の外部です。</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>TheOnTouchEnter method has no default implementation.</source>
          <target state="translated">TheOnTouchEnter メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>Override OnTouchEnter in a derived class to handle the &lt;xref:System.Windows.UIElement.TouchEnter&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnTouchEnter、&lt;xref:System.Windows.UIElement.TouchEnter&gt;イベント&lt;/xref:System.Windows.UIElement.TouchEnter&gt;。</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchEnter method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnTouchEnter 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves from inside to outside the bounds of this <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">クラスの処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchLeave"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチから移動するときに発生するルーティング イベントのこの境界の外側を inside <bpt id="p2">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source>The OnTouchLeave method has no default implementation.</source>
          <target state="translated">OnTouchLeave メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>Override OnTouchLeave in a derived class to handle the &lt;xref:System.Windows.UIElement.TouchLeave&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnTouchLeave、&lt;xref:System.Windows.UIElement.TouchLeave&gt;イベント&lt;/xref:System.Windows.UIElement.TouchLeave&gt;。</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchLeave method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnTouchLeave 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">クラス処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチは、この要素の中に内部動かしたときに発生するイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>The OnTouchMove method has no default implementation.</source>
          <target state="translated">OnTouchMove メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>Override OnTouchMove in a derived class to handle the &lt;xref:System.Windows.UIElement.TouchMove&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnTouchMove、&lt;xref:System.Windows.UIElement.TouchMove&gt;イベント&lt;/xref:System.Windows.UIElement.TouchMove&gt;。</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchMove method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnTouchMove 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">クラスの処理を提供、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>タッチがこの要素内にリリースされたときに発生するイベントをルーティングします。</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source>The OnTouchUp method has no default implementation.</source>
          <target state="translated">OnTouchUp メソッドには、既定の実装ではありません。</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>Override OnTouchUp in a derived class to handle the &lt;xref:System.Windows.UIElement.TouchUp&gt; event.</source>
          <target state="translated">処理する派生クラスでオーバーライドして OnTouchUp、&lt;xref:System.Windows.UIElement.TouchUp&gt;イベント&lt;/xref:System.Windows.UIElement.TouchUp&gt;。</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchUp method so that base classes receive the event.</source>
          <target state="translated">必ずメソッドを呼び出して、基底クラスの OnTouchUp 基底クラスは、イベントを受け取るようにします。</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納します。</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>Invoked when the parent element of this <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> reports a change to its underlying visual parent.</source>
          <target state="translated">呼び出されたときにこれの親要素<bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>その基になる visual の親に変更を報告します。</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>The previous parent.</source>
          <target state="translated">以前の親です。</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>This may be provided as <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> did not have a parent element previously.</source>
          <target state="translated">これは、として指定することがあります<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Windows.DependencyObject"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>は親要素は既にありませんでした。</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source>Gets or sets the opacity factor applied to the entire <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> when it is rendered in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">取得または設定全体に適用される不透明度率<bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>で表示する際に、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>The 1.0 default value is the default provided by the initial metadata of this dependency property on the &lt;xref:System.Windows.UIElement&gt; class.</source>
          <target state="translated">1.0 の既定値は、&lt;xref:System.Windows.UIElement&gt;クラス&lt;/xref:System.Windows.UIElement&gt;の場合は、この依存関係プロパティの初期メタデータによって提供される既定値です。</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.</source>
          <target state="translated">他の派生クラスは、クラス コンス トラクター内からのメタデータをオーバーライドすることでこの既定値を変更可能性がある可能性があります。</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>The value of Opacity won't be applied to actual layout unless the element is also visible (&lt;xref:System.Windows.UIElement.IsVisible%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">不透明度の値は、要素は表示もしない限り、実際のレイアウトに適用されません (&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;は<ph id="ph1">`true`</ph>).&lt;/xref:System.Windows.UIElement.IsVisible%2A&gt;</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>Opacity is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.</source>
          <target state="translated">不透明度が、ツリーの下位要素の親要素から、子要素に適用されるが、入れ子になったの不透明度の設定の表示の効果は個々 の子要素のプロパティの値で示されます。</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item Opacity property would still be 0.2 when queried.</source>
          <target state="translated">インスタンスの場合は (0.5) の 50% 不透明度は、リストが、そのリスト項目のいずれかが、独自の不透明度が 20% (0.2) に設定する、そのリスト項目の net 表示不透明度として表示するが 10% (0.1) が、不透明度のプロパティのリスト項目のプロパティの値も 0.2 が照会されたときにします。</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.</source>
          <target state="translated">宣言または評価された不透明度が 0 の場合でも要素はまだ入力イベント、およびコマンドに参加して、フォーカスを設定できる可能性があります。</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source>This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.</source>
          <target state="translated">この側面は便利ですが、マスクの透明な要素を持つ基になるオブジェクトの不透明度&amp;0; オブジェクト (shape) などを使用するのインスタンスにすることはできます。</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>The opacity-zero object can then handle all the input event processing for an underlying area.</source>
          <target state="translated">不透明度&amp;0; のオブジェクトには、すべての入力イベントを基になる領域の処理、処理できます。</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`Background`</ph> or <ph id="ph2">`Fill`</ph> of the object or shape should be set to a value, even if it is &lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;, otherwise hit testing is not enabled, and no events are received.</source>
          <target state="translated">ただし、<ph id="ph1">`Background`</ph>または<ph id="ph2">`Fill`</ph>オブジェクトまたは図形の必要があります設定する値になっている場合でも&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;、それ以外の場合のヒット テストが有効でないと、イベントの受信します&lt;/xref:System.Windows.Media.Brushes.Transparent%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Opacity"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.OpacityProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Opacity"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.OpacityProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.OpacityProperty&gt;</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>The opacity factor.</source>
          <target state="translated">不透明度率。</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>Default opacity is 1.0.</source>
          <target state="translated">既定の不透明度は 1.0 です。</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>Expected values are between 0.0 and 1.0.</source>
          <target state="translated">必要な値は 0.0 ~ 1.0 の範囲はします。</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source>Gets or sets an opacity mask, as a <bpt id="p1">&lt;xref href="System.Windows.Media.Brush"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is applied to any alpha-channel masking for the rendered content of this element.</source>
          <target state="translated">取得またはとして、不透明マスクを設定、 <bpt id="p1">&lt;xref href="System.Windows.Media.Brush"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この要素の描画された内容の任意のアルファ チャネル マスクに適用されるを実装します。</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>This property only uses whatever the alpha channel value is for the supplied &lt;xref:System.Windows.Media.Brush&gt;.</source>
          <target state="translated">このプロパティは任意のアルファ チャネル値では、指定された&lt;xref:System.Windows.Media.Brush&gt;。&lt;/xref:System.Windows.Media.Brush&gt;はのみを使用します。</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source>The other channels of the &lt;xref:System.Windows.Media.Brush&gt;'s rendered content (Red, Green, or Blue) are ignored.</source>
          <target state="translated">他のチャネル、 &lt;xref:System.Windows.Media.Brush&gt;(赤、緑、または青) のコンテンツをレンダリングは無視されます&lt;/xref:System.Windows.Media.Brush&gt;。</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>The most typical &lt;xref:System.Windows.Media.Brush&gt; for this purpose is an &lt;xref:System.Windows.Media.ImageBrush&gt;, which can be used for a variety of photo masking techniques such as a vignette.</source>
          <target state="translated">最も一般的な&lt;xref:System.Windows.Media.Brush&gt;この目的は、 &lt;xref:System.Windows.Media.ImageBrush&gt;、さまざまな写真の画像を表示するなどの手法をマスクに使用できる&lt;/xref:System.Windows.Media.ImageBrush&gt;&lt;/xref:System.Windows.Media.Brush&gt;。</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>But any defined &lt;xref:System.Windows.Media.Brush&gt; (such as &lt;xref:System.Windows.Media.LinearGradientBrush&gt;) can be used.</source>
          <target state="translated">いずれかの定義が&lt;xref:System.Windows.Media.Brush&gt;(など&lt;xref:System.Windows.Media.LinearGradientBrush&gt;) 使用することができます&lt;/xref:System.Windows.Media.LinearGradientBrush&gt;&lt;/xref:System.Windows.Media.Brush&gt;。</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>, this property value can use an inline syntax that is specific to each implementation of the &lt;xref:System.Windows.Media.Brush&gt; abstract class.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>、このプロパティの値は、&lt;xref:System.Windows.Media.Brush&gt;抽象クラス&lt;/xref:System.Windows.Media.Brush&gt;の各実装に固有であるインライン構文を使用できます</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Painting with Solid Colors and Gradients Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>純色、グラデーションの概要でペイント<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_OpacityMask"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.OpacityMaskProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_OpacityMask"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.OpacityMaskProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.OpacityMaskProperty&gt;</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source>The brush to use for opacity masking.</source>
          <target state="translated">不透明マスクを使用するブラシ。</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.OpacityMask*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.OpacityMask*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.OpacityMask*&gt;。</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.Opacity*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.Opacity*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.Opacity*&gt;。</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>Gets a value that uniquely identifies this element.</source>
          <target state="translated">この要素を一意に識別する値を取得します。</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source>PersistId uniquely identifies each element.</source>
          <target state="translated">PersistId は、各要素を一意に識別します。</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>An element keeps the same PersistId every time the same <ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph> is loaded (including binary representations).</source>
          <target state="translated">要素は同じ PersistId たびに同じ<ph id="ph1">[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]</ph>(バイナリ表現を含む) が読み込まれます。</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>This identifier is used for internal loading, parsing and serialization requirements.</source>
          <target state="translated">内部の読み込み、解析およびシリアル化の要件については、この識別子が使用されます。</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>It is not intended to be used by your application code.</source>
          <target state="translated">アプリケーション コードで使用することはありません。</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>This property has no relationship to the &lt;xref:System.Object.GetHashCode%2A&gt; result for any given instance.</source>
          <target state="translated">このプロパティへのリレーションシップを持たない、 &lt;xref:System.Object.GetHashCode%2A&gt;、特定のインスタンスの結果&lt;/xref:System.Object.GetHashCode%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source>The unique identifier for this element.</source>
          <target state="translated">この要素の一意の識別子。</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</source>
          <target state="translated">派生クラスでオーバーライドされると、実際にその要素にフォーカスを移動しなくても指定したフォーカスの移動方向をフォーカスを受け取る要素を返します。</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>The default implementation of this method in this class is incomplete, and always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このクラスでこのメソッドの既定の実装が完了していないと、常に返します<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>The direction of the requested focus traversal.</source>
          <target state="translated">要求されたフォーカスの移動の方向です。</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve">
          <source>The element that would have received focus if &lt;xref:System.Windows.UIElement.MoveFocus*&gt; were actually invoked.</source>
          <target state="translated">要素がフォーカスを受け取った場合&lt;xref:System.Windows.UIElement.MoveFocus*&gt;が実際に呼び出されます&lt;/xref:System.Windows.UIElement.MoveFocus*&gt;。</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">入力システムがこの要素をドラッグ先と、基になるドラッグ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event for this class, so that PreviewDragEnter is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;PreviewDragEnter が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewDragEnter イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewDragEnterEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.DragEnter&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewDragEnterEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.DragEnter&gt;.&lt;/xref:System.Windows.UIElement.DragEnter&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewDragEnterEvent&gt;</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDragEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDragEnter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">入力システムがこの要素をドラッグ元に、基になるドラッグ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event for this class, so that PreviewDragLeave is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;PreviewDragLeave が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewDragLeave イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewDragLeaveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.DragLeave&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewDragLeaveEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.DragLeave&gt;.&lt;/xref:System.Windows.UIElement.DragLeave&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewDragLeaveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDragLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDragLeave"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">入力システムが潜在的なドロップ ターゲットとしてこの要素で、基になるドラッグ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event for this class, so that PreviewDragOver is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;PreviewDragOver が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewDragOver イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewDragOverEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.DragOver&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewDragOverEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.DragOver&gt;.&lt;/xref:System.Windows.UIElement.DragOver&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewDragOverEvent&gt;</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDragOver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDragOver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event for this class, so that PreviewDrop is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;テキストが一部になるよう、このクラスのイベントを接続されているクラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素としては、継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDrop event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">テキストのイベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewDropEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.Drop&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewDropEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.DragEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.Drop&gt;.&lt;/xref:System.Windows.UIElement.Drop&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewDropEvent&gt;</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewDrop%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewDrop%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewDrop%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDrop"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewDrop"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve">
          <source>Occurs when a drag-and-drop operation is started.</source>
          <target state="translated">ドラッグ アンド ドロップ操作が開始されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve">
          <source>The PreviewGiveFeedback event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated">PreviewGiveFeedback イベントは、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更するドラッグ イベントのソースを使用できます。</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event for this class, so that PreviewGiveFeedback is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;PreviewGiveFeedback が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewGiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewGiveFeedback イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewGiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewGiveFeedbackEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.GiveFeedback&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewGiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewGiveFeedbackEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.GiveFeedback&gt;.&lt;/xref:System.Windows.UIElement.GiveFeedback&gt; &lt;/xref:System.Windows.GiveFeedbackEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewGiveFeedbackEvent&gt;</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewGiveFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewGiveFeedback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">キーボードは、この要素にフォーカスがあるときに発生します。</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、ルーティング トンネリングを使用するため、フォーカスを持つ要素は、イベント ハンドラーが実際に添付されている要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has focus.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;フォーカスのある実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewGotKeyboardFocus is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;PreviewGotKeyboardFocus が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewGotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewGotKeyboardFocus イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewGotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewGotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;.&lt;/xref:System.Windows.UIElement.GotKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewGotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewGotKeyboardFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">この要素にフォーカスがあるときにキーが押されると発生します。</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">キーの処理は、コマンド実行やテキストの合成などの他のプラットフォーム機能と対話します。</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.KeyDown&gt; event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.KeyDown&gt;イベントは、下位レベルのテキスト入力イベントを特定のコントロールで期待どおりに動作しない可能性があります&lt;/xref:System.Windows.UIElement.KeyDown&gt;。</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">これは、一部のコントロールがコントロールの複合か、テキストの上位レベルのバージョンを提供するクラスの処理が処理を入力し、関連するイベントです。</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;PreviewKeyDown が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewKeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewKeyDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewKeyDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.KeyDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewKeyDownEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.KeyDown&gt;.&lt;/xref:System.Windows.UIElement.KeyDown&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewKeyDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewKeyDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewKeyDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">この要素にフォーカスがあるときにキーが離されると発生します。</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">キーの処理は、コマンド実行やテキストの合成などの他のプラットフォーム機能と対話します。</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.UIElement.KeyUp&gt; event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.KeyUp&gt;イベントは、下位レベルのテキスト入力イベントを特定のコントロールで期待どおりに動作しない可能性があります&lt;/xref:System.Windows.UIElement.KeyUp&gt;。</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">これは、一部のコントロールがコントロールの複合か、テキストの上位レベルのバージョンを提供するクラスの処理が処理を入力し、関連するイベントです。</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source>For details, check the documentation for individual controls.</source>
          <target state="translated">詳細については、個々 のコントロールのマニュアルを確認します。</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyUp is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;PreviewKeyUp が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewKeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewKeyUp イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewKeyUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.KeyUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewKeyUpEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.KeyUp&gt;.&lt;/xref:System.Windows.UIElement.KeyUp&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewKeyUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewKeyUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewKeyUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">キーボードは、この要素にフォーカスが離れたときに発生します。</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">このイベントは、ルーティング トンネリングを使用しているために、フォーカスを失った要素は、イベント ハンドラーが実際に添付されている、要素ではなく子要素である可能性があります。</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost focus.</source>
          <target state="translated">チェック、&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;フォーカスが失われた実際の要素を特定のイベント データ&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewLostKeyboardFocus is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;PreviewLostKeyboardFocus が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewLostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewLostKeyboardFocus イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewLostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewLostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;.&lt;/xref:System.Windows.UIElement.LostKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewLostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewLostKeyboardFocus"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">この要素の上にポインターが、任意のマウス ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;PreviewMouseDown 一部であるように、このクラスのイベントを接続されているクラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素としては、継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewMouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewMouseDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source>The PreviewMouseDown event is often raised together with either &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt; or &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">PreviewMouseDown 多くの場合、このイベントはいずれかと共に&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;または&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;、2 つの標準のマウス ボタンのいずれかのキーを押してに対応する&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;。</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt; and &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;イベント イベント ルート上には、この要素に到達します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;。&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt; or &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;または&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;。&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;の「解説」を参照してください</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.MouseDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseDownEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.MouseDown&gt;.&lt;/xref:System.Windows.UIElement.MouseDown&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewMouseDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの左ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>If you mark PreviewMouseLeftButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">PreviewMouseLeftButtonDown 処理のマークを付けた場合マークしている本質的に&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>This possibly includes class-handler generated events such as &lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;.</source>
          <target state="translated">これは、可能性のある&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;。&lt;/xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;などのクラス ハンドラーが生成されたイベントが含まれています</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの左ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>If you mark PreviewMouseLeftButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">処理 PreviewMouseLeftButtonUp をマークする場合は、マークしている本質的に&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseLeftButtonUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer moves while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウス ポインターが移動したときに発生します。</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</source>
          <target state="translated">このイベントは、どちらも要素の境界にマウス ポインターを最初に入力し、マウス ポインターが要素の境界内に残っているときに移動するともします。</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseMove is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;PreviewMouseMove が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewMouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewMouseMove イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.MouseMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseMoveEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.MouseMove&gt;.&lt;/xref:System.Windows.UIElement.MouseMove&gt; &lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewMouseMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの右ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>If you mark PreviewMouseRightButtonDown handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">処理 PreviewMouseRightButtonDown をマークする場合は、マークしている本質的に&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>This possibly includes class-handler generated events such as &lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;.</source>
          <target state="translated">これは、可能性のある&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;。&lt;/xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;などのクラス ハンドラーが生成されたイベントが含まれています</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">マウス ポインターがこの要素上でマウスの右ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">要素ツリーを通じてトンネリングのルートに従うようですが、実際には、直接ルーティング イベントが発生し、各&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;要素ツリーに沿って reraised</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントの&amp;1; つ&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;イベント ルート上の各要素によって処理される添付イベントがイベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>The event data of this event exposes the event data of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">このイベントのイベント データ、イベントのデータを公開、基になる&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;イベント&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.UIElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">そのイベントがイベント ルート上処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;、処理済みとしてマークされているイベントを処理する、イベント リスナーをするために、オプションを使用します&lt;/xref:System.Windows.UIElement.AddHandler%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>If you mark PreviewMouseRightButtonUp handled, you are essentially marking &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; handled for all further listeners along the route, and on all related events.</source>
          <target state="translated">処理 PreviewMouseRightButtonUp をマークする場合は、マークしている本質的に&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;経路、さらにすべてのリスナーの処理され、すべての関連するイベントです&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.UIElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">概念的には、このイベントの待ち時間 (やその他のマウス ボタンのイベントに&lt;xref:System.Windows.UIElement&gt;) マウス「サービス」である (によって提供される、サービス定義で、&lt;xref:System.Windows.Input.Mouse&gt;クラス).&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左から右に、アップダウン) を確認する必要はないの利便性を追加します。</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">非標準のボタンの状態のチェックなどの高度なシナリオを使用する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>上&lt;xref:System.Windows.Input.Mouse&gt;&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;上のものではなくクラス&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;&lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent&gt;。</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseRightButtonUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">この要素の上にマウス ポインターが、任意のマウス ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseUp is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;PreviewMouseUp 一部であるように、このクラスのイベントを接続されているクラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素としては、継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewMouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewMouseUp イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>The PreviewMouseUp event is often raised together with either &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt; or &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">PreviewMouseUp 多くの場合、このイベントはいずれかと共に&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;または&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;、2 つの標準のマウス ボタンのいずれかのキーを押してに対応する&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;。</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt; and &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;イベント イベント ルート上には、この要素に到達します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;。&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt; or &lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;または&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;。&lt;/xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;の「解説」を参照してください</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.MouseUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseUpEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.MouseUp&gt;.&lt;/xref:System.Windows.UIElement.MouseUp&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewMouseUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">この要素の上にマウス ポインターが、ユーザーがマウスのホイールを回転させるときに発生します。</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">フォーカスまたはマウスのキャプチャ、マウス ポインターが; よりも優先します。このため、対象を絞ったまたはキャプチャした要素からこのイベントを受信する場合、マウス ポインター実際にあります別の要素上です。</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event for this class, so that &lt;xref:System.Windows.UIElement.PreviewMouseMove&gt; is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;添付イベントが、このクラスに対してように&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;一部であるクラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseMove&gt;&lt;/xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the &lt;xref:System.Windows.UIElement.PreviewMouseMove&gt; event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">イベント ハンドラーに関連付けられている、&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;イベントが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.PreviewMouseMove&gt;。</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewMouseWheelEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.MouseWheel&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewMouseWheelEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.MouseWheel&gt;.&lt;/xref:System.Windows.UIElement.MouseWheel&gt; &lt;/xref:System.Windows.Input.MouseWheelEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewMouseWheelEvent&gt;</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseWheel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewMouseWheel"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">ドラッグ アンド ドロップ操作中にキーボードまたはマウス ボタンの状態に変更があるときに発生します。</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source>The PreviewQueryContinueDrag event enables the drag source to declare whether the drag-and-drop operation should be canceled.</source>
          <target state="translated">PreviewQueryContinueDrag イベントは、ドラッグ ソースがドラッグ アンド ドロップ操作を取り消す必要があるかどうかを宣言できます。</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that PreviewQueryContinueDrag is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;PreviewQueryContinueDrag が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewQueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewQueryContinueDrag イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewQueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewQueryContinueDragEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewQueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewQueryContinueDragEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;.&lt;/xref:System.Windows.UIElement.QueryContinueDrag&gt; &lt;/xref:System.Windows.QueryContinueDragEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewQueryContinueDragEvent&gt;</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewQueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewQueryContinueDrag"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">ポインターがこの要素上でスタイラス ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;PreviewStylusButtonDown が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewStylusButtonDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Touch Input Support in Windows Vista<ept id="p1">](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Windows Vista でタッチ入力サポート<ept id="p1">](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept>と<bpt id="p2">[</bpt>入力概要<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusButtonDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusButtonDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusButtonDownEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;.&lt;/xref:System.Windows.UIElement.StylusButtonDown&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusButtonDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">ポインターがこの要素上でスタイラス ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonUp is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;PreviewStylusButtonUp が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewStylusButtonUp イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusButtonUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusButtonUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusButtonUpEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;.&lt;/xref:System.Windows.UIElement.StylusButtonUp&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusButtonUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus touches the digitizer while it is over this element.</source>
          <target state="translated">この要素上でスタイラスがデジタイザーに触れたときに発生します。</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;PreviewStylusDown が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewStylusDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusDownEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusDown&gt;.&lt;/xref:System.Windows.UIElement.StylusDown&gt; &lt;/xref:System.Windows.Input.StylusDownEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">実際には、デジタイザーに触れることがなく要素上でスタイラスを動かしたときに発生します。</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInAirMove is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;なく previewstylusinairmove イベントが一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">なく previewstylusinairmove イベントのイベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusInAirMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;.&lt;/xref:System.Windows.UIElement.StylusInAirMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusInAirMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">スタイラスがこの要素上で検出されるまでデジタイザーに近づいたときに発生します。</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInRange is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;PreviewStylusInRange が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewStylusInRange イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップに存在します。</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusInRangeEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusInRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusInRangeEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusInRange&gt;.&lt;/xref:System.Windows.UIElement.StylusInRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusInRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusInRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusInRange"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves while over the element.</source>
          <target state="translated">要素上でスタイラスを動かしたときに発生します。</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve">
          <source>The stylus must move while being detected by the digitizer to raise this event, otherwise, <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is raised instead.</source>
          <target state="translated">それ以外の場合、このイベントを発生させる、デジタイザーによって検出されている間にスタイラスが移動する必要があります<bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が代わりに発生します。</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusMove is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;PreviewStylusMove が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewStylusMove イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusMoveEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusMove&gt;.&lt;/xref:System.Windows.UIElement.StylusMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is too far from the digitizer to be detected.</source>
          <target state="translated">スタイラスが検出されたデジタイザーから離れすぎているときに発生します。</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusOutOfRange is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;PreviewStylusOutOfRange が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewStylusOutOfRange イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;.&lt;/xref:System.Windows.UIElement.StylusOutOfRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusOutOfRange"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve">
          <source>For information about stylus gestures, see &lt;xref:System.Windows.Input.SystemGesture&gt;.</source>
          <target state="translated">スタイラス ジェスチャの詳細については、 &lt;xref:System.Windows.Input.SystemGesture&gt;。&lt;/xref:System.Windows.Input.SystemGesture&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusSystemGesture is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;PreviewStylusSystemGesture が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewStylusSystemGesture イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;.&lt;/xref:System.Windows.UIElement.StylusSystemGesture&gt; &lt;/xref:System.Windows.Input.StylusSystemGestureEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent&gt;</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusSystemGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve">
          <source>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</source>
          <target state="translated">この要素の上にスタイラスが、ユーザーがスタイラスをデジタイザーから離れたときに発生します。</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event for this class, so that &lt;xref:System.Windows.UIElement.PreviewStylusDown&gt; is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;添付イベントが、このクラスに対してように&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;一部であるクラスのメンバーのリスト&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.UIElement.PreviewStylusDown&gt;&lt;/xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the &lt;xref:System.Windows.UIElement.PreviewStylusDown&gt; event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">イベント ハンドラーに関連付けられている、&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;イベントが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.PreviewStylusDown&gt;。</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewStylusUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.StylusUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewStylusUpEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.StylusUp&gt;.&lt;/xref:System.Windows.UIElement.StylusUp&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewStylusUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewStylusUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">この要素は、デバイスに依存しない方法でテキストを取得したときに発生します。</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve">
          <source>The PreviewTextInput event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated">PreviewTextInput イベントは、コンポーネントまたはデバイスに依存しない方法でテキスト入力にリッスンするようにアプリケーションを使用します。</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve">
          <source>The keyboard is the primary means of PreviewTextInput; but speech, handwriting, and other input devices can also generate PreviewTextInput.</source>
          <target state="translated">キーボードは、PreviewTextInput; の主な手段は、します。音声認識、手書き認識、およびその他の入力デバイスも PreviewTextInput します。</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</source>
          <target state="translated">キーの組み合わせのため、既定のキーボードまたは入力方式エディターから — 複数のキー イベントが&amp;1; つだけのテキスト入力イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event for this class, so that PreviewTextInput is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;PreviewTextInput が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewTextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">PreviewTextInput イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewTextInputEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.TextInput&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewTextInputEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.TextInput&gt;.&lt;/xref:System.Windows.UIElement.TextInput&gt; &lt;/xref:System.Windows.Input.TextCompositionEventHandler&gt; &lt;/xref:System.Windows.UIElement.PreviewTextInputEvent&gt;</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTextInput"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTextInput"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">この要素の上に指が画面に触れると発生します。</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve">
          <source>By default, the PreviewTouchDown and &lt;xref:System.Windows.UIElement.TouchDown&gt; events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">既定では、PreviewTouchDown と&lt;xref:System.Windows.UIElement.TouchDown&gt;指が画面に触れるし、移動するまでのイベントが発生しません&lt;/xref:System.Windows.UIElement.TouchDown&gt;。</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a &lt;xref:System.Windows.Input.Stylus&gt;.</source>
          <target state="translated">移動することがなく保持したりする画面に指を押すと、キーを押して発生して&lt;xref:System.Windows.Input.Stylus&gt;。&lt;/xref:System.Windows.Input.Stylus&gt;の動作を保持</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">プレス アンド ホールド動作は、マウスの右クリックに相当します。</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve">
          <source>To cause the PreviewTouchDown and &lt;xref:System.Windows.UIElement.TouchDown&gt; events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <ph id="ph1">`false`</ph> for this element.</source>
          <target state="translated">PreviewTouchDown が発生して&lt;xref:System.Windows.UIElement.TouchDown&gt;、画面に触れると発生するイベントを設定、&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;添付プロパティ<ph id="ph1">`false`</ph>この要素の&lt;/xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.TouchDown&gt;。</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewTouchDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.TouchDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewTouchDownEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.TouchDown&gt;.&lt;/xref:System.Windows.UIElement.TouchDown&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.UIElement.PreviewTouchDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">この要素の上に指が画面に指を動かしたときに発生します。</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewTouchMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.TouchMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewTouchMoveEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.TouchMove&gt;.&lt;/xref:System.Windows.UIElement.TouchMove&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.UIElement.PreviewTouchMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">この要素の上に指が画面から離れる指が発生したときに発生します。</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.PreviewTouchUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding bubbling event is &lt;xref:System.Windows.UIElement.TouchUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.PreviewTouchUpEvent&gt;|  |ルーティング方法 |トンネリング |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     対応する-バブル イベントは&lt;xref:System.Windows.UIElement.TouchUp&gt;.&lt;/xref:System.Windows.UIElement.TouchUp&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.UIElement.PreviewTouchUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.PreviewTouchUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">ドラッグ アンド ドロップ操作中にキーボードまたはマウス ボタンの状態に変更があるときに発生します。</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve">
          <source>The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated">QueryContinueDrag イベントは、ドラッグ ソースがドラッグ アンド ドロップ操作を取り消す必要があるかどうかを判断できます。</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that QueryContinueDrag is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;QueryContinueDrag が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the QueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">QueryContinueDrag イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_QueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.QueryContinueDragEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_QueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.QueryContinueDragEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;.&lt;/xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt; &lt;/xref:System.Windows.QueryContinueDragEventHandler&gt; &lt;/xref:System.Windows.UIElement.QueryContinueDragEvent&gt;</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.QueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.QueryContinueDrag"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve">
          <source>Occurs when the cursor is requested to display.</source>
          <target state="translated">表示する、カーソルが要求されると発生します。</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve">
          <source>This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</source>
          <target state="translated">マウスのポインターはカーソル オブジェクトを変更する必要がありますが、新しい位置に基づいて、新しい場所に移動するたびに、要素にこのイベントが発生します。</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event for this class, so that QueryCursor is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;QueryCursor が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the QueryCursor event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">QueryCursor イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve">
          <source>The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</source>
          <target state="translated">このイベント名によって参照されているカーソルは、必ずしも (カーソルとも呼ばれる) テキストのカーソルではありません。</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve">
          <source>Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in <ph id="ph1">[!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)]</ph> programming.</source>
          <target state="translated">代わりに、いくつかの可能な入力に関連するデバイスまたはの概念に関連する画面上のグラフィカル表示を宣言するオブジェクトは、このコンテキストでのカーソル<ph id="ph1">[!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)]</ph>プログラミングします。</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve">
          <source>That object is represented by the &lt;xref:System.Windows.Input.Cursor&gt; class in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">そのオブジェクトがによって表される、&lt;xref:System.Windows.Input.Cursor&gt;クラス<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>&lt;/xref:System.Windows.Input.Cursor&gt;。</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>入力システムでは、マウス ポインターの画面上の位置を表す場合は、このカーソルを変更することができます。</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve">
          <source>You can use predefined values from the &lt;xref:System.Windows.Input.Cursors&gt; enumeration, or you can declare a custom cursor as an image file.</source>
          <target state="translated">定義済みの値を使用することができます、&lt;xref:System.Windows.Input.Cursors&gt;列挙型、または画像ファイルとしてカスタム カーソルを宣言できます&lt;/xref:System.Windows.Input.Cursors&gt;。</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve">
          <source>Listening for the QueryCursor event is not an efficient technique for cursor management.</source>
          <target state="translated">QueryCursor のイベントのリッスンがカーソル管理の効率的な方法です。</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve">
          <source>Instead, each element should define its own cursor behavior with &lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt; and &lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;.</source>
          <target state="translated">代わりに、各要素が&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;。&lt;/xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;&lt;/xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;とそれぞれのカーソル動作を定義する必要があります。</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve">
          <source>You should only rely on QueryCursor if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</source>
          <target state="translated">WPF フレームワーク レベルの基本要素を使用していないまたはで特別な状況で要素ごとの単位でのカーソルの動作を定義するがニーズに合わない場合は、のみ QueryCursor に依存する必要があります。</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve">
          <source>For more information on implementing cursor behavior in response to QueryCursor, see &lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;.</source>
          <target state="translated">QueryCursor への応答のカーソルの動作を実装する方法については、 &lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;。&lt;/xref:System.Windows.Input.QueryCursorEventHandler&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_QueryCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.QueryCursorEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_QueryCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.QueryCursorEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;|     -、定義済みの対応するトンネリング イベントはありません&lt;/xref:System.Windows.Input.QueryCursorEventHandler&gt;&lt;/xref:System.Windows.UIElement.QueryCursorEvent&gt;。</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnQueryCursor%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnQueryCursor%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnQueryCursor%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.QueryCursor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.QueryCursor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve">
          <source>Raises a specific routed event.</source>
          <target state="translated">特定のルーティング イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to be raised is identified within the <bpt id="p2">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance that is provided (as the &lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt; property of that event data).</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>内で識別されるときに生成される、 <bpt id="p2">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>提供されているインスタンス (として、&lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;そのイベント データのプロパティ).&lt;/xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because &lt;xref:System.Windows.RoutedEventArgs&gt; derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</source>
          <target state="translated"><ph id="ph1">`e`</ph>ルーティング イベントのすべてのデータの共通の基本型として型指定されたパラメーターですただし、ため発生するイベントに使用される最も固有のイベント データの種類として、イベント データを指定してください&lt;xref:System.Windows.RoutedEventArgs&gt;派生クラスが発生すると、特定のイベントは、特定の実際のデータ プロパティが含まれています。&lt;/xref:System.Windows.RoutedEventArgs&gt; 。</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.RoutedEventArgs&gt; is not just the state properties for the event; it also identifies which routed event to raise.</source>
          <target state="translated">&lt;xref:System.Windows.RoutedEventArgs&gt;イベントの状態のプロパティだけではありません。ルーティング イベントを発生させるも識別します。&lt;/xref:System.Windows.RoutedEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve">
          <source>This event-raising pattern and the routed event data both differ from <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.</source>
          <target state="translated">このイベント発生パターンと、ルーティングされたイベント データの両方が異なる<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>イベントに関連するプロパティを通常だけが含まれるイベントやデータのクラスです。</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data and also identifies the event to raise.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント データを格納しても発生させるイベントを識別します。</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve">
          <source>Releases all captured touch devices from this element.</source>
          <target state="translated">この要素からすべてのキャプチャされたタッチ デバイスを解放します。</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve">
          <source>Releases the mouse capture, if this element held the capture.</source>
          <target state="translated">この要素には、キャプチャが保持されている場合は、マウスのキャプチャを解放します。</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">この要素がキャプチャを保持していない場合は、このメソッドを呼び出すも効果はありません。</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve">
          <source>Consider checking the value of &lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt; before you call this method.</source>
          <target state="translated">値を確認してください&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;このメソッドを呼び出す前にします&lt;/xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve">
          <source>Releases the stylus device capture, if this element held the capture.</source>
          <target state="translated">この要素には、キャプチャが保持されている場合は、スタイラス デバイスのキャプチャを解放します。</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">この要素がキャプチャを保持していない場合は、このメソッドを呼び出すも効果はありません。</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve">
          <source>Consider checking the value of &lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt; before you call this method.</source>
          <target state="translated">値を確認してください&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;このメソッドを呼び出す前にします&lt;/xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve">
          <source>Attempts to release the specified touch device from this element.</source>
          <target state="translated">この要素から指定したタッチ デバイスを解放しようとしています。</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve">
          <source>The device to release.</source>
          <target state="translated">解放するデバイスです。</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the touch device is released; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>タッチ デバイスを放した場合です。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve">
          <source>Removes the specified routed event handler from this element.</source>
          <target state="translated">この要素から指定したルーティング イベント ハンドラーを削除します。</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve">
          <source>The most common scenario for using this <ph id="ph1">[!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> level.</source>
          <target state="translated">これを使用するための最も一般的なシナリオ<ph id="ph1">[!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)]</ph>を実装する場合は、<ph id="ph2">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>カスタム ルーティング イベントのハンドラーの削除」ロジックを実装するときに特に関連付けられている「ラッパー」イベント、<ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>レベル。</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve">
          <source>The example that follows this remarks section illustrates this scenario.</source>
          <target state="translated">これを次の例「解説」セクションでは、このシナリオを示しています。</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve">
          <source>Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.</source>
          <target state="translated">このメソッドを呼び出しても何も起こりませんメソッドの呼び出しの入力パラメーターに一致する条件で登録されたハンドラーがない場合。</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve">
          <source>If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</source>
          <target state="translated">数より多い場合に、イベント ハンドラーのストアの削除に最初のハンドラーのみ、条件に一致する&amp;1; つのハンドラーがアタッチされます。</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve">
          <source>This behavior is consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id="ph2">`-=`</ph> operator.</source>
          <target state="translated">この動作は整合<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>の動作、<ph id="ph2">`-=`</ph>演算子。</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`routedEvent`</ph> nor <ph id="ph2">`handler`</ph> may be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">どちらも<ph id="ph1">`routedEvent`</ph>も<ph id="ph2">`handler`</ph>あります<ph id="ph3">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve">
          <source>Attempting to provide either value as <ph id="ph1">`null`</ph> will raise an exception.</source>
          <target state="translated">いずれかの値として提供しようとしています。<ph id="ph1">`null`</ph>で例外が発生します。</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve">
          <source>This method ignores the <ph id="ph1">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the &lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt; signature that enables handling of already-handled events.</source>
          <target state="translated">このメソッドは無視、<ph id="ph1">`handledEventsToo`</ph>場合は、ハンドラーが最初に提供されているパラメーターについては、追加、&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;処理済みのイベントの処理を有効に署名します&lt;/xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;。</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve">
          <source>Either type of handler is removed.</source>
          <target state="translated">ハンドラーのいずれかの型が削除されます。</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve">
          <source>The identifier of the routed event for which the handler is attached.</source>
          <target state="translated">ハンドラーがアタッチされているルーティング イベントの識別子。</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve">
          <source>The specific handler implementation to remove from the event handler collection on this element.</source>
          <target state="translated">この要素のイベント ハンドラー コレクションから削除する特定のハンドラー実装。</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve">
          <source>Gets (or sets, but see Remarks) the final render size of this element.</source>
          <target state="translated">取得 (または、セットが、「解説」を参照してください)、最終的なは、この要素サイズを表示します。</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  Do not attempt to set this property, either in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> or in code, if using the WPF framework-level layout system.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; このプロパティは、どちらかに設定しようとはしないで<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>またはコードでは、WPF フレームワーク レベルのレイアウト システムを使用する場合。</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve">
          <source>Nearly all typical application scenarios will use this layout system.</source>
          <target state="translated">ほぼすべての一般的なアプリケーション シナリオでは、このレイアウト システムを使用します。</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve">
          <source>The layout system will not respect sizes set in the RenderSize property directly.</source>
          <target state="translated">サイズ セットを RenderSize プロパティでは、レイアウト システムによって直接は反映されません。</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve">
          <source>The RenderSize property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the &lt;xref:System.Windows.Documents.Adorner&gt; class.</source>
          <target state="translated">RenderSize プロパティが特定の WPF コア レベルの意図的に、&lt;xref:System.Windows.Documents.Adorner&gt;クラス&lt;/xref:System.Windows.Documents.Adorner&gt;のサポートなど、一般的なレイアウトのプロトコルを回避するケースをブリッジを有効にする場合にのみ書き込み可能な宣言します。</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve">
          <source>This property can be used for checking the applicable render size within layout system overrides such as &lt;xref:System.Windows.UIElement.OnRender%2A&gt; or &lt;xref:System.Windows.UIElement.GetLayoutClip%2A&gt;.</source>
          <target state="translated">レイアウト システム内で適用可能な表示サイズをオーバーライド&lt;xref:System.Windows.UIElement.OnRender%2A&gt;または&lt;xref:System.Windows.UIElement.GetLayoutClip%2A&gt;。&lt;/xref:System.Windows.UIElement.GetLayoutClip%2A&gt;&lt;/xref:System.Windows.UIElement.OnRender%2A&gt;などの確認のこのプロパティを使用することができます。</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve">
          <source>A more common scenario is handling the &lt;xref:System.Windows.FrameworkElement.SizeChanged&gt; event with the class handler override or the &lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt; event.</source>
          <target state="translated">一般的なシナリオの処理、&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;クラス ハンドラーでイベントをオーバーライドまたは&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;イベント&lt;/xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;&lt;/xref:System.Windows.FrameworkElement.SizeChanged&gt;。</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_RenderSize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_RenderSize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML テキストの使用方法</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve">
          <source>The rendered size for this element.</source>
          <target state="translated">この要素の描画のサイズ。</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve">
          <source>Gets or sets transform information that affects the rendering position of this element.</source>
          <target state="translated">取得またはこの要素の描画位置に影響する変換情報を設定します。</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve">
          <source>A render transform does not regenerate layout size or render size information.</source>
          <target state="translated">描画変換レイアウトのサイズを再生成またはしませんサイズ情報を表示します。</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve">
          <source>Render transforms are typically intended for animating or applying a temporary effect to an element.</source>
          <target state="translated">レンダリングの変換は通常アニメーションや要素に一時的な効果を適用するためのものです。</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve">
          <source>For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">たとえば、要素が拡大表示時マウス上、またはの部分に目を描画する負荷に重点を置いて、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_RenderTransform"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.RenderTransformProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_RenderTransform"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.RenderTransformProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.RenderTransformProperty&gt;</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve">
          <source>Describes the specifics of the desired render transform.</source>
          <target state="translated">必要な描画変換の詳細について説明します。</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Transform.Identity%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">既定値は<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Media.Transform.Identity%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve">
          <source>Gets or sets the center point of any possible render transform declared by &lt;xref:System.Windows.UIElement.RenderTransform*&gt;, relative to the bounds of the element.</source>
          <target state="translated">取得または設定によって宣言されるすべての使用可能な表示変換の中心点&lt;xref:System.Windows.UIElement.RenderTransform*&gt;、要素の境界に相対パス&lt;/xref:System.Windows.UIElement.RenderTransform*&gt;。</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve">
          <source>RenderTransformOrigin has a somewhat nonstandard use of the &lt;xref:System.Windows.Point&gt; structure value, in that the &lt;xref:System.Windows.Point&gt; does not represent an absolute location in a coordinate system.</source>
          <target state="translated">RenderTransformOrigin が多少標準を使用して、&lt;xref:System.Windows.Point&gt;構造体の値を&lt;xref:System.Windows.Point&gt;座標システムで絶対位置を表していません&lt;/xref:System.Windows.Point&gt;&lt;/xref:System.Windows.Point&gt;。</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve">
          <source>Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.</source>
          <target state="translated">代わりに、0 ~ 1 の間の値は、それぞれの x、y 軸の現在の要素の範囲の要素として解釈されます。</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve">
          <source>For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.</source>
          <target state="translated">たとえば、(0.5,0.5) は、要素上で中央揃えにする描画変換が発生 (1,&amp;1;) または配置描画変換下部にある要素の右上隅です。</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Double.NaN&gt; is not an accepted value.</source>
          <target state="translated">&lt;xref:System.Double.NaN&gt;許容される値ではありません。&lt;/xref:System.Double.NaN&gt;</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve">
          <source>Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.</source>
          <target state="translated">0 と 1 以外の値もが受け入れられ、その他の型にはまらない変換効果になります。</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve">
          <source>For instance, if you set RenderTransformOrigin to be (5,5), and then apply a &lt;xref:System.Windows.Media.RotateTransform&gt;, the rotation point will be well outside the bounds of the element itself.</source>
          <target state="translated">たとえば、(5,5) を適用し、RenderTransformOrigin を設定するかどうか、 &lt;xref:System.Windows.Media.RotateTransform&gt;、回転のポイントは、要素自体の境界の外側にもなります&lt;/xref:System.Windows.Media.RotateTransform&gt;。</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve">
          <source>The transform will spin your element around in a big circle that originates beyond bottom right.</source>
          <target state="translated">変換には、右下を超える発信される大規模な円で囲んだ中心、要素が回転されます。</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve">
          <source>The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.</source>
          <target state="translated">原点可能性がありますにどこかにその親要素内してでした可能性のある可能性のあるフレームまたはビューからです。</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve">
          <source>Negative point values are similar, these will go beyond the top left bounds.</source>
          <target state="translated">負の値のポイントの値は似ていますが、これらは左境界を超えます。</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve">
          <source>Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.</source>
          <target state="translated">レンダリング トランス フォームのレイアウトに影響しない通常を使用して、アニメーションや要素に一時的な効果を適用します。</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_RenderTransformOrigin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;object RenderTransformOrigin="xOrigin, yOrigin"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_RenderTransformOrigin"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;object&gt;     &lt;object.RenderTransformOrigin&gt;       &lt;Point X=" xOrigin " Y=" yOrigin "/&gt;     &lt;/object.RenderTransformOrigin&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_RenderTransformOrigin"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p4">*</bpt>xOrigin<ept id="p4">*</ept>    The horizontal origin factor.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_RenderTransformOrigin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML 属性の使用<ph id="ph1">```   &lt;object RenderTransformOrigin="xOrigin, yOrigin"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_RenderTransformOrigin"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## XAML プロパティ要素の使用<ph id="ph2">```   &lt;object&gt;     &lt;object.RenderTransformOrigin&gt;       &lt;Point X=" xOrigin " Y=" yOrigin "/&gt;     &lt;/object.RenderTransformOrigin&gt;   &lt;/object&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_RenderTransformOrigin"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> ## XAML 値<bpt id="p4">*</bpt>xOrigin<ept id="p4">*</ept>水平の中心点の係数。            </target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve">
          <source>This is typically given as a value between 0 and 1.</source>
          <target state="translated">これは通常、0 ~ 1 の値として指定します。</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>yOrigin<ept id="p1">*</ept>    The vertical origin factor.</source>
          <target state="translated"><bpt id="p1">*</bpt><ept id="p1">*</ept>垂直の中心点の係数。</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve">
          <source>This is typically given as a value between 0 and 1.</source>
          <target state="translated">これは通常、0 ~ 1 の値として指定します。</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_RenderTransformOrigin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.RenderTransformOriginProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_RenderTransformOrigin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.RenderTransformOriginProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.RenderTransformOriginProperty&gt;</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve">
          <source>The value that declares the render transform.</source>
          <target state="translated">描画変換を宣言する値。</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve">
          <source>The default value is a <bpt id="p1">&lt;xref href="System.Windows.Point"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with coordinates (0,0).</source>
          <target state="translated">既定値は、 <bpt id="p1">&lt;xref href="System.Windows.Point"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>座標 (0,&amp;0;) を使用しています。</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.RenderTransformOrigin*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.RenderTransformOrigin*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.RenderTransformOrigin*&gt;。</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.RenderTransform*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.RenderTransform*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.RenderTransform*&gt;。</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.UIElement.CommandBindings*&gt; property on instances of this class.</source>
          <target state="translated">シリアル化プロセスが、&lt;xref:System.Windows.UIElement.CommandBindings*&gt;このクラスのインスタンスのプロパティ&lt;/xref:System.Windows.UIElement.CommandBindings*&gt;の内容をシリアル化する必要かどうかを返します</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve">
          <source>This will return <ph id="ph1">`true`</ph> if &lt;xref:System.Windows.UIElement.CommandBindings%2A&gt; is locally set.</source>
          <target state="translated">これは、戻り値は<ph id="ph1">`true`</ph>場合&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;ローカルに設定します&lt;/xref:System.Windows.UIElement.CommandBindings%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the &lt;xref:System.Windows.UIElement.CommandBindings%2A&gt; property does not have a simple default value.</source>
          <target state="translated">これは、<ph id="ph1">`ShouldSerialize`</ph>ためメソッドが用意されて、&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;プロパティには、単純な既定値にありません&lt;/xref:System.Windows.UIElement.CommandBindings%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">このメソッドは、既定値から、プロパティが変更されたかどうかを示します。</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">デザイナーを開発または&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;を組み込む独自のコントロールを開発する場合に通常、このメソッドが呼び出す</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>ShouldSerialize メソッドとメソッドのリセットを既定値を定義する<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.UIElement.CommandBindings*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、&lt;xref:System.Windows.UIElement.CommandBindings*&gt;プロパティの値が、それ以外のシリアル化する必要があります<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.UIElement.CommandBindings*&gt; 。</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.UIElement.InputBindings*&gt; property on instances of this class.</source>
          <target state="translated">シリアル化プロセスが、&lt;xref:System.Windows.UIElement.InputBindings*&gt;このクラスのインスタンスのプロパティ&lt;/xref:System.Windows.UIElement.InputBindings*&gt;の内容をシリアル化する必要かどうかを返します</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve">
          <source>This will return <ph id="ph1">`true`</ph> if &lt;xref:System.Windows.UIElement.InputBindings%2A&gt; is locally set.</source>
          <target state="translated">これは、戻り値は<ph id="ph1">`true`</ph>場合&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;ローカルに設定します&lt;/xref:System.Windows.UIElement.InputBindings%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the &lt;xref:System.Windows.UIElement.InputBindings%2A&gt; property does not have a simple default value.</source>
          <target state="translated">これは、<ph id="ph1">`ShouldSerialize`</ph>ためメソッドが用意されて、&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;プロパティには、単純な既定値にありません&lt;/xref:System.Windows.UIElement.InputBindings%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">このメソッドは、既定値から、プロパティが変更されたかどうかを示します。</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">デザイナーを開発または&lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;を組み込む独自のコントロールを開発する場合に通常、このメソッドが呼び出す</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>ShouldSerialize メソッドとメソッドのリセットを既定値を定義する<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.UIElement.InputBindings*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、&lt;xref:System.Windows.UIElement.InputBindings*&gt;プロパティの値が、それ以外のシリアル化する必要があります<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.UIElement.InputBindings*&gt; 。</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.</source>
          <target state="translated">取得またはこの要素のレンダリングがレンダリング時にデバイスに固有のピクセルの設定を使用するかどうかを決定する値を設定します。</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve">
          <source>You can set this property to <ph id="ph1">`true`</ph> on your root element to enable pixel snap rendering throughout the UI.</source>
          <target state="translated">このプロパティを設定することができます<ph id="ph1">`true`</ph>ピクセルを有効にする、ルート要素にスナップ UI 全体にわたって表示します。</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve">
          <source>For devices operating at greater than 96 <ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)]</ph>, pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.</source>
          <target state="translated">デバイスで 96 より大きい<ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)]</ph>、ピクセル スナップ レンダリングには、単一の実線の近くのアンチエイリアシング visual 成果物が最小限に抑えることができます。</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve">
          <source>When inherited by &lt;xref:System.Windows.FrameworkElement&gt; or any possible derived classes, &lt;xref:System.Windows.FrameworkElement&gt; overrides the metadata for this dependency property to set the &lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; metadata property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">継承された場合&lt;xref:System.Windows.FrameworkElement&gt;可能性のあるすべての派生クラス、または&lt;xref:System.Windows.FrameworkElement&gt;を設定するには、この依存関係プロパティのメタデータを上書き、&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;メタデータ プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;&lt;/xref:System.Windows.FrameworkElement&gt;&lt;/xref:System.Windows.FrameworkElement&gt;。</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve">
          <source>What this achieves is that only the outermost element in a subtree needs to specify SnapsToDevicePixels as <ph id="ph1">`true`</ph>, and all child elements of that subtree will then report SnapsToDevicePixels as <ph id="ph2">`true`</ph> and will have the SnapsToDevicePixels visual effect.</source>
          <target state="translated">サブツリーの最も外側の要素だけが SnapsToDevicePixels としてを指定する必要があることがこの場合実現<ph id="ph1">`true`</ph>とそのサブツリーのすべての子要素として SnapsToDevicePixels、報告<ph id="ph2">`true`</ph>SnapsToDevicePixels 視覚効果を必要とします。</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_SnapsToDevicePixels"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.SnapsToDevicePixelsProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_SnapsToDevicePixels"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.SnapsToDevicePixelsProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.SnapsToDevicePixelsProperty&gt;</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element should render in accordance to device pixels; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>デバイスのピクセルに従って要素を描画する場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve">
          <source>The default as declared on <bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定で宣言されている<bpt id="p1">&lt;xref href="System.Windows.UIElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>は<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.SnapsToDevicePixels*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.SnapsToDevicePixels*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.SnapsToDevicePixels*&gt;。</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">ポインターがこの要素上でスタイラス ボタンが押されたときに発生します。</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that StylusButtonDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;StylusButtonDown が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusButtonDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusButtonDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusButtonDownEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusButtonDown&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusButtonDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">ポインターがこの要素上でスタイラス ボタンが離されたときに発生します。</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that StylusButtonUp is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;StylusButtonUp 一部であるように、このクラスのイベントを接続されているクラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素としては、継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusButtonUp イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusButtonUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusButtonUpEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusButtonUp&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusButtonUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus touches the digitizer while the stylus is over this element.</source>
          <target state="translated">スタイラスがこの要素上でスタイラスがデジタイザーに触れたときに発生します。</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event for this class, so that StylusDown is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;StylusDown が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusDown イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusDownEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusDown&gt; &lt;/xref:System.Windows.Input.StylusDownEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus enters the bounds of this element.</source>
          <target state="translated">スタイラスがこの要素の境界に入ったときに発生します。</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve">
          <source>StylusEnter is a  that uses the direct event handling routing strategy.</source>
          <target state="translated">StylusEnter は、直接のイベントのルーティング方法を処理を使用します。</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve">
          <source>Although StylusEnter tracks when the stylus enters the bounds of an element, this event more literally reports that the &lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt; property value has changed from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph> on this element.</source>
          <target state="translated">StylusEnter を追跡、スタイラスが要素の境界に入ったときに、このイベントより文字どおりを報告している、&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;からプロパティ値が変更された<ph id="ph1">`false`</ph>を<ph id="ph2">`true`</ph>この要素上です&lt;/xref:System.Windows.UIElement.IsStylusOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event for this class, so that StylusEnter is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;StylusEnter が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusEnter event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusEnter イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusEnterEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnStylusEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusEnterEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnStylusEnter%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusEnter%2A&gt;&lt;/xref:System.Windows.Input.StylusEventHandler&gt;&lt;/xref:System.Windows.UIElement.StylusEnterEvent&gt;。</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusEnter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">実際には、デジタイザーに触れることがなく要素上でスタイラスを動かしたときに発生します。</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that StylusInAirMove is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;なく stylusinairmove イベントが一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">なく stylusinairmove イベントのイベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusInAirMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusInAirMoveEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusInAirMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusInAirMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusInAirMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">スタイラスがこの要素上で検出されるまでデジタイザーに近づいたときに発生します。</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event for this class, so that StylusInRange is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;StylusInRange が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusInRange イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusInRangeEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusInRangeEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusInRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusInRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusInRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusInRange%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusInRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusInRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusInRange"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus leaves the bounds of the element.</source>
          <target state="translated">スタイラスが要素の境界から出たときに発生します。</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve">
          <source>StylusLeave is a  that uses the direct event handling routing strategy.</source>
          <target state="translated">StylusLeave は、直接のイベントのルーティング方法を処理を使用します。</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">ルート; 直接ルーティングされたイベントは発生しません代わりが処理される同じ要素では、発生します。</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">ただし、スタイルでのイベント トリガーなどのルーティング イベントの動作の他の側面を有効にする、操作を行います。</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve">
          <source>Although StylusLeave tracks when the stylus leaves the bounds of an element, this event more literally reports that the &lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt; property value has changed from <ph id="ph1">`true`</ph> to <ph id="ph2">`false`</ph> on this element.</source>
          <target state="translated">StylusLeave を追跡スタイラスが要素の境界から出たときに、このイベントより文字どおりを報告している、&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;からプロパティ値が変更された<ph id="ph1">`true`</ph>に<ph id="ph2">`false`</ph>この要素上です&lt;/xref:System.Windows.UIElement.IsStylusOver%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event for this class, so that StylusLeave is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;StylusLeave が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusLeave event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusLeave イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusLeaveEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   Override &lt;xref:System.Windows.UIElement.OnStylusLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusLeaveEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -オーバーライド&lt;xref:System.Windows.UIElement.OnStylusLeave%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusLeave%2A&gt;&lt;/xref:System.Windows.Input.StylusEventHandler&gt;&lt;/xref:System.Windows.UIElement.StylusLeaveEvent&gt;。</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusLeave"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over this element.</source>
          <target state="translated">この要素上でスタイラスを動かしたときに発生します。</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve">
          <source>The stylus must move while on the digitizer to raise this event.</source>
          <target state="translated">スタイラスがデジタイザーにこのイベントを発生時に移動する必要があります。</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is raised instead.</source>
          <target state="translated">それ以外の場合、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusInAirMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が代わりに発生します。</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event for this class, so that StylusMove is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;StylusMove 一部であるように、このクラスのイベントを接続されているクラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素としては、継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusMove イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusMoveEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</source>
          <target state="translated">スタイラスがこの要素上で、検出されたデジタイザーから離れすぎているときに発生します。</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that StylusOutOfRange is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;StylusOutOfRange が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusOutOfRange イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusOutOfRangeEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusOutOfRangeEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusOutOfRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusOutOfRange"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve">
          <source>Gets a collection of all stylus plug-in (customization) objects associated with this element.</source>
          <target state="translated">この要素に関連付けられているすべてのスタイラス プラグイン (カスタマイズ) オブジェクトのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve">
          <source>An example of a control that populates this collection is &lt;xref:System.Windows.Controls.InkCanvas&gt;.</source>
          <target state="translated">このコレクションに追加されるコントロールの例としては&lt;xref:System.Windows.Controls.InkCanvas&gt;。&lt;/xref:System.Windows.Controls.InkCanvas&gt;</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.InkCanvas&gt; adds the &lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt; as a collection item, which enables the &lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt; to interact with stylus input and produce the unique rendering in response to stylus driven events.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.InkCanvas&gt;追加、&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;これにより、コレクション項目として、&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;スタイラス入力と対話し、スタイラス イベント駆動型への応答で一意のレンダリングを生成します&lt;/xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;&lt;/xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;。&lt;/xref:System.Windows.Controls.InkCanvas&gt;</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve">
          <source>For information on creating custom plug-ins that can receive and interpret stylus input, see <bpt id="p1">[</bpt>Intercepting Input from the Stylus<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">カスタム プラグインを作成する方法については、受信し、スタイラス入力の解釈を参照してください。<bpt id="p1">[</bpt>スタイラスからの入力をインターセプトし、<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve">
          <source>The collection of stylus plug-ins, as a specialized collection.</source>
          <target state="translated">スタイラス プラグインの特殊化されたコレクションとしてのコレクション。</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve">
          <source>For more information about stylus gestures, see &lt;xref:System.Windows.Input.SystemGesture&gt;.</source>
          <target state="translated">スタイラス ジェスチャの詳細については、 &lt;xref:System.Windows.Input.SystemGesture&gt;。&lt;/xref:System.Windows.Input.SystemGesture&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that StylusSystemGesture is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;StylusSystemGesture 一部であるように、このクラスのイベントを接続されているクラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素としては、継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusSystemGesture イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusSystemGestureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusSystemGestureEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt; &lt;/xref:System.Windows.Input.StylusSystemGestureEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusSystemGestureEvent&gt;</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusSystemGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve">
          <source>Occurs when the user raises the stylus off the digitizer while it is over this element.</source>
          <target state="translated">この要素上で、ユーザーがスタイラスをデジタイザーから離れたときに発生します。</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event for this class, so that StylusUp is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;StylusUp が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">StylusUp イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">タッチ、マウス、およびスタイラス入力は、特定のリレーションシップで存在します。</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>入力概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.StylusUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewStylusUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.StylusUpEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewStylusUp&gt;.&lt;/xref:System.Windows.UIElement.PreviewStylusUp&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.UIElement.StylusUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnStylusUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnStylusUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnStylusUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.StylusUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">この要素は、デバイスに依存しない方法でテキストを取得したときに発生します。</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This event might already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; このイベントは、複合コントロールの内部実装によって処理済みとして既にマーク可能性があります。</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve">
          <source>See Remark below.</source>
          <target state="translated">以下の解説を参照してください。</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve">
          <source>The TextInput event may already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated">複合コントロールの内部実装によって処理される、TextInput イベントをマーク既に可能性があります。</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve">
          <source>For example, a &lt;xref:System.Windows.Controls.TextBox&gt; is a composited control where the TextInput event is already marked as handled; within its compositing.</source>
          <target state="translated">たとえば、&lt;xref:System.Windows.Controls.TextBox&gt;場所 TextInput イベントは既に設定されて処理済みとして以外の場合は、合成内で複合コントロールは、&lt;/xref:System.Windows.Controls.TextBox&gt; 。</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve">
          <source>Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</source>
          <target state="translated">コントロールは、コントロールがいくつかの種類のコントロールに特別な意味を持つものとして、方向キーなどの入力を解釈する必要があります。</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve">
          <source>If you use &lt;xref:System.Windows.UIElement.PreviewTextInput&gt; as the event where you attach handlers for text input, you may receive better results.</source>
          <target state="translated">使用する場合&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;テキスト入力用のハンドラーをアタッチするイベント、としてより良い結果を受け取ることがあります&lt;/xref:System.Windows.UIElement.PreviewTextInput&gt;。</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve">
          <source>This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</source>
          <target state="translated">この手法は、コントロールの複合ハンドル済みとしては、このイベントをマークが既にあり、ハンドラーがイベント ルート上でイベントを受信できないように、ほとんどの場合を回避できます。</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve">
          <source>The TextInput event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated">TextInput イベントは、コンポーネントまたはデバイスに依存しない方法でテキスト入力にリッスンするようにアプリケーションを使用します。</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve">
          <source>The keyboard is the primary means of TextInput, but speech, handwriting, and other input devices can also raise TextInput.</source>
          <target state="translated">キーボードは TextInput が、音声の手書きの主な手段とも、他の入力デバイスは TextInput を生成する可能性ができます。</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</source>
          <target state="translated">キーの組み合わせが原因: 既定のキーボードまたは入力方式エディターから — 複数のキー イベントが&amp;1; つのテキスト入力イベントを発生させる可能性があります。</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event for this class, so that TextInput is part of the class members list when &lt;xref:System.Windows.UIElement&gt; is inherited as a base element.</source>
          <target state="translated">このイベントのエイリアスを作成する、 &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;TextInput が一部になるように、このクラスのイベントをアタッチ クラスのメンバー一覧をいつ&lt;xref:System.Windows.UIElement&gt;基本要素として継承します&lt;/xref:System.Windows.UIElement&gt;&lt;/xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the TextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">TextInput イベントに関連付けられているイベント ハンドラーが、基になるに関連付けられている&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;添付イベントと同じイベント データ インスタンスを受信します&lt;/xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.TextInputEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewTextInput&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.TextInputEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;.&lt;/xref:System.Windows.UIElement.PreviewTextInput&gt; &lt;/xref:System.Windows.Input.TextCompositionEventHandler&gt; &lt;/xref:System.Windows.UIElement.TextInputEvent&gt;</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnTextInput%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnTextInput%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnTextInput%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TextInput"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TextInput"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">ルーティング イベントの識別子は、ルーティングされたイベントが登録されているときに作成されます。</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">これらの識別子には、識別名、所有者型、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">これらの識別子を使用すると、クラス ハンドラーを追加します。</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">ルーティング イベントの登録の詳細については、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、 &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">この要素の上に指が画面に触れると発生します。</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve">
          <source>By default, the &lt;xref:System.Windows.UIElement.PreviewTouchDown&gt; and TouchDown events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">既定では、&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;し、指が画面に触れるし、移動するまで接地イベントは発生しません&lt;/xref:System.Windows.UIElement.PreviewTouchDown&gt;。</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a &lt;xref:System.Windows.Input.Stylus&gt;.</source>
          <target state="translated">移動することがなく保持したりする画面に指を押すと、キーを押して発生して&lt;xref:System.Windows.Input.Stylus&gt;。&lt;/xref:System.Windows.Input.Stylus&gt;の動作を保持</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">プレス アンド ホールド動作は、マウスの右クリックに相当します。</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve">
          <source>To cause the &lt;xref:System.Windows.UIElement.PreviewTouchDown&gt; and TouchDown events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <ph id="ph1">`false`</ph> for this element.</source>
          <target state="translated">により、&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;接地イベントは、画面に触れるとすぐにも発生を設定し、&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;添付プロパティ<ph id="ph1">`false`</ph>この要素の&lt;/xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;&lt;/xref:System.Windows.UIElement.PreviewTouchDown&gt;。</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.TouchDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.TouchDownEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     対応するトンネル イベントは&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;.&lt;/xref:System.Windows.UIElement.PreviewTouchDown&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.UIElement.TouchDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnTouchDown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchDown"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve">
          <source>Occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">タッチから移動するときに発生するこの要素の境界内の外部です。</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve">
          <source>This event is always raised, whether or not the touch device is captured to this element.</source>
          <target state="translated">このイベントはタッチ デバイスがこの要素にキャプチャされるかどうか常に発生します。</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.TouchEnterEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.TouchEnterEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     -オーバーライド&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnTouchEnter%2A&gt;&lt;/xref:System.Windows.Input.TouchEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.TouchEnterEvent&gt;。</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchEnter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are captured to this element.</source>
          <target state="translated">この要素にキャプチャされているすべてのタッチ デバイスを取得します。</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are captured to this element.</source>
          <target state="translated">列挙体<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>をこの要素にキャプチャされているオブジェクト。</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">そのビジュアル ツリー内には、この要素にキャプチャされているすべてのタッチ デバイスまたはすべての子要素を取得します。</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">列挙体<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素またはそのビジュアル ツリー内のすべての子要素にキャプチャされているオブジェクト。</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are over this element.</source>
          <target state="translated">この要素の上にあるすべてのタッチ デバイスを取得します。</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are over this element.</source>
          <target state="translated">列挙体<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素の上にあるオブジェクト。</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are over this element or any child elements in its visual tree.</source>
          <target state="translated">そのビジュアル ツリーで、この要素上では、すべてのタッチ デバイスまたはすべての子要素を取得します。</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are over this element or any child elements in its visual tree.</source>
          <target state="translated">列挙体<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この要素またはそのビジュアル ツリー内のすべての子要素の上にあるオブジェクト。</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve">
          <source>Occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">タッチから移動するときに発生するこの要素の境界の外側の内部です。</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve">
          <source>This event is always raised, whether or not the touch device is captured to this element.</source>
          <target state="translated">このイベントはタッチ デバイスがこの要素にキャプチャされるかどうか常に発生します。</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.TouchLeaveEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.TouchLeaveEvent&gt;|  |ルーティング方法 |直接 |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     -オーバーライド&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnTouchLeave%2A&gt;&lt;/xref:System.Windows.Input.TouchEventArgs&gt;&lt;/xref:System.EventHandler%601&gt;&lt;/xref:System.Windows.UIElement.TouchLeaveEvent&gt;。</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchLeave"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">この要素の上に指が画面に指を動かしたときに発生します。</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.TouchMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.TouchMoveEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     対応するトンネル イベントは&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;.&lt;/xref:System.Windows.UIElement.PreviewTouchMove&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.UIElement.TouchMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnTouchMove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchMove"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">この要素の上に指が画面から離れる指が発生したときに発生します。</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.TouchUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding tunneling event is &lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## イベント情報をルーティング | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.TouchUpEvent&gt;|  |ルーティング方法 |バブル |  |デリゲート |&lt;xref:System.EventHandler%601&gt;型&lt;xref:System.Windows.Input.TouchEventArgs&gt;|。     対応する-トンネリング イベントは&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;.&lt;/xref:System.Windows.UIElement.PreviewTouchUp&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.UIElement.TouchUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-オーバーライド&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;派生クラスでは、このイベントに対するクラス処理を実装する&lt;/xref:System.Windows.UIElement.OnTouchUp%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">識別、 <bpt id="p1">&lt;xref href="System.Windows.UIElement.TouchUp"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ルーティングされたイベント。</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve">
          <source>Translates a point relative to this element to coordinates that are relative to the specified element.</source>
          <target state="translated">この要素に指定された要素に対する相対座標を相対的に変換します。</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve">
          <source>Passing <ph id="ph1">`null`</ph> for <ph id="ph2">`relativeTo`</ph> is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.</source>
          <target state="translated">渡す<ph id="ph1">`null`</ph>の<ph id="ph2">`relativeTo`</ph>を許可したり、この要素が属する論理ツリーのルート要素に対する相対座標がであることを示します。</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve">
          <source>This method is used for translating hit test point values.</source>
          <target state="translated">このメソッドは、変換に使用ヒット テスト ポイント値。</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve">
          <source>Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.</source>
          <target state="translated">コントロールを作成して、下位レベルの入力を処理する必要がある場合、このメソッドを呼び出すと、主に関連します。</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve">
          <source>If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.</source>
          <target state="translated">既存のコントロールを使用している場合、通常と見なすことできます完成したコントロールが正しく変換済みのヒット テストの結果を報告することです。</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve">
          <source>The point value, as relative to this element.</source>
          <target state="translated">ポイントは、この要素に対して相対的に値します。</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve">
          <source>The element to translate the given point into.</source>
          <target state="translated">指定したポイントに変換する要素。</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve">
          <source>A point value, now relative to the target element rather than this source element.</source>
          <target state="translated">このソース要素ではなく、ターゲット要素に相対的なポイント値。</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve">
          <source>Gets or sets the unique identifier (for localization) for this element.</source>
          <target state="translated">取得またはこの要素の一意の識別子 (ローカライズ用) を設定します。</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve">
          <source>Used by designers to get the <ph id="ph1">`x:Uid`</ph> value (see <bpt id="p1">[</bpt>WPF Globalization and Localization Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> for more information).</source>
          <target state="translated">取得するデザイナーで使用される、<ph id="ph1">`x:Uid`</ph>値 (を参照してください<bpt id="p1">[</bpt>WPF のグローバリゼーションおよびローカリゼーションの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>詳細については)。</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.UidProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_WindowWindowStyle"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.UidProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.UidProperty&gt;</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve">
          <source>A string that is the unique identifier for this element.</source>
          <target state="translated">この要素の一意の識別子を指定する文字列。</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.Uid*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.Uid*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.Uid*&gt;。</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve">
          <source>Ensures that all visual child elements of this element are properly updated for layout.</source>
          <target state="translated">この要素のすべてのビジュアル子要素がレイアウトに正常に更新されることを確認します。</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve">
          <source>When you call this method, elements with &lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;<ph id="ph1">`false`</ph> or &lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;<ph id="ph2">`false`</ph> will call element-specific &lt;xref:System.Windows.UIElement.MeasureCore%2A&gt; and &lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt; methods, which forces layout update, and all computed sizes will be validated.</source>
          <target state="translated">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;を持つ要素は、このメソッドを呼び出すと<ph id="ph1">`false`</ph>または&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;<ph id="ph2">`false`</ph>特定の要素を呼び出す&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;と&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;メソッドで、強制的にレイアウトを更新して、すべての計算されたサイズが検証されます&lt;/xref:System.Windows.UIElement.ArrangeCore%2A&gt;&lt;/xref:System.Windows.UIElement.MeasureCore%2A&gt;&lt;/xref:System.Windows.UIElement.IsArrangeValid%2A&gt;。&lt;/xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve">
          <source>Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.</source>
          <target state="translated">このメソッドを呼び出しても何も起こりませんレイアウトは変更されない場合、またはレイアウトの配置も測定の状態が無効です。</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve">
          <source>However, if layout is invalid in either respect, the UpdateLayout call will redo the entire layout.</source>
          <target state="translated">ただし、レイアウトがいずれかの点では有効でない場合、ページに対して UpdateLayout 呼び出しは、全体のレイアウトをやり直してください。</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve">
          <source>Therefore, you should avoid calling UpdateLayout after each incremental and minor change in the element tree.</source>
          <target state="translated">そのため、要素ツリー内のそれぞれの増分とマイナー変更後のページに対して UpdateLayout を呼び出すことを避ける必要があります。</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve">
          <source>The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.</source>
          <target state="translated">ルートに対する変更を延期して、すべての子要素が有効になるまで、重み付け手法を使用して、パフォーマンスや通貨のバランスを取るアルゴリズムを使用して、遅延方式で、レイアウト システムは要素のレイアウトを実行します。</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve">
          <source>You should only call UpdateLayout if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.</source>
          <target state="translated">どうしても必要な更新のサイズや位置、およびコントロールとする可能性がありますに支障をレイアウト プロパティに対するすべての変更が完了した後にのみ特定する場合にのみ、ページに対して UpdateLayout を呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> visibility of this element.</source>
          <target state="translated">取得または設定、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>この要素を表示します。</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve">
          <source>This is a dependency property.</source>
          <target state="translated">これは、依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve">
          <source>Setting this property affects the value of &lt;xref:System.Windows.UIElement.IsVisible%2A&gt;, which in turn may raise the &lt;xref:System.Windows.UIElement.IsVisibleChanged&gt; event.</source>
          <target state="translated">このプロパティの設定の値に影響を与える&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;が発生する可能性がさらに、&lt;xref:System.Windows.UIElement.IsVisibleChanged&gt;イベント&lt;/xref:System.Windows.UIElement.IsVisibleChanged&gt;&lt;/xref:System.Windows.UIElement.IsVisible%2A&gt;。</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve">
          <source>However, &lt;xref:System.Windows.UIElement.IsVisible%2A&gt; has other factors that influence it, for instance the visibility settings of parents that contain it.</source>
          <target state="translated">ただし、&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;その他の要因をそれが含まれている親の可視性の設定のインスタンスに影響が&lt;/xref:System.Windows.UIElement.IsVisible%2A&gt;</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve">
          <source>Elements where Visibility is not &lt;xref:System.Windows.Visibility&gt; do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.</source>
          <target state="translated">要素の表示が行われていない&lt;xref:System.Windows.Visibility&gt;入力のイベント (またはコマンド) に参加していない、レイアウトの測定または整列パスには影響しません、タブ シーケンス、およびヒット テストで報告されません&lt;/xref:System.Windows.Visibility&gt;。</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve">
          <source>When inherited by &lt;xref:System.Windows.Window&gt; or its derived classes, &lt;xref:System.Windows.Window&gt; redefines the default value of this property to be &lt;xref:System.Windows.Visibility&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Window&gt;または&lt;xref:System.Windows.Window&gt;&lt;xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Visibility&gt;にするには、このプロパティの既定値を再定義&lt;/xref:System.Windows.Window&gt;その派生クラス&lt;/xref:System.Windows.Window&gt;によって継承された場合</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve">
          <source>This has the effect of not running the Measure pass of layout on an initially created &lt;xref:System.Windows.Window&gt;, and &lt;xref:System.Windows.UIElement.RenderSize%2A&gt; returns (0,0).</source>
          <target state="translated">これは、レイアウトの測定パスを最初に作成されたで実行されていないの効果&lt;xref:System.Windows.Window&gt;、および&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;(0,&amp;0;) を返します&lt;/xref:System.Windows.UIElement.RenderSize%2A&gt;&lt;/xref:System.Windows.Window&gt;。</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve">
          <source>For details, see &lt;xref:System.Windows.Window&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Windows.Window&gt;。&lt;/xref:System.Windows.Window&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Controls.Primitives.Popup&gt; also redefines the default value to be &lt;xref:System.Windows.Visibility&gt;, with similar resulting behavior for &lt;xref:System.Windows.Controls.Primitives.Popup&gt; and its derived classes.</source>
          <target state="translated">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;また、既定値を再定義&lt;xref:System.Windows.Visibility&gt;の結果と同様の動作と&lt;xref:System.Windows.Controls.Primitives.Popup&gt;とその派生クラス&lt;/xref:System.Windows.Controls.Primitives.Popup&gt;&lt;/xref:System.Windows.Visibility&gt;。&lt;/xref:System.Windows.Controls.Primitives.Popup&gt;</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Visibility"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.UIElement.VisibilityProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Visibility"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |&lt;xref:System.Windows.UIElement.VisibilityProperty&gt;|  |メタデータ プロパティに設定<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.UIElement.VisibilityProperty&gt;</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve">
          <source>A value of the enumeration.</source>
          <target state="translated">列挙体の値です。</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref href="System.Windows.Visibility"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref href="System.Windows.Visibility"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.UIElement.Visibility*&gt; dependency property.</source>
          <target state="translated">識別、&lt;xref:System.Windows.UIElement.Visibility*&gt;依存関係プロパティ&lt;/xref:System.Windows.UIElement.Visibility*&gt;。</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>