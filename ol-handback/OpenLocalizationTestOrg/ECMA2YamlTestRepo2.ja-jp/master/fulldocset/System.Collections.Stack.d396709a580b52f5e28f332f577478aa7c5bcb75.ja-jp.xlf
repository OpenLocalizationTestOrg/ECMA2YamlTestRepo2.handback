<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d86a014a28c7d85d71d3be809df53d48b1c0214</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Collections.Stack.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72c687772085fd5e4a64bc42f2c69b2cb6dbfde8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cb911518e52431583334a585119d2d8e10ee71f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a simple last-in-first-out (LIFO) non-generic collection of objects.</source>
          <target state="translated">オブジェクトの単純な最後先出し (LIFO) の非ジェネリック コレクションを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For the generic version of this collection, see &lt;xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;.</source>
          <target state="translated">このコレクションの汎用バージョン、 &lt;xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;。&lt;/xref:System.Collections.Generic.Stack%601?displayProperty=fullName&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The capacity of a Stack is the number of elements the Stack can hold.</source>
          <target state="translated">スタックの容量とは、スタックに格納できる要素の数です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As elements are added to a Stack, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">要素がスタックに追加されるため、容量を増やすは自動的に再割り当て、必要に応じて。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Stack.Count%2A&gt; is less than the capacity of the stack, &lt;xref:System.Collections.Stack.Push%2A&gt; is an O(1) operation.</source>
          <target state="translated">場合&lt;xref:System.Collections.Stack.Count%2A&gt;がスタックの容量よりも小さい&lt;xref:System.Collections.Stack.Push%2A&gt;は、o (1) 操作になります&lt;/xref:System.Collections.Stack.Push%2A&gt;&lt;/xref:System.Collections.Stack.Count%2A&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If the capacity needs to be increased to accommodate the new element, &lt;xref:System.Collections.Stack.Push%2A&gt; becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">容量が、新しい要素を格納するためにする必要がある場合&lt;xref:System.Collections.Stack.Push%2A&gt;O になります (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>は&lt;xref:System.Collections.Stack.Count%2A&gt;.&lt;/xref:System.Collections.Stack.Count%2A&gt; &lt;/xref:System.Collections.Stack.Push%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Stack.Pop%2A&gt; is an O(1) operation.</source>
          <target state="translated">&lt;xref:System.Collections.Stack.Pop%2A&gt;o (1) 操作です。&lt;/xref:System.Collections.Stack.Pop%2A&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Stack accepts <ph id="ph1">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated">スタックを受け入れる<ph id="ph1">`null`</ph>有効な値としてでき、重複する要素。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty and has the default initial capacity.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が空で、既定の初期量を備えたクラスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Stack&gt;は要素の数を&lt;xref:System.Collections.Stack&gt;を保持できます&lt;/xref:System.Collections.Stack&gt;&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Stack&gt;、容量を増やすは自動的に内部の配列を再割り当てによる要求どおり&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">コレクションのサイズを推定できる場合の&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したコレクションからコピーされた要素を格納し、コピーされた要素の数と同じ初期量を備えたクラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Stack&gt;は要素の数を&lt;xref:System.Collections.Stack&gt;を保持できます&lt;/xref:System.Collections.Stack&gt;&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Stack&gt;、容量を増やすは自動的に内部の配列を再割り当てによる要求どおり&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">コレクションのサイズを推定できる場合の&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The elements are copied onto the &lt;xref:System.Collections.Stack&gt; in the same order they are read by the &lt;xref:System.Collections.IEnumerator&gt; of the &lt;xref:System.Collections.ICollection&gt;.</source>
          <target state="translated">、&lt;xref:System.Collections.Stack&gt;同じ順序&lt;xref:System.Collections.IEnumerator&gt;&lt;xref:System.Collections.ICollection&gt;。&lt;/xref:System.Collections.ICollection&gt;&lt;/xref:System.Collections.IEnumerator&gt;によって読み取られる順序で&lt;/xref:System.Collections.Stack&gt;要素のコピーします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`col`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>内の要素の数は、<ph id="ph3">`col`</ph>です。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Collections.ICollection&gt; to copy elements from.</source>
          <target state="translated">&lt;xref:System.Collections.ICollection&gt;から要素をコピーする&lt;/xref:System.Collections.ICollection&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;col&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>はクラスを空にして、指定した初期量または既定の初期量、大きい方です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The capacity of a &lt;xref:System.Collections.Stack&gt; is the number of elements that the &lt;xref:System.Collections.Stack&gt; can hold.</source>
          <target state="translated">容量、&lt;xref:System.Collections.Stack&gt;は要素の数を&lt;xref:System.Collections.Stack&gt;を保持できます&lt;/xref:System.Collections.Stack&gt;&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As elements are added to a &lt;xref:System.Collections.Stack&gt;, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">要素が追加されるにつれて、 &lt;xref:System.Collections.Stack&gt;、容量を増やすは自動的に内部の配列を再割り当てによる要求どおり&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">コレクションのサイズを推定できる場合の&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`initialCapacity`</ph>.</source>
          <target state="translated">このコンス トラクターは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">`initialCapacity`</ph>します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The initial number of elements that the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> can contain.</source>
          <target state="translated">最初の要素数を<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>含めることができます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;initialCapacity&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;initialCapacity&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Removes all objects from the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">すべてのオブジェクトを削除、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Stack.Count%2A&gt; is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated">&lt;xref:System.Collections.Stack.Count%2A&gt;0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。&lt;/xref:System.Collections.Stack.Count%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Stack.Count%2A&gt;.&lt;/xref:System.Collections.Stack.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creates a shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">簡易コピーを作成、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">コレクションの簡易コピーは、参照型または値の型が参照先のオブジェクトはコピーしないかどうか、コレクションの要素のみをコピーします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">新しいコレクション内の参照は、元のコレクション内の参照をポイントする同じオブジェクトをポイントします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Stack.Count%2A&gt;.&lt;/xref:System.Collections.Stack.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A shallow copy of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">簡易コピー、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Determines whether an element is in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">要素がであるかどうかを判断、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This method determines equality by calling the &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">このメソッドを呼び出すことで等しいかどうかを判断、&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Object.Equals%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Stack.Count%2A&gt;.&lt;/xref:System.Collections.Stack.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, this method tests for equality by passing the <ph id="ph1">`obj`</ph> argument to the &lt;xref:System.Object.Equals%2A&gt; method of individual objects in the collection.</source>
          <target state="translated">以降、.NET Framework 2.0 では、このメソッドはテスト等しいかどうかを渡すことによって、<ph id="ph1">`obj`</ph>への引数、&lt;xref:System.Object.Equals%2A&gt;コレクション内の個々 のオブジェクトのメソッド&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the &lt;xref:System.Object.Equals%2A&gt; method of the <ph id="ph1">`obj`</ph> argument.</source>
          <target state="translated">以前のバージョンの .NET Framework では、この決定が行われたために、コレクション内の個々 の項目を渡すことを使用して、&lt;xref:System.Object.Equals%2A&gt;のメソッド、<ph id="ph1">`obj`</ph>引数&lt;/xref:System.Object.Equals%2A&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The object to locate in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">内で検索するオブジェクト、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">値を指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> is found in the <bpt id="p3">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to an existing one-dimensional &lt;xref:System.Array&gt;, starting at the specified array index.</source>
          <target state="translated">コピー、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既存の&amp;1; 次元に&lt;xref:System.Array&gt;、指定した配列インデックスから始まります&lt;/xref:System.Array&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to &lt;xref:System.Collections.Stack.Pop%2A&gt;.</source>
          <target state="translated">要素の最後で先出し (LIFO) の順序、 &lt;xref:System.Collections.Stack.Pop%2A&gt;。&lt;/xref:System.Collections.Stack.Pop%2A&gt;への呼び出しの連続してによって返される要素の順序と似ての配列にコピーします。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Stack.Count%2A&gt;.&lt;/xref:System.Collections.Stack.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The one-dimensional &lt;xref:System.Array&gt; that is the destination of the elements copied from <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">1 次元&lt;xref:System.Array&gt;からコピーした要素のコピー先は<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Array&gt; 。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Array&gt; must have zero-based indexing.</source>
          <target state="translated">&lt;xref:System.Array&gt;0 から始まるインデックス番号が必要です&lt;/xref:System.Array&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The zero-based index in <ph id="ph1">`array`</ph> at which copying begins.</source>
          <target state="translated">内の&amp;0; から始まるインデックス<ph id="ph1">`array`</ph>コピーの開始位置。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0 未満です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;array&lt;/code&gt;</ph>多次元です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-or-       The number of elements in the source <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is greater than the available space from <ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> to the end of the destination <ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>.</source>
          <target state="translated">- または - ソース内の要素の数<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>から使用可能な領域より大きくなって<ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>変換先の末尾に<ph id="ph2">&lt;code&gt;array&lt;/code&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The type of the source <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> cannot be cast automatically to the type of the destination <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">ソースの種類<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変換先の型に自動的にキャストすることはできません<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">array</ph><ept id="p2">&lt;/code&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Gets the number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれる要素の数を取得、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The capacity is the number of elements that the &lt;xref:System.Collections.Stack&gt; can store.</source>
          <target state="translated">容量は、要素の数を&lt;xref:System.Collections.Stack&gt;格納できます&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Count is the number of elements that are actually in the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">数は実際に&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;内にある要素の数</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The capacity is always greater than or equal to Count.</source>
          <target state="translated">容量は、常に Count 以上です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If Count exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">数を超えた場合、容量の要素を追加するときに、前の要素をコピーし、新しい要素を追加する前に、内部配列の再割り当てによって、容量は自動的に増加します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得するは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The number of elements contained in the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれる要素の数、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Returns an &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、&lt;xref:System.Collections.IEnumerator&gt;の<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Collections.IEnumerator&gt; 。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>[Visual Basic, C#]       The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">[Visual Basic、C# の場合]      <ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがってを使用して<ph id="ph1">`foreach`</ph>列挙子を直接操作せずにお勧めします。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Reset%2A&gt; also brings the enumerator back to this position.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;列挙子をこの位置に戻さ点もあります。&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>At this position, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">この位置にある&lt;xref:System.Collections.IEnumerator.Current%2A&gt;が定義されていません&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Therefore, you must call &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; to advance the enumerator to the first element of the collection before reading the value of &lt;xref:System.Collections.IEnumerator.Current%2A&gt;.</source>
          <target state="translated">したがって、 &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; &lt;xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.Current%2A&gt; returns the same object until either &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; or &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;いずれかのまで同じオブジェクトを返します&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;または&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;と呼びます&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; sets &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the next element.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;設定&lt;xref:System.Collections.IEnumerator.Current%2A&gt;次の要素にします&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; passes the end of the collection, the enumerator is positioned after the last element in the collection and &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返します<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When the enumerator is at this position, subsequent calls to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; also return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;を返すことも<ph id="ph1">`false`</ph>&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the last call to &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, &lt;xref:System.Collections.IEnumerator.Current%2A&gt; is undefined.</source>
          <target state="translated">最後の呼び出し場合&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;返される<ph id="ph1">`false`</ph>、&lt;xref:System.Collections.IEnumerator.Current%2A&gt;が定義されていません&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To set &lt;xref:System.Collections.IEnumerator.Current%2A&gt; to the first element of the collection again, you can call &lt;xref:System.Collections.IEnumerator.Reset%2A&gt; followed by &lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;再度、コレクションの最初の要素に&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;。&lt;/xref:System.Collections.IEnumerator.MoveNext%2A&gt;続けて&lt;/xref:System.Collections.IEnumerator.Reset%2A&gt;を呼び出すことができます&lt;/xref:System.Collections.IEnumerator.Current%2A&gt;を設定するには</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能とその動作は未定義です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙中にスレッドの安全性を保証するためには、列挙中にコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">読み取りと書き込みの複数のスレッドがアクセスするコレクションを許可するのには、独自に同期を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">An &lt;xref:System.Collections.IEnumerator&gt; for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.&lt;/xref:System.Collections.IEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether access to the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is synchronized (thread safe).</source>
          <target state="translated">アクセスをするかどうかを示す値を取得、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が同期されている (スレッド セーフである)。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Stack&gt;, all operations must be done through the wrapper returned by the &lt;xref:System.Collections.Stack.Synchronized%2A&gt; method.</source>
          <target state="translated">スレッド セーフを確保する、 &lt;xref:System.Collections.Stack&gt;、によって返されるラッパーを介してすべての操作を行う必要があります、&lt;xref:System.Collections.Stack.Synchronized%2A&gt;メソッド&lt;/xref:System.Collections.Stack.Synchronized%2A&gt;&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフなプロシージャ</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the &lt;xref:System.Collections.Stack.SyncRoot%2A&gt; during the entire enumeration.</source>
          <target state="translated">次のコード例を使用してコレクションをロックする方法を示しています、&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;列挙中に&lt;/xref:System.Collections.Stack.SyncRoot%2A&gt;。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)</ept><ept id="p5">]</ept>       Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb)</ept> <ept id="p5">]</ept> o (1) 操作には、このプロパティの値を取得します。    </target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if access to the <bpt id="p2">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is synchronized (thread safe); otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>、場合へのアクセス、 <bpt id="p2">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>が同期 (スレッド セーフな) です。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns the object at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> without removing it.</source>
          <target state="translated">上部にあるオブジェクトを返します、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>削除することがなくです。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This method is similar to the &lt;xref:System.Collections.Stack.Pop%2A&gt; method, but Peek does not modify the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">このメソッドは&lt;xref:System.Collections.Stack.Pop%2A&gt;、メソッドがピーク&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;は変更されません。&lt;/xref:System.Collections.Stack.Pop%2A&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph>プッシュされることができます、&lt;xref:System.Collections.Stack&gt;必要な場合は、プレース ホルダーとして&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To distinguish between a null value and the end of the stack, check the &lt;xref:System.Collections.Stack.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Stack&gt; is empty.</source>
          <target state="translated">区別する、null 値、スタックの末尾、確認、&lt;xref:System.Collections.Stack.Count%2A&gt;プロパティまたは catch、 &lt;xref:System.InvalidOperationException&gt;、ときにスローする、&lt;xref:System.Collections.Stack&gt;が空です&lt;/xref:System.Collections.Stack&gt;&lt;/xref:System.InvalidOperationException&gt;&lt;/xref:System.Collections.Stack.Count%2A&gt;。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;の上部にある、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Object&gt; 。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が空です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Removes and returns the object at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">削除し、上部にあるオブジェクトを返します、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This method is similar to the &lt;xref:System.Collections.Stack.Peek%2A&gt; method, but &lt;xref:System.Collections.Stack.Peek%2A&gt; does not modify the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">このメソッド、&lt;xref:System.Collections.Stack.Peek%2A&gt;メソッドは&lt;xref:System.Collections.Stack.Peek%2A&gt;&lt;xref:System.Collections.Stack&gt;。&lt;/xref:System.Collections.Stack&gt;を変更しません&lt;/xref:System.Collections.Stack.Peek%2A&gt;&lt;/xref:System.Collections.Stack.Peek%2A&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph>プッシュされることができます、&lt;xref:System.Collections.Stack&gt;必要な場合は、プレース ホルダーとして&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To distinguish between a null value and the end of the stack, check the &lt;xref:System.Collections.Stack.Count%2A&gt; property or catch the &lt;xref:System.InvalidOperationException&gt;, which is thrown when the &lt;xref:System.Collections.Stack&gt; is empty.</source>
          <target state="translated">区別する、null 値、スタックの末尾、確認、&lt;xref:System.Collections.Stack.Count%2A&gt;プロパティまたは catch、 &lt;xref:System.InvalidOperationException&gt;、ときにスローする、&lt;xref:System.Collections.Stack&gt;が空です&lt;/xref:System.Collections.Stack&gt;&lt;/xref:System.InvalidOperationException&gt;&lt;/xref:System.Collections.Stack.Count%2A&gt;。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; removed from the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;の最上部から削除された、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Object&gt; 。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is empty.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が空です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Inserts an object at the top of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">上部にあるオブジェクトを挿入、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Stack.Count%2A&gt; already equals the capacity, the capacity of the &lt;xref:System.Collections.Stack&gt; is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">場合&lt;xref:System.Collections.Stack.Count%2A&gt;容量の容量と既に同じ、&lt;xref:System.Collections.Stack&gt;内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます&lt;/xref:System.Collections.Stack&gt;&lt;/xref:System.Collections.Stack.Count%2A&gt;。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`null`</ph> can be pushed onto the &lt;xref:System.Collections.Stack&gt; as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph>プッシュされることができます、&lt;xref:System.Collections.Stack&gt;必要な場合は、プレース ホルダーとして&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">スタック内のスロットを占有し、任意のオブジェクトと同様に扱われます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Collections.Stack.Count%2A&gt; is less than the capacity of the stack, Push is an O(1) operation.</source>
          <target state="translated">場合&lt;xref:System.Collections.Stack.Count%2A&gt;が小さいスタックの容量よりもプッシュは、o (1) 操作になります&lt;/xref:System.Collections.Stack.Count%2A&gt;。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If the capacity needs to be increased to accommodate the new element, Push becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">容量は、新しい要素を格納するためにする必要があります、プッシュが O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Stack.Count%2A&gt;.&lt;/xref:System.Collections.Stack.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Object&gt; to push onto the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;にプッシュする、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Object&gt; 。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">値を指定できます<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Returns a synchronized (thread safe) wrapper for the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">同期されたを返します (スレッド セーフな) ラッパーを<bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To guarantee the thread safety of the &lt;xref:System.Collections.Stack&gt;, all operations must be done through this wrapper.</source>
          <target state="translated">スレッド セーフを確保する、 &lt;xref:System.Collections.Stack&gt;、このラッパーを通じて、すべての操作を行う必要があります&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフなプロシージャ</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the &lt;xref:System.Collections.Stack.SyncRoot%2A&gt; during the entire enumeration.</source>
          <target state="translated">次のコード例を使用してコレクションをロックする方法を示しています、&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;列挙中に&lt;/xref:System.Collections.Stack.SyncRoot%2A&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)</ept><ept id="p5">]</ept>       This method is an O(1) operation.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p2">](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p4">](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p6">](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb)</ept> <ept id="p5">]</ept>このメソッドは、o (1) 操作になります。    </target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>同期するためにします。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A synchronized wrapper around the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">同期されたラッパー、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets an object that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アクセスを同期するために使用できるオブジェクトを取得、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>To create a synchronized version of the &lt;xref:System.Collections.Stack&gt;, use the &lt;xref:System.Collections.Stack.Synchronized%2A&gt; method.</source>
          <target state="translated">同期されたバージョンを作成する、&lt;xref:System.Collections.Stack&gt;を使用して、&lt;xref:System.Collections.Stack.Synchronized%2A&gt;メソッド&lt;/xref:System.Collections.Stack.Synchronized%2A&gt;&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, derived classes can provide their own synchronized version of the &lt;xref:System.Collections.Stack&gt; using the SyncRoot property.</source>
          <target state="translated">ただし、派生クラスは、独自の同期されたバージョンを指定、 &lt;xref:System.Collections.Stack&gt;SyncRoot プロパティを使用します&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The synchronizing code must perform operations on the SyncRoot of the &lt;xref:System.Collections.Stack&gt;, not directly on the &lt;xref:System.Collections.Stack&gt;.</source>
          <target state="translated">同期されたコードでの操作を実行する必要があります、 &lt;xref:System.Collections.Stack&gt;、 &lt;xref:System.Collections.Stack&gt;.&lt;/xref:System.Collections.Stack&gt;で直接&lt;/xref:System.Collections.Stack&gt;</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">これにより、他のオブジェクトから派生したコレクションを適切に操作します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the &lt;xref:System.Collections.Stack&gt; object.</source>
          <target state="translated">具体的には、同時に変更する可能性がある別スレッドとの適切な同期を維持、&lt;xref:System.Collections.Stack&gt;オブジェクト&lt;/xref:System.Collections.Stack&gt;。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は本質的にスレッド セーフなプロシージャ</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.</source>
          <target state="translated">次のコード例では、列挙中に、SyncRoot を使用して、コレクションをロックする方法を示します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Classic Stack.IsSynchronized Example#2<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)</ept><ept id="p5">]</ept>       Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p2">](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p4">](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>クラシック Stack.IsSynchronized 例&amp;2;<ept id="p6">](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb)</ept> <ept id="p5">]</ept> o (1) 操作には、このプロパティの値を取得します。    </target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Object&gt; that can be used to synchronize access to the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Object&gt;へのアクセスを同期するために使用できる、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Object&gt; 。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Copies the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to a new array.</source>
          <target state="translated">コピー、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を新しい配列にします。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to &lt;xref:System.Collections.Stack.Pop%2A&gt;.</source>
          <target state="translated">要素の最後で先出し (LIFO) の順序、 &lt;xref:System.Collections.Stack.Pop%2A&gt;。&lt;/xref:System.Collections.Stack.Pop%2A&gt;への呼び出しの連続してによって返される要素の順序と似ての配列にコピーします。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is &lt;xref:System.Collections.Stack.Count%2A&gt;.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph> &lt;xref:System.Collections.Stack.Count%2A&gt;.&lt;/xref:System.Collections.Stack.Count%2A&gt;は、</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A new array containing copies of the elements of the <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">新しい配列の要素のコピーを格納、 <bpt id="p1">&lt;xref href="System.Collections.Stack"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>