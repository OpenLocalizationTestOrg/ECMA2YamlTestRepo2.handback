<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">feaf2e9bc010ccda11a135d0aa3e621b5a7c5cdf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4615dde9254fa44aeb6924c9eeffb89e6d0881d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12c1164f8af654693804ae92fafcabbf97d05a43</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</source>
          <target state="translated">.NET Framework XAML サービスで実装されている XAML システム全体の一部として XAML の型に関する情報を報告します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Many APIs in the XamlType class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</source>
          <target state="translated">XamlType クラスで Api の多くは、についてレポートする概念は、XAML の仕様 [MS-XAML] の特定のセクションに似ています、XAML の型に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XamlType is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</source>
          <target state="translated">XamlType が、XAML の型に関するレポート情報の .NET Framework XAML サービス API で広く使われています。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XamlType reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</source>
          <target state="translated">XamlType のインスタンスを使用するために、または XAML ノード ストリーム、またはと同様に XAML 表現からのメンバーにアクセスする XAML の型について知っておく必要がある情報を報告します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Its reporting is similar to how the &lt;xref:System.Type&gt; in the CLR type system, together with reflection classes such as &lt;xref:System.Reflection.MemberInfo&gt;, provide information about a CLR type and its usage.</source>
          <target state="translated">ような方法は、reporting&lt;xref:System.Type&gt;入力リフレクション クラスと共に、システムなど、CLR で&lt;xref:System.Reflection.MemberInfo&gt;、CLR 型とその使用状況に関する情報を提供します&lt;/xref:System.Reflection.MemberInfo&gt;&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To extend the XAML type system, you can derive from XamlType.</source>
          <target state="translated">XAML 型システムを拡張するには、XamlType から派生できます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To do so effectively, you might also need to implement a &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.</source>
          <target state="translated">実効上には、する必要がありますも&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;。&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;を実装するには</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;一般化された XAML 型システム呼び出しの動作の一部として指定することをバッキング型システムを使用するようになります&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The specific custom &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; provides a way to reduce the dependencies on the CLR type system, which are used by the default XamlType behavior.</source>
          <target state="translated">特定のカスタム&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;既定 XamlType の動作で使用される CLR 型システムへの依存関係を削減する方法を提供します&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on the underlying CLR type information.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス情報を基に、基になる CLR 型。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The underlying CLR &lt;xref:System.Type&gt; for the XAML type to construct.</source>
          <target state="translated">基になる CLR&lt;xref:System.Type&gt;を構築するために XAML の型&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML リーダーや XAML ライターの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on a string name for the type.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスが、型の名前を文字列に基づいています。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is a protected constructor.</source>
          <target state="translated">これは、protected コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>No current public derived classes exist that use this particular path for construction.</source>
          <target state="translated">現在のパブリック派生クラスが存在しない構築のこの特定のパスを使用します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a consumer of the existing &lt;xref:System.Xaml.XamlType&gt;, you must use the other constructor signatures (&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;, &lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;, or &lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;) to initialize a &lt;xref:System.Xaml.XamlType&gt; object.</source>
          <target state="translated">既存のコンシューマーとして&lt;xref:System.Xaml.XamlType&gt;、他のコンス トラクター シグネチャを使用する必要があります (&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;、 &lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;、または&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;) 初期化するために、&lt;xref:System.Xaml.XamlType&gt;オブジェクト&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;&lt;/xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;&lt;/xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the type to create.</source>
          <target state="translated">作成する型の名前。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type arguments for a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents a generic type.</source>
          <target state="translated">型引数、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ジェネリック型を表すです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Can be (and often is) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">指定できます (および多くの場合は) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、表される型が、ジェネリック型ではないことを示します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers and XAML writers.</source>
          <target state="translated">XAML リーダーと XAML ライターの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on underlying type information and a <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラス情報を基に基になる型と<bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>実装します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The underlying type for the XAML type to construct.</source>
          <target state="translated">構築するために XAML 型の基になる型。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>XAML schema context for the XAML reader.</source>
          <target state="translated">XAML リーダーの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that handles run-time reflection calls against the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に対するランタイムのリフレクションを処理する実装を呼び出す、 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on the XAML namespace and a string name for the type.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスが、XAML 名前空間と型の文字列名に基づいています。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</source>
          <target state="translated">このコンス トラクターは排他的分析とサポートする型システムと XAML スキーマ コンテキストでのバックアップがないように認識される型の使用法の XAML ノードを記録します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</source>
          <target state="translated">このコンス トラクターを使用して、基になる型システムにマップされる XAML の型が使用可能な「不明」の種類に対してのみです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This constructor might not produce a result where &lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt; is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">このコンス トラクターが、結果が得られない、&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt;は<ph id="ph1">`true`</ph>&lt;/xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Instead, the default reflector logic reports the underlying type as &lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">代わりに、既定の reflector ロジックがレポートする基になる型&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;。&lt;/xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, this behavior can change because of the &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; override.</source>
          <target state="translated">ただし、この動作を変更のため、&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;をオーバーライドします&lt;/xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The XAML namespace for the type, as a string.</source>
          <target state="translated">文字列として、型の XAML 名前空間。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The name of the type in the provided <ph id="ph1">`unknownTypeNamespace`</ph> XAML namespace.</source>
          <target state="translated">指定した型の名前<ph id="ph1">`unknownTypeNamespace`</ph>の XAML 名前空間。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The type arguments for a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents a generic type.</source>
          <target state="translated">型引数、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ジェネリック型を表すです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Can be (and often is) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">指定できます (および多くの場合は) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、表される型が、ジェネリック型ではないことを示します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML リーダーや XAML ライターの XAML スキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">unknownTypeNamespace</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">unknownTypeName</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">schemaContext</ph><ept id="p3">&lt;/code&gt;</ept> are <bpt id="p4">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">unknownTypeNamespace</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">unknownTypeName</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">schemaContext</ph><ept id="p3">&lt;/code&gt;</ept> are <bpt id="p4">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets a read-only collection of the types that are usable as the &lt;xref:System.Xaml.XamlType.ContentProperty*&gt; value for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">として使用されている型の読み取り専用コレクションを取得、&lt;xref:System.Xaml.XamlType.ContentProperty*&gt;値<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Xaml.XamlType.ContentProperty*&gt; 。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of AllowedContentTypes.</source>
          <target state="translated">割り当てることができる型 (たとえば、許可されているコンテンツ型である基本型に割り当てることができる) 特定のコンテンツ タイプでは AllowedContentTypes の目的で複数の種類は考慮されません。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A read-only collection of possible content types.</source>
          <target state="translated">使用可能なコンテンツ型の読み取り専用コレクション。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この XAML 型の直接の基本型にします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determination of this value is based on the underlying type of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and schema context.</source>
          <target state="translated">この値の決定は、基になる型に基づいてこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>とスキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法は使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>By default, BaseType returns an internal constant that represents an &lt;xref:System.Object&gt; if &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定では、BaseType が、内部の定数を表すを返します、&lt;xref:System.Object&gt;場合&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;は<ph id="ph1">`null`</ph>&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;は仮想で、そのため、オーバーライドできます&lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合)、基になる CLR 型の型システム情報と予想される方法で整合不要になったように XAML 型について報告される型情報を変更します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この XAML 型の直接の基本型にします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether an instance of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has the specified <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in its list of assignable types.</source>
          <target state="translated">示す値を返しますこれのインスタンスかどうか<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定された<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>割り当て可能な種類の一覧にします。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</source>
          <target state="translated">割り当て可能な型では、参照型のすべての機能はありませんは、割り当てのため使用することができます。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, you can use assignment to make type matches for the values of a property.</source>
          <target state="translated">たとえば、プロパティの値の型が一致するようにするのに割り当てを使用することができます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</source>
          <target state="translated">XAML で割り当てることができる型の概念は、CLR 型システムへのキャストの概念に似ています。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, under a CLR type system, every type has an &lt;xref:System.Object&gt; in its assignable type list.</source>
          <target state="translated">たとえば、CLR 型システムでは、すべての型が、&lt;xref:System.Object&gt;割り当て可能な型のリストにします&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If one of the two &lt;xref:System.Xaml.XamlType&gt; instances that are used for comparison has &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt; equal to <ph id="ph1">`true`</ph>, this method has a special Unknown mode that returns <ph id="ph2">`true`</ph> if the two &lt;xref:System.Xaml.XamlType&gt; instances are equivalent.</source>
          <target state="translated">場合、2 つのいずれかの&lt;xref:System.Xaml.XamlType&gt;使用されるインスタンスの比較がある&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;と等しい<ph id="ph1">`true`</ph>、このメソッドは、特殊な不明なモードを返す<ph id="ph2">`true`</ph>場合、2 つ&lt;xref:System.Xaml.XamlType&gt;のインスタンスが等しい&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The default implementation uses the CLR &lt;xref:System.Type&gt; from &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; for this &lt;xref:System.Xaml.XamlType&gt; and the input &lt;xref:System.Xaml.XamlType&gt;, and calls &lt;xref:System.Type.IsAssignableFrom%2A&gt;.</source>
          <target state="translated">既定の実装が CLR を使用して&lt;xref:System.Type&gt;から&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;この&lt;xref:System.Xaml.XamlType&gt;し、入力&lt;xref:System.Xaml.XamlType&gt;、および呼び出し&lt;xref:System.Type.IsAssignableFrom%2A&gt;.&lt;/xref:System.Type.IsAssignableFrom%2A&gt; &lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Override this method if you want a different determination of assignable types.</source>
          <target state="translated">割り当てられた型のさまざまな決定をする場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Passing a null <ph id="ph1">`xamlType`</ph> does not throw an exception and always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Null を渡す<ph id="ph1">`xamlType`</ph>、例外をスローしないと、常に返します<ph id="ph2">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  CanAssignTo is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; CanAssignTo は仮想でと、そのため、オーバーライドされることができます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) を XAML 型の割り当てを変更して、基になる CLR 型の型キャストの動作と予想される方法で整合不要になった。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type to check against the current <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> .</source>
          <target state="translated">現在の照合する型<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType</ph><ept id="p2">&lt;/code&gt;</ept> is in the assignable types list; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType</ph> <ept id="p2">&lt;/code&gt;</ept> 、割り当てられた型リストには、それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> must have arguments (generic constraints through <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>引数が必要 (ジェネリック制約を通じて<bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>初期化のテキスト、またはその他の XAML の手法) 型の有効なインスタンスを構築するためにします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if construction of an instance requires some argument value; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インスタンスの構築には、引数値が必要とする場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これのコンテンツ プロパティの情報を<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt; to the type definition.</source>
          <target state="translated">ときにバインディングを使用して、または CLR 型システムのバックアップ、XAML コンテンツ プロパティを指定できます型に適用することで&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;種類の定義にします&lt;/xref:System.Windows.Markup.ContentPropertyAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[content property]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[content property]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法は使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このコンテンツのプロパティの情報を<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no content property exists.</source>
          <target state="translated">あります<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>コンテンツ プロパティが存在しない場合。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <bpt id="p1">&lt;xref uid="langword_csharp_Collection&amp;lt;T&amp;gt;" name="Collection&amp;lt;T&amp;gt;" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得できない場合に厳密な型が一致する、厳密に型指定の文字列など、コンテンツのプロパティのコンテンツをラップするために使用される型<bpt id="p1">&lt;xref uid="langword_csharp_Collection&amp;lt;T&amp;gt;" name="Collection&amp;lt;T&amp;gt;" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If there are no wrappers to account for type match loosening, this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このプロパティは、型の一致が低下するためにラッパーがない場合は、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Types that evaluate as &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; for a specific content type are not considered multiple types for purposes of ContentWrappers.</source>
          <target state="translated">型として評価される&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;特定のコンテンツ タイプは考慮されません ContentWrappers の目的で複数の種類&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the CLR binding for &lt;xref:System.Xaml&gt; and &lt;xref:System.Xaml.XamlType&gt;, the XAML content wrapper type can be specified on a type as a &lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;.</source>
          <target state="translated">で、CLR&lt;xref:System.Xaml&gt;と&lt;/xref:System.Xaml&gt;バインドを&lt;xref:System.Xaml.XamlType&gt;&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;。&lt;/xref:System.Windows.Markup.ContentWrapperAttribute&gt;と型の XAML のコンテンツ ラッパー型を指定することができます。&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A read-only collection of possible content wrapper types; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">可能なコンテンツのラッパー型の読み取り専用コレクションそれ以外の場合、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">「解説」を参照してください。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that represents the deferred loading conversion behavior for this type.</source>
          <target state="translated">取得、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>を表す、遅延読み込みこの型の変換動作します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>XAML template behavior in WPF is an example of deferred loading behavior.</source>
          <target state="translated">WPF の XAML テンプレートの動作は、遅延読み込み動作の例を示します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法は使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents the deferred loading behavior for this type.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で<bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このタイプの遅延読み込み動作を表す制約。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to compare with this object.</source>
          <target state="translated">このオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在のオブジェクトが等しい場合、 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">obj</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーターです。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">現在のオブジェクトが同じ型の別のオブジェクトと等しいかどうかを示します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An object to compare with this object.</source>
          <target state="translated">このオブジェクトと比較するオブジェクト。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在のオブジェクトが等しい場合、 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">other</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーターです。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the XAML member that is aliased to a XAML directive by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この XAML ディレクティブの別名は、XAML メンバーを返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このメソッドを呼び出すを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">エイリアスのメンバーを検索するためのディレクティブ。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The aliased member, if found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">エイリアスのメンバー場合が見つかりました。それ以外の場合、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns a collection that contains all the attachable properties that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これによって公開されているすべてのアタッチ可能なプロパティを含むコレクションを返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Each &lt;xref:System.Xaml.XamlMember&gt; in the returned collection should contain values that support the concept that the &lt;xref:System.Xaml.XamlMember&gt; is an attachable member.</source>
          <target state="translated">各&lt;xref:System.Xaml.XamlMember&gt;返されたコレクションを含めることは、概念をサポートする値を&lt;xref:System.Xaml.XamlMember&gt;アタッチ可能なメンバーは、&lt;/xref:System.Xaml.XamlMember&gt; &lt;/xref:System.Xaml.XamlMember&gt; 。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, members should return <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;, a type for &lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;, and so on.</source>
          <target state="translated">たとえば、メンバーを返す必要があります<ph id="ph1">`true`</ph>の&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;の型を&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;のようにします&lt;/xref:System.Xaml.XamlMember.TargetType%2A&gt;&lt;/xref:System.Xaml.XamlMember.IsAttachable%2A&gt;。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このメソッドを呼び出すを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A collection that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">0 個以上含んだコレクション<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns a collection that contains all the members that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これによって公開されているすべてのメンバーを含むコレクションを返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A collection that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">0 個以上含んだコレクション<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing a specific named attachable member of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>このアタッチ可能なメンバーをという名前を表す特定<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;は仮想で、そのため、オーバーライドできます&lt;/xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>基になる CLR 型に関する情報&lt;/xref:System.ComponentModel.TypeDescriptor&gt;。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The name of the attachable member to get, in <ph id="ph1">`ownerTypeName.MemberName`</ph> form.</source>
          <target state="translated">でアタッチ可能なメンバーの名前<ph id="ph1">`ownerTypeName.MemberName`</ph>フォーム。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the requested attachable member; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if no attachable member by that name exists.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト要求されたアタッチ可能なメンバーをそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>その名前でアタッチ可能なメンバーが存在しない場合、します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this object.</source>
          <target state="translated">このオブジェクトのハッシュ コードを返します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An integer hash code.</source>
          <target state="translated">整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named member from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これからメンバーをという名前の特定の<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The value for <ph id="ph1">`name`</ph> is expected to be unqualified.</source>
          <target state="translated">値は、<ph id="ph1">`name`</ph>修飾すると想定されます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Type-qualified names that indicate an attached member should be submitted to &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt; instead.</source>
          <target state="translated">アタッチされたメンバーを示す型で修飾された名前を送信する必要があります&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;代わりにします&lt;/xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</source>
          <target state="translated">プレフィックス付きのメンバー名は使用できません。プレフィックスは使用状況と、XAML 型システムは、このような使用法のコンテキストとプレフィックスをマップする方法を知ることはできません。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;は仮想で、そのため、オーバーライドできます&lt;/xref:System.Xaml.XamlType.LookupMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>基になる CLR 型に関する情報&lt;/xref:System.ComponentModel.TypeDescriptor&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">(文字列) として取得するメンバーの名前です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the member, if such a member was found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ようなメンバーが、それ以外の場合は、メンバーの情報を<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">マークアップ拡張機能の種類の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型が返されます<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This API is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">この API は、関連する場合は、こののみ&lt;xref:System.Xaml.XamlType&gt;マークアップ拡張機能を表します (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;は<ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">入力<ph id="ph1">`parameterCount`</ph>を使用しない特定の位置指定パラメーターの型を要求します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">マークアップ拡張機能の使用のアリティを指定することがあります。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">多くの場合、マークアップ拡張機能の使用は、複数の「署名」を持つし、区別するために位置指定パラメーターの異なるパラメーター アリティ (数) を使用します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">ただし、重複 arities を許可して、差別化要因の位置指定パラメーターの型を使用するスキーマ コンテキストを構成することができます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;。&lt;/xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For a specific arity (count), the parameter positions and types can vary.</source>
          <target state="translated">特定のアリティ (数) の場合、パラメーターの位置と型が異なります。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To get the positional type of a specific arity's markup extension usage, you first call GetPositionalParameters specifying the arity count.</source>
          <target state="translated">特定のアリティのマークアップ拡張機能の使用の位置指定の種類を取得するには、最初に呼び出す必要が GetPositionalParameters アリティ数を指定します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">返されるコレクションからその位置に項目を取得します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">情報を表示する特定の構文またはコンス トラクター モードの数 (アリティ)。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values, where each <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is the type for that position in the syntax.</source>
          <target state="translated">一連の<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値、ここで各<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>は構文内の位置の型です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You must specify the types in the same order when you supply markup input for the markup extension.</source>
          <target state="translated">マークアップ、マークアップ拡張機能の入力を指定するときに、同じ順序で、種類を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns a list of string identifiers for XAML namespaces that the type is included in.</source>
          <target state="translated">型が記載されている XAML 名前空間の文字列識別子の一覧を返します。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Typical XAML namespace identifiers are strings in URI form.</source>
          <target state="translated">一般的な XAML 名前空間の識別子は、URI 形式の文字列です。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The default implementation checks the following, in order: the XAML namespace that is supplied in construction (&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt; signature only); and the namespaces that are available from the schema context.</source>
          <target state="translated">既定の実装の順序で、次のチェック: 構築で指定されている XAML 名前空間 (&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;署名のみ); とスキーマ コンテキストから提供されている名前空間&lt;/xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If these are each <ph id="ph1">`null`</ph>, a new list is generated that contains a single empty string.</source>
          <target state="translated">これらはそれぞれ場合、 <ph id="ph1">`null`</ph>、1 つの空の文字列を含む新しいリストが生成されます。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You can override this method to change the lookup methodology.</source>
          <target state="translated">参照方法を変更するには、このメソッドをオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A list of string values, where each string is the URI identifier for a XAML namespace.</source>
          <target state="translated">ここで、各文字列は、XAML 名前空間の URI 識別子、文字列値の一覧。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられている実装<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calling Invoker can invoke either &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; or a specific override of that method.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、いずれかを呼び出すことが呼び出し元を呼び出して&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;またはそのメソッドの特定のオーバーライド&lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; override returns <ph id="ph1">`null`</ph>, or if the default implementation returns <ph id="ph2">`null`</ph> because of lack of &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; for this &lt;xref:System.Xaml.XamlType&gt;, then Invoker returns &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">場合、&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;オーバーライド<ph id="ph1">`null`</ph>、既定の実装を返す場合、または<ph id="ph2">`null`</ph>がないのため&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;この&lt;xref:System.Xaml.XamlType&gt;呼び出し元に返します&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; 、&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられている実装<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従って、アンビエントの種類を表します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an ambient type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、この<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アンビエントの型を表し、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an array.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>配列を表します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法は使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an array; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>配列を表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a collection.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>コレクションを表します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法は使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>コレクションを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従って、構築型を表します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is default constructible]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is default constructible]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法は使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a constructible type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>構築型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a dictionary, as per the XAML definition.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従って、ディクショナリを表します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is dictionary]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is dictionary]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法は使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>ディクショナリを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a generic type.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ジェネリック型を表します。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This property is a helper property that checks for a null value of &lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.</source>
          <target state="translated">このプロパティは&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;。&lt;/xref:System.Xaml.XamlType.TypeArguments%2A&gt;の null 値をチェックするヘルパー プロパティです。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>There is no specific <ph id="ph1">`Lookup`</ph> method related to IsGeneric.</source>
          <target state="translated">固有の仕様がない<ph id="ph1">`Lookup`</ph>IsGeneric に関連するメソッド。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a generic type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>ジェネリック型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a markup extension.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マークアップ拡張機能を表します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for IsMarkupExtension.</source>
          <target state="translated">XAML の仕様の用語では、この型に割り当てることにする必要があります<ph id="ph1">`x:MarkupExtension`</ph>を返すために<ph id="ph2">`true`</ph>IsMarkupExtension 用です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a markup extension; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>マークアップ拡張機能を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従っての XAML 名前スコープを表します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A XAML namescope enforces the name uniqueness of the property or properties used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名前スコープまたは複数のためのプロパティの名前の一意性を強制する<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>If IsNameScope is <ph id="ph1">`true`</ph>, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">IsNameScope 場合<ph id="ph1">`true`</ph>一意性を適用するためのいくつかのメカニズムが存在し、XAML 名前空間を所有しているこの種類の観点から評価する必要があります。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</source>
          <target state="translated">XAML 名前スコープは、別の XAML 名前スコープで所有されている型が検出されるまで、型のコンテンツを拡張します。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is name scope]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is name scope]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a XAML namescope; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> XAML 名前スコープを表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized by using a valid <bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> string as its &lt;xref:System.Xaml.XamlType.Name*&gt;.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が有効なを使用して初期化される<bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>その&lt;xref:System.Xaml.XamlType.Name*&gt;.&lt;/xref:System.Xaml.XamlType.Name*&gt;として文字列</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is initialized by using a valid <bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> string; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>が有効なを使用して初期化される<bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>文字列です。 それ以外の場合、 <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従って、null 許容型を表します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is nullable]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is nullable]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If you are not using the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用していないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nullable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> null 許容型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a public type in the relevant type system.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>関連型システムのパブリック型を表します。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;は仮想で、そのため、オーバーライドできます&lt;/xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合)、基になる CLR 型の型システムとアクセスの情報と予想される方法で整合不要になったように XAML 型についての報告されたアクセスを変更します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a public type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>パブリック型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>の基になる型システムで解決できない型を表します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt;derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For a load path that involves &lt;xref:System.Xaml.XamlObjectWriter&gt;, a &lt;xref:System.Xaml.XamlType&gt; that has <ph id="ph1">`true`</ph> for IsUnknown cannot be written into an object graph.</source>
          <target state="translated">関係する読み込みパスの&lt;xref:System.Xaml.XamlObjectWriter&gt;、&lt;xref:System.Xaml.XamlType&gt;を持つ<ph id="ph1">`true`</ph>IsUnknown がオブジェクト グラフに書き込むためです&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlObjectWriter&gt;。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Under the default implementations in &lt;xref:System.Xaml&gt; , the &lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt; call throws a &lt;xref:System.Xaml.XamlObjectWriterException&gt; when the relevant &lt;xref:System.Xaml.XamlType&gt; reports <ph id="ph1">`true`</ph> for IsUnknown.</source>
          <target state="translated">既定の実装  &lt;xref:System.Xaml&gt;、&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt;スローされます、&lt;xref:System.Xaml.XamlObjectWriterException&gt;ときに、関連する&lt;xref:System.Xaml.XamlType&gt;レポート<ph id="ph1">`true`</ph>IsUnknown の&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlObjectWriterException&gt;&lt;/xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt;&lt;/xref:System.Xaml&gt;。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>You should not pass a &lt;xref:System.Xaml.XamlType&gt; that has IsUnknown as <ph id="ph1">`true`</ph> unless you are prepared to handle the exceptions from &lt;xref:System.Xaml.XamlObjectWriter&gt;, or you have other ways to adjust the &lt;xref:System.Xaml.XamlObjectWriter&gt; behavior or the XAML node stream prior to writing the object graph.</source>
          <target state="translated">渡さないでください、 &lt;xref:System.Xaml.XamlType&gt;IsUnknown として持つ<ph id="ph1">`true`</ph>から例外を処理する準備済みでない限り、 &lt;xref:System.Xaml.XamlObjectWriter&gt;、その他の方法を調整することも、&lt;xref:System.Xaml.XamlObjectWriter&gt;動作や、オブジェクト グラフを作成する前に、XAML ノード ストリーム&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlObjectWriter&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an unresolvable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>解決できない型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is built top-down during XAML initialization.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 初期化中に、トップダウンを構築します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</source>
          <target state="translated">上から下へは、オブジェクト グラフを作成するときに、XAML プロセッサの動作を概算する比喩です。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</source>
          <target state="translated">トップダウンをビルドすると、型がインスタンス化される、親にアタッチされているし、そのプロパティが設定されます。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">トップダウンの構築では、ハンドラーのプロパティ変更の複数回の呼び出しで回避できます。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">このような処理は、オブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスの最適化を提供します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is built top-down during XAML initialization; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> XAML 初期化中に上から下へ、それ以外のビルドは<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>に従って XML 定義に空白の意味を持つコレクションを表します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a whitespace significant collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、この<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>空白文字の意味を持つコレクションを表します。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, as per the XAML definition.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML を表す<bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、XAML 定義ごとにします。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is xdata]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">このプロパティに揃えます、 <ph id="ph1">`[is xdata]`</ph> [MS-XAML] の仕様の情報項目。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsXData%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupIsXData%2A&gt;。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">型情報を提供する値を取得、 <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>プロパティこの<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a collection (&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">このプロパティは関連する場合は、こののみ&lt;xref:System.Xaml.XamlType&gt;コレクションを表します (&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;は<ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsCollection%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Items`</ph> property is whatever property holds items in that type of collection or array.</source>
          <target state="translated"><ph id="ph1">`Items`</ph>プロパティは、どのようなプロパティは、その種類のコレクションまたは配列に項目を保持します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupItemType%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupItemType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the items in the collection; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a collection.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コレクション内の項目の型のオブジェクトをそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>この場合、 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>コレクションを表していません。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the key property of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary.</source>
          <target state="translated">このキー プロパティの型情報を提供する値を取得<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ディクショナリを表します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a dictionary (&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">このプロパティは関連する場合は、こののみ&lt;xref:System.Xaml.XamlType&gt;ディクショナリを表します (&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;は<ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsDictionary%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupKeyType%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupKeyType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the key for dictionary usage, otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a dictionary.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のディクショナリの使用、それ以外の場合、キーの型のオブジェクトを<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>この場合、 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>ディクショナリを表していません。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns the XAML member that is aliased to a XAML directive by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この XAML ディレクティブの別名は、XAML メンバーを返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The default implementation can return results for the following XAML directives: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</source>
          <target state="translated">既定の実装は、次の XAML ディレクティブの結果を返すことができます:<ph id="ph1">`Key`</ph>です。<ph id="ph2">`Name`</ph>;<ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Values for these depend on underlying reflection and might still return <ph id="ph1">`null`</ph> if no aliased property is found.</source>
          <target state="translated">基になるリフレクションに依存およびが返すもこれらの値<ph id="ph1">`null`</ph>エイリアス プロパティが見つからない場合。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</source>
          <target state="translated">既定内部の CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報を報告のメタデータまたはその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">エイリアスのメンバーを検索するためのディレクティブ。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The aliased member, if found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">エイリアスのメンバー場合が見つかりました。それ以外の場合、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set that contains all attachable properties that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これによって公開されているすべてのアタッチ可能なプロパティを含む列挙可能なセットを返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Although &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt; returns a generic collection, this <ph id="ph1">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;、ジェネリック コレクションを返しますこれ<ph id="ph1">`Lookup`</ph>メソッドがジェネリックの列挙可能なセットを返します&lt;/xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">ときに&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;は<ph id="ph1">`null`</ph>、既定の実装を使用できる&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;が利用可能な場合は&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This behavior calls LookupAllAttachableMembers recursively to attempt to find a valid base type and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">この動作は、有効な基本型を検索しようとする LookupAllAttachableMembers 再帰的に呼び出し、返します<ph id="ph1">`null`</ph>有効な基本型が存在しない場合。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null の戻り値は、型のシステムやリフレクションのサポートの不足のための情報を決定できない場合に用に予約する必要があります。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty &lt;xref:System.Collections.Generic.IEnumerable%601&gt; set.</source>
          <target state="translated">場合は、型が有効では、リフレクションやその他の手法は、利用可能、型には、アタッチ可能なメンバーはありませんは、空を代わりに返す必要があります&lt;xref:System.Collections.Generic.IEnumerable%601&gt;を設定します&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>An enumerable set that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">0 個以上を含む列挙可能なセット<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値です。 それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set that contains all the members that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これによって公開されているすべてのメンバーを含む列挙可能なセットを返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAllMembers%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Although &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt; returns a generic collection, this <ph id="ph1">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;、ジェネリック コレクションを返しますこれ<ph id="ph1">`Lookup`</ph>メソッドがジェネリックの列挙可能なセットを返します&lt;/xref:System.Xaml.XamlType.GetAllMembers%2A&gt;。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For cases where &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">場合、&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;は<ph id="ph1">`null`</ph>、既定の実装を使用できます&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;が利用可能な場合は&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>This behavior calls LookupAllMembers recursively to attempt to find a valid base type, and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">この動作は、有効な基本型を検索しようとする LookupAllMembers 再帰的に呼び出し、返します<ph id="ph1">`null`</ph>有効な基本型が存在しない場合。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null の戻り値は、型のシステムやリフレクションのサポートの不足のための情報を決定できない場合に用に予約する必要があります。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty &lt;xref:System.Collections.Generic.IEnumerable%601&gt; set.</source>
          <target state="translated">リフレクションまたは他の手法が使用可能な型が有効な場合型がメンバーを持たない場合は、空を代わりに返す必要があります&lt;xref:System.Collections.Generic.IEnumerable%601&gt;を設定します&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Return values for LookupAllMembers and &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; should be mutually exclusive.</source>
          <target state="translated">LookupAllMembers の戻り値と&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;相互に排他的にする必要があります&lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different &lt;xref:System.Xaml.XamlMember&gt; values, with one value appearing in the attachable list and another in the standard members list.</source>
          <target state="translated">そのメンバーが&amp;2; つの異なるとして報告される場合は、バッキング型システムのプロパティが、アタッチ可能な使用法と同様に、標準インスタンスの使用をサポートできる場合がある場合は、&lt;xref:System.Xaml.XamlMember&gt;アタッチ可能な一覧と、標準的なメンバー リスト内の別に表示される値の&amp;1; つの値&lt;/xref:System.Xaml.XamlMember&gt;。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>An enumerable set that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">0 個以上を含む列挙可能なセット<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Returns a list of the types that are usable as the &lt;xref:System.Xaml.XamlType.ContentProperty*&gt; value for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">として使用されている型の一覧を返します、&lt;xref:System.Xaml.XamlType.ContentProperty*&gt;値<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Xaml.XamlType.ContentProperty*&gt; 。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;。&lt;/xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Types that evaluate as &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; for a specific content type are not considered multiple types for purposes of &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;特定のコンテンツ タイプは考慮されません&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;。&lt;/xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;の目的で複数の型&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;として評価される型</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The default implementation can use other properties of &lt;xref:System.Xaml.XamlType&gt; (&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;, &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;, or &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;) to obtain a result.</source>
          <target state="translated">既定の実装は、の他のプロパティを使用できます&lt;xref:System.Xaml.XamlType&gt;(&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;、 &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;、または&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;) 結果を取得します&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt;&lt;/xref:System.Xaml.XamlType.ContentProperty%2A&gt;&lt;/xref:System.Xaml.XamlType.ContentWrappers%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Lookup`</ph> overrides for the preceding property list can also be invoked in this determination.</source>
          <target state="translated"><ph id="ph1">`Lookup`</ph>オーバーライドの前のプロパティ リストは、この判断で呼び出すこともできます。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A list of possible content types.</source>
          <target state="translated">使用可能なコンテンツ型の一覧。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named attachable from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、特定の名前からアタッチ可能な<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">ときに&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;は<ph id="ph1">`null`</ph>、既定の実装を使用できる&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;が利用可能な場合は&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>This behavior calls LookupAttachableMember recursively to attempt to find a valid base type and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">この動作は、有効な基本型を検索しようとする LookupAttachableMember 再帰的に呼び出し、返します<ph id="ph1">`null`</ph>有効な基本型が存在しない場合。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupAttachableMember is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupAttachableMember は仮想でと、そのため、オーバーライドされることができます。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>基になる CLR 型に関する情報&lt;/xref:System.ComponentModel.TypeDescriptor&gt;。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The name of the attachable member to get, in <ph id="ph1">`ownerTypeName.MemberName`</ph> form.</source>
          <target state="translated">でアタッチ可能なメンバーの名前<ph id="ph1">`ownerTypeName.MemberName`</ph>フォーム。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the requested attachable member; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if no attachable member by that name exists.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト要求されたアタッチ可能なメンバーをそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>その名前でアタッチ可能なメンバーが存在しない場合、します。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この XAML 型の直接の基本型にします。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Determination of this value is based on the underlying type of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and schema context.</source>
          <target state="translated">この値の決定は、基になる型に基づいてこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>とスキーマ コンテキスト。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The default implementation might return an internal constant that represents the &lt;xref:System.Object&gt; if &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定の実装を表す内部定数を返す場合があります、&lt;xref:System.Object&gt;場合&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;は<ph id="ph1">`null`</ph>&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupBaseType is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupBaseType は仮想でと、そのため、オーバーライドされることができます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合)、基になる CLR 型の型システム情報と予想される方法で整合不要になったように XAML 型について報告される型情報を変更します。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この XAML 型の直接の基本型にします。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Returns a value of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that declares which specific collection type this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> uses.</source>
          <target state="translated">値を返します、 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>この型の列挙される特定のコレクションを宣言する<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>を使用します。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This method is invoked by an internal private method (no public <ph id="ph1">`CollectionKind`</ph> or <ph id="ph2">`GetCollectionKind`</ph> API exists on &lt;xref:System.Xaml.XamlType&gt;).</source>
          <target state="translated">このメソッドは、内部プライベート メソッドによって呼び出されます (パブリック<ph id="ph1">`CollectionKind`</ph>または<ph id="ph2">`GetCollectionKind`</ph>に API が存在する&lt;xref:System.Xaml.XamlType&gt;).&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">既定の実装では、内部の CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For cases where &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">場合、&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;は<ph id="ph1">`null`</ph>、既定の実装を使用できます&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;が利用可能な場合は&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This behavior indirectly calls LookupCollectionKind recursively to attempt to find a valid base type; it returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; if no valid base type exists.</source>
          <target state="translated">LookupCollectionKind を再帰的に有効な基本型を検索しようとするが、この動作によって間接的に呼び出す返します&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;有効な基本型が存在しない場合&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>In general, the default implementation attempts to find the <ph id="ph1">`Add`</ph> method of the underlying type by reflection.</source>
          <target state="translated">既定の実装が検索しようとした一般に、<ph id="ph1">`Add`</ph>リフレクションによって基になる型のメソッドです。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>If found, the &lt;xref:System.Reflection.MethodInfo&gt; of the <ph id="ph1">`Add`</ph> method is enough information to determine which &lt;xref:System.Xaml.Schema.XamlCollectionKind&gt; value should be returned.</source>
          <target state="translated">場合が見つかると、&lt;xref:System.Reflection.MethodInfo&gt;の<ph id="ph1">`Add`</ph>メソッドは、十分な情報を決定する&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;値が返されます&lt;/xref:System.Xaml.Schema.XamlCollectionKind&gt;&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;。&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;を返しますそれ以外の場合</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A value of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration.</source>
          <target state="translated">値、 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>列挙します。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> must have arguments (generic constraints through <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>引数を持つ必要があります (使用してジェネリック制約<bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>初期化のテキスト、またはその他の XAML の手法) 型の有効なインスタンスを構築します。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;。&lt;/xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`false`</ph> for types considered value types in the CLR type system.</source>
          <target state="translated">既定の実装を返します<ph id="ph1">`false`</ph>CLR で値型と見なされますの種類のシステムと入力します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>For other than value types, CLR reflection &lt;xref:System.Reflection.ConstructorInfo&gt; is used to determine whether a default constructor exists.</source>
          <target state="translated">値型、CLR リフレクション以外の場合&lt;xref:System.Reflection.ConstructorInfo&gt;既定のコンス トラクターが存在するかどうかを調べるために使用します&lt;/xref:System.Reflection.ConstructorInfo&gt;。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if construction of an instance requires some argument value; otherwise, false.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インスタンスの作成は、引数値を必要とする場合それ以外の場合は false です。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>これのコンテンツ プロパティの情報を<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;。&lt;/xref:System.Xaml.XamlType.ContentProperty%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The default implementation checks for &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt; on the type definition.</source>
          <target state="translated">既定の実装&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;型定義&lt;/xref:System.Windows.Markup.ContentPropertyAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If these checks do not discover a content type, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定の実装を返しますのかどうか、これらのチェックはコンテンツの種類を検出しません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">既定の内部の CLR リフレクションに依存しない、し、XAML 型システム情報または型のスキーマ情報を報告のメタデータやその他の手法を使用している場合は、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このコンテンツのプロパティの情報を<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Gets a list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that represent the content wrappers for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">一覧を取得<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このコンテンツのラッパーを表す値<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</source>
          <target state="translated">コンテンツのラッパーは、そのコレクションに使用される型は、型システムを連続していないときのコンテンツのコレクション型を表すクラスです。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The types of collection items for the content wrapper are expected to be limited in some manner beyond &lt;xref:System.Object&gt; or a neutral object equivalent.</source>
          <target state="translated">コンテンツ ラッパー コレクション項目の種類を超えるいくつかの方法で制限されるとして予想される&lt;xref:System.Object&gt;または同等のニュートラル オブジェクト&lt;/xref:System.Object&gt;。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</source>
          <target state="translated">ただし、このような制限が、およびデザインまたはその型を使用するプロパティの目的は、型システムではなくにのみ適用されます。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>More than one content wrapper can exist on a type.</source>
          <target state="translated">1 つ以上のコンテンツ ラッパーは、型に存在できます。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>For an example class and scenario from the WPF XAML implementation, see &lt;xref:System.Windows.Documents.InlineCollection&gt;.</source>
          <target state="translated">クラスの例と WPF XAML 実装からシナリオの場合は、「 &lt;xref:System.Windows.Documents.InlineCollection&gt;。&lt;/xref:System.Windows.Documents.InlineCollection&gt;</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that represent the content wrappers for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">一連の<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このコンテンツのラッパーを表す値<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, returns an <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">派生クラスで実装された場合を返します、 <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>実装します。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">CLR 属性の値を取得する代替方法を内部のリフレクションを提供するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>In absence of an override, the internal reflector uses typical CLR reflection logic.</source>
          <target state="translated">上書きがない場合では、内部 reflector は、一般的な CLR ロジックでリフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">既定の実装を返します<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>実装します。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which is used for deferred loading of XAML-declared objects.</source>
          <target state="translated">返します、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>オブジェクトの XAML 宣言の遅延読み込みの際に使用されるオブジェクト。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;.</source>
          <target state="translated">呼び出し元&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;。&lt;/xref:System.Xaml.XamlType.DeferringLoader%2A&gt;から値を取得するときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt; to return a different value than is enabled by default internal reflection and are also providing custom &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; information.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;をカスタムを既定の内部リフレクションで有効になっても提供するよりも、別の値を返す&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;情報&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;&lt;/xref:System.Xaml.XamlType.DeferringLoader%2A&gt;。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The default implementation returns an object on the basis of reading &lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;.</source>
          <target state="translated">既定の実装は、読み取り&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;。&lt;/xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;に基づいてオブジェクトを返します</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>It can also  check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">このメソッドが戻るかどうかは、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint on the generic.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>を持つ、 <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ジェネリックに制約します。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これに関連付けられている<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.Invoker%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.Invoker%2A&gt;。&lt;/xref:System.Xaml.XamlType.Invoker%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The default implementation does not require that a &lt;xref:System.Xaml.XamlType&gt; be constructed by using one of the constructors that pass an initial &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.</source>
          <target state="translated">既定の実装は不要を&lt;xref:System.Xaml.XamlType&gt;初期&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;を通過するコンス トラクターのいずれかを使用して構築します。&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>However, an &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; value must exist for the &lt;xref:System.Xaml.XamlType&gt;; otherwise, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">ただし、&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;の値が存在する必要があります、&lt;xref:System.Xaml.XamlType&gt;以外の場合、既定の実装を返します<ph id="ph1">`null`</ph>&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Override this method if you also create a derived class from &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; and intend to return the derived class.</source>
          <target state="translated">このメソッドをオーバーライドして&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;派生クラスを返すしようと&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;からも派生クラスを作成する場合</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If you return <ph id="ph1">`null`</ph>, &lt;xref:System.Xaml.XamlType.Invoker%2A&gt; returns &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; to callers.</source>
          <target state="translated">返す場合<ph id="ph1">`null`</ph>、&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;返します&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;の呼び出し元にします&lt;/xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;&lt;/xref:System.Xaml.XamlType.Invoker%2A&gt;。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>情報<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従って、アンビエントの種類を表します。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsAmbient%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The default implementation uses CLR reflection on the &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; and can check the base types.</source>
          <target state="translated">既定の実装で CLR のリフレクションを使用して、&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;基本型を確認できます&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>This implementation checks for the &lt;xref:System.Windows.Markup.AmbientAttribute&gt; that is applied to the relevant type's definition at the class level and returns <ph id="ph1">`true`</ph> in this case.</source>
          <target state="translated">この実装を確認、&lt;xref:System.Windows.Markup.AmbientAttribute&gt;をクラス レベルで、関連する種類の定義に適用して返す<ph id="ph1">`true`</ph>でも&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>All other cases return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">その他のすべてのケースを返す<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt; to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;を内部リフレクションの既定で有効になってよりも、別の値を返す&lt;/xref:System.Xaml.XamlType.IsAmbient%2A&gt;。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an ambient type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、この<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>アンビエントの型を表し、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従って、構築型を表します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsConstructible%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The default implementation uses CLR reflection on the &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">既定の実装&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The type must be concrete, non-nested, and closed.</source>
          <target state="translated">具象および終了した、入れ子にされない型があります。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The default implementation checks whether the type is a value type and the return of &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.</source>
          <target state="translated">既定の実装をチェックするかどうか型、値型と&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;。&lt;/xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;の戻り値</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, this method returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;、このメソッドが戻る<ph id="ph1">`true`</ph>&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt; to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;を内部リフレクションの既定で有効になってよりも、別の値を返す&lt;/xref:System.Xaml.XamlType.IsConstructible%2A&gt;。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a constructible type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>構築型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a markup extension.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マークアップ拡張機能を表します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The default implementation consists only of this call:       <ph id="ph1">`return CanAssignTo(XamlLanguage.MarkupExtension);`</ph>       Override this method if you want &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; to use different logic.</source>
          <target state="translated">既定の実装は、この呼び出しののみで構成されています:<ph id="ph1">`return CanAssignTo(XamlLanguage.MarkupExtension);`</ph>する場合は、このメソッドをオーバーライド&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.</source>
          <target state="translated">XAML の仕様の用語では、この型に割り当てることにする必要があります<ph id="ph1">`x:MarkupExtension`</ph>を返すために<ph id="ph2">`true`</ph>&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;です&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a markup extension; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>マークアップ拡張機能を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従っての XAML 名前スコープを表します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The default implementation makes a &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; call indirectly against the type &lt;xref:System.Windows.Markup.INameScope&gt;.</source>
          <target state="translated">既定の実装は、&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;型&lt;xref:System.Windows.Markup.INameScope&gt;。&lt;/xref:System.Windows.Markup.INameScope&gt;に対して間接的に呼び出す&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Markup.INameScope&gt; is an interface that is defined in the assembly WindowsBase.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.INameScope&gt;WindowsBase アセンブリで定義されているインターフェイス。&lt;/xref:System.Windows.Markup.INameScope&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>This technique for XAML namescope identification is used both by WPF and <ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)]</ph> implementations of XAML.</source>
          <target state="translated">XAML 名前スコープ識別するためには、この手法を使用する WPF が両方と<ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)]</ph>XAML の実装です。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>A XAML namescope enforces the name uniqueness of the property or properties that are used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名前スコープまたは複数に使用されるプロパティの名前の一意性を強制する<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>です。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt; is <ph id="ph1">`true`</ph>, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">場合&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;は<ph id="ph1">`true`</ph>一意性を適用するためのいくつかのメカニズムが存在する必要があり、XAML 名前空間を所有しているこの種類の観点から評価する必要があります&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</source>
          <target state="translated">XAML 名前スコープは、XAML 名前スコープを所有している別の型が検出されるまで、型のコンテンツを拡張します。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a XAML namescope; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> XAML 名前スコープを表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 定義に従って、null 許容型を表します。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsNullable%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The default implementation makes a determination based on the CLR core library nullable concept, checked against &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">既定の実装は、概念に基づいて CLR コア ライブラリ null 許容、 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;に照らしてチェックの決定</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;、返します<ph id="ph1">`true`</ph>&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsNullable%2A&gt;。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nullable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> null 許容型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a public type in the relevant type system.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>関連型システムのパブリック型を表します。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsPublic%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The default implementation uses CLR reflection against a non-null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">既定の実装が null でない&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;に対して CLR リフレクションを使用します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;、返します<ph id="ph1">`true`</ph>&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsPublic%2A&gt;。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupIsPublic is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupIsPublic は仮想でと、そのため、オーバーライドされることができます。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) を XAML 型について報告されたアクセス情報が変更され、基になる CLR 型の型システムまたはアクセスの情報と予想される方法で配置できなくします。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">割り当て操作とアクセスのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a public type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>パブリック型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>の基になる型システムで解決できない型を表します。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The default implementation can use CLR reflection.</source>
          <target state="translated">既定の実装では、CLR のリフレクションを使用できます。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;、返します<ph id="ph1">`true`</ph>&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt;。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nonresolvable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> nonresolvable 型を表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>に従って XML 定義に空白の意味を持つコレクションを表します。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;.</source>
          <target state="translated">既定の実装が&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;。&lt;/xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;の読み取りに基づいた値を返します</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>It can also check the &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック、&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>If a value is not available, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a white-space significant collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>空白文字の意味を持つコレクションを表す、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, as per the XAML definition.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML を表す<bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、XAML 定義ごとにします。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsXData%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsXData%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsXData%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The default implementation makes a &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; call indirectly against the type &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">既定の実装は、&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;型&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;。&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;に対して間接的に呼び出す&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsXData%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsXData%2A&gt;。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">型情報を提供する値を返します、 <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>プロパティこの<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;.&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by &lt;xref:System.Reflection.MethodInfo&gt; and using the &lt;xref:System.Reflection.ParameterInfo&gt;; checking &lt;xref:System.Xaml.XamlType.IsArray%2A&gt;; and checking &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; and trying the same logic there.</source>
          <target state="translated">既定の実装の確認などの CLR リフレクションの概念を使用できます、<ph id="ph1">`Add`</ph>メソッドによって&lt;xref:System.Reflection.MethodInfo&gt;を使用して、&lt;xref:System.Reflection.ParameterInfo&gt;以外の場合はチェック&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;; とチェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;して同じロジックがあります&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;&lt;/xref:System.Xaml.XamlType.IsArray%2A&gt;&lt;/xref:System.Reflection.ParameterInfo&gt;&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.ItemType%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Cases where &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; should return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">あるケース&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;返します&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;返す必要があります<ph id="ph1">`null`</ph>&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the items in the collection; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a collection.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コレクション内の項目の型のオブジェクトをそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>この<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>コレクションを表していません。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the key property of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary.</source>
          <target state="translated">このキーのプロパティの型情報を提供する値を返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>ディクショナリを表します。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.KeyType%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.KeyType%2A&gt;。&lt;/xref:System.Xaml.XamlType.KeyType%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by &lt;xref:System.Reflection.MethodInfo&gt; and using the &lt;xref:System.Reflection.ParameterInfo&gt;; and checking &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; and trying the same logic there.</source>
          <target state="translated">既定の実装の確認などの CLR リフレクションの概念を使用できます、<ph id="ph1">`Add`</ph>メソッドによって&lt;xref:System.Reflection.MethodInfo&gt;を使用して、 &lt;xref:System.Reflection.ParameterInfo&gt;; とチェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;同じロジックがしようとしているとします&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;&lt;/xref:System.Reflection.ParameterInfo&gt;&lt;/xref:System.Reflection.MethodInfo&gt;。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.KeyType%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.KeyType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Cases where &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; does not return &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; should return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">あるケース&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;返さない&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;返す必要があります<ph id="ph1">`null`</ph>&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the key for dictionary usage, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a dictionary,</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ディクショナリの使用状況のキーの型のオブジェクトまたは<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>この<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>ディクショナリを表していません</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the returned <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if it represents a markup extension.</source>
          <target state="translated">返された型情報を提供する値を返します<bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>マークアップ拡張機能を表す場合は、します。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;。&lt;/xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The default implementation returns a &lt;xref:System.Xaml.XamlType&gt; on the basis of reading &lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;.</source>
          <target state="translated">既定の実装は、&lt;xref:System.Xaml.XamlType&gt;読み取り&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;。&lt;/xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;に基づいて&lt;/xref:System.Xaml.XamlType&gt;返します</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>If a value is not available, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the return type for markup extension usage; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a markup extension.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>マークアップ拡張機能の使用方法の戻り値の型のオブジェクトをそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>この場合、 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>はマークアップ拡張機能を表していません。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named member from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>これからメンバーをという名前の特定の<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.GetMember%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.GetMember%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetMember%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The default implementation returns a &lt;xref:System.Xaml.XamlType&gt; based on internal CLR reflection and evaluation against the schema context.</source>
          <target state="translated">既定の実装を返します、 &lt;xref:System.Xaml.XamlType&gt;CLR の内部のリフレクションとスキーマのコンテキストで評価に基づいて&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.GetMember%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.GetMember%2A&gt;。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupMember is virtual, and therefore, can be overridden.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; LookupMember 仮想的では、そのため、オーバーライドされることができます。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">上書きされる可能性があります (悪意のあるものかどうかまたはそれ以外の場合) と予想される方法で不要になった位置が揃うように、報告された XAML 型のメンバーを変更する、&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>基になる CLR 型に関する情報&lt;/xref:System.ComponentModel.TypeDescriptor&gt;。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">Reporting メンバーのセキュリティ クリティカルなチェックには、基になる CLR 型を代わりに使用します。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">(文字列) として取得するメンバーの名前です。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to return a member even if that member has a <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> value for <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to not return a <ph id="ph3">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph> member.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>そのメンバーがある場合でも、メンバーを返す、 <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>値<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>を戻さない、 <ph id="ph3">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>メンバー。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the member, if a member was found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メンバーが、それ以外の場合は、メンバーの情報を<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">マークアップ拡張機能の種類の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型が返されます<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The default implementation uses internal reflection information based on finding constructors and checking the arity.</source>
          <target state="translated">既定の実装では、コンス トラクターを検索して、アリティのチェックに基づく内部のリフレクション情報を使用します。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>This API is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">この API は、関連する場合は、こののみ&lt;xref:System.Xaml.XamlType&gt;マークアップ拡張機能を表します (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;は<ph id="ph1">`true`</ph>).&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">入力<ph id="ph1">`parameterCount`</ph>を使用しない特定の位置指定パラメーターの型を要求します。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">マークアップ拡張機能の使用のアリティを指定することがあります。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">多くの場合、マークアップ拡張機能の使用は、複数の署名を持つし、区別するために位置指定パラメーターの異なるパラメーター アリティ (数) を使用します。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">ただし、重複 arities を許可して、差別化要因の位置指定パラメーターの型を使用するスキーマ コンテキストを構成することができます。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;。&lt;/xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>For a specific arity count, the parameter positions and types can vary.</source>
          <target state="translated">特定のアリティ count の場合は、パラメーターの位置と型が異なります。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>To get the positional type of a specific arity's markup extension usage, you first call &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt; with the arity count.</source>
          <target state="translated">特定のアリティのマークアップ拡張機能の使用の位置指定の種類を取得するには、最初に呼び出す&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;アリティ カウント&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">返されるコレクションからその位置に項目を取得します。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">情報を表示する特定の構文またはコンス トラクター モードの数 (アリティ)。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values where each such <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is the type for that position in the syntax.</source>
          <target state="translated">一連の<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>値 where これらの各<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>は構文内の位置の型です。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>You must specify those types in the same order when supplying markup input for the markup extension.</source>
          <target state="translated">マークアップ、マークアップ拡張機能の入力を指定するときは、同じ順序でそれらの型を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Returns a handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">マークアップ拡張機能のセット操作に使用するハンドラーのコールバックを返します。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;.</source>
          <target state="translated">既定の実装が&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;。&lt;/xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;の読み取りに基づいた値を返します</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>A handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">マークアップ拡張機能のセット操作に使用するハンドラーのコールバック。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Returns a handler to use for type converter setting cases.</source>
          <target state="translated">型コンバーターを設定する場合に使用するハンドラーを返します。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;.</source>
          <target state="translated">既定の実装が&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;。&lt;/xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;を読み取り中に基づいた値を返します</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>A handler to use for type converter setting cases.</source>
          <target state="translated">型コンバーターを設定する場合に使用するハンドラー。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should be serialized using a mode that  trims surrounding whitespace.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>周囲の空白をトリミングするモードを使用してシリアル化する必要があります。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;。&lt;/xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;.</source>
          <target state="translated">既定の実装が&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;。&lt;/xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;を読み取り中に基づいた値を返します</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should be serialized in a mode that trims surrounding whitespace; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>周囲の空白をトリミングするモードでシリアル化された、それ以外にする必要があります<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint, which represents type-conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>を持つ、 <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>制約で、この値の型変換動作を表す<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;。&lt;/xref:System.Xaml.XamlType.TypeConverter%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.ComponentModel.TypeConverterAttribute&gt;.</source>
          <target state="translated">既定の実装が&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;。&lt;/xref:System.ComponentModel.TypeConverterAttribute&gt;を読み取り中に基づいた値を返します</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The default implementation can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">既定の実装を確認できますも&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;即時の基になる型の属性が見つからない場合、属性の&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>It also includes special logic for default conversion of enumerations, common value types, and generics.</source>
          <target state="translated">列挙型、共通の値型とジェネリックの既定の変換の特別なロジックも含まれています。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.TypeConverter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type-conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>制約をこの値の型変換動作を表す<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Returns the CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR を返します&lt;xref:System.Type&gt;この基になっている<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Type&gt; 。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The default implementation returns an internal field.</source>
          <target state="translated">既定の実装では、内部のフィールドを返します。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</source>
          <target state="translated">そのフィールドは構築時に初期化一般にし、その値はに基づいてどのコンス トラクターが呼び出されたと指定した情報です。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR&lt;xref:System.Type&gt;この基になっている<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、それ以外の<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Type&gt; 。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is built top-down during XAML initialization.</source>
          <target state="translated">示す値を返すかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XAML 初期化中に、トップダウンを構築します。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</source>
          <target state="translated">上から下へは、オブジェクト グラフを作成するときは、XAML プロセッサの動作を概算する比喩です。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>When built top-down, a type is instantiated, attached to the parent, and has its properties set.</source>
          <target state="translated">構築時に、トップダウン、型がインスタンス化される、親にアタッチされているし、そのプロパティが設定します。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">トップダウンの構築では、ハンドラーのプロパティ変更の複数回の呼び出しで回避できます。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">このような処理は、オブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスの最適化を提供します。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;.</source>
          <target state="translated">既定の実装が&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;。&lt;/xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;の読み取りに基づいた値を返します</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is built top-down during XAML initialization; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> XAML 初期化中に上から下へ、それ以外のビルドは<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint, which represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>を持つ、&lt;xref:System.Windows.Markup.ValueSerializer&gt;制約で、この値の値のシリアル化の動作を表す<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.Markup.ValueSerializer&gt; 。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;.</source>
          <target state="translated">このメソッドは、 &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;。&lt;/xref:System.Xaml.XamlType.ValueSerializer%2A&gt;への呼び出しによって呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;.</source>
          <target state="translated">既定の実装が&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;.&lt;/xref:System.Windows.Markup.ValueSerializerAttribute&gt;を読み取り中に基づいた値を返します</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">チェック&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;属性に直接の基になる型の属性が見つからない場合&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>It also includes special logic for default serialization of enumerations, common value types, or generics.</source>
          <target state="translated">列挙型、共通の値型またはジェネリックの既定のシリアル化の特別なロジックも含まれています。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">返すかどうか、値は使用できません、<ph id="ph1">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt; to use different logic.</source>
          <target state="translated">このメソッドをオーバーライドする場合は&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;別のロジックを使用する&lt;/xref:System.Xaml.XamlType.ValueSerializer%2A&gt;。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で&lt;xref:System.Windows.Markup.ValueSerializer&gt;をこの値の値のシリアル化の動作を表す制約<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、それ以外の<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.Markup.ValueSerializer&gt; 。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the returned <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if it represents a markup extension.</source>
          <target state="translated">返された型情報を提供する値を取得<bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>を表している場合、マークアップ拡張機能、します。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (<ph id="ph1">`x:MarkupExtension`</ph> is in the assignable types list).</source>
          <target state="translated">このプロパティは関連する場合は、こののみ&lt;xref:System.Xaml.XamlType&gt;マークアップ拡張機能を表します (<ph id="ph1">`x:MarkupExtension`</ph>割り当て可能な種類の一覧には).&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">ため既定内部 CLR リフレクション手法使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;で上書き&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the return type for markup extension usage; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a markup extension.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>マークアップ拡張機能の使用方法の戻り値の型のオブジェクトをそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>この場合、 <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>はマークアップ拡張機能を表していません。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Gets the string name of the type that this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents.</source>
          <target state="translated">型の文字列名を取得この<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>を表します。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>This property typically gets the schema-constructed name (per the &lt;xref:System.Xaml.XamlType.%23ctor%2A&gt; signature), or the name of the &lt;xref:System.Type&gt;, if it is constructed by using the pertinent constructor of the CLR type system.</source>
          <target state="translated">このプロパティは、通常、スキーマで構築された名前を取得 (あたり、&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;署名)、またはの名前、 &lt;xref:System.Type&gt;、CLR 型システムの適切なコンス トラクターを使用して構成する場合&lt;/xref:System.Type&gt;&lt;/xref:System.Xaml.XamlType.%23ctor%2A&gt;。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The string name of this XAML type.</source>
          <target state="translated">この XAML 型の文字列名。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have the same value.</source>
          <target state="translated">指定した&amp;2; つあるかどうかを判断<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが同じ値を設定します。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType1</ph><ept id="p2">&lt;/code&gt;</ept> is the same as the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlType2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合の値<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType1</ph> <ept id="p2">&lt;/code&gt;</ept>はの値と同じ<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlType2</ph> <ept id="p3">&lt;/code&gt;</ept>、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have different values.</source>
          <target state="translated">指定した&amp;2; つあるかどうかを判断<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが異なる値を設定します。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType1</ph><ept id="p2">&lt;/code&gt;</ept> is different from the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlType2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合の値<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType1</ph> <ept id="p2">&lt;/code&gt;</ept>の値とは異なる<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlType2</ph> <ept id="p3">&lt;/code&gt;</ept>、それ以外の<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Gets the single XAML namespace that is the primary XAML namespace for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">このプライマリの XAML 名前空間は、1 つの XAML 名前空間を取得<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>This implementation provides the same value as calling &lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt; and then getting the first value string from the returned enumerable set.</source>
          <target state="translated">この実装は呼び出すことと同じ値を提供&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;返される列挙可能なセットから最初の値の文字列を取得しています&lt;/xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The identifier, as a string, of the primary XAML namespace for this XAML type.</source>
          <target state="translated">この XAML 型のプライマリの XAML 名前空間の文字列としての識別子です。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Gets the active <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for processing this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アクティブな取得<bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>これを処理するため<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.XamlSchemaContext&gt; is a required parameter entry when constructing a &lt;xref:System.Xaml.XamlType&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlSchemaContext&gt;必要なパラメーターの入力を&lt;xref:System.Xaml.XamlType&gt;。&lt;/xref:System.Xaml.XamlType&gt;を構築するときにします。&lt;/xref:System.Xaml.XamlSchemaContext&gt;</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The active <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for processing this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">アクティブな<bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>これを処理するため<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この文字列表現を返します<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xaml.XamlType&gt; implementation of &lt;xref:System.Object.ToString%2A&gt; returns the &lt;xref:System.Xaml.XamlType.Name%2A&gt; property of the &lt;xref:System.Xaml.XamlType&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt; &lt;xref:System.Object.ToString%2A&gt; &lt;xref:System.Xaml.XamlType.Name%2A&gt; &lt;xref:System.Xaml.XamlType&gt;。&lt;/xref:System.Xaml.XamlType&gt;プロパティ&lt;/xref:System.Xaml.XamlType.Name%2A&gt;を返します&lt;/xref:System.Object.ToString%2A&gt;の実装&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>A string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この文字列表現<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</source>
          <target state="translated">示す値を取得するかどうかこの<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が空白のコンテンツ内の周囲の空白をトリミングするシリアル化の動作を処理します。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことができます&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a type that uses whitespace trimming; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>空白文字を使用する型を表すトリム、それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Gets a list of type arguments for cases where this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a generic.</source>
          <target state="translated">ケースの型引数の一覧を取得、この<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ジェネリック型を表します。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>There are certain scenarios for a &lt;xref:System.Xaml.XamlType&gt; where calling the TypeArguments parameter returns a list where the types are still open.</source>
          <target state="translated">特定のシナリオがある、&lt;xref:System.Xaml.XamlType&gt;場所 TypeArguments パラメーターを呼び出して一覧を返します、型がまだ開いて&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>In this case, one or more of the returned &lt;xref:System.Xaml.XamlType&gt; values will have placeholder values for &lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;, such as <ph id="ph1">`T`</ph>, to represent that the generic is still open.</source>
          <target state="translated">この場合は、1 つ以上で、返された&lt;xref:System.Xaml.XamlType&gt;値のプレース ホルダーの値になります&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;など<ph id="ph1">`T`</ph>をジェネリックは開いていることを示します&lt;/xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>This scenario can occur if you get a &lt;xref:System.Xaml.XamlType&gt; from a call to &lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;, instead of from a XAML reader implementation.</source>
          <target state="translated">このシナリオは、表示された場合に発生することができます、&lt;xref:System.Xaml.XamlType&gt;への呼び出しから&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;の代わりに、XAML リーダーの実装から&lt;/xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>A list of type argument types; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> does not represent a generic.</source>
          <target state="translated">型引数の型の一覧それ以外の場合、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>この場合、 <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>はジェネリック型を表していません。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>制約型の値の変換動作を表します<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことが&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>制約型の値の変換動作を表します<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Gets the CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR の取得&lt;xref:System.Type&gt;この基になっている<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Type&gt; 。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR&lt;xref:System.Type&gt;この基になっている<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Type&gt; 。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得、 <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で&lt;xref:System.Windows.Markup.ValueSerializer&gt;をこの値の値のシリアル化の動作を表す制約<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.Markup.ValueSerializer&gt; 。</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">既定値内部 CLR リフレクション手法を使用しないでくださいかどうか、 &lt;xref:System.Xaml.XamlType&gt;、このプロパティへの呼び出しを呼び出すことが&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;の上書きを&lt;xref:System.Xaml.XamlType&gt;クラスを派生します&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;&lt;/xref:System.Xaml.XamlType&gt;。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; on this type.</source>
          <target state="translated">戻り値およびその他の動作に関する詳細については、ドキュメントを参照して&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;この型にします&lt;/xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>で&lt;xref:System.Windows.Markup.ValueSerializer&gt;をこの値の値のシリアル化の動作を表す制約<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、それ以外の<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Windows.Markup.ValueSerializer&gt; 。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>