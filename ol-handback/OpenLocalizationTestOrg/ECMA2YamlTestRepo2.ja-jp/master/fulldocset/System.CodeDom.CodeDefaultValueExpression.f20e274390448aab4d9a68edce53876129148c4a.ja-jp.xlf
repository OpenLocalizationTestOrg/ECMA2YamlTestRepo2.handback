<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aeb5e78e2d5756b53923c98956ccf244e4a73cc3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeDefaultValueExpression.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75726c971636bdc66e6ca489a03e110a7cd0f9dc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49a639bea98c633dedbfc0dbcd31aee6baf6f176</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a reference to a default value.</source>
          <target state="translated">既定値への参照を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A CodeDefaultValueExpression can be used to represent a reference to a default value.</source>
          <target state="translated">既定値への参照を表す、CodeDefaultValueExpression を使用できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.CodeDom.CodeDefaultValueExpression.Type%2A&gt; property specifies the reference to the value type.</source>
          <target state="translated">&lt;xref:System.CodeDom.CodeDefaultValueExpression.Type%2A&gt;プロパティが値型への参照を指定します&lt;/xref:System.CodeDom.CodeDefaultValueExpression.Type%2A&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The CodeDefaultValueExpression class is used in the generation of generics-based code.</source>
          <target state="translated">CodeDefaultValueExpression クラスは、汎用ベースのコードの生成に使用します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">ジェネリックの詳細については、次を参照してください。 <bpt id="p1">[</bpt>、.NET Framework クラス ライブラリのジェネリック<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following code steps are provided in this section to further describe the use of the CodeDefaultValueExpression class to add a new default value to a code graph.</source>
          <target state="translated">次の手順のコードは、さらに コードのグラフに新しい既定値を追加する CodeDefaultValueExpression クラスの使用方法について説明するには、このセクションで提供されます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The code in part 1 is part of a larger example provided for the &lt;xref:System.CodeDom.CodeTypeParameter&gt; class.</source>
          <target state="translated">パート 1 でコードが&lt;xref:System.CodeDom.CodeTypeParameter&gt;クラス&lt;/xref:System.CodeDom.CodeTypeParameter&gt;で提供された大きな例の一部</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This code, when run through the C# code generator, results in the C# code that appears in part 2.</source>
          <target state="translated">C# コード ジェネレーターを実行すると、このコードは、第 2 部に表示される c# コードになります。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When this code is called in the statement in part 3, the result is the output shown in part 4.</source>
          <target state="translated">このコードは、パート 3 のステートメントで呼び出されると、パート 4 に示すように、出力になります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   // Part 1: Code to create a generic Print method.               CodeMemberMethod printMethod = new CodeMemberMethod();               CodeTypeParameter sType = new CodeTypeParameter("S");               sType.HasConstructorConstraint = true;               CodeTypeParameter tType = new CodeTypeParameter("T");               sType.HasConstructorConstraint = true;                  printMethod.Name = "Print";               printMethod.TypeParameters.Add(sType);               printMethod.TypeParameters.Add(tType);               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("T"))));               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("S"))));   ```</ph>      <ph id="ph2">```   // Part 2: Code generated by code in part 1.   public virtual void Print&lt;S, T&gt;()               where S : new()            {               Console.WriteLine(default(T));               Console.WriteLine(default(S));           }   ```</ph>      <ph id="ph3">```   // Part 3: Call to the generated method.   dict.Print&lt;System.Decimal, int&gt;();   ```</ph>      <ph id="ph4">```   // Part 4: Output of the generated method.   0   0      ```</ph></source>
          <target state="translated"><ph id="ph1">```   // Part 1: Code to create a generic Print method.               CodeMemberMethod printMethod = new CodeMemberMethod();               CodeTypeParameter sType = new CodeTypeParameter("S");               sType.HasConstructorConstraint = true;               CodeTypeParameter tType = new CodeTypeParameter("T");               sType.HasConstructorConstraint = true;                  printMethod.Name = "Print";               printMethod.TypeParameters.Add(sType);               printMethod.TypeParameters.Add(tType);               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("T"))));               printMethod.Statements.Add(ConsoleWriteLineStatement(                   new CodeDefaultValueExpression(new CodeTypeReference("S"))));   ```</ph>      <ph id="ph2">```   // Part 2: Code generated by code in part 1.   public virtual void Print&lt;S, T&gt;()               where S : new()            {               Console.WriteLine(default(T));               Console.WriteLine(default(S));           }   ```</ph>      <ph id="ph3">```   // Part 3: Call to the generated method.   dict.Print&lt;System.Decimal, int&gt;();   ```</ph>      <ph id="ph4">```   // Part 4: Output of the generated method.   0   0      ```</ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified code type reference.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.CodeDom.CodeDefaultValueExpression"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定したコードの種類の参照を使用します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that specifies the reference to a value type.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値型への参照を指定します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Gets or sets the data type reference for a default value.</source>
          <target state="translated">取得または既定値のデータ型の参照を設定します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object representing a data type that has a default value.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>既定値を持つデータ型を表すオブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>