<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">655ffbffba4695505f8ca982cc23dfc732582cbb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Configuration.IPersistComponentSettings.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fd5bd04fe114749807726110f0c828e0302f526</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3110686e11c84e8129aa29efc4ba41c6713a3c3d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines standard functionality for controls or libraries that store and retrieve application settings.</source>
          <target state="translated">コントロールまたは格納およびアプリケーションの設定を取得するライブラリの標準的な機能を定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Typically, you can add application settings support to an application by creating a settings wrapper class, which is derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;, and then add special properties to this class.</source>
          <target state="translated">派生する設定のラッパー クラスを作成することで、アプリケーションにアプリケーション設定のサポートを追加する通常、 &lt;xref:System.Configuration.ApplicationSettingsBase&gt;、このクラスに特殊なプロパティを追加および&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>However, this approach does not sufficiently encapsulate application settings for a control so that its container is shielded from the details.</source>
          <target state="translated">ただし、このアプローチ十分にカプセル化しないコントロール用のアプリケーション設定の詳細から、コンテナーがシールドされてようにします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The IPersistComponentSettings interface provides an application with a standard interface for communicating application settings state change requests to a control, component, or library module.</source>
          <target state="translated">IPersistComponentSettings インターフェイスでは、コントロール、コンポーネント、またはライブラリ モジュールにアプリケーション設定の状態変更要求を通信するための標準のインターフェイスを持つアプリケーションを提供します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Design-time tools also depend on this interface to properly manage controls and components.</source>
          <target state="translated">デザイン時ツールは、コントロールおよびコンポーネントを適切に管理するには、このインターフェイスによっても異なります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Reads the control's application settings into their corresponding properties and updates the control's state.</source>
          <target state="translated">対応するプロパティとコントロールのアプリケーション設定を読み込んで、コントロールの状態を更新します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In general, the LoadComponentSettings method performs two essential operations:      -   It causes each application settings instance contained by the control to refresh the values of its application settings properties, typically by calling their &lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt; methods.</source>
          <target state="translated">一般に、LoadComponentSettings メソッドが&amp;2; つの重要な操作を実行します:-を呼び出すことによって通常のアプリケーション設定のプロパティの値を更新するコントロールに含まれる各アプリケーションの設定インスタンスになります、&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;メソッド&lt;/xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   As required, it updates those general properties that depend on these reloaded settings properties.</source>
          <target state="translated">必要に応じてプロパティを再読み込みされたこれらの設定に依存する全般プロパティを更新します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, if the settings class contained a <ph id="ph1">`location`</ph> settings property, LoadComponentSettings should ensure that the control's &lt;xref:System.Windows.Forms.Control.Location%2A&gt; property is updated to reflect this reloaded setting.</source>
          <target state="translated">設定クラスが含まれている場合など、<ph id="ph1">`location`</ph>設定プロパティ、LoadComponentSettings できるように、コントロールの&lt;xref:System.Windows.Forms.Control.Location%2A&gt;プロパティが再読み込みされたこの設定を反映するように更新します&lt;/xref:System.Windows.Forms.Control.Location%2A&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Resets the control's application settings properties to their default values.</source>
          <target state="translated">コントロールのアプリケーション設定のプロパティを既定値にリセットします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The implementation of the ResetComponentSettings method typically calls the &lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt; method on each instance of an application settings class it contains.</source>
          <target state="translated">ResetComponentSettings メソッドの実装を呼び出す通常、&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;が含まれているアプリケーション設定クラスの各インスタンス上のメソッド&lt;/xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Persists the control's application settings properties.</source>
          <target state="translated">コントロールのアプリケーション設定のプロパティが保持されます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The SaveComponentSettings method writes the values of the control's application settings properties to the associated data store.</source>
          <target state="translated">SaveComponentSettings メソッドは、コントロールのアプリケーション設定のプロパティの値を関連するデータ ストアに書き込みます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The data store and serialization technique the method uses is determined by the settings provider associated with each settings class through the &lt;xref:System.Configuration.SettingsProviderAttribute&gt;.</source>
          <target state="translated">メソッドを使用してデータ ストアとシリアル化技法は&lt;xref:System.Configuration.SettingsProviderAttribute&gt;。&lt;/xref:System.Configuration.SettingsProviderAttribute&gt;を介して各設定クラスに関連付けられている設定プロバイダーによって決定されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can override the choice of the settings provider by using the &lt;xref:System.Configuration.ISettingsProviderService&gt; interface.</source>
          <target state="translated">使用して設定プロバイダーの選択をオーバーライドすることができます、&lt;xref:System.Configuration.ISettingsProviderService&gt;インターフェイス&lt;/xref:System.Configuration.ISettingsProviderService&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the &lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt; property is <ph id="ph2">`true`</ph>, the control should call SaveComponentSettings in its own &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method so that the control's configuration data is stored automatically before the application ends.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合、&lt;xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;プロパティは<ph id="ph2">`true`</ph>、コントロール呼び出す必要があります SaveComponentSettings 独自&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;メソッド、アプリケーションが終了する前に、コントロールの構成データは自動的に格納できるようにします&lt;/xref:System.Windows.Forms.Control.Dispose%2A&gt;&lt;/xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the control should automatically persist its application settings properties.</source>
          <target state="translated">取得またはコントロールがそのアプリケーション設定のプロパティを自動的に保持する必要があるかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If a control contains configuration data, it will typically persist this data in response to an explicit call to the &lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt; method or sometimes implicitly when the control's &lt;xref:System.Windows.Forms.Control.Dispose%2A&gt; method is invoked.</source>
          <target state="translated">明示的に呼び出すへの応答でこのデータが保持されます通常コントロール構成データが含まれている場合、&lt;xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;メソッドも暗黙的にまたはときに、コントロールの&lt;xref:System.Windows.Forms.Control.Dispose%2A&gt;メソッドが呼び出されます&lt;/xref:System.Windows.Forms.Control.Dispose%2A&gt;&lt;/xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The SaveSettings property determines whether a control automatically persists its configuration data when it is disposed.</source>
          <target state="translated">SaveSettings プロパティが破棄されるとき、コントロールがその、構成データを自動的に保持するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The default value of SaveSettings depends on the implementation of the control.</source>
          <target state="translated">SaveSettings の既定値は、コントロールの実装に依存します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The documentation for the control should indicate whether it uses application settings, what data is persisted, and what the default value of the SaveSettings property is.</source>
          <target state="translated">ドキュメント コントロールには、アプリケーションの設定を使用するかどうか、どのようなデータが保持され、SaveSettings プロパティの既定値は、新機能を示す必要があります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the control should automatically persist its state; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、コントロールを自動的に保持の状態です。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets or sets the value of the application settings key for the current instance of the control.</source>
          <target state="translated">取得またはコントロールの現在のインスタンスのアプリケーション設定キーの値を設定します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the SettingsKey property to disambiguate groups of application settings properties when there are multiple instances of the same wrapper class.</source>
          <target state="translated">同一のラッパー クラスの複数のインスタンスがある場合は、アプリケーション設定のプロパティのグループを区別するために、SettingsKey プロパティを使用します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, if a control contains an associated wrapper class, then placing multiple instances of the same control in the same application will typically result in multiple instances of the wrapper class.</source>
          <target state="translated">たとえば、コントロールが含まれている、関連付けられているラッパー クラスでは、通常は、同じアプリケーション内の同じコントロールの複数のインスタンスを配置する場合は、ラッパー クラスの複数のインスタンスで発生します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A settings key is required only when the configuration data differs on a per-instance basis; for example, the location of dynamically positioned controls.</source>
          <target state="translated">インスタンスごとの単位で構成データが異なる場合にのみ、設定キーが必要たとえば、動的に配置されているコントロールの場所です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following general rules apply to the use of SettingsKey:      -   A control, like any class, may contain zero or more application settings classes, derived from &lt;xref:System.Configuration.ApplicationSettingsBase&gt;.</source>
          <target state="translated">次の一般的な規則が SettingsKey の使用に適用します-任意のクラスと同様に、コントロールが&amp;0; 個以上のアプリケーション設定クラスを含む可能性があります&lt;xref:System.Configuration.ApplicationSettingsBase&gt;。&lt;/xref:System.Configuration.ApplicationSettingsBase&gt;から派生。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each settings class contains its own &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property, which helps disambiguate multiple instances of that class.</source>
          <target state="translated">各設定クラスには、独自の&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;プロパティ、そのクラスの複数のインスタンスのあいまいさを解消するのに役立ちます&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;が含まれています。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-   A control should separate its per-instance data and its shared data into different settings classes.</source>
          <target state="translated">-コントロールには、異なる設定クラスに、インスタンスごとのデータおよび共有データは別です。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>-   For a control with any per-instance configuration data, the <ph id="ph1">`get`</ph> accessor of the SettingsKey property should default to the &lt;xref:System.Windows.Forms.Control.Name%2A&gt; of the control.</source>
          <target state="translated">インスタンスごとの構成データを使用して、コントロールの<ph id="ph1">`get`</ph>SettingsKey プロパティのアクセサーが既定にする必要があります、&lt;xref:System.Windows.Forms.Control.Name%2A&gt;コントロールの&lt;/xref:System.Windows.Forms.Control.Name%2A&gt;。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In most cases the name of the control will be unique within an application.</source>
          <target state="translated">ほとんどの場合、コントロールの名前は、アプリケーション内で一意になります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the control contains only shared configuration data, <ph id="ph1">`get`</ph> should default to <ph id="ph2">`null`</ph>.</source>
          <target state="translated">コントロールには、構成データを共有のみが含まれている場合<ph id="ph1">`get`</ph>既定にする必要があります<ph id="ph2">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>-   The <ph id="ph1">`set`</ph> accessor for this property should be implemented to distinguish between settings classes containing per-instance and shared configuration data.</source>
          <target state="translated">-<ph id="ph1">`set`</ph>設定クラスのインスタンスおよび共有構成データを含む区別するためにこのプロパティのアクセサーを実装する必要があります。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For each settings class containing per-instance data, <ph id="ph1">`set`</ph> should just pass-through to the &lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt; property of the settings class.</source>
          <target state="translated">各設定クラスのインスタンスごとにデータを含む<ph id="ph1">`set`</ph>&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;設定クラスのプロパティ&lt;/xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName&gt;にだけでパススルーする必要があります</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For settings classes containing shared data, <ph id="ph1">`set`</ph> should perform no action for that settings class.</source>
          <target state="translated">共有のデータを含む設定クラスの<ph id="ph1">`set`</ph>必要がありますいないのアクションを実行する設定クラスです。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.String&gt; containing the settings key for the current instance of the control.</source>
          <target state="translated">A &lt;xref:System.String&gt;、コントロールの現在のインスタンスの設定キーを含むします&lt;/xref:System.String&gt;。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>