<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">705003c6f689a2b4d0080db9ca21f5c5de2802c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Data.DataSet.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e81f67c950eee1723ceb2f2c9797e4546c3c92ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a3d97bb9d963824c560aaa35301932b8da2af76</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an in-memory cache of data.</source>
          <target state="translated">データのメモリ内キャッシュを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The DataSet, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.</source>
          <target state="translated">データセット、データ ソースから取得したデータのインメモリ キャッシュで、あるは、ADO.NET アーキテクチャの主要なコンポーネントです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The DataSet consists of a collection of &lt;xref:System.Data.DataTable&gt; objects that you can relate to each other with &lt;xref:System.Data.DataRelation&gt; objects.</source>
          <target state="translated">データセットのコレクションから成る&lt;xref:System.Data.DataTable&gt;で互いに関連付けることができるオブジェクト&lt;xref:System.Data.DataRelation&gt;オブジェクト&lt;/xref:System.Data.DataRelation&gt;&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also enforce data integrity in the DataSet by using the &lt;xref:System.Data.UniqueConstraint&gt; and &lt;xref:System.Data.ForeignKeyConstraint&gt; objects.</source>
          <target state="translated">使用して、データセット内のデータの整合性を適用することができますも、&lt;xref:System.Data.UniqueConstraint&gt;と&lt;xref:System.Data.ForeignKeyConstraint&gt;オブジェクト&lt;/xref:System.Data.ForeignKeyConstraint&gt;&lt;/xref:System.Data.UniqueConstraint&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For further details about working with DataSet objects, see <bpt id="p1">[</bpt>DataSets, DataTables, and DataViews<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">データセット オブジェクトを操作の詳細については、次を参照してください。<bpt id="p1">[</bpt>データセット、Datatable、および Dataview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Whereas &lt;xref:System.Data.DataTable&gt; objects contain the data, the &lt;xref:System.Data.DataRelationCollection&gt; allows you to navigate though the table hierarchy.</source>
          <target state="translated">一方&lt;xref:System.Data.DataTable&gt;オブジェクトは、データを含む、&lt;xref:System.Data.DataRelationCollection&gt;がテーブルの階層構造を移動することができます&lt;/xref:System.Data.DataRelationCollection&gt;&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The tables are contained in a &lt;xref:System.Data.DataTableCollection&gt; accessed through the &lt;xref:System.Data.DataSet.Tables%2A&gt; property.</source>
          <target state="translated">テーブルが含まれている、&lt;xref:System.Data.DataTableCollection&gt;経由でアクセス、&lt;xref:System.Data.DataSet.Tables%2A&gt;プロパティ&lt;/xref:System.Data.DataSet.Tables%2A&gt;&lt;/xref:System.Data.DataTableCollection&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When accessing &lt;xref:System.Data.DataTable&gt; objects, note that they are conditionally case sensitive.</source>
          <target state="translated">アクセスするときに&lt;xref:System.Data.DataTable&gt;オブジェクト、条件付きで大文字小文字が区別されることに注意してください&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, if one &lt;xref:System.Data.DataTable&gt; is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</source>
          <target state="translated">たとえば、1 つ&lt;xref:System.Data.DataTable&gt;"mydatatable"の名前は"Mydatatable"という名前別と、テーブルのいずれかの検索に使用される文字列は大文字と小文字を区別見なされます&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</source>
          <target state="translated">ただし、"mydatatable"が存在する"Mydatatable"がない場合は、検索文字列が見なされると大文字小文字を区別しません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about working with &lt;xref:System.Data.DataTable&gt; objects, see <bpt id="p1">[</bpt>Creating a DataTable<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">操作の詳細については&lt;xref:System.Data.DataTable&gt;、オブジェクトを参照してください<bpt id="p1">[</bpt>DataTable の作成<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A DataSet can read and write data and schema as XML documents.</source>
          <target state="translated">データセットでは、読み取りでき、XML ドキュメントでは、データとスキーマを記述することができます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.</source>
          <target state="translated">データとスキーマする HTTP 経由で伝達し、XML が有効な任意のプラットフォーム上の任意のアプリケーションで使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can save the schema as an XML schema with the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method, and both schema and data can be saved using the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.</source>
          <target state="translated">XML スキーマとしてスキーマを保存することができます、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;を使用して、メソッド、およびスキーマとデータの両方を保存できる、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To read an XML document that includes both schema and data, use the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method.</source>
          <target state="translated">スキーマとデータの両方を含む XML ドキュメントを読み取り、使用、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッド&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In a typical multiple-tier implementation, the steps for creating and refreshing a DataSet, and in turn, updating the original data are to:      1.</source>
          <target state="translated">一般的な複数層の実装では、元のデータの更新手順の作成と、データセットを更新し、逆には: 1。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Build and fill each &lt;xref:System.Data.DataTable&gt; in a DataSet with data from a data source using a &lt;xref:System.Data.Common.DataAdapter&gt;.</source>
          <target state="translated">構築し、各入力&lt;xref:System.Data.DataTable&gt;&lt;xref:System.Data.Common.DataAdapter&gt;。&lt;/xref:System.Data.Common.DataAdapter&gt;を使用してデータ ソースからデータを含むデータセットで&lt;/xref:System.Data.DataTable&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Change the data in individual &lt;xref:System.Data.DataTable&gt; objects by adding, updating, or deleting &lt;xref:System.Data.DataRow&gt; objects.</source>
          <target state="translated">個々 のデータが変更&lt;xref:System.Data.DataTable&gt;オブジェクトの追加、更新、または削除を&lt;xref:System.Data.DataRow&gt;オブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Invoke the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method to create a second DataSet that features only the changes to the data.</source>
          <target state="translated">呼び出す、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;データへの変更のみが機能する&amp;2; 番目のデータセットを作成する方法&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>4.</source>
          <target state="translated">4.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call the &lt;xref:System.Data.Common.DataAdapter.Update%2A&gt; method of the &lt;xref:System.Data.Common.DataAdapter&gt;, passing the second DataSet as an argument.</source>
          <target state="translated">呼び出す、&lt;xref:System.Data.Common.DataAdapter.Update%2A&gt;のメソッド、 &lt;xref:System.Data.Common.DataAdapter&gt;、2 番目のデータセットを引数として渡します&lt;/xref:System.Data.Common.DataAdapter&gt;&lt;/xref:System.Data.Common.DataAdapter.Update%2A&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>5.</source>
          <target state="translated">5.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Invoke the &lt;xref:System.Data.DataSet.Merge%2A&gt; method to merge the changes from the second DataSet into the first.</source>
          <target state="translated">呼び出す、&lt;xref:System.Data.DataSet.Merge%2A&gt;最初に&amp;2; 番目のデータセットからの変更をマージするメソッド&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>6.</source>
          <target state="translated">6.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Invoke the &lt;xref:System.Data.DataSet.AcceptChanges%2A&gt; on the DataSet.</source>
          <target state="translated">呼び出す、&lt;xref:System.Data.DataSet.AcceptChanges%2A&gt;データセットにします&lt;/xref:System.Data.DataSet.AcceptChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Alternatively, invoke &lt;xref:System.Data.DataSet.RejectChanges%2A&gt; to cancel the changes.</source>
          <target state="translated">代わりに、呼び出す&lt;xref:System.Data.DataSet.RejectChanges%2A&gt;変更を取り消します&lt;/xref:System.Data.DataSet.RejectChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The DataSet and &lt;xref:System.Data.DataTable&gt; objects inherit from &lt;xref:System.ComponentModel.MarshalByValueComponent&gt;, and support the &lt;xref:System.Runtime.Serialization.ISerializable&gt; interface for remoting.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; DataSet および&lt;xref:System.Data.DataTable&gt;オブジェクトから継承&lt;xref:System.ComponentModel.MarshalByValueComponent&gt;、およびサポート、&lt;xref:System.Runtime.Serialization.ISerializable&gt;リモート処理用のインターフェイス&lt;/xref:System.Runtime.Serialization.ISerializable&gt;&lt;/xref:System.ComponentModel.MarshalByValueComponent&gt;&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These are the only ADO.NET objects that can be remoted.</source>
          <target state="translated">これらは、リモート処理ができる唯一の ADO.NET オブジェクトです。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Classes inherited from DataSet are not finalized by the garbage collector, because the finalizer has been suppressed in DataSet.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; データセット内のファイナライザーが中止されたために、データセットから継承されたクラスは、ガベージ コレクターによって終了処理されません。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The derived class can call the &lt;xref:System.GC.ReRegisterForFinalize%2A&gt; method in its constructor to allow the class to be finalized by the garbage collector.</source>
          <target state="translated">派生クラスを呼び出すことができます、 &lt;xref:System.GC.ReRegisterForFinalize%2A&gt;、クラス、ガベージ コレクターによって完了するを使用できるように、コンス トラクターのメソッド&lt;/xref:System.GC.ReRegisterForFinalize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This implementation of the &lt;xref:System.Data.DataSet&gt; constructor takes no parameters, and creates a default name, "NewDataSet," for the new instance.</source>
          <target state="translated">この実装、&lt;xref:System.Data.DataSet&gt;コンス トラクターのパラメーターをとらないし、"NewDataSet、"の既定の名前を新しいインスタンスを作成します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A name for the &lt;xref:System.Data.DataSet&gt; is required to ensure that the XML representation of the &lt;xref:System.Data.DataSet&gt; always has a name for the document element, which is the highest-level element in a schema definition.</source>
          <target state="translated">名前、&lt;xref:System.Data.DataSet&gt;の XML 表現することを確認するために必要な&lt;xref:System.Data.DataSet&gt;常にスキーマ定義内の最上位の要素は、ドキュメントの要素の名前を持ちます&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the given name.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定した名前のクラスです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A name for the &lt;xref:System.Data.DataSet&gt; is required to ensure that the XML representation of the &lt;xref:System.Data.DataSet&gt; always has a name for the document element, which is the highest level element in a schema definition.</source>
          <target state="translated">名前、&lt;xref:System.Data.DataSet&gt;の XML 表現することを確認するために必要な&lt;xref:System.Data.DataSet&gt;常にスキーマ定義で最高レベルの要素は、ドキュメントの要素の名前を持ちます&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The name of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">名前、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class that has the given serialization information and context.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を指定したシリアル化情報とコンテキストを持つクラス。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The data needed to serialize or deserialize an object.</source>
          <target state="translated">オブジェクトを逆シリアル化または逆シリアル化に必要なデータです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The source and destination of a given serialized stream.</source>
          <target state="translated">ソースと指定したシリアル化されたストリームの転送先。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object.</source>
          <target state="translated">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;オブジェクト&lt;/xref:System.Runtime.Serialization.StreamingContext&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The boolean value.</source>
          <target state="translated">ブール値です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Commits all the changes made to this <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> since it was loaded or since the last time AcceptChanges was called.</source>
          <target state="translated">これに加えられたすべての変更をコミット<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>読み込まれてから、または前回 AcceptChanges が呼び出されました。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Both the &lt;xref:System.Data.DataRow&gt; and &lt;xref:System.Data.DataTable&gt; classes have AcceptChanges methods.</source>
          <target state="translated">両方の&lt;xref:System.Data.DataRow&gt;と&lt;xref:System.Data.DataTable&gt;クラス AcceptChanges 方法があります&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataRow&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Calling &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; at the &lt;xref:System.Data.DataTable&gt; level causes the &lt;xref:System.Data.DataRow.AcceptChanges%2A&gt; method for each &lt;xref:System.Data.DataRow&gt; to be called.</source>
          <target state="translated">呼び出す&lt;xref:System.Data.DataTable.AcceptChanges%2A&gt;で、&lt;xref:System.Data.DataTable&gt;レベルの原因として、&lt;xref:System.Data.DataRow.AcceptChanges%2A&gt;メソッドごとに&lt;xref:System.Data.DataRow&gt;を呼び出せる&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataRow.AcceptChanges%2A&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTable.AcceptChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Similarly, invoking AcceptChanges on the &lt;xref:System.Data.DataSet&gt; causes &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; to be called on each table within the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">同様に、 &lt;xref:System.Data.DataSet&gt; &lt;xref:System.Data.DataTable.AcceptChanges%2A&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;内の各テーブルに呼び出される&lt;/xref:System.Data.DataTable.AcceptChanges%2A&gt;と、&lt;/xref:System.Data.DataSet&gt; AcceptChanges を呼び出す</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this manner, you have multiple levels at which the method can be invoked.</source>
          <target state="translated">この方法では、メソッドの呼び出された複数のレベルを持ちます。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Calling the AcceptChanges of the &lt;xref:System.Data.DataSet&gt; enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.</source>
          <target state="translated">AcceptChanges を呼び出す、&lt;xref:System.Data.DataSet&gt;を&amp;1; 回の呼び出しですべての下位オブジェクト (たとえば、テーブルと行) のメソッドを呼び出すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`AcceptChanges`</ph> on the <ph id="ph2">`DataSet`</ph>, any &lt;xref:System.Data.DataRow&gt; objects still in edit-mode end their edits successfully.</source>
          <target state="translated">呼び出すと<ph id="ph1">`AcceptChanges`</ph>上、 <ph id="ph2">`DataSet`</ph>、any&lt;xref:System.Data.DataRow&gt;まだ編集モードでのオブジェクトがそれらの編集を正常に終了します&lt;/xref:System.Data.DataRow&gt;。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataRow.RowState%2A&gt; property of each &lt;xref:System.Data.DataRow&gt; also changes; <ph id="ph1">`Added`</ph> and <ph id="ph2">`Modified`</ph> rows become <ph id="ph3">`Unchanged`</ph>, and <ph id="ph4">`Deleted`</ph> rows are removed.</source>
          <target state="translated">各&lt;xref:System.Data.DataRow&gt;の&lt;xref:System.Data.DataRow.RowState%2A&gt;プロパティも変更します。<ph id="ph1">`Added`</ph>と<ph id="ph2">`Modified`</ph>になる行<ph id="ph3">`Unchanged`</ph>、および<ph id="ph4">`Deleted`</ph>行が削除されます&lt;/xref:System.Data.DataRow.RowState%2A&gt;&lt;/xref:System.Data.DataRow&gt;。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`DataSet`</ph> contains &lt;xref:System.Data.ForeignKeyConstraint&gt; objects, invoking the <ph id="ph2">`AcceptChanges`</ph> method also causes the &lt;xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A&gt; to be enforced.</source>
          <target state="translated">場合、<ph id="ph1">`DataSet`</ph>が含まれています&lt;xref:System.Data.ForeignKeyConstraint&gt;呼び出し、オブジェクト、<ph id="ph2">`AcceptChanges`</ph>メソッドもにより、&lt;xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A&gt;適用する&lt;/xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A&gt;&lt;/xref:System.Data.ForeignKeyConstraint&gt;。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph><ph id="ph2"> &gt;  </ph><ph id="ph3">`AcceptChanges`</ph> and <ph id="ph4">`RejectChanges`</ph> only apply to <ph id="ph5">`DataRow`</ph> related changes (that is, Add, Remove, Delete, and Modify).</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> <ph id="ph2"> &gt;  </ph> <ph id="ph3">`AcceptChanges`</ph>と<ph id="ph4">`RejectChanges`</ph>のみに適用<ph id="ph5">`DataRow`</ph>関連の変更 (つまり、Add、Remove、Delete、および変更)。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>They are not applicable to schema or structural changes.</source>
          <target state="translated">これらはスキーマまたは構造の変更を適用できません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>&gt;    &gt;  Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.</source>
          <target state="translated">&gt;&gt; DataAdapter を使用して、データセットに格納された場合、通話 AcceptChanges は、データ ソースにこれらの変更をレプリケートされません。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In that situation, call &lt;xref:System.Data.Common.DataAdapter.Update%2A&gt; instead.</source>
          <target state="translated">そのような状況で呼び出す&lt;xref:System.Data.Common.DataAdapter.Update%2A&gt;代わりにします&lt;/xref:System.Data.Common.DataAdapter.Update%2A&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Updating Data Sources with DataAdapters<ept id="p1">](http://msdn.microsoft.com/library/33y2221y.aspx)</ept> for more information.</source>
          <target state="translated">参照してください<bpt id="p1">[</bpt>Dataadapter によるデータ ソースを更新<ept id="p1">](http://msdn.microsoft.com/library/33y2221y.aspx)</ept>詳細についてはします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Begins the initialization of a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used on a form or used by another component.</source>
          <target state="translated">初期化を開始、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>フォームまたは別のコンポーネントで使用します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初期化は実行時に発生します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</source>
          <target state="translated">Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を開始します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.EndInit%2A&gt; method ends the initialization.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.EndInit%2A&gt;メソッドが初期化を終了します&lt;/xref:System.Data.DataSet.EndInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Using the BeginInit and &lt;xref:System.Data.DataSet.EndInit%2A&gt; methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">BeginInit を使用して&lt;xref:System.Data.DataSet.EndInit%2A&gt;メソッド使用されないように、コントロールが完全に初期化される前にします&lt;/xref:System.Data.DataSet.EndInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether string comparisons within <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects are case-sensitive.</source>
          <target state="translated">内で比較を文字列かどうかを示す値を取得または設定<bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトは、大文字小文字を区別します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The CaseSensitive property affects how sorting, searching, and filtering operations are performed on each &lt;xref:System.Data.DataTable&gt; object contained in a &lt;xref:System.Data.DataSet&gt; when using the &lt;xref:System.Data.DataTable.Select%2A&gt; method.</source>
          <target state="translated">CaseSensitive プロパティでは、それぞれの並べ替え、検索、およびフィルター操作を実行する方法に影響&lt;xref:System.Data.DataTable&gt;に含まれているオブジェクト、&lt;xref:System.Data.DataSet&gt;を使用する場合、&lt;xref:System.Data.DataTable.Select%2A&gt;メソッド&lt;/xref:System.Data.DataTable.Select%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>By default, setting the CaseSensitive property for a &lt;xref:System.Data.DataSet&gt; also sets the &lt;xref:System.Data.DataTable.CaseSensitive%2A&gt; property of each associated &lt;xref:System.Data.DataTable&gt; to the same value.</source>
          <target state="translated">既定では、CaseSensitive プロパティを設定、&lt;xref:System.Data.DataSet&gt;も設定、&lt;xref:System.Data.DataTable.CaseSensitive%2A&gt;のそれぞれ関連付けられているプロパティ&lt;xref:System.Data.DataTable&gt;同じ値にします&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTable.CaseSensitive%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if string comparisons are case-sensitive; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、文字列比較では、大文字小文字を区別します。それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Clears the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of any data by removing all rows in all tables.</source>
          <target state="translated">消去、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のすべてのテーブル内のすべての行を削除することですべてのデータ。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Data.DataSet&gt; is bound to an &lt;xref:System.Xml.XmlDataDocument&gt;, calling Clear or &lt;xref:System.Data.DataTable.Clear%2A?displayProperty=fullName&gt; raises the &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">場合&lt;xref:System.Data.DataSet&gt;&lt;xref:System.Xml.XmlDataDocument&gt;クリアまたは&lt;xref:System.Data.DataTable.Clear%2A?displayProperty=fullName&gt;&lt;xref:System.NotSupportedException&gt;.&lt;/xref:System.NotSupportedException&gt;を発生させます&lt;/xref:System.Data.DataTable.Clear%2A?displayProperty=fullName&gt;を呼び出す&lt;/xref:System.Xml.XmlDataDocument&gt;にバインド&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To avoid this situation, traverse each table, removing each row one at a time.</source>
          <target state="translated">このような状況を避けるためには、テーブルごとに、一度に&amp;1; 行ずつの削除を走査します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Copies the structure of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, including all <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> schemas, relations, and constraints.</source>
          <target state="translated">構造をコピー、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、すべてを含む<bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>スキーマ、リレーション、および制約。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Does not copy any data.</source>
          <target state="translated">任意のデータはコピーされません。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with the same schema as the current <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, but none of the data.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在と同じスキーマで<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>が、すべてのデータ。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Copies both the structure and data for this <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この構造とデータの両方をコピー <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with the same structure (table schemas, relations, and constraints) and data as this <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>同じ構造 (テーブルのスキーマ、リレーション、および制約) とこのデータを持つ<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If these classes have been subclassed, the copy will also be of the same subclasses.</source>
          <target state="translated">これらのクラスがサブクラス化されている場合、コピーが同じサブクラスにもなります。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with one result set per <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, in the same sequence as the tables appear in the &lt;xref:System.Data.DataSet.Tables*&gt; collection.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ごとに設定する&amp;1; つの結果と<bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>で、同じシーケンスに表示される、テーブル、&lt;xref:System.Data.DataSet.Tables*&gt;コレクション&lt;/xref:System.Data.DataSet.Tables*&gt;。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In order to ensure the order of the result sets within the returned &lt;xref:System.Data.DataTableReader&gt;, if a &lt;xref:System.Data.DataTable&gt; within the &lt;xref:System.Data.DataSet&gt; is empty, it is represented by an empty result set within the returned <ph id="ph1">`DataTableReader`</ph>.</source>
          <target state="translated">内で返された結果セットの順序を保証するために&lt;xref:System.Data.DataTableReader&gt;場合、&lt;xref:System.Data.DataTable&gt;内で、&lt;xref:System.Data.DataSet&gt;が空で、これによって表される空の結果セット内で返された<ph id="ph1">`DataTableReader`</ph>&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTableReader&gt;。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing one or more result sets, corresponding to the <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instances contained within the source <bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を対応する&amp;1; つまたは複数の結果セットを含む、 <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 、ソース内に含まれるインスタンス<bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with one result set per <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返します、 <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ごとに設定する&amp;1; つの結果に<bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In order to ensure that the order of the result sets within the returned &lt;xref:System.Data.DataTableReader&gt;, if a &lt;xref:System.Data.DataTable&gt; within the &lt;xref:System.Data.DataSet&gt; is empty, it is represented by an empty result set within the returned <ph id="ph1">`DataTableReader`</ph>.</source>
          <target state="translated">返された内の結果の順序を設定することを確認するために&lt;xref:System.Data.DataTableReader&gt;場合は、&lt;xref:System.Data.DataTable&gt;内で、&lt;xref:System.Data.DataSet&gt;が空で、これによって表される空の結果セット内で返された<ph id="ph1">`DataTableReader`</ph>&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTableReader&gt;。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Because this overloaded version allows you to supply a list of <ph id="ph1">`DataTable`</ph> instances as parameters, you can specify the order in which the result sets appear within the returned <ph id="ph2">`DataTableReader`</ph>.</source>
          <target state="translated">このオーバー ロードされたバージョンでは、リストを指定することができますので<ph id="ph1">`DataTable`</ph>パラメーターとして、インスタンス内で返された結果セットが表示される順序を指定できます<ph id="ph2">`DataTableReader`</ph>です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>An array of DataTables providing the order of the result sets to be returned in the <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返される結果の順序を提供するデータ テーブルの配列を設定、 <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing one or more result sets, corresponding to the <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instances contained within the source <bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Data.DataTableReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を対応する&amp;1; つまたは複数の結果セットを含む、 <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> 、ソース内に含まれるインスタンス<bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The returned result sets are in the order specified by the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataTables</ph><ept id="p1">&lt;/code&gt;</ept> parameter.</source>
          <target state="translated">指定された順序で返された結果セットにが、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">dataTables</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーター。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the current <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在の名前を取得または<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The name of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">名前、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Gets a custom view of the data contained in the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to allow filtering, searching, and navigating using a custom <bpt id="p2">&lt;xref href="System.Data.DataViewManager"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれるデータのカスタム ビューを取得、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>フィルター、検索、およびカスタムの使用を許可する<bpt id="p2">&lt;xref href="System.Data.DataViewManager"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataViewManager&gt; returned by the DefaultViewManager property allows you to create custom settings for each &lt;xref:System.Data.DataTable&gt; in the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataViewManager&gt;プロパティでは、各&lt;xref:System.Data.DataTable&gt;&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataTable&gt;のカスタム設定を作成することができます DefaultViewManager によって返される&lt;/xref:System.Data.DataViewManager&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When you obtain a &lt;xref:System.Data.DataView&gt; from a &lt;xref:System.Data.DataTable&gt;, the sort order, filtering, and &lt;xref:System.Data.DataViewRowState&gt; are configured according to the settings in the DefaultViewManager property.</source>
          <target state="translated">取得する場合、&lt;xref:System.Data.DataView&gt;から、 &lt;xref:System.Data.DataTable&gt;、並べ替え順、フィルター処理、および&lt;xref:System.Data.DataViewRowState&gt;DefaultViewManager プロパティの設定に従って構成されます&lt;/xref:System.Data.DataViewRowState&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataView&gt;。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.DataViewManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Data.DataViewManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Determines the &lt;xref:System.Data.DataSet.SchemaSerializationMode*&gt; for a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">決定、&lt;xref:System.Data.DataSet.SchemaSerializationMode*&gt;の<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Data.DataSet.SchemaSerializationMode*&gt; 。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This method can be called when deserializing a typed &lt;xref:System.Data.DataSet&gt; to determine its &lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;.</source>
          <target state="translated">シリアル化、型指定された&lt;xref:System.Data.DataSet&gt;その&lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;。&lt;/xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;を決定する&lt;/xref:System.Data.DataSet&gt;ときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlReader&gt; instance that is passed during deserialization of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Xml.XmlReader&gt;の逆シリアル化中に渡されるインスタンス、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Xml.XmlReader&gt; 。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration indicating whether schema information has been omitted from the payload.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ペイロードからスキーマ情報が省略されているかどうかを示す列挙値。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Determines the &lt;xref:System.Data.DataSet.SchemaSerializationMode*&gt; for a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">決定、&lt;xref:System.Data.DataSet.SchemaSerializationMode*&gt;の<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Data.DataSet.SchemaSerializationMode*&gt; 。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This method can be called when deserializing a typed &lt;xref:System.Data.DataSet&gt; to determine its &lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;.</source>
          <target state="translated">シリアル化、型指定された&lt;xref:System.Data.DataSet&gt;その&lt;xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;。&lt;/xref:System.Data.DataSet.SchemaSerializationMode%2A&gt;を決定する&lt;/xref:System.Data.DataSet&gt;ときに、このメソッドを呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that a <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>’s protected constructor <ph id="ph1">&amp;lt;</ph>xref:System.Data.DataSet.%23ctor%2A<ph id="ph2">&amp;gt;</ph> is invoked with during deserialization in remoting scenarios.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を<bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>コンス トラクターを protected <ph id="ph1">&amp;lt;</ph>xref:System.Data.DataSet.%23ctor%2A<ph id="ph2">&amp;gt;</ph>がリモート処理のシナリオで逆シリアル化中に呼び出されます。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that a <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>’s protected constructor <ph id="ph1">&amp;lt;</ph>xref:System.Data.DataSet.%23ctor%2A<ph id="ph2">&amp;gt;</ph> is invoked with during deserialization in remoting scenarios.</source>
          <target state="translated">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;を<bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>コンス トラクターを protected <ph id="ph1">&amp;lt;</ph>xref:System.Data.DataSet.%23ctor%2A<ph id="ph2">&amp;gt;</ph>がリモート処理のシナリオで逆シリアル化中に呼び出されます&lt;/xref:System.Runtime.Serialization.StreamingContext&gt;。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration indicating whether schema information has been omitted from the payload.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>ペイロードからスキーマ情報が省略されているかどうかを示す列挙値。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Ends the initialization of a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is used on a form or used by another component.</source>
          <target state="translated">初期化を終了、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>フォームまたは別のコンポーネントで使用します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The initialization occurs at run time.</source>
          <target state="translated">初期化は実行時に発生します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</source>
          <target state="translated">Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を終了します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.BeginInit%2A&gt; method starts the initialization.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.BeginInit%2A&gt;メソッドは、初期化を開始します&lt;/xref:System.Data.DataSet.BeginInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Using the &lt;xref:System.Data.DataSet.BeginInit%2A&gt; and EndInit methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">使用して、 &lt;xref:System.Data.DataSet.BeginInit%2A&gt;EndInit メソッド使用されないように、コントロールが完全に初期化される前に、&lt;/xref:System.Data.DataSet.BeginInit%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</source>
          <target state="translated">取得または更新操作を行うときに、制約の規則が後にするかどうかを示す値を設定します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Constraints are set at the &lt;xref:System.Data.DataTable&gt; level (&lt;xref:System.Data.DataTable.Constraints%2A&gt; property).</source>
          <target state="translated">制約に設定される、&lt;xref:System.Data.DataTable&gt;レベル (&lt;xref:System.Data.DataTable.Constraints%2A&gt;プロパティ).&lt;/xref:System.Data.DataTable.Constraints%2A&gt; &lt;/xref:System.Data.DataTable&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information about creating constraints, see <bpt id="p1">[</bpt>DataTable Constraints<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">制約の作成の詳細については、次を参照してください。 <bpt id="p1">[</bpt>DataTable の制約<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if rules are enforced; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>規則は実施されます。 場合、それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>One or more constraints cannot be enforced.</source>
          <target state="translated">1 つまたは複数の制約を適用することはできません。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Gets the collection of customized user information associated with the <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">関連付けられているカスタマイズされたユーザー情報のコレクションを取得、 <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The ExtendedProperties property enables you to store custom information with the <ph id="ph1">`DataSet`</ph>.</source>
          <target state="translated">ExtendedProperties プロパティにカスタム情報を保存することができます、<ph id="ph1">`DataSet`</ph>です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For example, you might store a time when the data should be refreshed.</source>
          <target state="translated">たとえば、データを更新する場合、時刻を格納可能性があります。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Extended properties must be of type &lt;xref:System.String&gt; if you want them persisted when the &lt;xref:System.Data.DataSet&gt; is written as XML.</source>
          <target state="translated">拡張プロパティが型でなければなりません&lt;xref:System.String&gt;場合は、ときに永続化、&lt;xref:System.Data.DataSet&gt;は XML として書き込まれます&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.PropertyCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with all custom user information.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Data.PropertyCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>すべてのカスタム ユーザー情報を使用します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets a copy of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains all changes made to it since it was loaded or since &lt;xref:System.Data.DataSet.AcceptChanges*&gt; was last called.</source>
          <target state="translated">コピーを取得、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>読み込まれてから、または後に加えられたすべての変更を格納している&lt;xref:System.Data.DataSet.AcceptChanges*&gt;最後に呼び出されています&lt;/xref:System.Data.DataSet.AcceptChanges*&gt;。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;xref:System.Data.DataSet&gt; that contains a copy of all rows in the original &lt;xref:System.Data.DataSet&gt; that have pending changes.</source>
          <target state="translated">新たに作成&lt;xref:System.Data.DataSet&gt;、元のすべての行のコピーを格納している&lt;xref:System.Data.DataSet&gt;保留中の変更がある&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Relationship constraints can cause additional unchanged rows to be added to the new &lt;xref:System.Data.DataSet&gt; if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</source>
          <target state="translated">リレーションシップの制限が原因で、新規に追加するその他の変更されていない行&lt;xref:System.Data.DataSet&gt;変更されていない行が変更された行の外部キーに対応する主キーを含めるかどうか&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The method returns <ph id="ph1">`null`</ph> if there are no rows in the original &lt;xref:System.Data.DataSet&gt; that have pending changes.</source>
          <target state="translated">このメソッドを返します<ph id="ph1">`null`</ph>は元の行が存在しない場合&lt;xref:System.Data.DataSet&gt;保留中の変更がある&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A copy of the changes from this <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can have actions performed on it and later be merged back in using &lt;xref:System.Data.DataSet.Merge*&gt;.</source>
          <target state="translated">これから加えた変更はコピー <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Data.DataSet.Merge*&gt;.&lt;/xref:System.Data.DataSet.Merge*&gt;をマージすると、それを後で実行されるアクションがあることができます</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If no changed rows are found, the method returns <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">変更された行が見つからないかどうか、メソッドを返します<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Gets a copy of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing all changes made to it since it was last loaded, or since &lt;xref:System.Data.DataSet.AcceptChanges*&gt; was called, filtered by <bpt id="p2">&lt;xref href="System.Data.DataRowState"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">コピーを取得、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が最後に読み込まれた、または後に加えられたすべての変更を含む&lt;xref:System.Data.DataSet.AcceptChanges*&gt;呼び出されると、によってフィルター選択された<bpt id="p2">&lt;xref href="System.Data.DataRowState"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Data.DataSet.AcceptChanges*&gt; 。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is used to produce a second &lt;xref:System.Data.DataSet&gt; object that contains only the changes introduced into the original.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが&amp;1; 秒あたりに生成するために使用される&lt;xref:System.Data.DataSet&gt;を元の変更のみを格納しているオブジェクトが導入されました&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`rowStates`</ph> argument to specify the type of changes the new object should include.</source>
          <target state="translated">使用して、<ph id="ph1">`rowStates`</ph>新しいオブジェクトを含める必要があります変更の種類を指定する引数。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This returned copy is designed to be merged back in to this original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">これは、コピーは、次のようにマージするように設計された返されるオリジナル&lt;xref:System.Data.DataSet&gt;.&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Relationship constraints may cause parent rows marked <ph id="ph1">`Unchanged`</ph> to be included.</source>
          <target state="translated">リレーションシップの制約がマークされている親行あります<ph id="ph1">`Unchanged`</ph>含まれるようにします。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If no rows of the desired &lt;xref:System.Data.DataRowState&gt; are found, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">場合は、目的の行はありません&lt;xref:System.Data.DataRowState&gt;がある、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドを返します<ph id="ph1">`null`</ph>。&lt;/xref:System.Data.DataSet.GetChanges%2A&gt; &lt;/xref:System.Data.DataRowState&gt; 。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.DataRowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.DataRowState"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A filtered copy of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can have actions performed on it, and subsequently be merged back in using &lt;xref:System.Data.DataSet.Merge*&gt;.</source>
          <target state="translated">フィルター選択されたコピー、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> &lt;xref:System.Data.DataSet.Merge*&gt;.&lt;/xref:System.Data.DataSet.Merge*&gt;をマージして、その後で、実行アクションがあることができます</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If no rows of the desired <bpt id="p1">&lt;xref href="System.Data.DataRowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> are found, the method returns <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">場合は、目的の行はありません<bpt id="p1">&lt;xref href="System.Data.DataRowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>が見つかると、このメソッドを返します<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets a copy of <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the DataSet.</source>
          <target state="translated">コピーを取得<bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>データセット。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The specified schema set.</source>
          <target state="translated">指定されたスキーマに設定します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A copy of <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A copy of <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Populates a serialization information object with the data needed to serialize the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">シリアル化情報オブジェクトをシリアル化に必要なデータを追加、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that holds the serialized data associated with the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に関連付けられているシリアル化されたデータを保持する、 <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains the source and destination of the serialized stream associated with the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A&lt;xref:System.Runtime.Serialization.StreamingContext&gt;ソースを格納していると、シリアル化されたストリームの転送先に関連付けられている、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Runtime.Serialization.StreamingContext&gt; 。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Returns a serializable &lt;xref:System.Xml.Schema.XMLSchema&gt; instance.</source>
          <target state="translated">シリアル化可能な返します&lt;xref:System.Xml.Schema.XMLSchema&gt;インスタンス&lt;/xref:System.Xml.Schema.XMLSchema&gt;。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.Schema.XMLSchema&gt; instance.</source>
          <target state="translated">&lt;xref:System.Xml.Schema.XMLSchema&gt;インスタンス&lt;/xref:System.Xml.Schema.XMLSchema&gt;。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Deserializes the table data from the binary or XML stream.</source>
          <target state="translated">バイナリまたは XML ストリームからテーブル データを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>インスタンス。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The streaming context.</source>
          <target state="translated">ストリーミング コンテキスト。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Returns the XML representation of the data stored in the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">格納されたデータの XML 表現を返します、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Calling this method is identical to calling &lt;xref:System.Data.DataSet.WriteXml%2A&gt; with &lt;xref:System.Data.XmlWriteMode&gt; set to &lt;xref:System.Data.XmlWriteMode&gt;.</source>
          <target state="translated">このメソッドを呼び出す&lt;xref:System.Data.DataSet.WriteXml%2A&gt;&lt;xref:System.Data.XmlWriteMode&gt;&lt;xref:System.Data.XmlWriteMode&gt;。&lt;/xref:System.Data.XmlWriteMode&gt;設定&lt;/xref:System.Data.XmlWriteMode&gt;と&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;呼び出し元と同じです。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>GetXml returns XML as a string, and therefore requires more overhead than &lt;xref:System.Data.DataSet.WriteXml%2A&gt; to write XML to a file.</source>
          <target state="translated">GetXml がよりも多くのオーバーヘッドが必要し、なる XML を文字列として返します&lt;xref:System.Data.DataSet.WriteXml%2A&gt;に XML をファイルに書き込めません&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If you build a &lt;xref:System.Data.DataSet&gt; using schema inference and serialize it using XML or Web services, the column ordering may change.</source>
          <target state="translated">構築する場合、&lt;xref:System.Data.DataSet&gt;スキーマの推論を使用して、シリアル化 XML または Web サービスを使用して列の順序変更可能性があります&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A string that is a representation of the data stored in the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">示す文字列に格納されたデータの表現、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Returns the XML Schema for the XML representation of the data stored in the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">XML スキーマに格納されたデータの XML 表現を返します、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Calling this method is identical to calling &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;, except that only the primary schema is written.</source>
          <target state="translated">このメソッドを呼び出すを呼び出すことと同じです&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;プライマリ スキーマのみが書き込まれる点が異なります&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>GetXmlSchema returns XML as a string, and therefore requires more overhead than &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; to write XML to a file.</source>
          <target state="translated">GetXmlSchema がよりも多くのオーバーヘッドが必要し、なる XML を文字列として返します&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;をファイルに XML を書き込めません&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If you build a &lt;xref:System.Data.DataSet&gt; using schema inference and serialize it using XML or Web services, the column ordering may change.</source>
          <target state="translated">構築する場合、&lt;xref:System.Data.DataSet&gt;スキーマの推論を使用して、シリアル化 XML または Web サービスを使用して列の順序変更可能性があります&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>String that is the XML Schema for the XML representation of the data stored in the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">XML スキーマに格納されたデータの XML 表現を示す文字列、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has changes, including new, deleted, or modified rows.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>変更が、新しい、削除、または変更された行も含まれます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has changes; otherwise <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>変更がそれ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has changes, including new, deleted, or modified rows, filtered by <bpt id="p2">&lt;xref href="System.Data.DataRowState"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>でフィルター処理された、新しい、削除、または変更された行を含む、変更が<bpt id="p2">&lt;xref href="System.Data.DataRowState"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Examine the &lt;xref:System.Data.DataSet.HasChanges%2A&gt; property of the <ph id="ph1">`DataSet`</ph> before invoking the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method.</source>
          <target state="translated">確認、&lt;xref:System.Data.DataSet.HasChanges%2A&gt;のプロパティ、<ph id="ph1">`DataSet`</ph>を呼び出す前に、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッド&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;&lt;/xref:System.Data.DataSet.HasChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.DataRowState"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.DataRowState"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has changes; otherwise <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、 <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>変更がそれ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether there are errors in any of the <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects within this <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">いずれかでエラーがあるかどうかを示す値を取得、 <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>内でオブジェクト<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Each &lt;xref:System.Data.DataTable&gt; in a &lt;xref:System.Data.DataSet&gt; also has a &lt;xref:System.Data.DataTable.HasErrors%2A&gt; property.</source>
          <target state="translated">各&lt;xref:System.Data.DataTable&gt;で、&lt;xref:System.Data.DataSet&gt;も、&lt;xref:System.Data.DataTable.HasErrors%2A&gt;プロパティ&lt;/xref:System.Data.DataTable.HasErrors%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`HasErrors`</ph> property of the <ph id="ph2">`DataSet`</ph> first, to determine if any table has errors, before checking individual &lt;xref:System.Data.DataTable&gt; objects.</source>
          <target state="translated">使用して、<ph id="ph1">`HasErrors`</ph>のプロパティ、<ph id="ph2">`DataSet`</ph>かどうかを任意のテーブルのエラー、個別にチェックする前に、まず&lt;xref:System.Data.DataTable&gt;オブジェクト&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`DataTable`</ph> has errors, the &lt;xref:System.Data.DataTable.GetErrors%2A&gt; method returns an array of &lt;xref:System.Data.DataRow&gt; objects containing the errors.</source>
          <target state="translated">場合、 <ph id="ph1">`DataTable`</ph> 、エラーが発生した、&lt;xref:System.Data.DataTable.GetErrors%2A&gt;メソッドの配列を返します&lt;xref:System.Data.DataRow&gt;、エラーを含むオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable.GetErrors%2A&gt;。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if any table contains an error;otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、任意のテーブルには、エラーが含まれています。 それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Applies the XML schema from the specified &lt;xref:System.IO.Stream&gt; to the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定された対象から XML スキーマを適用&lt;xref:System.IO.Stream&gt;を<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.IO.Stream&gt; 。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Stream" name="Stream" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from which to read the schema.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_Stream" name="Stream" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>元となるスキーマを読み取れません。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</source>
          <target state="translated">スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Applies the XML schema from the specified &lt;xref:System.IO.TextReader&gt; to the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定された対象から XML スキーマを適用&lt;xref:System.IO.TextReader&gt;を<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.IO.TextReader&gt; 。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_TextReader" name="TextReader" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from which to read the schema.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_TextReader" name="TextReader" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>元となるスキーマを読み取れません。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</source>
          <target state="translated">スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Applies the XML schema from the specified file to the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定されたファイルから XML スキーマの適用、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The name of the file (including the path) from which to read the schema.</source>
          <target state="translated">スキーマの読み込み元のファイル (パスを含む) の名前。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</source>
          <target state="translated">スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not set to <bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定されていない<bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Applies the XML schema from the specified &lt;xref:System.Xml.XmlReader&gt; to the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定された対象から XML スキーマを適用&lt;xref:System.Xml.XmlReader&gt;を<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Xml.XmlReader&gt; 。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_XMLReader" name="XMLReader" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from which to read the schema.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_XMLReader" name="XMLReader" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>元となるスキーマを読み取れません。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</source>
          <target state="translated">スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Occurs after the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized.</source>
          <target state="translated">後に発生、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が初期化されています。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Data.DataSet.IsInitialized%2A&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Data.DataSet.IsInitialized%2A&gt;。&lt;/xref:System.Data.DataSet.IsInitialized%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Deserialize all of the tables data of the DataSet from the binary or XML stream.</source>
          <target state="translated">すべてのバイナリまたは XML ストリームからのデータセットのテーブル データを逆シリアル化します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Inspects the format of the serialized representation of the <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">シリアル化された表現の形式を調べ、 <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</source>
          <target state="translated">このメンバーは、.NET Framework インフラストラクチャをサポートしているをコードから直接使用するものではありません。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Serialization.StreamingContext&gt; object.</source>
          <target state="translated">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;オブジェクト&lt;/xref:System.Runtime.Serialization.StreamingContext&gt;。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified <bpt id="p2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> serialized in its binary format, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> otherwise.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合、指定した<bpt id="p2">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>を表す、 <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> 、バイナリ形式でシリアル化<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>それ以外の場合。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized.</source>
          <target state="translated">示す値を取得するかどうか、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>が初期化されています。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Returns the status of the &lt;xref:System.Data.DataSet&gt; while it’s being constructed, for instance by Visual Studio.</source>
          <target state="translated">状態を返します、&lt;xref:System.Data.DataSet&gt;ことによって作成される、インスタンスの Visual Studio 中&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.BeginInit%2A&gt; method sets it to <ph id="ph1">`false`</ph> and &lt;xref:System.Data.DataSet.EndInit%2A&gt; method sets it to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.BeginInit%2A&gt;メソッドに設定を<ph id="ph1">`false`</ph>と&lt;xref:System.Data.DataSet.EndInit%2A&gt;メソッドに設定を<ph id="ph2">`true`</ph>&lt;/xref:System.Data.DataSet.EndInit%2A&gt;&lt;/xref:System.Data.DataSet.BeginInit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate the component has completed initialization; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>コンポーネントを示すために初期化が完了します。それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Fills a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id="p2">&lt;xref href="System.Data.IDataReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, using an array of <bpt id="p3">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> instances to supply the schema and namespace information.</source>
          <target state="translated">塗りつぶします、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定されたを使用してデータ ソースから値を持つ<bpt id="p2">&lt;xref href="System.Data.IDataReader"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、配列を使用して<bpt id="p3">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>スキーマと名前空間の情報を提供するインスタンス。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataTable.Load%2A&gt; method provides a technique for filling a single &lt;xref:System.Data.DataTable&gt; with data, retrieved from an &lt;xref:System.Data.IDataReader&gt; instance.</source>
          <target state="translated">&lt;xref:System.Data.DataTable.Load%2A&gt;メソッドは、1 つの入力の手法を提供&lt;xref:System.Data.DataTable&gt;から取得したデータを&lt;xref:System.Data.IDataReader&gt;インスタンス&lt;/xref:System.Data.IDataReader&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTable.Load%2A&gt;。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>This method provides the same functionality, but allows you to load multiple result sets from an &lt;xref:System.Data.IDataReader&gt; into multiple tables within a &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">このメソッドが、同じ機能を提供しますが、 &lt;xref:System.Data.IDataReader&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;内で複数のテーブル&lt;/xref:System.Data.IDataReader&gt;から複数の結果セットを読み込むことができます。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The load operation will fail with an &lt;xref:System.InvalidOperationException&gt; if any of the source data columns in the incoming <ph id="ph2">`reader`</ph> are computed columns.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ロード操作は失敗し、 &lt;xref:System.InvalidOperationException&gt;、変換元データ列では、着信のいずれかの<ph id="ph2">`reader`</ph>は計算列&lt;/xref:System.InvalidOperationException&gt;。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the &lt;xref:System.Data.LoadOption&gt; enumeration.</source>
          <target state="translated"><ph id="ph1">`loadOption`</ph>パラメーターでは、インポートしたデータの既存のデータと対話してからの値のいずれかの方法を指定することができます、&lt;xref:System.Data.LoadOption&gt;列挙体です&lt;/xref:System.Data.LoadOption&gt;。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>See the documentation for the &lt;xref:System.Data.DataTable&gt;&lt;xref:System.Data.DataTable.Load%2A&gt; method for more information on using this parameter.</source>
          <target state="translated">&lt;xref:System.Data.DataTable&gt;ドキュメントを参照して&lt;xref:System.Data.DataTable.Load%2A&gt;方法の詳細で、このパラメーターを使用します&lt;/xref:System.Data.DataTable.Load%2A&gt;。&lt;/xref:System.Data.DataTable&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tables`</ph> parameter allows you to specify an array of &lt;xref:System.Data.DataTable&gt; instances, indicating the order of the tables corresponding to each result set loaded from the reader.</source>
          <target state="translated"><ph id="ph1">`tables`</ph>パラメーターの配列を指定できます&lt;xref:System.Data.DataTable&gt;インスタンス、各結果セット、リーダーから読み込まれたに対応するテーブルの順序を示す。&lt;/xref:System.Data.DataTable&gt; 。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The Loadmethod fills each supplied &lt;xref:System.Data.DataTable&gt; instance with data from a single result set from the source data reader.</source>
          <target state="translated">Loadmethod がいっぱいになった各提供&lt;xref:System.Data.DataTable&gt;単一の結果セット、ソース データ リーダーからからのデータ インスタンス&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.</source>
          <target state="translated">各結果セット後、Loadmethod がで次の結果が結果セットがなくなるまで、リーダー内セットに移動します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The name resolution scheme for this method is the same as that followed by the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method of the &lt;xref:System.Data.Common.DbDataAdapter&gt; class.</source>
          <target state="translated">このメソッドの名前解決スキームが同じ&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;&lt;xref:System.Data.Common.DbDataAdapter&gt;クラス&lt;/xref:System.Data.Common.DbDataAdapter&gt;のメソッド&lt;/xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;に続く</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.IDataReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that provides one or more result sets.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.IDataReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&amp;1; つまたは複数の結果セットを提供します。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A value from the <bpt id="p1">&lt;xref href="System.Data.LoadOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instances within the <bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> will be combined with incoming rows that share the same primary key.</source>
          <target state="translated">値、 <bpt id="p1">&lt;xref href="System.Data.LoadOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を示す列挙体方法で既に行、 <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>インスタンス内で、 <bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>が同じ主キーを共有する受信の行に結合されます。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instances, from which the Load method retrieves name and namespace information.</source>
          <target state="translated">配列<bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Load メソッドの名前と名前空間の情報の取得元となるインスタンスです。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Each of these tables must be a member of the <bpt id="p1">&lt;xref href="System.Data.DataTableCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> contained by this <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これらのテーブルのそれぞれのメンバーである必要があります、 <bpt id="p1">&lt;xref href="System.Data.DataTableCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に含まれるこの<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Fills a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id="p2">&lt;xref href="System.Data.IDataReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, using an array of strings to supply the names for the tables within the <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">入力、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定されたを使用してデータ ソースから値を持つ<bpt id="p2">&lt;xref href="System.Data.IDataReader"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、内のテーブルの名前を指定する文字列の配列を使用して、 <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataTable.Load%2A&gt; method provides a technique for filling a single &lt;xref:System.Data.DataTable&gt; with data, retrieved from an &lt;xref:System.Data.IDataReader&gt; instance.</source>
          <target state="translated">&lt;xref:System.Data.DataTable.Load%2A&gt;メソッドは、1 つの入力の手法を提供&lt;xref:System.Data.DataTable&gt;から取得したデータを&lt;xref:System.Data.IDataReader&gt;インスタンス&lt;/xref:System.Data.IDataReader&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTable.Load%2A&gt;。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This method provides the same functionality, but allows you to load multiple result sets from an <ph id="ph1">`IDataReader`</ph> into multiple tables within a <ph id="ph2">`DataSet`</ph>.</source>
          <target state="translated">このメソッドは、同じ機能を提供、読み込むことができますから複数の結果セット、<ph id="ph1">`IDataReader`</ph>内で複数のテーブルに、<ph id="ph2">`DataSet`</ph>です。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The load operation will fail with an &lt;xref:System.InvalidOperationException&gt; if any of the source data columns in the incoming <ph id="ph2">`reader`</ph> are computed columns.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ロード操作は失敗し、 &lt;xref:System.InvalidOperationException&gt;、変換元データ列では、着信のいずれかの<ph id="ph2">`reader`</ph>は計算列&lt;/xref:System.InvalidOperationException&gt;。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the &lt;xref:System.Data.LoadOption&gt; enumeration.</source>
          <target state="translated"><ph id="ph1">`loadOption`</ph>パラメーターでは、インポートしたデータの既存のデータと対話してからの値のいずれかの方法を指定することができます、&lt;xref:System.Data.LoadOption&gt;列挙体です&lt;/xref:System.Data.LoadOption&gt;。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>See the documentation for the &lt;xref:System.Data.DataTable.Load%2A&gt; method for more information on using this parameter.</source>
          <target state="translated">ドキュメントを参照して、&lt;xref:System.Data.DataTable.Load%2A&gt;方法の詳細で、このパラメーターを使用します&lt;/xref:System.Data.DataTable.Load%2A&gt;。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tables`</ph> parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.</source>
          <target state="translated"><ph id="ph1">`tables`</ph>パラメーターでは、各結果セット、リーダーから読み込まれたに対応するテーブルの順序を示す、テーブル名の配列を指定することができます。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Load`</ph> method attempts to find a table within the <ph id="ph2">`DataSet`</ph> matching the name found in the array of table names, in order.</source>
          <target state="translated"><ph id="ph1">`Load`</ph>メソッド内でテーブルの検索を試みます、<ph id="ph2">`DataSet`</ph>順に、テーブル名の配列で見つかった名前に一致します。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If a matching table is found, that table is loaded with the content of the current result set.</source>
          <target state="translated">一致するテーブルが見つかった場合は、現在の結果セットの内容でそのテーブルが読み込まれます。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.</source>
          <target state="translated">一致するテーブルが見つからない場合、テーブル名の配列で指定した名前を使用して、テーブルを作成し、結果セットから新しいテーブルのスキーマを推論します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>After each result set, the <ph id="ph1">`Load`</ph> method moves on to the next result set within the reader, until there are no more result sets.</source>
          <target state="translated">各結果セットの後に、<ph id="ph1">`Load`</ph>メソッドに次の結果が結果セットがなくなるまで、リーダー内セット移動します。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The default namespace associated with <ph id="ph1">`DataSet`</ph>, if any, is associated with each newly created <ph id="ph2">`DataTable`</ph>.</source>
          <target state="translated">関連付けられている既定の名前空間<ph id="ph1">`DataSet`</ph>のいずれかが新しく作成された各に関連付けられている場合は、<ph id="ph2">`DataTable`</ph>です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The name resolution scheme for this method is the same as that followed by the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method of the &lt;xref:System.Data.Common.DbDataAdapter&gt; class.</source>
          <target state="translated">このメソッドの名前解決スキームが同じ&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;&lt;xref:System.Data.Common.DbDataAdapter&gt;クラス&lt;/xref:System.Data.Common.DbDataAdapter&gt;のメソッド&lt;/xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;に続く</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.IDataReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that provides one or more result sets.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.IDataReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&amp;1; つまたは複数の結果セットを提供します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A value from the <bpt id="p1">&lt;xref href="System.Data.LoadOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instances within the <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> will be combined with incoming rows that share the same primary key.</source>
          <target state="translated">値、 <bpt id="p1">&lt;xref href="System.Data.LoadOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を示す列挙体方法で既に行、 <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>インスタンス内で、 <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>が同じ主キーを共有する受信の行に結合されます。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>An array of strings, from which the <bpt id="p1">&lt;xref uid="langword_csharp_Load" name="Load" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method retrieves table name information.</source>
          <target state="translated">元の文字列の配列、 <bpt id="p1">&lt;xref uid="langword_csharp_Load" name="Load" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>メソッドはテーブル名の情報を取得します。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Fills a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with values from a data source using the supplied <bpt id="p2">&lt;xref href="System.Data.IDataReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, using an array of <bpt id="p3">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> instances to supply the schema and namespace information.</source>
          <target state="translated">塗りつぶします、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定されたを使用してデータ ソースから値を持つ<bpt id="p2">&lt;xref href="System.Data.IDataReader"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>、配列を使用して<bpt id="p3">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>スキーマと名前空間の情報を提供するインスタンス。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataTable.Load%2A&gt; method provides a technique for filling a single &lt;xref:System.Data.DataTable&gt; with data, retrieved from an &lt;xref:System.Data.IDataReader&gt; instance.</source>
          <target state="translated">&lt;xref:System.Data.DataTable.Load%2A&gt;メソッドは、1 つの入力の手法を提供&lt;xref:System.Data.DataTable&gt;から取得したデータを&lt;xref:System.Data.IDataReader&gt;インスタンス&lt;/xref:System.Data.IDataReader&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTable.Load%2A&gt;。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This method provides the same functionality, but allows you to load multiple result sets from an &lt;xref:System.Data.IDataReader&gt; into multiple tables within a &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">このメソッドが、同じ機能を提供しますが、 &lt;xref:System.Data.IDataReader&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;内で複数のテーブル&lt;/xref:System.Data.IDataReader&gt;から複数の結果セットを読み込むことができます。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The load operation will fail with an &lt;xref:System.InvalidOperationException&gt; if any of the source data columns in the incoming <ph id="ph2">`reader`</ph> are computed columns.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ロード操作は失敗し、 &lt;xref:System.InvalidOperationException&gt;、変換元データ列では、着信のいずれかの<ph id="ph2">`reader`</ph>は計算列&lt;/xref:System.InvalidOperationException&gt;。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`loadOption`</ph> parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the &lt;xref:System.Data.LoadOption&gt; enumeration.</source>
          <target state="translated"><ph id="ph1">`loadOption`</ph>パラメーターでは、インポートしたデータの既存のデータと対話してからの値のいずれかの方法を指定することができます、&lt;xref:System.Data.LoadOption&gt;列挙体です&lt;/xref:System.Data.LoadOption&gt;。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>See the documentation for the &lt;xref:System.Data.DataTable&gt;&lt;xref:System.Data.DataTable.Load%2A&gt; method for more information on using this parameter.</source>
          <target state="translated">&lt;xref:System.Data.DataTable&gt;ドキュメントを参照して&lt;xref:System.Data.DataTable.Load%2A&gt;方法の詳細で、このパラメーターを使用します&lt;/xref:System.Data.DataTable.Load%2A&gt;。&lt;/xref:System.Data.DataTable&gt;</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`errorHandler`</ph> parameter is a &lt;xref:System.Data.FillErrorEventHandler&gt; delegate that refers to a procedure that is called when an error occurs while loading data.</source>
          <target state="translated"><ph id="ph1">`errorHandler`</ph>パラメーターは、&lt;xref:System.Data.FillErrorEventHandler&gt;データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照するデリゲート&lt;/xref:System.Data.FillErrorEventHandler&gt;。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.FillErrorEventArgs&gt; parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the &lt;xref:System.Data.DataTable&gt; being filled.</source>
          <target state="translated">&lt;xref:System.Data.FillErrorEventArgs&gt;プロシージャに渡されたパラメーターができるように、エラーが発生した場合、データの現在の行に関する情報を取得するプロパティを提供し、&lt;xref:System.Data.DataTable&gt;入力中です&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.FillErrorEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</source>
          <target state="translated">このデリゲート メカニズムを使用して、シンプルな try/catch ブロックではなく、エラーを確認することができます状況の処理し、必要な場合の処理を続行します。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.FillErrorEventArgs&gt; parameter supplies a &lt;xref:System.Data.FillErrorEventArgs.Continue%2A&gt; property: set this property to <ph id="ph1">`true`</ph> to indicate that you have handled the error and wish to continue processing; set the property to <ph id="ph2">`false`</ph> to indicate that you wish to halt processing.</source>
          <target state="translated">&lt;xref:System.Data.FillErrorEventArgs&gt;パラメーターにより指定、&lt;xref:System.Data.FillErrorEventArgs.Continue%2A&gt;プロパティ: このプロパティを設定<ph id="ph1">`true`</ph>処理を続行してエラーが処理されることを示すためにプロパティを設定<ph id="ph2">`false`</ph>処理を停止することを示すためにします&lt;/xref:System.Data.FillErrorEventArgs.Continue%2A&gt;&lt;/xref:System.Data.FillErrorEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Be aware that setting the property to <ph id="ph1">`false`</ph> causes the code that triggered the problem to throw an exception.</source>
          <target state="translated">注意してそのプロパティを設定<ph id="ph1">`false`</ph>によって、例外をスローする問題を引き起こしたコード。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`tables`</ph> parameter allows you to specify an array of &lt;xref:System.Data.DataTable&gt; instances, indicating the order of the tables corresponding to each result set loaded from the reader.</source>
          <target state="translated"><ph id="ph1">`tables`</ph>パラメーターの配列を指定できます&lt;xref:System.Data.DataTable&gt;インスタンス、各結果セット、リーダーから読み込まれたに対応するテーブルの順序を示す。&lt;/xref:System.Data.DataTable&gt; 。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The Loadmethod fills each supplied &lt;xref:System.Data.DataTable&gt; instance with data from a single result set from the source data reader.</source>
          <target state="translated">Loadmethod がいっぱいになった各提供&lt;xref:System.Data.DataTable&gt;単一の結果セット、ソース データ リーダーからからのデータ インスタンス&lt;/xref:System.Data.DataTable&gt;。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>After each result set, the Loadmethod moves on to the next result set within the reader, until there are no more result sets.</source>
          <target state="translated">各結果セット後、Loadmethod がで次の結果が結果セットがなくなるまで、リーダー内セットに移動します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The name resolution scheme for this method is the same as that followed by the &lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt; method of the &lt;xref:System.Data.Common.DbDataAdapter&gt; class.</source>
          <target state="translated">このメソッドの名前解決スキームが同じ&lt;xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;&lt;xref:System.Data.Common.DbDataAdapter&gt;クラス&lt;/xref:System.Data.Common.DbDataAdapter&gt;のメソッド&lt;/xref:System.Data.Common.DbDataAdapter.Fill%2A&gt;に続く</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Data.IDataReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that provides one or more result sets.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.IDataReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&amp;1; つまたは複数の結果セットを提供します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A value from the <bpt id="p1">&lt;xref href="System.Data.LoadOption"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that indicates how rows already in the <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instances within the <bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> will be combined with incoming rows that share the same primary key.</source>
          <target state="translated">値、 <bpt id="p1">&lt;xref href="System.Data.LoadOption"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を示す列挙体方法で既に行、 <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>インスタンス内で、 <bpt id="p3">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>が同じ主キーを共有する受信の行に結合されます。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.FillErrorEventHandler"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when an error occurs while loading data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Data.FillErrorEventHandler"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み込み中にエラーが発生したときに呼び出すデリゲート。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instances, from which the Load method retrieves name and namespace information.</source>
          <target state="translated">配列<bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Load メソッドの名前と名前空間の情報の取得元となるインスタンスです。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Gets or sets the locale information used to compare strings within the table.</source>
          <target state="translated">取得またはテーブル内の文字列を比較するために使用するロケール情報を設定します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The Locale property specifies the locale for which sorting applies.</source>
          <target state="translated">Locale プロパティは、ロケールを指定する並べ替えを適用します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>By default, setting the Locale for a &lt;xref:System.Data.DataSet&gt; also sets the Locale for each &lt;xref:System.Data.DataTable&gt; object in that <ph id="ph1">`DataSet`</ph> to the same value.</source>
          <target state="translated">既定では、ロケールを設定、&lt;xref:System.Data.DataSet&gt;のロケールにも設定&lt;xref:System.Data.DataTable&gt;を内のオブジェクト<ph id="ph1">`DataSet`</ph>同じ値にします&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In columns that contain expressions, the &lt;xref:System.StringComparison&gt; is used.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、式を含む列で、&lt;xref:System.StringComparison&gt;を使用します&lt;/xref:System.StringComparison&gt;。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.StringComparison&gt; is ignored.</source>
          <target state="translated">&lt;xref:System.StringComparison&gt;は無視されます&lt;/xref:System.StringComparison&gt;。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Globalization.CultureInfo&gt; that contains data about the user's machine locale.</source>
          <target state="translated">A &lt;xref:System.Globalization.CultureInfo&gt;、ユーザーのコンピューターのロケールに関するデータを格納します&lt;/xref:System.Globalization.CultureInfo&gt;。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">既定値は<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Merges an array of <bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects into the current <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">配列をマージ<bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在オブジェクト<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して&amp;2; つのマージ&lt;xref:System.Data.DataSet&gt;ほぼ同じスキーマを持つオブジェクト&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された&lt;xref:System.Data.DataSet&gt;、データ ソースから最新データを使用します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を最後に更新を含むプロシージャの終了時&lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.</source>
          <target state="translated">このシナリオでは、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが最初に呼び出されます&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.</source>
          <target state="translated">2 番目に返します&lt;xref:System.Data.DataSet&gt;検証とマージ用に最適化されています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet&gt;オブジェクトのみ&lt;xref:System.Data.DataTable&gt;と&lt;xref:System.Data.DataRow&gt;元の&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のサブセットの結果として得られる、変更されたオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;が含まれています。&lt;/xref:System.Data.DataSet&gt;この&amp;2; つ目</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>This subset is generally smaller and thus more efficiently passed back to a middle-tier component.</source>
          <target state="translated">このサブセットは通常小さくより効率的に渡されます中間層コンポーネントに戻す。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The middle-tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ&lt;xref:System.Data.DataSet&gt;(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された&lt;xref:System.Data.DataSet&gt;クライアント アプリケーションの元にマージできます&lt;xref:System.Data.DataSet&gt;で、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッド&lt;/xref:System.Data.DataSet.Merge%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.</source>
          <target state="translated">ときに、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドが呼び出されると、2 つのスキーマ&lt;xref:System.Data.DataSet&gt;オブジェクトを比較するスキーマが変更された可能性があるためです&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph1">`missingSchemaAction`</ph> argument to <ph id="ph2">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース&lt;xref:System.Data.DataSet&gt;スキーマ要素が含まれています (追加&lt;xref:System.Data.DataColumn&gt;オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph1">`missingSchemaAction`</ph>引数<ph id="ph2">`MissingSchemaAction.Add`</ph>&lt;/xref:System.Data.DataColumn&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.</source>
          <target state="translated">その場合、統合&lt;xref:System.Data.DataSet&gt;、追加されたスキーマとデータが含まれています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Unchanged`</ph>, <ph id="ph2">`Modified`</ph>, or <ph id="ph3">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に&lt;xref:System.Data.DataSet&gt;、ターゲットに任意のソース行、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Unchanged`</ph>、 <ph id="ph2">`Modified`</ph>、または<ph id="ph3">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致した&lt;/xref:System.Data.DataRowState&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">持つ行をソース、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Added`</ph>新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます&lt;/xref:System.Data.DataRowState&gt;。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>During a merge, constraints are disabled.</source>
          <target state="translated">マージ中に制約が無効になります。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>If any constraints cannot be enabled at the end of a merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.</source>
          <target state="translated">場合は、マージの最後に、すべての制約を有効にすることはできません、&lt;xref:System.Data.ConstraintException&gt;が生成され、制約を無効にして、結合されたデータは保持されます&lt;/xref:System.Data.ConstraintException&gt;。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id="ph1">`false`</ph>, and all rows that are invalid are marked in error.</source>
          <target state="translated">この場合、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティに設定されている<ph id="ph1">`false`</ph>、無効なすべての行がエラーでマークされています&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">リセットする前に、エラーを解決する必要があります、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The array of <bpt id="p1">&lt;xref uid="langword_csharp_DataRow" name="DataRow" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects to be merged into the <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">配列<bpt id="p1">&lt;xref uid="langword_csharp_DataRow" name="DataRow" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>にマージするオブジェクト、 <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Merges a specified <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and its schema into the current <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定されたマージ<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と現在にそのスキーマ<bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The Merge method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.</source>
          <target state="translated">2 をマージするマージ メソッドが使用される&lt;xref:System.Data.DataSet&gt;ほぼ同じスキーマを持つオブジェクト&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された&lt;xref:System.Data.DataSet&gt;、データ ソースから最新データを使用します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The Merge method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">Merge メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を最後に更新を含むプロシージャの終了時</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.</source>
          <target state="translated">このシナリオでは、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが最初に呼び出されます&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.</source>
          <target state="translated">2 番目に返します&lt;xref:System.Data.DataSet&gt;検証とマージ用に最適化されています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet&gt;オブジェクトのみ&lt;xref:System.Data.DataTable&gt;と&lt;xref:System.Data.DataRow&gt;元の&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のサブセットの結果として得られる、変更されたオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;が含まれています。&lt;/xref:System.Data.DataSet&gt;この&amp;2; つ目</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The middle-tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ&lt;xref:System.Data.DataSet&gt;(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the Merge method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された&lt;xref:System.Data.DataSet&gt;クライアント アプリケーションの元にマージできます&lt;xref:System.Data.DataSet&gt;マージ メソッドを使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>When the Merge method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.</source>
          <target state="translated">Merge メソッドが呼び出される場合、2 つのスキーマの&lt;xref:System.Data.DataSet&gt;オブジェクトを比較するスキーマが変更された可能性があるためです&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph1">`missingSchemaAction`</ph> argument to <ph id="ph2">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース&lt;xref:System.Data.DataSet&gt;スキーマ要素が含まれています (追加&lt;xref:System.Data.DataColumn&gt;オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph1">`missingSchemaAction`</ph>引数<ph id="ph2">`MissingSchemaAction.Add`</ph>&lt;/xref:System.Data.DataColumn&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.</source>
          <target state="translated">その場合、統合&lt;xref:System.Data.DataSet&gt;、追加されたスキーマとデータが含まれています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Unchanged`</ph>, <ph id="ph2">`Modified`</ph>, or <ph id="ph3">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に&lt;xref:System.Data.DataSet&gt;、ターゲットに任意のソース行、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Unchanged`</ph>、 <ph id="ph2">`Modified`</ph>、または<ph id="ph3">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致した&lt;/xref:System.Data.DataRowState&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Source rows with a <ph id="ph1">`DataRowState`</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">持つ行をソース、<ph id="ph1">`DataRowState`</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>During a merge, constraints are disabled.</source>
          <target state="translated">マージ中に制約が無効になります。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.</source>
          <target state="translated">場合は、マージの最後に、制約を有効にすることはできません、&lt;xref:System.Data.ConstraintException&gt;が生成され、制約を無効にして、結合されたデータは保持されます&lt;/xref:System.Data.ConstraintException&gt;。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id="ph1">`false`</ph>, and all rows that are invalid are marked in error.</source>
          <target state="translated">この場合、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティに設定されている<ph id="ph1">`false`</ph>、無効なすべての行がエラーでマークされています&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">リセットする前に、エラーを解決する必要があります、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose data and schema will be merged.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データとスキーマがマージされます。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>One or more constraints cannot be enabled.</source>
          <target state="translated">1 つまたは複数の制約を有効にすることはできません。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataSet</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataSet</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Merges a specified <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and its schema into the current <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定されたマージ<bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と現在にそのスキーマ<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して&amp;2; つのマージ&lt;xref:System.Data.DataSet&gt;ほぼ同じスキーマを持つオブジェクト&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された&lt;xref:System.Data.DataSet&gt;、データ ソースから最新データを使用します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を最後に更新を含むプロシージャの終了時&lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.</source>
          <target state="translated">このシナリオでは、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが最初に呼び出されます&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.</source>
          <target state="translated">2 番目に返します&lt;xref:System.Data.DataSet&gt;検証とマージ用に最適化されています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet&gt;オブジェクトのみ&lt;xref:System.Data.DataTable&gt;と&lt;xref:System.Data.DataRow&gt;元の&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のサブセットの結果として得られる、変更されたオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;が含まれています。&lt;/xref:System.Data.DataSet&gt;この&amp;2; つ目</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The middle-tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ&lt;xref:System.Data.DataSet&gt;(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された&lt;xref:System.Data.DataSet&gt;クライアント アプリケーションの元にマージできます&lt;xref:System.Data.DataSet&gt;で、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッド&lt;/xref:System.Data.DataSet.Merge%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.</source>
          <target state="translated">ときに、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドが呼び出されると、2 つのスキーマ&lt;xref:System.Data.DataSet&gt;オブジェクトを比較するスキーマが変更された可能性があるためです&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph1">`missingSchemaAction`</ph> argument to <ph id="ph2">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース&lt;xref:System.Data.DataSet&gt;スキーマ要素が含まれています (追加&lt;xref:System.Data.DataColumn&gt;オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph1">`missingSchemaAction`</ph>引数<ph id="ph2">`MissingSchemaAction.Add`</ph>&lt;/xref:System.Data.DataColumn&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.</source>
          <target state="translated">その場合、統合&lt;xref:System.Data.DataSet&gt;、追加されたスキーマとデータが含まれています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Unchanged`</ph>, <ph id="ph2">`Modified`</ph>, or <ph id="ph3">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に&lt;xref:System.Data.DataSet&gt;、ターゲットに任意のソース行、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Unchanged`</ph>、 <ph id="ph2">`Modified`</ph>、または<ph id="ph3">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致した&lt;/xref:System.Data.DataRowState&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Source rows with a <ph id="ph1">`DataRowState`</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">持つ行をソース、<ph id="ph1">`DataRowState`</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>During a merge, constraints are disabled.</source>
          <target state="translated">マージ中に制約が無効になります。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.</source>
          <target state="translated">場合は、マージの最後に、制約を有効にすることはできません、&lt;xref:System.Data.ConstraintException&gt;が生成され、制約を無効にして、結合されたデータは保持されます&lt;/xref:System.Data.ConstraintException&gt;。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id="ph1">`false`</ph>, and all rows that are invalid are marked in error.</source>
          <target state="translated">この場合、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティに設定されている<ph id="ph1">`false`</ph>、無効なすべての行がエラーでマークされています&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">リセットする前に、エラーを解決する必要があります、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose data and schema will be merged.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データとスキーマがマージされます。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">table</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">table</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Merges a specified <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and its schema into the current <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, preserving or discarding any changes in this <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> according to the given argument.</source>
          <target state="translated">指定されたマージ<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と現在にそのスキーマ<bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>保持またはこの変更を破棄して、 <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>が指定した引数に応じて。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して&amp;2; つのマージ&lt;xref:System.Data.DataSet&gt;ほぼ同じスキーマを持つオブジェクト&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された&lt;xref:System.Data.DataSet&gt;、データ ソースから最新データを使用します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を最後に更新を含むプロシージャの終了時&lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.</source>
          <target state="translated">このシナリオでは、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが最初に呼び出されます&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.</source>
          <target state="translated">2 番目に返します&lt;xref:System.Data.DataSet&gt;検証とマージ用に最適化されています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet&gt;オブジェクトのみ&lt;xref:System.Data.DataTable&gt;と&lt;xref:System.Data.DataRow&gt;元の&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のサブセットの結果として得られる、変更されたオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;が含まれています。&lt;/xref:System.Data.DataSet&gt;この&amp;2; つ目</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The middle-tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ&lt;xref:System.Data.DataSet&gt;(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された&lt;xref:System.Data.DataSet&gt;クライアント アプリケーションの元にマージできます&lt;xref:System.Data.DataSet&gt;で、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッド&lt;/xref:System.Data.DataSet.Merge%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.</source>
          <target state="translated">ときに、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドが呼び出されると、2 つのスキーマ&lt;xref:System.Data.DataSet&gt;オブジェクトを比較するスキーマが変更された可能性があるためです&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph1">`missingSchemaAction`</ph> argument to <ph id="ph2">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース&lt;xref:System.Data.DataSet&gt;スキーマ要素が含まれています (追加&lt;xref:System.Data.DataColumn&gt;オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph1">`missingSchemaAction`</ph>引数<ph id="ph2">`MissingSchemaAction.Add`</ph>&lt;/xref:System.Data.DataColumn&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.</source>
          <target state="translated">その場合、統合&lt;xref:System.Data.DataSet&gt;、追加されたスキーマとデータが含まれています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Unchanged`</ph>, <ph id="ph2">`Modified`</ph>, or <ph id="ph3">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に&lt;xref:System.Data.DataSet&gt;、ターゲットに任意のソース行、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Unchanged`</ph>、 <ph id="ph2">`Modified`</ph>、または<ph id="ph3">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致した&lt;/xref:System.Data.DataRowState&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Source rows with a <ph id="ph1">`DataRowState`</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">持つ行をソース、<ph id="ph1">`DataRowState`</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>During a merge, constraints are disabled.</source>
          <target state="translated">マージ中に制約が無効になります。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.</source>
          <target state="translated">場合は、マージの最後に、制約を有効にすることはできません、&lt;xref:System.Data.ConstraintException&gt;が生成され、制約を無効にして、結合されたデータは保持されます&lt;/xref:System.Data.ConstraintException&gt;。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id="ph1">`false`</ph>, and all rows that are invalid are marked in error.</source>
          <target state="translated">この場合、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティに設定されている<ph id="ph1">`false`</ph>、無効なすべての行がエラーでマークされています&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">リセットする前に、エラーを解決する必要があります、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose data and schema will be merged.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データとスキーマがマージされます。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to preserve changes in the current <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在の変更を保存する<bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Merges an array of <bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects into the current <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, preserving or discarding changes in the <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> and handling an incompatible schema according to the given arguments.</source>
          <target state="translated">配列をマージ<bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在オブジェクト<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>保持する、または変更を破棄すること、 <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>および、互換性のないスキーマに従って、指定した引数を処理します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して&amp;2; つのマージ&lt;xref:System.Data.DataSet&gt;ほぼ同じスキーマを持つオブジェクト&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された&lt;xref:System.Data.DataSet&gt;、データ ソースから最新データを使用します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を最後に更新を含むプロシージャの終了時&lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.</source>
          <target state="translated">このシナリオでは、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが最初に呼び出されます&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.</source>
          <target state="translated">2 番目に返します&lt;xref:System.Data.DataSet&gt;検証とマージ用に最適化されています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet&gt;オブジェクトのみ&lt;xref:System.Data.DataTable&gt;と&lt;xref:System.Data.DataRow&gt;元の&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のサブセットの結果として得られる、変更されたオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;が含まれています。&lt;/xref:System.Data.DataSet&gt;この&amp;2; つ目</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The middle-tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ&lt;xref:System.Data.DataSet&gt;(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された&lt;xref:System.Data.DataSet&gt;クライアント アプリケーションの元にマージできます&lt;xref:System.Data.DataSet&gt;で、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッド&lt;/xref:System.Data.DataSet.Merge%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>To facilitate explanation of the &lt;xref:System.Data.DataSet.Merge%2A&gt; method, we use "target" to signify the current &lt;xref:System.Data.DataSet&gt;, and "source" to name the second (parameter) &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">説明を容易にするために、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して"target"を現在を示すために&lt;xref:System.Data.DataSet&gt;、および&amp;2; つ目の (パラメーター) &lt;xref:System.Data.DataSet&gt;.&lt;/xref:System.Data.DataSet&gt;の名前を付けるには、「ソース」&lt;/xref:System.Data.DataSet&gt; &lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The target &lt;xref:System.Data.DataSet&gt; is so named because it is the object upon which an action (the merge) occurs.</source>
          <target state="translated">ターゲット&lt;xref:System.Data.DataSet&gt;と呼ばれるアクション (マージ) が発生した基になるオブジェクトになっているためです&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The second &lt;xref:System.Data.DataSet&gt; is called a "source" because the information it contains does not change, but instead is merged into the current &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">2 つ目&lt;xref:System.Data.DataSet&gt;と呼ばれます"source"が含まれている情報は変更されませんが、代わりに、現在&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;にマージされます。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.</source>
          <target state="translated">ときに、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドが呼び出されると、2 つのスキーマ&lt;xref:System.Data.DataSet&gt;オブジェクトを比較するスキーマが変更された可能性があるためです&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph1">`missingSchemaAction`</ph> argument to <ph id="ph2">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース&lt;xref:System.Data.DataSet&gt;スキーマ要素が含まれています (追加&lt;xref:System.Data.DataColumn&gt;オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph1">`missingSchemaAction`</ph>引数<ph id="ph2">`MissingSchemaAction.Add`</ph>&lt;/xref:System.Data.DataColumn&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.</source>
          <target state="translated">その場合、統合&lt;xref:System.Data.DataSet&gt;、追加されたスキーマとデータが含まれています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Unchanged`</ph>, <ph id="ph2">`Modified`</ph>, or <ph id="ph3">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に&lt;xref:System.Data.DataSet&gt;、ターゲットに任意のソース行、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Unchanged`</ph>、 <ph id="ph2">`Modified`</ph>、または<ph id="ph3">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致した&lt;/xref:System.Data.DataRowState&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Source rows with a <ph id="ph1">`DataRowState`</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">持つ行をソース、<ph id="ph1">`DataRowState`</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>During a merge, constraints are disabled.</source>
          <target state="translated">マージ中に制約が無効になります。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.</source>
          <target state="translated">場合は、マージの最後に、制約を有効にすることはできません、&lt;xref:System.Data.ConstraintException&gt;が生成され、制約を無効にして、結合されたデータは保持されます&lt;/xref:System.Data.ConstraintException&gt;。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id="ph1">`false`</ph>, and all rows that are invalid are marked in error.</source>
          <target state="translated">この場合、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティに設定されている<ph id="ph1">`false`</ph>、無効なすべての行がエラーでマークされています&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">リセットする前に、エラーを解決する必要があります、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The array of <bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects to be merged into the <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">配列<bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>にマージするオブジェクト、 <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to preserve changes in the <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変更を保持するために、 <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.MissingSchemaAction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.MissingSchemaAction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Merges a specified <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and its schema with the current <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, preserving or discarding changes in the current <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> and handling an incompatible schema according to the given arguments.</source>
          <target state="translated">指定されたマージ<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と、現在のスキーマ<bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>保持する、または現在の変更を破棄する<bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>および、互換性のないスキーマに従って、指定した引数の処理します。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して&amp;2; つのマージ&lt;xref:System.Data.DataSet&gt;ほぼ同じスキーマを持つオブジェクト&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された&lt;xref:System.Data.DataSet&gt;、データ ソースから最新データを使用します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を最後に更新を含むプロシージャの終了時&lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</source>
          <target state="translated">クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.</source>
          <target state="translated">このシナリオでは、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが最初に呼び出されます&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.</source>
          <target state="translated">2 番目に返します&lt;xref:System.Data.DataSet&gt;検証とマージ用に最適化されています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet&gt;オブジェクトのみ&lt;xref:System.Data.DataTable&gt;と&lt;xref:System.Data.DataRow&gt;元の&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のサブセットの結果として得られる、変更されたオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;が含まれています。&lt;/xref:System.Data.DataSet&gt;この&amp;2; つ目</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The middle-tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ&lt;xref:System.Data.DataSet&gt;(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された&lt;xref:System.Data.DataSet&gt;クライアント アプリケーションの元にマージできます&lt;xref:System.Data.DataSet&gt;で、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッド&lt;/xref:System.Data.DataSet.Merge%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>To facilitate explanation of the &lt;xref:System.Data.DataSet.Merge%2A&gt; method, we use "target" to signify the current &lt;xref:System.Data.DataSet&gt;, and "source" to name the second (parameter) &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">説明を容易にするために、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して"target"を現在を示すために&lt;xref:System.Data.DataSet&gt;、および&amp;2; つ目の (パラメーター) &lt;xref:System.Data.DataSet&gt;.&lt;/xref:System.Data.DataSet&gt;の名前を付けるには、「ソース」&lt;/xref:System.Data.DataSet&gt; &lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>The target &lt;xref:System.Data.DataSet&gt; is so named because it is the object upon which an action (the merge) occurs.</source>
          <target state="translated">ターゲット&lt;xref:System.Data.DataSet&gt;と呼ばれるアクション (マージ) が発生した基になるオブジェクトになっているためです&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The second &lt;xref:System.Data.DataSet&gt; is called a "source" because the information it contains does not change, but instead is merged into the current &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">2 つ目&lt;xref:System.Data.DataSet&gt;と呼ばれます"source"が含まれている情報は変更されませんが、代わりに、現在&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;にマージされます。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.</source>
          <target state="translated">ときに、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドが呼び出されると、2 つのスキーマ&lt;xref:System.Data.DataSet&gt;オブジェクトを比較するスキーマが変更された可能性があるためです&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph1">`missingSchemaAction`</ph> argument to <ph id="ph2">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース&lt;xref:System.Data.DataSet&gt;スキーマ要素が含まれています (追加&lt;xref:System.Data.DataColumn&gt;オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph1">`missingSchemaAction`</ph>引数<ph id="ph2">`MissingSchemaAction.Add`</ph>&lt;/xref:System.Data.DataColumn&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.</source>
          <target state="translated">その場合、統合&lt;xref:System.Data.DataSet&gt;、追加されたスキーマとデータが含まれています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Unchanged`</ph>, <ph id="ph2">`Modified`</ph>, or <ph id="ph3">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に&lt;xref:System.Data.DataSet&gt;、ターゲットに任意のソース行、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Unchanged`</ph>、 <ph id="ph2">`Modified`</ph>、または<ph id="ph3">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致した&lt;/xref:System.Data.DataRowState&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Source rows with a <ph id="ph1">`DataRowState`</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">持つ行をソース、<ph id="ph1">`DataRowState`</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>During a merge, constraints are disabled.</source>
          <target state="translated">マージ中に制約が無効になります。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.</source>
          <target state="translated">場合は、マージの最後に、制約を有効にすることはできません、&lt;xref:System.Data.ConstraintException&gt;が生成され、制約を無効にして、結合されたデータは保持されます&lt;/xref:System.Data.ConstraintException&gt;。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id="ph1">`false`</ph>, and all rows that are invalid are marked in error.</source>
          <target state="translated">この場合、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティに設定されている<ph id="ph1">`false`</ph>、無効なすべての行がエラーでマークされています&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">リセットする前に、エラーを解決する必要があります、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose data and schema will be merged.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データとスキーマがマージされます。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to preserve changes in the current <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>現在の変更を保存する<bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.MissingSchemaAction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.MissingSchemaAction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataSet</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataSet</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Merges a specified <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and its schema into the current <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, preserving or discarding changes in the <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> and handling an incompatible schema according to the given arguments.</source>
          <target state="translated">指定されたマージ<bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>と現在にそのスキーマ<bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>保持する、または変更を破棄すること、 <bpt id="p3">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>および、互換性のないスキーマに従って、指定した引数を処理します。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is used to merge two &lt;xref:System.Data.DataSet&gt; objects that have largely similar schemas.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドを使用して&amp;2; つのマージ&lt;xref:System.Data.DataSet&gt;ほぼ同じスキーマを持つオブジェクト&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>A merge is typically used on a client application to incorporate the latest changes from a data source into an existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>This allows the client application to have a refreshed &lt;xref:System.Data.DataSet&gt; with the latest data from the data source.</source>
          <target state="translated">これにより、クライアント アプリケーションが、更新された&lt;xref:System.Data.DataSet&gt;、データ ソースから最新データを使用します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.Merge%2A&gt; method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を最後に更新を含むプロシージャの終了時&lt;/xref:System.Data.DataSet.Merge%2A&gt;</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</source>
          <target state="translated">イオン クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>In this scenario, the &lt;xref:System.Data.DataSet.GetChanges%2A&gt; method is first invoked.</source>
          <target state="translated">このシナリオでは、&lt;xref:System.Data.DataSet.GetChanges%2A&gt;メソッドが最初に呼び出されます&lt;/xref:System.Data.DataSet.GetChanges%2A&gt;。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>That method returns a second &lt;xref:System.Data.DataSet&gt; optimized for validating and merging.</source>
          <target state="translated">2 番目に返します&lt;xref:System.Data.DataSet&gt;検証とマージ用に最適化されています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This second &lt;xref:System.Data.DataSet&gt; object contains only the &lt;xref:System.Data.DataTable&gt; and &lt;xref:System.Data.DataRow&gt; objects that were changed, resulting in a subset of the original &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet&gt;オブジェクトのみ&lt;xref:System.Data.DataTable&gt;と&lt;xref:System.Data.DataRow&gt;元の&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のサブセットの結果として得られる、変更されたオブジェクト&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;が含まれています。&lt;/xref:System.Data.DataSet&gt;この&amp;2; つ目</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</source>
          <target state="translated">このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The middle-tier component then updates the original data source with the changes through stored procedures.</source>
          <target state="translated">中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>The middle tier can then send back either a new &lt;xref:System.Data.DataSet&gt; that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</source>
          <target state="translated">中間層送信できるように、新しいバックアップ&lt;xref:System.Data.DataSet&gt;(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned &lt;xref:System.Data.DataSet&gt; can be merged back into the client application's original &lt;xref:System.Data.DataSet&gt; with the &lt;xref:System.Data.DataSet.Merge%2A&gt; method.</source>
          <target state="translated">(たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された&lt;xref:System.Data.DataSet&gt;クライアント アプリケーションの元にマージできます&lt;xref:System.Data.DataSet&gt;で、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッド&lt;/xref:System.Data.DataSet.Merge%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Data.DataSet.Merge%2A&gt; method is called, the schemas of the two &lt;xref:System.Data.DataSet&gt; objects are compared because it is possible that the schemas may have been changed.</source>
          <target state="translated">ときに、&lt;xref:System.Data.DataSet.Merge%2A&gt;メソッドが呼び出されると、2 つのスキーマ&lt;xref:System.Data.DataSet&gt;オブジェクトを比較するスキーマが変更された可能性があるためです&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.Merge%2A&gt;。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</source>
          <target state="translated">たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>If the source &lt;xref:System.Data.DataSet&gt; contains schema elements (added &lt;xref:System.Data.DataColumn&gt; objects) that are missing in the target, the schema elements can be added to the target by setting the <ph id="ph1">`missingSchemaAction`</ph> argument to <ph id="ph2">`MissingSchemaAction.Add`</ph>.</source>
          <target state="translated">場合、ソース&lt;xref:System.Data.DataSet&gt;スキーマ要素が含まれています (追加&lt;xref:System.Data.DataColumn&gt;オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、<ph id="ph1">`missingSchemaAction`</ph>引数<ph id="ph2">`MissingSchemaAction.Add`</ph>&lt;/xref:System.Data.DataColumn&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>In that case, the merged &lt;xref:System.Data.DataSet&gt; contains the added schema and data.</source>
          <target state="translated">その場合、統合&lt;xref:System.Data.DataSet&gt;、追加されたスキーマとデータが含まれています&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>After merging schemas, the data is merged.</source>
          <target state="translated">スキーマをマージするには、後に、データがマージされます。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>When merging a new source &lt;xref:System.Data.DataSet&gt; into the target, any source rows with a &lt;xref:System.Data.DataRowState&gt; value of <ph id="ph1">`Unchanged`</ph>, <ph id="ph2">`Modified`</ph>, or <ph id="ph3">`Deleted`</ph> are matched to target rows with the same primary key values.</source>
          <target state="translated">新しいソースをマージする際に&lt;xref:System.Data.DataSet&gt;、ターゲットに任意のソース行、&lt;xref:System.Data.DataRowState&gt;の値<ph id="ph1">`Unchanged`</ph>、 <ph id="ph2">`Modified`</ph>、または<ph id="ph3">`Deleted`</ph>が同じ主キーの値を持つ対象の行に一致した&lt;/xref:System.Data.DataRowState&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Source rows with a <ph id="ph1">`DataRowState`</ph> value of <ph id="ph2">`Added`</ph> are matched to new target rows with the same primary key values as the new source rows.</source>
          <target state="translated">持つ行をソース、<ph id="ph1">`DataRowState`</ph>の値<ph id="ph2">`Added`</ph>新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>During a merge, constraints are disabled.</source>
          <target state="translated">マージ中に制約が無効になります。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>If any constraints cannot be enabled at the end of merge, a &lt;xref:System.Data.ConstraintException&gt; is generated and the merged data is retained while the constraints are disabled.</source>
          <target state="translated">場合は、マージの最後に、制約を有効にすることはできません、&lt;xref:System.Data.ConstraintException&gt;が生成され、制約を無効にして、結合されたデータは保持されます&lt;/xref:System.Data.ConstraintException&gt;。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property is set to <ph id="ph1">`false`</ph>, and all rows that are invalid are marked in error.</source>
          <target state="translated">この場合、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティに設定されている<ph id="ph1">`false`</ph>、無効なすべての行がエラーでマークされています&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The errors must be resolved before attempting to reset the &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt; property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">リセットする前に、エラーを解決する必要があります、&lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;プロパティを<ph id="ph1">`true`</ph>&lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt;。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_DataTable" name="DataTable" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> whose data and schema will be merged.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_DataTable" name="DataTable" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データとスキーマがマージされます。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.MissingSchemaAction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.MissingSchemaAction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to preserve changes in the <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>変更を保持するために、 <bpt id="p2">&lt;xref uid="langword_csharp_DataSet" name="DataSet" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>それ以外の<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataSet</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">dataSet</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Occurs when a target and source <bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> have the same primary key value, and &lt;xref:System.Data.DataSet.EnforceConstraints*&gt; is set to true.</source>
          <target state="translated">ターゲットとソースときに発生<bpt id="p1">&lt;xref href="System.Data.DataRow"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>同じ主キーの値があると&lt;xref:System.Data.DataSet.EnforceConstraints*&gt;設定を true にします&lt;/xref:System.Data.DataSet.EnforceConstraints*&gt;。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">イベント処理の詳細については、次を参照してください。 <bpt id="p1">[</bpt>NIB: イベントの利用<ept id="p1">](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>です。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Gets or sets the namespace of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定の名前空間、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The Namespace property is used when reading and writing an XML document into the &lt;xref:System.Data.DataSet&gt; using the &lt;xref:System.Data.DataSet.ReadXml%2A&gt;, &lt;xref:System.Data.DataSet.WriteXml%2A&gt;, &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;, or &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods.</source>
          <target state="translated">Namespace プロパティにドキュメントの XML を読み書きするときに使用される、&lt;xref:System.Data.DataSet&gt;を使用して、 &lt;xref:System.Data.DataSet.ReadXml%2A&gt;、 &lt;xref:System.Data.DataSet.WriteXml%2A&gt;、 &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;、または&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The namespace of an XML document is used to scope XML attributes and elements when read into a &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">XML ドキュメントの名前空間は XML 属性および&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;を読み取るときに要素のスコープを指定するために使用します。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For example, if a &lt;xref:System.Data.DataSet&gt; contains a schema that was read from a document with the namespace "myCompany," and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.</source>
          <target state="translated">たとえば場合、&lt;xref:System.Data.DataSet&gt;スキーマを含む"myCompany、"名前空間を持つドキュメントから読み込まれたと別の名前空間を持つドキュメントからのみデータを読み取るしようとしましたが、既存のスキーマに対応していないすべてのデータは無視されます&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The namespace of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">名前空間、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The namespace already has data.</source>
          <target state="translated">名前空間には、既にデータがあります。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Raises the OnPropertyChanging event.</source>
          <target state="translated">OnPropertyChanging イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させるには、イベント ハンドラーがデリゲートからを呼び出されます。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>For an overview, see <bpt id="p1">[</bpt>NIB: Raising an Event<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.</source>
          <target state="translated">概要については、次を参照してください。 <bpt id="p1">[</bpt>NIB: イベントを発生させる<ept id="p1">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>です。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt; that contains the event data.</source>
          <target state="translated">A&lt;xref:System.ComponentModel.PropertyChangedEventArgs&gt;イベント データを格納します&lt;/xref:System.ComponentModel.PropertyChangedEventArgs&gt;。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Occurs when a <bpt id="p1">&lt;xref href="System.Data.DataRelation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is removed from a <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">発生したときに、 <bpt id="p1">&lt;xref href="System.Data.DataRelation"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>からオブジェクトが削除された、 <bpt id="p2">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>This method should be overridden by subclasses to restrict tables being removed</source>
          <target state="translated">このメソッドは、テーブルの削除を制限するサブクラスによってオーバーライドされなければなりません</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.DataRelation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> being removed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.DataRelation"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>削除されます。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Occurs when a <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is removed from a <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">発生したときに、 <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>から削除されて、 <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>This method can be overridden by subclasses to restrict tables from being removed.</source>
          <target state="translated">このメソッドは、削除からテーブルを制限するサブクラスによってオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> being removed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>削除されます。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Gets or sets an XML prefix that aliases the namespace of the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定の名前空間のエイリアスを表すプレフィックス、XML、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>The Prefix property is used throughout an XML document to identify elements which belong to the namespace of the &lt;xref:System.Data.DataSet&gt; object (as set by the &lt;xref:System.Data.DataSet.Namespace%2A&gt; property).</source>
          <target state="translated">名前空間に属している要素を識別する XML ドキュメント全体にわたって Prefix プロパティが使用される、&lt;xref:System.Data.DataSet&gt;オブジェクト (によって、設定、&lt;xref:System.Data.DataSet.Namespace%2A&gt;プロパティ).&lt;/xref:System.Data.DataSet.Namespace%2A&gt; &lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The XML prefix for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> namespace.</source>
          <target state="translated">XML プレフィックス、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>名前空間。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Sends a notification that the specified <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property is about to change.</source>
          <target state="translated">通知を送信、指定された<bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティが変更されようとしています。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The name of the property that is about to change.</source>
          <target state="translated">変更されるプロパティの名前。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています<ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を読み込む、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema, as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id="ph4">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph>&gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;で&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を指定して<ph id="ph4">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>An object that derives from &lt;xref:System.IO.Stream&gt;.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;。&lt;/xref:System.IO.Stream&gt;から派生したオブジェクト</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.TextReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.IO.TextReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています<ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を読み込む、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph>       Classes that inherit from the &lt;xref:System.IO.TextReader&gt; class include the &lt;xref:System.IO.StreamReader&gt; and &lt;xref:System.IO.StringReader&gt; classes.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph>継承するクラス、&lt;xref:System.IO.TextReader&gt;クラスが含まれて、&lt;xref:System.IO.StreamReader&gt;と&lt;xref:System.IO.StringReader&gt;クラス&lt;/xref:System.IO.StringReader&gt;&lt;/xref:System.IO.StreamReader&gt;&lt;/xref:System.IO.TextReader&gt;。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id="ph2">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;で&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を指定して<ph id="ph2">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_TextReader" name="TextReader" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from which to read the schema and data.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_TextReader" name="TextReader" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>スキーマとデータを読み取り元。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified file.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定のファイルを使用します。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています、 <ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を読み込む、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id="ph4">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph>&gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;で&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を指定して<ph id="ph4">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The filename (including the path) from which to read.</source>
          <target state="translated">読み取り元 (パスを含む) ファイル名です。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not set to <bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定されていない<bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>The ReadXml method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">ReadXml メソッドでは、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling ReadXml to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています、 <ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、およびを読み込む ReadXml を呼び出すときに例外が発生する可能性があります、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph>       &lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt; inherits from &lt;xref:System.Xml.XmlReader&gt;.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph>       &lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt;&lt;xref:System.Xml.XmlReader&gt;。&lt;/xref:System.Xml.XmlReader&gt;から継承します。&lt;/xref:System.Xml.XmlTextReader?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with ReadXml by specifying <ph id="ph2">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;でを指定して ReadXml <ph id="ph2">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet&gt; &lt;/xref:System.Data.DataSet&gt; 。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlReader&gt; from which to read.</source>
          <target state="translated">&lt;xref:System.Xml.XmlReader&gt;読み取り元&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and <bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>と<bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">場合も同様、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you use ReadXml and you set &lt;xref:System.Data.XmlReadMode&gt; to <ph id="ph2">`Diffgram`</ph>, the content of the target <ph id="ph3">`DataSet`</ph> and the original <ph id="ph4">`DataSet`</ph> may differ because of how the diffgram is generated and processed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ReadXml を使用して設定する&lt;xref:System.Data.XmlReadMode&gt;に<ph id="ph2">`Diffgram`</ph>、ターゲットのコンテンツ<ph id="ph3">`DataSet`</ph>とオリジナル<ph id="ph4">`DataSet`</ph>diffgram の生成方法と処理方法により異なる場合があります&lt;/xref:System.Data.XmlReadMode&gt;。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>For more information on diffgrams, see <bpt id="p1">[</bpt>DiffGrams<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Diffgram の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Diffgram<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています<ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を読み込む、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id="ph4">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph>&gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;で&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を指定して<ph id="ph4">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.Stream&gt; from which to read.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;読み取り元&lt;/xref:System.IO.Stream&gt;。</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.TextReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and <bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.IO.TextReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>と<bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています<ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を読み込む、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id="ph4">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph>&gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;で&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を指定して<ph id="ph4">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextReader&gt; from which to read.</source>
          <target state="translated">&lt;xref:System.IO.TextReader&gt;読み取り元&lt;/xref:System.IO.TextReader&gt;。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified file and <bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 、指定したファイルを使用して<bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています、 <ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を読み込む、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id="ph4">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph>&gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;で&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を指定して<ph id="ph4">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The filename (including the path) from which to read.</source>
          <target state="translated">読み取り元 (パスを含む) ファイル名です。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not set to <bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定されていない<bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Reads XML schema and data into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and <bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">XML スキーマとデータを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.Xml.XmlReader?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>と<bpt id="p2">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method provides a way to read either data only, or both data and schema into a &lt;xref:System.Data.DataSet&gt; from an XML document, whereas the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method reads only the schema.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXml%2A&gt;メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントから一方、&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッドは、スキーマのみを読み取ります&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>To read both data and schema, use one of the <ph id="ph1">`ReadXML`</ph> overloads that includes the <ph id="ph2">`mode`</ph> parameter, and set its value to <ph id="ph3">`ReadSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を読み取りのいずれかの操作を使用して、<ph id="ph1">`ReadXML`</ph>オーバー ロードを含む、<ph id="ph2">`mode`</ph>パラメーター、その値に設定し、<ph id="ph3">`ReadSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; and &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;と&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>To write XML data, or both schema and data from the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`WriteXml`</ph> method.</source>
          <target state="translated">XML データ、または両方のスキーマとデータを書き込む、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`WriteXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>To write just the schema, use the <ph id="ph1">`WriteXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを書き込むには、使用、<ph id="ph1">`WriteXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</source>
          <target state="translated">インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</source>
          <target state="translated">(たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</source>
          <target state="translated">インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>If the schema cannot be extended through inference in order to expose all data, an exception is raised.</source>
          <target state="translated">スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The <ph id="ph2">`DataSet`</ph> does not associate an XML element with its corresponding <ph id="ph3">`DataColumn`</ph> or <ph id="ph4">`DataTable`</ph> when legal XML characters like ("_") are escaped in the serialized XML.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、<ph id="ph2">`DataSet`</ph>とそれに対応する XML 要素は関連付けません<ph id="ph3">`DataColumn`</ph>または<ph id="ph4">`DataTable`</ph>シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> itself only escapes illegal XML characters in XML element names and hence can only consume the same.</source>
          <target state="translated"><ph id="ph1">`DataSet`</ph>自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>When legal characters in XML element name are escaped, the element is ignored while processing.</source>
          <target state="translated">XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>If the XML Schema for a &lt;xref:System.Data.DataSet&gt; includes a <ph id="ph1">`targetNamespace`</ph>, data may not be read, and you may encounter exceptions when calling &lt;xref:System.Data.DataSet.ReadXml%2A&gt; to load the &lt;xref:System.Data.DataSet&gt; with XML that contains elements with no qualifying namespace.</source>
          <target state="translated">場合の XML スキーマ、&lt;xref:System.Data.DataSet&gt;が含まれています、 <ph id="ph1">`targetNamespace`</ph>、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を読み込む、&lt;xref:System.Data.DataSet&gt;修飾名前空間のない要素を含む XML を使用します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>To read unqualified elements, set <ph id="ph1">`elementFormDefault`</ph> equal to "qualified" in your XML Schema as the following example demonstrates.</source>
          <target state="translated">修飾されていない要素を読み取り、次のように設定します。<ph id="ph1">`elementFormDefault`</ph>と等しい"qualified"に、XML スキーマで次の例で示すようにします。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXml%2A&gt; by specifying <ph id="ph4">`XmlReadMode.ReadSchema`</ph>.</source>
          <target state="translated"><ph id="ph1">```   &lt;xsd:schema id="MyDataSet"       elementFormDefault="qualified"       targetNamespace="http://www.tempuri.org/MyDataSet.xsd"       xmlns="http://www.tempuri.org/MyDataSet.xsd"       xmlns:xsd="http://www.w3.org/2001/XMLSchema"       xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;   &lt;/xsd:schema&gt;   ```</ph><ph id="ph2">      &gt; </ph><ph id="ph3">[!NOTE]</ph>&gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、&lt;xref:System.Data.DataSet&gt;で&lt;xref:System.Data.DataSet.ReadXml%2A&gt;を指定して<ph id="ph4">`XmlReadMode.ReadSchema`</ph>&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlReader&gt; from which to read.</source>
          <target state="translated">&lt;xref:System.Xml.XmlReader&gt;読み取り元&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlReadMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> used to read the data.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_XmlReadMode" name="XmlReadMode" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>データの読み取りに使用します。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Reads the XML schema from the specified &lt;xref:System.IO.Stream&gt; into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定された対象から XML スキーマを読み込みます&lt;xref:System.IO.Stream&gt;に、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.IO.Stream&gt; 。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method to create the schema for a &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のスキーマを作成するメソッド&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;を使用して</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;一般にこのメソッドは&lt;xref:System.Data.DataSet.ReadXml%2A&gt;&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;の塗りつぶしに使用するメソッド&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;を呼び出す前に&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>Classes that derive from the &lt;xref:System.IO.Stream&gt; class include &lt;xref:System.IO.BufferedStream&gt;, &lt;xref:System.IO.FileStream&gt;, &lt;xref:System.IO.MemoryStream&gt;, and &lt;xref:System.Net.Sockets.NetworkStream&gt;.</source>
          <target state="translated">派生したクラス、&lt;xref:System.IO.Stream&gt;クラスを含める&lt;xref:System.IO.BufferedStream&gt;、 &lt;xref:System.IO.FileStream&gt;、 &lt;xref:System.IO.MemoryStream&gt;、 &lt;xref:System.Net.Sockets.NetworkStream&gt;&lt;/xref:System.Net.Sockets.NetworkStream&gt; &lt;/xref:System.IO.MemoryStream&gt; &lt;/xref:System.IO.FileStream&gt; &lt;/xref:System.IO.BufferedStream&gt; &lt;/xref:System.IO.Stream&gt; 。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますの&lt;xref:System.Data.DataSet&gt;&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;にスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスローされる&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.Stream&gt; from which to read.</source>
          <target state="translated">&lt;xref:System.IO.Stream&gt;読み取り元&lt;/xref:System.IO.Stream&gt;。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Reads the XML schema from the specified &lt;xref:System.IO.TextReader&gt; into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定された対象から XML スキーマを読み込みます&lt;xref:System.IO.TextReader&gt;に、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.IO.TextReader&gt; 。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method to create the schema for a &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のスキーマを作成するメソッド&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;を使用して</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;一般にこのメソッドは&lt;xref:System.Data.DataSet.ReadXml%2A&gt;&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;の塗りつぶしに使用するメソッド&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;を呼び出す前に&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Classes that inherit from the &lt;xref:System.IO.TextReader&gt; class include the &lt;xref:System.IO.StreamReader&gt; and &lt;xref:System.IO.StringReader&gt; classes.</source>
          <target state="translated">継承するクラス、&lt;xref:System.IO.TextReader&gt;クラスが含まれて、&lt;xref:System.IO.StreamReader&gt;と&lt;xref:System.IO.StringReader&gt;クラス&lt;/xref:System.IO.StringReader&gt;&lt;/xref:System.IO.StreamReader&gt;&lt;/xref:System.IO.TextReader&gt;。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますの&lt;xref:System.Data.DataSet&gt;&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;にスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスローされる&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextReader&gt; from which to read.</source>
          <target state="translated">&lt;xref:System.IO.TextReader&gt;読み取り元&lt;/xref:System.IO.TextReader&gt;。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Reads the XML schema from the specified file into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定したファイルから XML スキーマを読み取り、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method to create the schema for a &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のスキーマを作成するメソッド&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;を使用して</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;一般にこのメソッドは&lt;xref:System.Data.DataSet.ReadXml%2A&gt;&lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;の塗りつぶしに使用するメソッド&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;を呼び出す前に&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素を含むスキーマを読み取ったり、into、&lt;xref:System.Data.DataSet&gt;&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;しようとする同じ名前では、同じ名前空間内の別の種類の例外がスロー&lt;/xref:System.Data.DataSet&gt; 。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>The file name (including the path) from which to read.</source>
          <target state="translated">ファイル読み出し元の名 (パスを含む)。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not set to <bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定されていない<bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Reads the XML schema from the specified &lt;xref:System.Xml.XmlReader&gt; into the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定された対象から XML スキーマを読み込みます&lt;xref:System.Xml.XmlReader&gt;に、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>&lt;/xref:System.Xml.XmlReader&gt; 。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Use the ReadXmlSchema method to create the schema for a &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">ReadXmlSchema メソッドを使用して、 &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;のスキーマを作成するには</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Data corruption can occur if the msdata:DataType and the xs:type types do not match.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>No exception will be thrown.</source>
          <target state="translated">例外はスローされません。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>The ReadXmlSchema method is generally invoked before invoking the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; method which is used to fill the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">ReadXmlSchema 一般にこのメソッドは、 &lt;xref:System.Data.DataSet.ReadXml%2A&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;の塗りつぶしに使用するメソッド&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;を呼び出す前に</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; class is abstract.</source>
          <target state="translated">&lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;クラスは抽象クラスです&lt;/xref:System.Xml.XmlReader?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>A class that inherits from the <ph id="ph1">`XmlReader`</ph> is the &lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt; class.</source>
          <target state="translated">継承するクラス、<ph id="ph1">`XmlReader`</ph>は&lt;xref:System.Xml.XmlTextReader?displayProperty=fullName&gt;クラス&lt;/xref:System.Xml.XmlTextReader?displayProperty=fullName&gt;です。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If the schema for your &lt;xref:System.Data.DataSet&gt; contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the &lt;xref:System.Data.DataSet&gt; with ReadXmlSchema.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合のスキーマ、&lt;xref:System.Data.DataSet&gt;要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスローする、 &lt;xref:System.Data.DataSet&gt;ReadXmlSchema と&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>This exception does not occur if you are using .NET Framework version 1.0.</source>
          <target state="translated">.NET Framework version 1.0 を使用している場合、この例外は発生しません。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlReader&gt; from which to read.</source>
          <target state="translated">&lt;xref:System.Xml.XmlReader&gt;読み取り元&lt;/xref:System.Xml.XmlReader&gt;。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Ignores attributes and returns an empty DataSet.</source>
          <target state="translated">属性を無視し、空のデータセットを返します。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The specified XML reader.</source>
          <target state="translated">指定した XML リーダー。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Rolls back all the changes made to the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> since it was created, or since the last time <ph id="ph1">&amp;lt;</ph>xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> was called.</source>
          <target state="translated">加えられたすべての変更をロールバック、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の作成後、または前回<ph id="ph1">&amp;lt;</ph>xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>が呼び出されました。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Invoke the RejectChanges to call the &lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt; method on all &lt;xref:System.Data.DataTable&gt; objects contained by the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">&lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt; &lt;xref:System.Data.DataTable&gt; &lt;xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataSet&gt;オブジェクトに含まれる&lt;/xref:System.Data.DataTable&gt;すべてのメソッド&lt;/xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;を呼び出す RejectChanges を呼び出し</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Data.DataRow&gt; objects contained by the &lt;xref:System.Data.DataSet&gt; can each be set into edit mode by invoking the &lt;xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">&lt;xref:System.Data.DataRow&gt;含まれるオブジェクト、&lt;xref:System.Data.DataSet&gt;ごとに設定できる編集モードを呼び出すことによって、&lt;xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName&gt;&lt;/xref:System.Data.DataSet&gt;。&lt;/xref:System.Data.DataRow&gt;</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>After invoking the &lt;xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName&gt; method, changes can be rejected by calling the &lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt; on the &lt;xref:System.Data.DataTable&gt; to which the &lt;xref:System.Data.DataRow&gt; objects belong.</source>
          <target state="translated">呼び出し後に、&lt;xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName&gt;メソッドを呼び出して変更が拒否されることができます、&lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;で、&lt;xref:System.Data.DataTable&gt;する、&lt;xref:System.Data.DataRow&gt;オブジェクトが属している&lt;/xref:System.Data.DataRow&gt;&lt;/xref:System.Data.DataTable&gt;&lt;/xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;&lt;/xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt; method is called, any rows still in edit-mode cancel their edits.</source>
          <target state="translated">ときに、&lt;xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;メソッドが呼び出されると、編集モードにまだ行が、編集をキャンセルします&lt;/xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>New rows are removed.</source>
          <target state="translated">新しい行が削除されます。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Modified and deleted rows return back to their original state (<ph id="ph1">`DataRowState.Unchanged`</ph>).</source>
          <target state="translated">変更および削除された行を返す元の状態に戻ります (<ph id="ph1">`DataRowState.Unchanged`</ph>)。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>AcceptChanges and RejectChanges only apply to &lt;xref:System.Data.DataRow&gt; related changes (that is, <ph id="ph1">`Add`</ph>, <ph id="ph2">`Remove`</ph>, <ph id="ph3">`Delete`</ph>, and <ph id="ph4">`Modify`</ph>).</source>
          <target state="translated">Acceptchange と Rejectchange がのみに適用&lt;xref:System.Data.DataRow&gt;関連の変更 (つまり、 <ph id="ph1">`Add`</ph>、 <ph id="ph2">`Remove`</ph>、 <ph id="ph3">`Delete`</ph>、および<ph id="ph4">`Modify`</ph>).&lt;/xref:System.Data.DataRow&gt;</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>They are not applicable to schema or structural changes.</source>
          <target state="translated">これらはスキーマまたは構造の変更を適用できません。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Get the collection of relations that link tables and allow navigation from parent tables to child tables.</source>
          <target state="translated">テーブルをリンクし、ナビゲーションの親から子テーブルへのテーブルを許可するリレーションシップのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.DataRelationCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains a collection of <bpt id="p2">&lt;xref href="System.Data.DataRelation"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Data.DataRelationCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のコレクションを含む<bpt id="p2">&lt;xref href="System.Data.DataRelation"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>An empty collection is returned if no <bpt id="p1">&lt;xref href="System.Data.DataRelation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects exist.</source>
          <target state="translated">ない場合は、空のコレクションが返される<bpt id="p1">&lt;xref href="System.Data.DataRelation"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが存在します。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Gets or sets a <bpt id="p1">&lt;xref href="System.Data.SerializationFormat"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> used during remoting.</source>
          <target state="translated">取得または設定、 <bpt id="p1">&lt;xref href="System.Data.SerializationFormat"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>リモート処理中に使用します。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Data.SerializationFormat"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Data.SerializationFormat"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Clears all tables and removes all relations, foreign constraints, and tables from the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">すべてのテーブルをクリアし、すべてのリレーションシップ、外部の制約、およびからテーブルを削除、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Subclasses should override Reset to restore a <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its original state.</source>
          <target state="translated">サブクラスは、復元するリセットをオーバーライドする必要があります、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を元の状態にします。</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Gets or sets a <bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Gets or sets a <bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Data.DataSet&gt; serializes its schema and instance data by default in Web services and remoting scenarios.</source>
          <target state="translated">A &lt;xref:System.Data.DataSet&gt;Web サービス、およびリモート処理のシナリオでは既定のスキーマおよびインスタンス データをシリアル化します&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Setting the SchemaSerializationMode property of a typed <ph id="ph1">`DataSet`</ph> to &lt;xref:System.Data.SchemaSerializationMode&gt; causes schema information to be excluded from the serialization payload.</source>
          <target state="translated">型指定されたの SchemaSerializationMode のプロパティを設定<ph id="ph1">`DataSet`</ph>を&lt;xref:System.Data.SchemaSerializationMode&gt;スキーマ情報は、シリアル化のペイロードを除外します&lt;/xref:System.Data.SchemaSerializationMode&gt;。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Data.SchemaSerializationMode&gt; is supported only for a typed <ph id="ph1">`DataSet`</ph>.</source>
          <target state="translated">&lt;xref:System.Data.SchemaSerializationMode&gt;サポートは、型指定されたに対してのみ<ph id="ph1">`DataSet`</ph>です。&lt;/xref:System.Data.SchemaSerializationMode&gt;</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>For an un-typed <ph id="ph1">`DataSet`</ph> this property can only be set to &lt;xref:System.Data.SchemaSerializationMode&gt;.</source>
          <target state="translated">型指定されていないため<ph id="ph1">`DataSet`</ph>このプロパティは、 &lt;xref:System.Data.SchemaSerializationMode&gt;.&lt;/xref:System.Data.SchemaSerializationMode&gt;にのみ設定できます</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Data.SchemaSerializationMode&gt; should only be used in cases where the schema information of the underlying typed <ph id="ph1">`DataTables`</ph>, <ph id="ph2">`DataRelations`</ph> and <ph id="ph3">`Constraints`</ph> has not been modified.</source>
          <target state="translated">&lt;xref:System.Data.SchemaSerializationMode&gt;スキーマ情報を基になる型指定されている場合のみ使用する必要があります<ph id="ph1">`DataTables`</ph>、<ph id="ph2">`DataRelations`</ph>と<ph id="ph3">`Constraints`</ph>は変更されていません。&lt;/xref:System.Data.SchemaSerializationMode&gt;</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>If modifications have occurred, complete schema information should be serialized with &lt;xref:System.Data.SchemaSerializationMode&gt;.</source>
          <target state="translated">変更がある&lt;xref:System.Data.SchemaSerializationMode&gt;。&lt;/xref:System.Data.SchemaSerializationMode&gt;で発生した、完全なスキーマ情報をシリアル化する必要があります。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Data.SchemaSerializationMode&gt; is supported in version 2.0 of the .NET Framework or later.</source>
          <target state="translated">&lt;xref:System.Data.SchemaSerializationMode&gt;バージョン 2.0、.NET Framework の以降ではサポートします。&lt;/xref:System.Data.SchemaSerializationMode&gt;</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Data.SchemaSerializationMode&gt; is set, only the top level runtime properties present on the &lt;xref:System.Data.DataSet&gt; are serialized.</source>
          <target state="translated">ときに&lt;xref:System.Data.SchemaSerializationMode&gt;が設定されて、上位レベルのランタイム プロパティのみに存在、&lt;xref:System.Data.DataSet&gt;はシリアル化します&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.SchemaSerializationMode&gt;。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>In addition, they are serialized only if they happen to be different from the default values.</source>
          <target state="translated">さらに、既定値は異なる場合に、発生する場合にのみ、シリアル化されます。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>None of the <ph id="ph1">`Tables`</ph>, <ph id="ph2">`Relations`</ph> or <ph id="ph3">`Constraints`</ph> are serialized.</source>
          <target state="translated">いずれも、 <ph id="ph1">`Tables`</ph>、<ph id="ph2">`Relations`</ph>または<ph id="ph3">`Constraints`</ph>はシリアル化します。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>The serialized runtime properties include &lt;xref:System.Data.DataSet.DataSetName%2A&gt;, &lt;xref:System.Data.DataSet.Namespace%2A&gt;, &lt;xref:System.Data.DataSet.Prefix%2A&gt;, &lt;xref:System.Data.DataSet.Locale%2A&gt;, &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;, and &lt;xref:System.Data.DataSet.CaseSensitive%2A&gt;.</source>
          <target state="translated">シリアル化されたランタイム プロパティには、 &lt;xref:System.Data.DataSet.DataSetName%2A&gt;、 &lt;xref:System.Data.DataSet.Namespace%2A&gt;、 &lt;xref:System.Data.DataSet.Prefix%2A&gt;、 &lt;xref:System.Data.DataSet.Locale%2A&gt;、 &lt;xref:System.Data.DataSet.EnforceConstraints%2A&gt;、 &lt;xref:System.Data.DataSet.CaseSensitive%2A&gt;&lt;/xref:System.Data.DataSet.CaseSensitive%2A&gt; &lt;/xref:System.Data.DataSet.EnforceConstraints%2A&gt; &lt;/xref:System.Data.DataSet.Locale%2A&gt; &lt;/xref:System.Data.DataSet.Prefix%2A&gt; &lt;/xref:System.Data.DataSet.Namespace%2A&gt; &lt;/xref:System.Data.DataSet.DataSetName%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>These properties are serialized to make sure that overall runtime data integrity is preserved.</source>
          <target state="translated">これらのプロパティは、全体的なランタイム データの整合性が維持されることを確認してくださいにシリアル化されます。</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>Gets or sets a <bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Gets or sets a <bpt id="p1">&lt;xref href="System.Data.SchemaSerializationMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether &lt;xref:System.Data.DataSet.Relations*&gt; property should be persisted.</source>
          <target state="translated">示す値を取得するかどうか&lt;xref:System.Data.DataSet.Relations*&gt;プロパティを永続化する必要があります&lt;/xref:System.Data.DataSet.Relations*&gt;。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>You typically use this method if you are either creating a designer for the &lt;xref:System.Data.DataSet&gt;, or creating your own control incorporating the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">いずれかをデザイナーを作成する場合は通常このメソッドを使用する、 &lt;xref:System.Data.DataSet&gt;、 &lt;xref:System.Data.DataSet&gt;.&lt;/xref:System.Data.DataSet&gt;を組み込む独自のコントロールを作成または&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value has been changed from its default; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティの値が既定から変更されている場合それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether &lt;xref:System.Data.DataSet.Tables*&gt; property should be persisted.</source>
          <target state="translated">示す値を取得するかどうか&lt;xref:System.Data.DataSet.Tables*&gt;プロパティを永続化する必要があります&lt;/xref:System.Data.DataSet.Tables*&gt;。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>You typically use this method only if you are either creating a designer for the &lt;xref:System.Data.DataSet&gt;, or creating your own control incorporating the &lt;xref:System.Data.DataSet&gt;.</source>
          <target state="translated">いずれかをデザイナーを作成する場合にのみ通常このメソッドを使用する、 &lt;xref:System.Data.DataSet&gt;、 &lt;xref:System.Data.DataSet&gt;.&lt;/xref:System.Data.DataSet&gt;を組み込む独自のコントロールを作成または&lt;/xref:System.Data.DataSet&gt;</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the property value has been changed from its default; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プロパティの値が既定から変更されている場合それ以外の場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Gets or sets an <bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">取得または設定、 <bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>の<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Sites bind a &lt;xref:System.ComponentModel.Component&gt; to a &lt;xref:System.ComponentModel.Container&gt; and enable communication between them, as well as provide a way for the container to manage its components.</source>
          <target state="translated">サイトのバインド、&lt;xref:System.ComponentModel.Component&gt;を&lt;xref:System.ComponentModel.Container&gt;とそれらの間で通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します&lt;/xref:System.ComponentModel.Container&gt;&lt;/xref:System.ComponentModel.Component&gt;。</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">An <bpt id="p1">&lt;xref href="System.ComponentModel.ISite"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.ComponentModel.IListSource&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Data.DataSet&gt;にインスタンスをキャスト、&lt;xref:System.ComponentModel.IListSource&gt;インターフェイス&lt;/xref:System.ComponentModel.IListSource&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.ComponentModel.IListSource&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Data.DataSet&gt;にインスタンスをキャスト、&lt;xref:System.ComponentModel.IListSource&gt;インターフェイス&lt;/xref:System.ComponentModel.IListSource&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Data.DataSet&gt;にインスタンスをキャスト、&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;インターフェイス&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Data.DataSet&gt;にインスタンスをキャスト、&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;インターフェイス&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Xml.XmlReader&gt;.</source>
          <target state="translated">A &lt;xref:System.Xml.XmlReader&gt;.&lt;/xref:System.Xml.XmlReader&gt;</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>For a description of this member, see <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">このメンバーの説明は、次を参照してください。 <ph id="ph1">&amp;lt;</ph>xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>It can be used only when the &lt;xref:System.Data.DataSet&gt; instance is cast to an &lt;xref:System.Xml.Serialization.IXmlSerializable&gt; interface.</source>
          <target state="translated">使用する場合にのみ、&lt;xref:System.Data.DataSet&gt;にインスタンスをキャスト、&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;インターフェイス&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">A &lt;xref:System.Xml.XmlWriter&gt;.&lt;/xref:System.Xml.XmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Gets the collection of tables contained in the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">含まれているテーブルのコレクションを取得、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>To add tables to the collection, use &lt;xref:System.Data.DataTableCollection.Add%2A&gt; method of the &lt;xref:System.Data.DataTableCollection&gt;.</source>
          <target state="translated">コレクションにテーブルを追加するには、 &lt;xref:System.Data.DataTableCollection.Add%2A&gt; &lt;xref:System.Data.DataTableCollection&gt;。&lt;/xref:System.Data.DataTableCollection&gt;のメソッド&lt;/xref:System.Data.DataTableCollection.Add%2A&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>To remove tables, use the &lt;xref:System.Data.DataTableCollection.Remove%2A&gt; method.</source>
          <target state="translated">削除するにはテーブルを使用して、&lt;xref:System.Data.DataTableCollection.Remove%2A&gt;メソッド&lt;/xref:System.Data.DataTableCollection.Remove%2A&gt;。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Data.DataTableCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> contained by this <bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Data.DataTableCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>に含まれるこの<bpt id="p2">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>An empty collection is returned if no <bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects exist.</source>
          <target state="translated">ない場合は、空のコレクションが返される<bpt id="p1">&lt;xref href="System.Data.DataTable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが存在します。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Writes the current data for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">現在のデータを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`mode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、<ph id="ph1">`mode`</ph>パラメーター、その値に設定および<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.Stream&gt; object used to write to a file.</source>
          <target state="translated">A&lt;xref:System.IO.Stream&gt;ファイルへの書き込みに使用されるオブジェクト&lt;/xref:System.IO.Stream&gt;。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Writes the current data for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextWriter&gt;.</source>
          <target state="translated">現在のデータを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.IO.TextWriter&gt;.&lt;/xref:System.IO.TextWriter&gt;を使用します。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`mode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、<ph id="ph1">`mode`</ph>パラメーター、その値に設定および<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; object with which to write.</source>
          <target state="translated">&lt;xref:System.IO.TextWriter&gt;書き込みに使用するオブジェクト&lt;/xref:System.IO.TextWriter&gt;。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Writes the current data for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to the specified file.</source>
          <target state="translated">現在のデータを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したファイルにします。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`mode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、<ph id="ph1">`mode`</ph>パラメーター、その値に設定および<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>The file name (including the path) to which to write.</source>
          <target state="translated">ファイルを書き込む名 (パスを含む)。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not set to <bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定されていない<bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Writes the current data for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to the specified &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">現在のデータを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.Xml.XmlWriter&gt;&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>To write both data and schema, use one of the overloads that includes the <ph id="ph1">`mode`</ph> parameter, and set its value to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、<ph id="ph1">`mode`</ph>パラメーター、その値に設定および<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlWriter&gt; with which to write.</source>
          <target state="translated">&lt;xref:System.Xml.XmlWriter&gt;書き込みに使用する&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> and <bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在のデータおよび必要に応じて、スキーマを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して<ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>と<bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">記述するには、スキーマの値を設定、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターを<bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>To write both data and schema, set the <ph id="ph1">`mode`</ph> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を作成するには、設定、<ph id="ph1">`mode`</ph>パラメーターを<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.Stream&gt; object used to write to a file.</source>
          <target state="translated">A&lt;xref:System.IO.Stream&gt;ファイルへの書き込みに使用されるオブジェクト&lt;/xref:System.IO.Stream&gt;。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified &lt;xref:System.IO.TextWriter&gt; and <bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在のデータおよび必要に応じて、スキーマを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して&lt;xref:System.IO.TextWriter&gt;と<bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.IO.TextWriter&gt; 。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">記述するには、スキーマの値を設定、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターを<bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>To write both data and schema, set the <ph id="ph1">`mode`</ph> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を作成するには、設定、<ph id="ph1">`mode`</ph>パラメーターを<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.IO.TextWriter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object used to write the document.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.IO.TextWriter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>オブジェクト、ドキュメントを書き込むために使用します。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to the specified file using the specified <bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在のデータおよび必要に応じて、スキーマを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して、指定したファイルに<bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">記述するには、スキーマの値を設定、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターを<bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>To write both data and schema, set the <ph id="ph1">`mode`</ph> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を作成するには、設定、<ph id="ph1">`mode`</ph>パラメーターを<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>The file name (including the path) to which to write.</source>
          <target state="translated">ファイルを書き込む名 (パスを含む)。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not set to <bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定されていない<bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Writes the current data, and optionally the schema, for the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> using the specified &lt;xref:System.Xml.XmlWriter&gt; and <bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在のデータおよび必要に応じて、スキーマを書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定して&lt;xref:System.Xml.XmlWriter&gt;と<bpt id="p2">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>&lt;/xref:System.Xml.XmlWriter&gt; 。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>To write the schema, set the value for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">mode</ph><ept id="p1">&lt;/code&gt;</ept> parameter to <bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">記述するには、スキーマの値を設定、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">mode</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターを<bpt id="p2">&lt;xref uid="langword_csharp_WriteSchema" name="WriteSchema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteXml`</ph> method provides a way to write either data only, or both data and schema from a &lt;xref:System.Data.DataSet&gt; into an XML document, whereas the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method writes only the schema.</source>
          <target state="translated"><ph id="ph1">`WriteXml`</ph>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 &lt;xref:System.Data.DataSet&gt;、XML ドキュメントに対し、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッドは、スキーマのみを書き込みます&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>To write both data and schema, set the <ph id="ph1">`mode`</ph> parameter to <ph id="ph2">`WriteSchema`</ph>.</source>
          <target state="translated">データとスキーマの両方を作成するには、設定、<ph id="ph1">`mode`</ph>パラメーターを<ph id="ph2">`WriteSchema`</ph>です。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Note that the same is true for the &lt;xref:System.Data.DataSet.ReadXml%2A&gt; and &lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt; methods, respectively.</source>
          <target state="translated">True に設定が、同じことに注意してください、&lt;xref:System.Data.DataSet.ReadXml%2A&gt;と&lt;xref:System.Data.DataSet.ReadXmlSchema%2A&gt;メソッド、それぞれ&lt;/xref:System.Data.DataSet.ReadXmlSchema%2A&gt;&lt;/xref:System.Data.DataSet.ReadXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>To read XML data, or both schema and data into the <ph id="ph1">`DataSet`</ph>, use the <ph id="ph2">`ReadXml`</ph> method.</source>
          <target state="translated">XML データまたはスキーマとデータの両方を読み取り、<ph id="ph1">`DataSet`</ph>を使用して、<ph id="ph2">`ReadXml`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>To read just the schema, use the <ph id="ph1">`ReadXmlSchema`</ph> method.</source>
          <target state="translated">スキーマだけを読み取り、使用、<ph id="ph1">`ReadXmlSchema`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An &lt;xref:System.InvalidOperationException&gt; will be thrown if a column type in the <ph id="ph2">`DataRow`</ph> being read from or written to implements &lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt; and does not implement &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt;、&lt;xref:System.InvalidOperationException&gt;場合の列の型がスローされます、<ph id="ph2">`DataRow`</ph>から読み取られたり、実装&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;を実装していません&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;&lt;/xref:System.Dynamic.IDynamicMetaObjectProvider&gt;に書き込まれた&lt;/xref:System.InvalidOperationException&gt;</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlWriter&gt; with which to write.</source>
          <target state="translated">&lt;xref:System.Xml.XmlWriter&gt;書き込みに使用する&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.Data.XmlWriteMode"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体を指定した XML スキーマとして<ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Use the WriteXmlSchema method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.</source>
          <target state="translated">WriteXmlSchema メソッドのスキーマの記述を使用して、 &lt;xref:System.Data.DataSet&gt;XML ドキュメントにします&lt;/xref:System.Data.DataSet&gt;。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>To write a schema to an XML document, use the WriteXmlSchema method.</source>
          <target state="translated">XML ドキュメントにスキーマを記述するには、WriteXmlSchema メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Classes that derive from the &lt;xref:System.IO.Stream&gt; class include &lt;xref:System.IO.BufferedStream&gt;, &lt;xref:System.IO.FileStream&gt;, &lt;xref:System.IO.MemoryStream&gt;, and &lt;xref:System.Net.Sockets.NetworkStream&gt;.</source>
          <target state="translated">派生したクラス、&lt;xref:System.IO.Stream&gt;クラスを含める&lt;xref:System.IO.BufferedStream&gt;、 &lt;xref:System.IO.FileStream&gt;、 &lt;xref:System.IO.MemoryStream&gt;、 &lt;xref:System.Net.Sockets.NetworkStream&gt;&lt;/xref:System.Net.Sockets.NetworkStream&gt; &lt;/xref:System.IO.MemoryStream&gt; &lt;/xref:System.IO.FileStream&gt; &lt;/xref:System.IO.BufferedStream&gt; &lt;/xref:System.IO.Stream&gt; 。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.Stream&gt; object used to write to a file.</source>
          <target state="translated">A&lt;xref:System.IO.Stream&gt;ファイルへの書き込みに使用されるオブジェクト&lt;/xref:System.IO.Stream&gt;。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to the specified &lt;xref:System.IO.TextWriter&gt; object.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体を指定した XML スキーマとして&lt;xref:System.IO.TextWriter&gt;オブジェクト&lt;/xref:System.IO.TextWriter&gt;。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.</source>
          <target state="translated">使用して、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;のスキーマを記述する方法、 &lt;xref:System.Data.DataSet&gt;XML ドキュメントにします&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Classes the derive from the &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; class include the &lt;xref:System.Web.HttpWriter?displayProperty=fullName&gt;, &lt;xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName&gt;, &lt;xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName&gt;, &lt;xref:System.IO.StreamWriter?displayProperty=fullName&gt;, and &lt;xref:System.IO.StringWriter?displayProperty=fullName&gt;.</source>
          <target state="translated">クラスの派生元の&lt;xref:System.IO.TextWriter?displayProperty=fullName&gt;クラスが含まれて、 &lt;xref:System.Web.HttpWriter?displayProperty=fullName&gt;、 &lt;xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName&gt;、 &lt;xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName&gt;、 &lt;xref:System.IO.StreamWriter?displayProperty=fullName&gt;、 &lt;xref:System.IO.StringWriter?displayProperty=fullName&gt;&lt;/xref:System.IO.StringWriter?displayProperty=fullName&gt; &lt;/xref:System.IO.StreamWriter?displayProperty=fullName&gt; &lt;/xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName&gt; &lt;/xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName&gt; &lt;/xref:System.Web.HttpWriter?displayProperty=fullName&gt; &lt;/xref:System.IO.TextWriter?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.TextWriter&gt; object with which to write.</source>
          <target state="translated">&lt;xref:System.IO.TextWriter&gt;書き込みに使用するオブジェクト&lt;/xref:System.IO.TextWriter&gt;。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to a file.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>をファイルに XML スキーマとして構造体。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.</source>
          <target state="translated">使用して、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;のスキーマを記述する方法、 &lt;xref:System.Data.DataSet&gt;XML ドキュメントにします&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>The file name (including the path) to which to write.</source>
          <target state="translated">ファイルを書き込む名 (パスを含む)。</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not set to <bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Security.Permissions.FileIOPermission"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>設定されていない<bpt id="p2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to an &lt;xref:System.Xml.XmlWriter&gt; object.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体に XML スキーマとして、&lt;xref:System.Xml.XmlWriter&gt;オブジェクト&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method to write the schema for a &lt;xref:System.Data.DataSet&gt; to an XML document.</source>
          <target state="translated">使用して、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;のスキーマを記述する方法、 &lt;xref:System.Data.DataSet&gt;XML ドキュメントにします&lt;/xref:System.Data.DataSet&gt;&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>The schema includes table, relation, and constraint definitions.</source>
          <target state="translated">スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>To write a schema to an XML document, use the &lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt; method.</source>
          <target state="translated">スキーマを XML ドキュメントに書き込むには使用、&lt;xref:System.Data.DataSet.WriteXmlSchema%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXmlSchema%2A&gt;。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The XML schema is written using the XSD standard.</source>
          <target state="translated">XML スキーマは、XSD 標準を使用して書き込まれます。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>To write the data to an XML document, use the &lt;xref:System.Data.DataSet.WriteXml%2A&gt; method.</source>
          <target state="translated">XML ドキュメントに、データの書き込みに使用して、&lt;xref:System.Data.DataSet.WriteXml%2A&gt;メソッド&lt;/xref:System.Data.DataSet.WriteXml%2A&gt;。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>One class that inherits from the &lt;xref:System.Xml.XmlWriter?displayProperty=fullName&gt; class is the &lt;xref:System.Xml.XmlTextWriter?displayProperty=fullName&gt; class.</source>
          <target state="translated">1 つを継承するクラス、&lt;xref:System.Xml.XmlWriter?displayProperty=fullName&gt;クラスは&lt;xref:System.Xml.XmlTextWriter?displayProperty=fullName&gt;クラス&lt;/xref:System.Xml.XmlTextWriter?displayProperty=fullName&gt;です。&lt;/xref:System.Xml.XmlWriter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlWriter&gt; to write to.</source>
          <target state="translated">&lt;xref:System.Xml.XmlWriter&gt;を書き込めません&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to the specified <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>構造体を指定した XML スキーマとして<ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> object to write to.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>に書き込むオブジェクト。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>A delegate used to convert &lt;xref:System.Type&gt; to string.</source>
          <target state="translated">変換に使用されるデリゲート&lt;xref:System.Type&gt;を文字列にします&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to the specified &lt;xref:System.IO.TextWriter&gt;.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.IO.TextWriter&gt;&lt;/xref:System.IO.TextWriter&gt;XML スキーマとして構造体。</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.TextWriter&gt; object to write to.</source>
          <target state="translated">A&lt;xref:System.IO.TextWriter&gt;に書き込むオブジェクト&lt;/xref:System.IO.TextWriter&gt;。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>A delegate used to convert &lt;xref:System.Type&gt; to string.</source>
          <target state="translated">変換に使用されるデリゲート&lt;xref:System.Type&gt;を文字列にします&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to a file.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>をファイルに XML スキーマとして構造体。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>The name of the file to write to.</source>
          <target state="translated">書き込み先のファイルの名前。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>A delegate used to convert &lt;xref:System.Type&gt; to string.</source>
          <target state="translated">変換に使用されるデリゲート&lt;xref:System.Type&gt;を文字列にします&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>Writes the <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure as an XML schema to the specified &lt;xref:System.Xml.XmlWriter&gt;.</source>
          <target state="translated">書き込みます、 <bpt id="p1">&lt;xref href="System.Data.DataSet"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定&lt;xref:System.Xml.XmlWriter&gt;&lt;/xref:System.Xml.XmlWriter&gt;XML スキーマとして構造体。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Xml.XmlWriter&gt; object to write to.</source>
          <target state="translated">A&lt;xref:System.Xml.XmlWriter&gt;に書き込むオブジェクト&lt;/xref:System.Xml.XmlWriter&gt;。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>A delegate used to convert &lt;xref:System.Type&gt; to string.</source>
          <target state="translated">変換に使用されるデリゲート&lt;xref:System.Type&gt;を文字列にします&lt;/xref:System.Type&gt;。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>