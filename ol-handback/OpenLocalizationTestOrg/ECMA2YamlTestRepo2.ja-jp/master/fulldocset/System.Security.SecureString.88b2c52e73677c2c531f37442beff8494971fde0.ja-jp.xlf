<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">174f0da1081f35785157244fe1d71fc69c350a80</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.SecureString.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b3ae2918b19cc364e0c3f26eaf8130f24750997</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d18f00588ef24993438e6e7b3941d250b8f6593</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</source>
          <target state="translated">必要があります機密を保持するように不要になったときに、コンピューターのメモリから削除してテキストを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>SecureString is a string type that provides a measure of security.</source>
          <target state="translated">SecureString は、セキュリティ上の理由を提供する文字列型です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It tries to avoid storing potentially sensitive strings in process memory as plain text.</source>
          <target state="translated">プレーン テキストとしてのプロセス メモリに機密性の高い文字列を格納しないようにしようとします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(For limitations, however, see the <bpt id="p1">[</bpt>How secure is SecureString?<ept id="p1">](#HowSecure)</ept> section.) The value of an instance of SecureString is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</source>
          <target state="translated">(制限については、ただしを参照してください、<bpt id="p1">[</bpt>安全な方法は、SecureString?<ept id="p1">](#HowSecure)</ept>セクションです)。インスタンスを初期化する場合は、基になるプラットフォームでサポートされているメカニズムを使用して SecureString のインスタンスの値が自動的に保護または値が変更された日時。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your application can render the instance immutable and prevent further modification by invoking the &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method.</source>
          <target state="translated">アプリケーションがインスタンスを変更できないレンダリングし、呼び出すことによってさらに変更を禁止する、&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;メソッド&lt;/xref:System.Security.SecureString.MakeReadOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The maximum length of a SecureString instance is 65,536 characters.</source>
          <target state="translated">SecureString インスタンスの最大長は、65,536 文字です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; この型は、&lt;xref:System.IDisposable&gt;インターフェイス&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型のインスタンスを使用してが完了したら、直接的または間接的にそれを破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、&lt;xref:System.IDisposable.Dispose%2A&gt;メソッドで、 <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>ブロック&lt;/xref:System.IDisposable.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、&lt;xref:System.IDisposable&gt;インターフェイスに関するトピック&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The SecureString class and its members are not visible to COM.</source>
          <target state="translated">SecureString クラスとそのメンバーが COM に表示されません。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;.</source>
          <target state="translated">詳細については、 &lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;。&lt;/xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this section:       <bpt id="p1">[</bpt>String vs. SecureString<ept id="p1">](#vsString)</ept>     <bpt id="p2">[</bpt>SecureString operations<ept id="p2">](#Ops)</ept>     <bpt id="p3">[</bpt>SecureString and interop<ept id="p3">](#interop)</ept>     <bpt id="p4">[</bpt>How secure is  SecureString?<ept id="p4">](#HowSecure)</ept></source>
          <target state="translated">このセクションの内容: <bpt id="p1">[</bpt>vs の文字列します。SecureString<ept id="p1">](#vsString)</ept><bpt id="p2">[</bpt>SecureString operations<ept id="p2">](#Ops)</ept><bpt id="p3">[</bpt>SecureString 相互運用機能および<ept id="p3">](#interop)</ept><bpt id="p4">[</bpt>安全な方法は、SecureString しますか?               <ept id="p4">](#HowSecure)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="vsString"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## String versus SecureString    An instance of the &lt;xref:System.String?displayProperty=fullName&gt; class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</source>
          <target state="translated"><bpt id="p1">&lt;a name="vsString"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## 文字列と SecureString のインスタンス、&lt;xref:System.String?displayProperty=fullName&gt;クラスは変更不可であり、不要になったときにガベージ コレクションのプログラムでスケジュールできませんつまり、インスタンスは読み取り専用で、作成されると、コンピューターのメモリから、インスタンスを削除する場合を予測することはできません。&lt;/xref:System.String?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because &lt;xref:System.String?displayProperty=fullName&gt; instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</source>
          <target state="translated">&lt;xref:System.String?displayProperty=fullName&gt;インスタンスは変更可能な場合を既存のインスタンスを変更する表示される操作が実際に操作するためのコピーを作成します&lt;/xref:System.String?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Consequently, if a &lt;xref:System.String&gt; object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</source>
          <target state="translated">したがって場合、&lt;xref:System.String&gt;オブジェクトには、パスワード、クレジット_カード番号、または個人データなどの機密情報が含まれています、アプリケーションがコンピューターのメモリからデータを削除できないために、使用後に、情報が盗まれるリスクが生じます&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A SecureString object is similar to a &lt;xref:System.String&gt; object in that it has a text value.</source>
          <target state="translated">SecureString オブジェクトがに似ていますが、&lt;xref:System.String&gt;オブジェクトのテキスト値があることにします&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the value of a SecureString object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method  or by the .NET Framework garbage collector.</source>
          <target state="translated">ただし、オブジェクトがメモリにピン留めされた SecureString の値可能性がありますを使用して保護メカニズム、まで、基になるオペレーティング システムによって提供される、暗号化を変更できるよう、アプリケーションで読み取り専用とマーク コンピューターのメモリから削除することができますか、アプリケーションの呼び出すことによって、&lt;xref:System.Security.SecureString.Dispose%2A&gt;メソッドまたは .NET Framework ガベージ コレクターによって&lt;/xref:System.Security.SecureString.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For a discussion of the limitations of the SecureString class, see the <bpt id="p1">[</bpt>How secure is  SecureString?<ept id="p1">](#HowSecure)</ept> section.</source>
          <target state="translated">SecureString クラスの制限事項の詳細については、次を参照してください。、<bpt id="p1">[</bpt>安全な方法は、SecureString?<ept id="p1">](#HowSecure)</ept>セクションです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="Ops"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## SecureString operations    The SecureString class includes members that allow you to do the following:       Instantiate a SecureString object    You instantiate a SecureString object by calling its parameterless constructor.</source>
          <target state="translated"><bpt id="p1">[</bpt>ページのトップへ<ept id="p1">](#top)</ept><bpt id="p2">&lt;a name="Ops"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## SecureString 操作、SecureString クラスには、次を実行するメンバーが含まれています。、パラメーターなしのコンス トラクターを呼び出すことによって SecureString オブジェクトをインスタンス化する SecureString オブジェクトをインスタンス化します。      </target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add characters to a SecureString object    You can add a single character at a time to a SecureString object  by calling its &lt;xref:System.Security.SecureString.AppendChar%2A&gt; or &lt;xref:System.Security.SecureString.InsertAt%2A&gt; method.</source>
          <target state="translated">SecureString オブジェクトを呼び出すことにより、一度に&amp;1; つの文字を追加できます SecureString を文字のオブジェクトを追加、&lt;xref:System.Security.SecureString.AppendChar%2A&gt;または&lt;xref:System.Security.SecureString.InsertAt%2A&gt;メソッド&lt;/xref:System.Security.SecureString.InsertAt%2A&gt;&lt;/xref:System.Security.SecureString.AppendChar%2A&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  A SecureString object should never be constructed from a &lt;xref:System.String&gt;, because the sensitive data is already subject to the memory persistence consequences of the immutable &lt;xref:System.String&gt; class.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;&lt;xref:System.String&gt;機密データが変更できない&lt;xref:System.String&gt;クラス&lt;/xref:System.String&gt;のメモリの永続化の結果に既にされるため&lt;/xref:System.String&gt;から A SecureString オブジェクトを作成する必要がありますしません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The best way to construct a SecureString object is from a character-at-a-time unmanaged source, such as the &lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">最善の方法は SecureString オブジェクトを構築するためには時間での文字の管理されていないソースからなど、&lt;xref:System.Console.ReadKey%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.Console.ReadKey%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remove characters from a SecureString object    You can replace an individual character by calling the &lt;xref:System.Security.SecureString.SetAt%2A&gt; method, remove an individual character by calling the &lt;xref:System.Security.SecureString.RemoveAt%2A&gt; method, or remove all characters from the SecureString instance by calling the  &lt;xref:System.Security.SecureString.Clear%2A&gt; method.</source>
          <target state="translated">SecureString から文字を削除するオブジェクトを呼び出して個々 の文字を置き換えることができます、&lt;xref:System.Security.SecureString.SetAt%2A&gt;メソッドを呼び出して個々 の文字を削除、&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;メソッド、または削除を呼び出して、SecureString からすべての文字のインスタンス、&lt;xref:System.Security.SecureString.Clear%2A&gt;メソッド&lt;/xref:System.Security.SecureString.Clear%2A&gt;&lt;/xref:System.Security.SecureString.RemoveAt%2A&gt;&lt;/xref:System.Security.SecureString.SetAt%2A&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Make the SecureString object read-only    Once you have defined the string that the SecureString object represents, you call its  &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method to make the string read-only.</source>
          <target state="translated">SecureString オブジェクトを読み取り専用呼び出す SecureString オブジェクトを表す文字列を定義すると、その&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;を読み取り専用文字列を作成するメソッド&lt;/xref:System.Security.SecureString.MakeReadOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Get information about the SecureString object    The SecureString class has only two members that provide information about the string: its &lt;xref:System.Security.SecureString.Length%2A&gt; property, which indicates the number of UTF16-encoded code units in the string; and the &lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;, method, which indicates whether the instance is read-only.</source>
          <target state="translated">SecureString オブジェクト、SecureString クラスに関する情報を取得しますが、文字列についての情報を提供する&amp;2; つだけのメンバー: その&lt;xref:System.Security.SecureString.Length%2A&gt;を文字列にコードの UTF16 エンコード ユニットの数を示すプロパティおよび&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;、メソッドのインスタンスは読み取り専用であるかどうかを示します&lt;/xref:System.Security.SecureString.IsReadOnly%2A&gt;&lt;/xref:System.Security.SecureString.Length%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Release the memory allocated to the SecureString instance    Because SecureString implements the &lt;xref:System.IDisposable&gt; interface, you release its memory by calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method.</source>
          <target state="translated">SecureString を実装して SecureString インスタンスに割り当てられたメモリを解放、&lt;xref:System.IDisposable&gt;インターフェイスを呼び出すことによって、メモリを解放する、&lt;xref:System.Security.SecureString.Dispose%2A&gt;メソッド&lt;/xref:System.Security.SecureString.Dispose%2A&gt;&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The SecureString class has no members that inspect, compare, or convert the value of a SecureString.</source>
          <target state="translated">SecureString クラスには、検査、比較、または SecureString の値を変換するメンバーがありません。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The absence of such members helps protect the value of the instance from accidental or malicious exposure.</source>
          <target state="translated">このようなメンバーが存在しない場合は、誤ってまたは悪意のある露出からのインスタンスの値を保護するのに役立ちます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use appropriate members of the &lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt; class, such as the &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt; method, to manipulate the value of a SecureString object.</source>
          <target state="translated">適切なメンバーを使用して、&lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt;クラスなど、 &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;SecureString オブジェクトの値を操作するメソッド&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;&lt;/xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The .NET Framework Class Library commonly uses SecureString instances in the following ways:      -   To provide password information to a process by using the &lt;xref:System.Diagnostics.ProcessStartInfo&gt; structure or by calling an overload of the &lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt; method that has a parameter of type SecureString.</source>
          <target state="translated">.NET Framework クラス ライブラリは次の方法でよく使われる SecureString インスタンス:: を使用して、プロセスにパスワード情報を提供する、&lt;xref:System.Diagnostics.ProcessStartInfo&gt;構造体またはのオーバー ロードを呼び出すことによって、 &lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt;SecureString 型のパラメーターを持つメソッドです&lt;/xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName&gt;&lt;/xref:System.Diagnostics.ProcessStartInfo&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>-   To provide network password information by calling a &lt;xref:System.Net.NetworkCredential&gt; class constructor that has a parameter of type SecureString or by using the &lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">情報を提供するネットワーク パスワードを呼び出して、&lt;xref:System.Net.NetworkCredential&gt;またはを使用して SecureString 型のパラメーターを持つクラスのコンス トラクター、&lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt;プロパティ&lt;/xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName&gt;&lt;/xref:System.Net.NetworkCredential&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>-   To provide password information for SQL Server Authentication by calling the &lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt; constructor or retrieving the value of the &lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">呼び出すことによって SQL Server 認証のパスワード情報を提供する、&lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt;コンス トラクターまたはの値を取得、&lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt;プロパティ&lt;/xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName&gt;&lt;/xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-   To pass a string to unmanaged code.</source>
          <target state="translated">-にアンマネージ コードに文字列を渡します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">詳細については、次を参照してください。、 <bpt id="p1">[</bpt>SecureString 相互運用機能および<ept id="p1">](#interop)</ept>セクションです。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="interop"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## SecureString and interop    Because the operating system does not  directly support SecureString, you must convert the value of the SecureString object to the required string type before passing the string to a native method.</source>
          <target state="translated"><bpt id="p1">[</bpt>ページのトップへ<ept id="p1">](#top)</ept><bpt id="p2">&lt;a name="interop"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> ## SecureString interop のオペレーティング システムが SecureString を直接サポートしていないため、変換してする必要があります SecureString オブジェクトの値、必須の文字列型にネイティブ メソッドに文字列を渡す前にします。      </target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.InteropServices.Marshal&gt; class has five methods that do this:      -   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;, which converts the SecureString string value to a binary string (BSTR) recognized by COM.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.Marshal&gt;クラスにはこれを実行する&amp;5; つの方法:- &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;COM によって認識されるバイナリ文字列 (BSTR) に SecureString 文字列値を変換する、&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.Marshal&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt; and &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;, which copy the SecureString string value to an ANSI string in unmanaged memory.</source>
          <target state="translated">-&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;と&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;、SecureString 文字列値をアンマネージ メモリ内の ANSI 文字列をコピーします&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt; and &lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;, which copy the SecureString string value to a Unicode string in unmanaged memory.</source>
          <target state="translated">-&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;と&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;、SecureString 文字列値をアンマネージ メモリ内の Unicode 文字列にコピーする&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each of these methods creates a clear-text string in unmanaged memory.</source>
          <target state="translated">これらの各メソッドは、アンマネージ メモリにクリア テキスト文字列を作成します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</source>
          <target state="translated">ゼロにして、不要になったとすぐにそのメモリを解放する開発者の責任においてすることをお勧めします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:      |Allocation and conversion method|Zero and free method|   |--------------------------------------|--------------------------|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName&gt;|   |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName&gt;|       <bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="HowSecure"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## How secure is SecureString?</source>
          <target state="translated">文字列変換とメモリの割り当て方法のそれぞれをゼロに割り当てられたメモリを解放して対応するメソッドを持ちます |。割り当てと変換のメソッド |0 し、free メソッド |  |--------------------------------------|--------------------------|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName&gt;|  |&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;|&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName&gt;|      <bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept>      <bpt id="p2">&lt;a name="HowSecure"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## How secure is SecureString?&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName&gt;&lt;/xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When created properly, a SecureString instance provides more data protection than a &lt;xref:System.String&gt;.</source>
          <target state="translated">SecureString インスタンス&lt;xref:System.String&gt;。&lt;/xref:System.String&gt;よりも多くのデータ保護は、適切に作成されたとき</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When creating a string from a character-at-a-time source, &lt;xref:System.String&gt; creates multiple intermediate in memory, whereas  SecureString creates just a single instance.</source>
          <target state="translated">時間での文字のソースから文字列を作成するときに&lt;xref:System.String&gt;SecureString を&amp;1; つのインスタンスを作成、メモリ上で複数の中間を作成します&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Garbage collection of &lt;xref:System.String&gt; objects  is non-deterministic.</source>
          <target state="translated">ガベージ コレクション&lt;xref:System.String&gt;オブジェクトは、非確定的です&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In addition, because its memory is not pinned, the garbage collector will make additional copies of &lt;xref:System.String&gt; values when moving and compacting memory.</source>
          <target state="translated">さらに、そのメモリが固定されていないため、ガベージ コレクターは追加のコピーを作成&lt;xref:System.String&gt;値の移動やメモリを圧縮することにします&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In contrast, the memory allocated to a SecureString object is pinned,  and that memory can be freed by calling the &lt;xref:System.Security.SecureString.Dispose%2A&gt; method.</source>
          <target state="translated">これに対し、SecureString オブジェクトに割り当てられたメモリが固定され、そのメモリを呼び出すことによって解放されることができます、&lt;xref:System.Security.SecureString.Dispose%2A&gt;メソッド&lt;/xref:System.Security.SecureString.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Although data stored in a SecureString instance is more secure than data stored in a &lt;xref:System.String&gt; instance, there are significant limitations on how secure a SecureString instance is.</source>
          <target state="translated">&lt;xref:System.String&gt;インスタンスの安全な方法は SecureString インスタンスままに関する重要な制限事項がある&lt;/xref:System.String&gt;格納されているデータよりセキュリティが SecureString インスタンスに格納されたデータが詳細</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These include:       Platform    On the Windows operating system, the contents of a SecureString instance's internal character array is encrypted.</source>
          <target state="translated">含まれます: プラットフォームに Windows オペレーティング システム、SecureString インスタンスの内部文字配列の内容が暗号化されます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</source>
          <target state="translated">ただし、Api またはキーの管理に関する問題がありません、ためかどうか暗号化はいないすべてのプラットフォームで利用可能です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because of this, SecureString is available on Desktop (Windows only), and not on .NET Core.</source>
          <target state="translated">このため、SecureString はデスクトップ (Windows のみ)、および .NET Core ではなく利用できます。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Duration    Even if the SecureString implementation is able to take advantage of encryption, the plain text assigned to the SecureString instance may be exposed at various times:      -   Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</source>
          <target state="translated">SecureString 実装が SecureString のインスタンスは、さまざまなタイミングで公開される可能性がありますに割り当てられているプレーン テキストの暗号化を利用できる場合でも、継続時間: - Windows は、オペレーティング システム レベルでは引き続き .NET Framework のセキュリティで保護された文字列の実装がそれを使用するために、セキュリティで保護された文字列値をプレーン テキスト形式に変換するが提供していないためです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>-   Whenever the value of the secure string is modified by methods such as &lt;xref:System.Security.SecureString.AppendChar%2A&gt; or &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.</source>
          <target state="translated">-されるたびにセキュリティで保護された文字列の値は、メソッドによって変更など&lt;xref:System.Security.SecureString.AppendChar%2A&gt;または&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;、復号化する必要があります (つまり、変換されたバック プレーン テキストに)、変更され、再度暗号化します&lt;/xref:System.Security.SecureString.RemoveAt%2A&gt;&lt;/xref:System.Security.SecureString.AppendChar%2A&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>-   If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</source>
          <target state="translated">相互運用の呼び出しで、セキュリティで保護された文字列を使用する場合は、ANSI 文字列、Unicode 文字列またはバイナリ文字列 (BSTR) に変換する必要があります。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">詳細については、次を参照してください。、 <bpt id="p1">[</bpt>SecureString 相互運用機能および<ept id="p1">](#interop)</ept>セクションです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The time interval for which the SecureString instance's value is exposed  is merely shortened in comparison to the &lt;xref:System.String&gt; class.</source>
          <target state="translated">SecureString インスタンスの値を公開する時間間隔は、&lt;xref:System.String&gt;クラス&lt;/xref:System.String&gt;と比較すると短くだけを実行</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Storage versus usage    More generally, the SecureString class defines a storage mechanism for string values that should be protected or kept confidential.</source>
          <target state="translated">記憶域使用率と SecureString クラスより一般的に保護されているまたは秘密にする必要がある文字列値を格納するメカニズムを定義します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>However, outside of the .NET Framework itself, no usage mechanism supports SecureString.</source>
          <target state="translated">ただし、.NET Framework 自体の外部で使用状況のメカニズムがサポートされません SecureString。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</source>
          <target state="translated">つまり、セキュリティで保護された文字列をそのターゲットが認識できる使用可能な形式 (通常はクリア テキスト形式) に変換する必要があります、復号化し、変換は、ユーザー領域で行う必要があります。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Overall, SecureString is more secure than &lt;xref:System.String&gt; because it limits the exposure of sensitive string data.</source>
          <target state="translated">SecureString がより安全性が全体的に見て、 &lt;xref:System.String&gt;、区別する文字列データの公開を制限するためです&lt;/xref:System.String&gt;。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</source>
          <target state="translated">ただし、それらの文字列は、プロセスやホスト コンピューター、プロセス ダンプ、またはユーザー表示可能なスワップ ファイルで実行されている悪意のあるプロセスなどの生のメモリへのアクセス権がある操作も公開可能性があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Instead of using SecureString to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</source>
          <target state="translated">SecureString を使用して、パスワードを保護するの代わりに、推奨される代替を開始、プロセスの外部で格納されている資格情報を不透明なハンドルを使用します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>ページのトップへ<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this instance.</source>
          <target state="translated">保護またはこのインスタンスの値を復号化中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">この操作はこのプラットフォームでサポートされていません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class from a subarray of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>のサブ配列からクラス<ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This constructor is not CLS-compliant.</source>
          <target state="translated">このコンス トラクターは CLS 準拠ではありません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The CLS-compliant alternative is <ph id="ph1">&amp;lt;</ph>xref:System.Security.SecureString.%23ctor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">CLS 準拠の代替手段は<ph id="ph1">&amp;lt;</ph>xref:System.Security.SecureString.%23ctor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This constructor initializes the new &lt;xref:System.Security.SecureString&gt; object to the number of characters in <ph id="ph1">`value`</ph> specified by <ph id="ph2">`length`</ph>; the value of the instance is then encrypted.</source>
          <target state="translated">このコンス トラクターを新しい初期化&lt;xref:System.Security.SecureString&gt;オブジェクト内の文字の数を<ph id="ph1">`value`</ph>によって指定された<ph id="ph2">`length`</ph>; のインスタンスの値は暗号化されます&lt;/xref:System.Security.SecureString&gt;。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In C#, this constructor is defined only in the context of unsafe code.</source>
          <target state="translated">C# の場合、このコンス トラクターはアンセーフ コードのコンテキストでのみ定義されます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to an array of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects.</source>
          <target state="translated">配列へのポインター <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The number of elements of <ph id="ph1">`value`</ph> to include in the new instance.</source>
          <target state="translated">要素の数<ph id="ph1">`value`</ph>新しいインスタンスに含める。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;value&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero or greater than 65,536.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;length&lt;/code&gt;</ph>0 以上、65,536 未満です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">この操作はこのプラットフォームでサポートされていません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Appends a character to the end of the current secure string.</source>
          <target state="translated">現在のセキュリティで保護された文字列の末尾に文字を追加します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is appended; then the new value of the secure string is re-protected.</source>
          <target state="translated">場合は、このセキュリティ文字列の値が保護; されていない場合は、実装は、暗号化などの保護メカニズムを使用<ph id="ph1">`c`</ph>が追加されます。 セキュリティで保護された文字列の新しい値は再保護します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A character to append to this secure string.</source>
          <target state="translated">このセキュリティ文字列に追加する文字。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">このセキュリティで保護された文字列とは、読み取り専用です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">この操作を実行すると、このセキュリティ文字列の長さは 65,536 文字を超えています。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Deletes the value of the current secure string.</source>
          <target state="translated">現在のセキュリティで保護された文字列の値を削除します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</source>
          <target state="translated">このセキュリティ文字列の値を含むコンピューターのメモリをゼロに設定し、このセキュリティ文字列の値の長さは&amp;0; に設定します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">このセキュリティで保護された文字列とは、読み取り専用です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Creates a copy of the current secure string.</source>
          <target state="translated">現在のセキュリティで保護された文字列のコピーを作成します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If an instance of a &lt;xref:System.Security.SecureString&gt; is marked read-only, the copy of that instance will not be read-only.</source>
          <target state="translated">インスタンスの場合、&lt;xref:System.Security.SecureString&gt;は読み取り専用に設定されると、そのインスタンスのコピーができない読み取り専用です&lt;/xref:System.Security.SecureString&gt;。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A duplicate of this secure string.</source>
          <target state="translated">このセキュリティ文字列の複製。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current <bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">現在の使用されているすべてのリソースを解放<bpt id="p1">&lt;xref href="System.Security.SecureString"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The Dispose method writes binary zeroes to the allocated memory that contains the value of this &lt;xref:System.Security.SecureString&gt; object, then frees the allocated memory.</source>
          <target state="translated">Dispose メソッドは、この値を含む割り当てられたメモリへのバイナリのゼロを書き込みます&lt;xref:System.Security.SecureString&gt;オブジェクト、し、割り当てられたメモリを解放します&lt;/xref:System.Security.SecureString&gt;。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ガベージ コレクション<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Inserts a character in this secure string at the specified index position.</source>
          <target state="translated">指定したインデックス位置にあるこのセキュリティ文字列に文字を挿入します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The index is zero-based; the first character in this secure string is at index position zero.</source>
          <target state="translated">インデックスが&amp;0; から始まります。このセキュリティ文字列の最初の文字は、インデックス位置&amp;0; です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is inserted at the specified index position; then the new value is re-protected.</source>
          <target state="translated">存在する場合は、セキュリティで保護された文字列の値が保護されてはいない実装では、暗号化などの保護メカニズムを使用している場合<ph id="ph1">`c`</ph> ; 指定したインデックス位置に挿入は、新しい値は再保護します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The InsertAt method yields the same results as the &lt;xref:System.Security.SecureString.AppendChar%2A&gt; method, which inserts a character at the end of a secure string, if the <ph id="ph1">`index`</ph> parameter of InsertAt is set to the length of this instance.</source>
          <target state="translated">InsertAt メソッドと同じ結果が得られます、&lt;xref:System.Security.SecureString.AppendChar%2A&gt;場合、セキュリティで保護された文字列の末尾に文字を挿入するメソッド、 <ph id="ph1">`index`</ph> InsertAt のパラメーターがこのインスタンスの長さに設定します&lt;/xref:System.Security.SecureString.AppendChar%2A&gt;。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The index position where parameter <ph id="ph1">`c`</ph> is inserted.</source>
          <target state="translated">インデックス位置パラメーター<ph id="ph1">`c`</ph>を挿入します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The character to insert.</source>
          <target state="translated">挿入する文字。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">このセキュリティで保護された文字列とは、読み取り専用です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0 の場合、このセキュリティ文字列の長さより大きいか未満です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>-or-       Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">または、この操作を実行すると、このセキュリティ文字列の長さ 65,536 文字より長くします。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Indicates whether this secure string is marked read-only.</source>
          <target state="translated">このセキュリティ文字列が読み取り専用にマークされているかどうかを示します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>After an instance of &lt;xref:System.Security.SecureString&gt; is marked read-only by the &lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt; method, any attempt to modify the value of the instance throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">インスタンスの&lt;xref:System.Security.SecureString&gt;&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;&lt;xref:System.InvalidOperationException&gt;。&lt;/xref:System.InvalidOperationException&gt;インスタンス スローの値を変更しようとすると、メソッド&lt;/xref:System.Security.SecureString.MakeReadOnly%2A&gt;で読み取り専用にマーク&lt;/xref:System.Security.SecureString&gt;の後に</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Use the IsReadOnly method to test whether a &lt;xref:System.Security.SecureString&gt; is read-only before attempting to modify it.</source>
          <target state="translated">IsReadOnly メソッドを使用して&lt;xref:System.Security.SecureString&gt;がそれを変更しようとする前に読み取り専用&lt;/xref:System.Security.SecureString&gt;かどうかをテストするには</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this secure string is marked read-only; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>このセキュリティ文字列が読み取り専用にマークされている場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Gets the number of characters in the current secure string.</source>
          <target state="translated">現在のセキュリティで保護された文字列内の文字数を取得します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The Length property returns the number of &lt;xref:System.Char&gt; objects in this instance, not the number of Unicode characters.</source>
          <target state="translated">Length プロパティの数を返します&lt;xref:System.Char&gt;オブジェクトがこのインスタンスで、Unicode 文字の数値ではありません&lt;/xref:System.Char&gt;。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A Unicode character might be represented by more than one &lt;xref:System.Char&gt; object.</source>
          <target state="translated">1 つ以上の Unicode 文字を表す&lt;xref:System.Char&gt;オブジェクト&lt;/xref:System.Char&gt;。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The maximum length of a &lt;xref:System.Security.SecureString&gt; instance is 65,536 characters.</source>
          <target state="translated">最大長、&lt;xref:System.Security.SecureString&gt;インスタンスは、65,536 文字&lt;/xref:System.Security.SecureString&gt;。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The number of <ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> objects in this secure string.</source>
          <target state="translated">数<ph id="ph1">&amp;lt;</ph>xref:System.Char?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>このオブジェクトは、文字列をセキュリティで保護します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Makes the text value of this secure string read-only.</source>
          <target state="translated">このセキュリティ文字列のテキスト値を読み取り専用です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Initialize the text value of an instance of the &lt;xref:System.Security.SecureString&gt; class with the &lt;xref:System.Security.SecureString.%23ctor%2A&gt; constructors, and modify the value with the &lt;xref:System.Security.SecureString.Clear%2A&gt;, &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;, &lt;xref:System.Security.SecureString.SetAt%2A&gt;, &lt;xref:System.Security.SecureString.InsertAt%2A&gt;, and &lt;xref:System.Security.SecureString.AppendChar%2A&gt; methods.</source>
          <target state="translated">インスタンスのテキスト値を初期化、&lt;xref:System.Security.SecureString&gt;クラス、&lt;xref:System.Security.SecureString.%23ctor%2A&gt;コンス トラクター、および使用の値を変更、 &lt;xref:System.Security.SecureString.Clear%2A&gt;、 &lt;xref:System.Security.SecureString.RemoveAt%2A&gt;、 &lt;xref:System.Security.SecureString.SetAt%2A&gt;、 &lt;xref:System.Security.SecureString.InsertAt%2A&gt;、および&lt;xref:System.Security.SecureString.AppendChar%2A&gt;メソッド&lt;/xref:System.Security.SecureString.AppendChar%2A&gt;&lt;/xref:System.Security.SecureString.InsertAt%2A&gt;&lt;/xref:System.Security.SecureString.SetAt%2A&gt;&lt;/xref:System.Security.SecureString.RemoveAt%2A&gt;&lt;/xref:System.Security.SecureString.Clear%2A&gt;&lt;/xref:System.Security.SecureString.%23ctor%2A&gt;&lt;/xref:System.Security.SecureString&gt;。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>After you have made your final modifications, use the MakeReadOnly method to make the value of the instance immutable (read-only).</source>
          <target state="translated">最終的な変更を行った後は、MakeReadOnly メソッドを使用して、インスタンスの値を変更できないようにする (読み取り専用)。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>After the value is marked as read-only, any further attempt to modify it throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">さらに変更をしようとするとスロー &lt;xref:System.InvalidOperationException&gt;。&lt;/xref:System.InvalidOperationException&gt;で値は、読み取り専用としてマークされていた後が、</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The effect of invoking MakeReadOnly is permanent because the &lt;xref:System.Security.SecureString&gt; class provides no means to make the secure string modifiable again.</source>
          <target state="translated">MakeReadOnly の呼び出しの結果は永続的なため、&lt;xref:System.Security.SecureString&gt;を再度変更可能にするには、セキュリティで保護された文字列クラスの手段がありません&lt;/xref:System.Security.SecureString&gt;。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Security.SecureString.IsReadOnly%2A&gt; method to test whether an instance of &lt;xref:System.Security.SecureString&gt; is read-only.</source>
          <target state="translated">使用して、&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;のインスタンスかどうかをテストするメソッド&lt;xref:System.Security.SecureString&gt;は読み取り専用です&lt;/xref:System.Security.SecureString&gt;&lt;/xref:System.Security.SecureString.IsReadOnly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Removes the character at the specified index position from this secure string.</source>
          <target state="translated">このセキュリティで保護された文字列から指定したインデックス位置にある文字を削除します。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">インデックスが&amp;0; から始まります。このインスタンスの最初の文字は、インデックス位置&amp;0; です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</source>
          <target state="translated">場合は、このセキュリティ文字列の値が保護; されていない場合は、実装は、暗号化などの保護メカニズムを使用指定したインデックス位置にある文字が削除されます。新しい値を再保護します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The index position of a character in this secure string.</source>
          <target state="translated">このセキュリティ文字列の文字のインデックス位置。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">このセキュリティで保護された文字列とは、読み取り専用です。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0、またはより大きいかこのセキュリティ文字列の長さと等しいです。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Replaces the existing character at the specified index position with another character.</source>
          <target state="translated">指定したインデックス位置にある既存の文字を別の文字に置き換えます。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">インデックスが&amp;0; から始まります。このインスタンスの最初の文字は、インデックス位置&amp;0; です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is assigned to the specified index position; then the new value is re-protected.</source>
          <target state="translated">存在する場合は、セキュリティで保護された文字列の値が保護されてはいない実装では、暗号化などの保護メカニズムを使用している場合<ph id="ph1">`c`</ph> ; 指定したインデックス位置に割り当てられている、新しい値は再保護します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The index position of an existing character in this secure string</source>
          <target state="translated">このセキュリティで保護された文字列で、既存の文字インデックスの位置</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A character that replaces the existing character.</source>
          <target state="translated">既存の文字を置換する文字。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This secure string has already been disposed.</source>
          <target state="translated">このセキュリティで保護された文字列は既に破棄されています。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This secure string is read-only.</source>
          <target state="translated">このセキュリティで保護された文字列とは、読み取り専用です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;index&lt;/code&gt;</ph>0、またはより大きいかこのセキュリティ文字列の長さと等しいです。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>