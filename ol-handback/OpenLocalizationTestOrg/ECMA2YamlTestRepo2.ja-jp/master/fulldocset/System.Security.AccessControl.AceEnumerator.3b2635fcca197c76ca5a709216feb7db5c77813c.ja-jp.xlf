<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4736c2735cf188d5cdcd8bf7d866c85b11e0817</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.AccessControl.AceEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ce3d04223103e04a906deeb0edce99b4692c407</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76922cfb96bd81241f747e491e4e10bf4012631c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</source>
          <target state="translated">アクセス制御リスト (ACL) でアクセス制御エントリ (Ace) を反復処理する機能を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Gets the current element in the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">内の現在の要素を取得、 <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コレクション。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This property gets the type-friendly version of the object.</source>
          <target state="translated">このプロパティは、オブジェクトの種類に適したバージョンを取得します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The current element in the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">現在の要素、 <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コレクション。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next element of the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">列挙の次の要素を<bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>コレクション。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>After an enumerator is created or after a call to the &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; method, an enumerator is positioned before the first element of the collection, and the first call to the MoveNext method moves the enumerator over the first element of the collection.</source>
          <target state="translated">列挙子を作成した後、または呼び出しの後に、&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;メソッド、列挙子がコレクションの最初の要素の前に配置されているし、MoveNext メソッドの最初の呼び出しが、列挙子をコレクションの最初の要素の上に移動します&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>After the end of the collection is passed, subsequent calls to MoveNext return <ph id="ph1">`false`</ph> until &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">コレクションの末尾が渡されると、MoveNext を後続の呼び出しを返す<ph id="ph1">`false`</ph>まで&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;と呼びます&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to MoveNext or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">コレクション要素を削除または追加、変更などの変更が加えられた場合、列挙子は回復不可能なり、次を MoveNext または&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;&lt;xref:System.InvalidOperationException&gt;。&lt;/xref:System.InvalidOperationException&gt;がスローされます。&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator was successfully advanced to the next element; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has passed the end of the collection.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>列挙子が次の要素に正常に進んだ場合<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>列挙子がコレクションの末尾を越えた場合。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">コレクションは、列挙子が作成された後に変更されました。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Sets the enumerator to its initial position, which is before the first element in the <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> collection.</source>
          <target state="translated">列挙子を初期位置、つまり最初の要素の前に設定、 <bpt id="p1">&lt;xref href="System.Security.AccessControl.GenericAce"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>コレクション。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; method or the Reset method throws an &lt;xref:System.InvalidOperationException&gt;</source>
          <target state="translated">など、追加すると、変更、または削除、要素は、コレクションに加えられた、列挙子は回復不可能と、次への呼び出し、&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;メソッドまたは Reset メソッドをスロー、 &lt;xref:System.InvalidOperationException&gt;&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">コレクションは、列挙子が作成された後に変更されました。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the current element in the collection.</source>
          <target state="translated">コレクション内の現在の要素を取得します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>After an enumerator is created or after a call to the &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; method, you must call the &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; method to advance the enumerator to the first element of the collection before reading the value of IEnumerator.Current; otherwise, IEnumerator.Current is undefined.</source>
          <target state="translated">列挙子を作成した後、または呼び出しの後に、&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;メソッドを呼び出す必要があります、 &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;IEnumerator.Current; の値を読み取る前に、コレクションの最初の要素に列挙子を進める方法それ以外の場合、IEnumerator.Current は定義されていません&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>IEnumerator.Current also throws an exception if the last call to &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; returned <ph id="ph1">`false`</ph>, which indicates the end of the collection.</source>
          <target state="translated">IEnumerator.Current もは例外をスロー、最後の呼び出し&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;返される<ph id="ph1">`false`</ph>コレクションの末尾を示します&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>IEnumerator.Current does not move the position of the enumerator, and consecutive calls to IEnumerator.Current return the same object until either &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; is called.</source>
          <target state="translated">IEnumerator.Current は、列挙子の位置を移動していないと、IEnumerator.Current を連続して呼び出すされるまで、同じオブジェクトが返さ&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;または&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;と呼びます&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; or &lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt; throws an &lt;xref:System.InvalidOperationException&gt;.</source>
          <target state="translated">コレクション要素を削除または追加、変更などの変更が加えられた場合、列挙子は回復不可能ですが、なり、次を&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;&lt;xref:System.InvalidOperationException&gt;。&lt;/xref:System.InvalidOperationException&gt;をスロー&lt;/xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;または&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the collection is modified between &lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt; and IEnumerator.Current, IEnumerator.Current returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">間で、コレクションが変更された場合&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;IEnumerator.Current、IEnumerator.Current 要素を返しますに設定されている場合でも、列挙子が既に無効になったとします&lt;/xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Returns the current element in the collection.</source>
          <target state="translated">コレクション内の現在の要素を返します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">コレクションは、列挙子が作成された後に変更されました。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>