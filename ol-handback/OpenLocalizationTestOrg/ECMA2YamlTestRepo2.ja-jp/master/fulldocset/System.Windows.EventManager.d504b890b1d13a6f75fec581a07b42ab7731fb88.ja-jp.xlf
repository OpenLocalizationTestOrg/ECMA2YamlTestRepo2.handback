<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7aa8d27c33b1690bab85d6524c8898782b50acf7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.EventManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb69308ff3a973408c7cfd5d0fc126e71942fb33</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c372eb8185f7d16d10725df760f61333dce0c8c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides event-related utility methods that register routed events for class owners and add class handlers.</source>
          <target state="translated">クラスの所有者のルーティング イベントを登録し、クラス ハンドラーを追加するイベントに関連するユーティリティ メソッドを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is most commonly used to register a new routed event, with &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">このクラスは、新しいルーティング イベントを登録する、 &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;最もよく使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The second most common <ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph> usage is &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">2 つ目の最も一般的な<ph id="ph1">[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]</ph>使用率が&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You use this method to enable class handling of a routed event on the class, or an attached event.</source>
          <target state="translated">このメソッドを使用するには、クラスにルーティングされたイベントまたは添付イベントのクラス処理を有効にします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、「 <bpt id="p1">[</bpt>Handled、クラス処理とルーティング イベントをマーク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Returns identifiers for routed events that have been registered to the event system.</source>
          <target state="translated">イベントのシステムに登録されているルーティング イベントの識別子を返します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>More &lt;xref:System.Windows.RoutedEvent&gt; objects can be registered later.</source>
          <target state="translated">詳細&lt;xref:System.Windows.RoutedEvent&gt;オブジェクトを後で登録することができます&lt;/xref:System.Windows.RoutedEvent&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</source>
          <target state="translated">このメソッドは、スナップショットを取得し、ルーティングされたイベントのコレクションは、アプリケーションの有効期間全体で書き込み可能です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The collection returned might be quite large.</source>
          <target state="translated">返されるコレクションは、非常に大きくなる可能性があります。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Even just counting the events that are part of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>, the collection count is in the high hundreds.</source>
          <target state="translated">一部となるイベントをカウントのみでも、 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>コレクションのカウントが高い百にもはします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the registered objects.</source>
          <target state="translated">型の配列<bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>登録済みのオブジェクトを格納しています。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Finds all routed event identifiers for events that are registered with the provided owner type.</source>
          <target state="translated">指定した所有者の種類に登録されているイベントのすべてのルーティング イベントの識別子を検索します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type to start the search with.</source>
          <target state="translated">使用して検索を開始する型。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Base classes are included in the search.</source>
          <target state="translated">検索では、基本クラスが含まれています。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An array of matching routed event identifiers if any match is found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">ルーティング イベントの識別子と一致するすべての一致が見つかった場合の配列それ以外の場合、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Registers a class handler for a particular routed event.</source>
          <target state="translated">特定のルーティング イベントのクラス ハンドラーを登録します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">クラスの処理は、バックアップするルーティング イベントに実装されている添付イベントを含む、ルーティング イベントに使用される機能です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">クラスのハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、<ph id="ph1">`sender`</ph>パラメーターまたはイベント データ。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">イベントを処理済みとしてマークの動作がクラス ハンドラーを実装することができます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのハンドラーをインスタンスは呼び出されません。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">多くは、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>基本要素のイベントが仮想メソッドを処理するクラスを提供します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling RegisterClassHandler in static constructors.</source>
          <target state="translated">基本クラスを継承するクラスでこれらのメソッドをオーバーライドするクラスで静的コンス トラクター RegisterClassHandler を呼び出さずに処理を実装できます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"で始まるクラス処理されているイベントの名前で終了します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">クラスの処理の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Handled、クラス処理とルーティング イベントをマーク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using this signature, class handlers will be registered to invoke only in response to unhandled events.</source>
          <target state="translated">この署名を使用して、クラス ハンドラーは、未処理のイベントへの応答でのみ呼び出す登録されます。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also register class handlers to invoke even if the event arguments are marked handled, by using the &lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt; signature, with <ph id="ph1">`handledEventsToo`</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">呼び出すイベント引数を使用してが処理される、付いている場合でも、クラス ハンドラーを登録することも、&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;署名と<ph id="ph1">`handledEventsToo`</ph>に設定<ph id="ph2">`true`</ph>&lt;/xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">クラス処理を宣言するクラスの型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">処理するイベントのルーティング イベントの識別子です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">クラスのハンドラー実装への参照。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</source>
          <target state="translated">処理されるイベント データは既に設定されているイベントを処理するためのオプションを特定のルーティング イベントのクラス ハンドラーを登録します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</source>
          <target state="translated">クラスの処理は、バックアップするルーティング イベントに実装されている添付イベントを含む、ルーティング イベントに使用される機能です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A class handler is like a static handler that exists for all instances of the class.</source>
          <target state="translated">クラスのハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the <ph id="ph1">`sender`</ph> parameter and/or the event data.</source>
          <target state="translated">ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、<ph id="ph1">`sender`</ph>パラメーターまたはイベント データ。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Class handlers are invoked before instance handlers.</source>
          <target state="translated">インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can implement a class handler that has the behavior of marking the event as handled.</source>
          <target state="translated">イベントを処理済みとしてマークの動作がクラス ハンドラーを実装することができます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</source>
          <target state="translated">そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのハンドラーをインスタンスは呼び出されません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Many of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> base element events provide class handling virtual methods.</source>
          <target state="translated">多くは、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>基本要素のイベントが仮想メソッドを処理するクラスを提供します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By overriding these methods in classes that inherit the base classes, you can implement class handling without calling &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; in static constructors.</source>
          <target state="translated">クラス処理を呼び出さずを実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドして&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;で静的コンス トラクター&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</source>
          <target state="translated">通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"で始まるクラス処理されているイベントの名前で終了します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about class handling, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">クラスの処理の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Handled、クラス処理とルーティング イベントをマーク<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Using this signature, class handlers can be registered to invoke upon handled events, by setting <ph id="ph1">`handledEventsToo`</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">この署名を使用して、クラス ハンドラーに登録できるを設定して、イベントの処理時に呼び出す<ph id="ph1">`handledEventsToo`</ph>'éý'<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</source>
          <target state="translated">一般に、行う必要がありますこれを回避する、マウスやキーボード イベントから処理入力システムなどして既知の処理に関する問題がある場合にのみです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The type of the class that is declaring class handling.</source>
          <target state="translated">クラス処理を宣言するクラスの型。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The routed event identifier of the event to handle.</source>
          <target state="translated">処理するイベントのルーティング イベントの識別子です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A reference to the class handler implementation.</source>
          <target state="translated">クラスのハンドラー実装への参照。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to invoke this class handler even if arguments of the routed event have been marked as handled; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to retain the default behavior of not invoking the handler on any marked-handled event.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>ルーティング イベントの引数が指定されている場合でも、このクラスのハンドラーを起動する次のように処理します。<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>のすべてのマークで処理されるイベント ハンドラーを呼び出していない既定の動作を保持します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Registers a new routed event with the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> event system.</source>
          <target state="translated">新しいルーティング イベントを登録、<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>イベント システムです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Use the return value of this method to create the static declaration for a unique &lt;xref:System.Windows.RoutedEvent&gt; identifier field.</source>
          <target state="translated">このメソッドの戻り値を使用して、一意の静的な宣言を作成する&lt;xref:System.Windows.RoutedEvent&gt;識別子フィールドです&lt;/xref:System.Windows.RoutedEvent&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This field should be stored within the owner type.</source>
          <target state="translated">このフィールドは、所有者型内に格納する必要があります。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</source>
          <target state="translated">数多くの規則があるとベスト プラクティスがどのようにルーティング イベントに関連付けられている必要がありますしてという名前を登録されると、クラスで公開されています。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ルーティング イベントの概要<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The name of the routed event.</source>
          <target state="translated">ルーティング イベントの名前。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The name must be unique within the owner type and cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or an empty string.</source>
          <target state="translated">名前、所有者型内で一意である必要がありすることはできません<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>または空の文字列。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The routing strategy of the event as a value of the enumeration.</source>
          <target state="translated">列挙の値としてのイベントのルーティング方法。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The type of the event handler.</source>
          <target state="translated">イベント ハンドラーの型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This must be a delegate type and cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これは、デリゲート型でなければならないし、することはできません<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The owner class type of the routed event.</source>
          <target state="translated">ルーティング イベントの所有者のクラス型。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This cannot be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">これは、ことはできません<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The identifier for the newly registered routed event.</source>
          <target state="translated">新しく登録されたルーティング イベントの識別子。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</source>
          <target state="translated">この識別子のオブジェクトができるようになりました、クラスの静的フィールドとして格納され、イベントにハンドラーをアタッチするメソッドのパラメーターとして使用されます。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The routed event identifier is also used for other event system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
          <target state="translated">ルーティング イベントの識別子は他のイベント システムにも使用<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>