<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf131e010d5d49e2bf8a7f3eac77accfefa8aaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Caching.ChangeMonitor.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21e594be94a0631df65dc19144a640970427903a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a427994c22dd079ee60db294bf1b29ea20205c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</source>
          <target state="translated">キャッシュ アイテムに依存するデータの状態の変更を監視する派生したカスタム型の基本クラスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The ChangeMonitor class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</source>
          <target state="translated">ChangeMonitor クラスを特定のキャッシュ実装に特化してモニターの派生クラスの基底クラスとして使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A ChangeMonitor instance monitors changes in the state of data which a cache item depends on.</source>
          <target state="translated">ChangeMonitor インスタンスは、キャッシュのアイテムに依存するデータの状態の変化を監視します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, the item can be a file or data entity whose contents are cached.</source>
          <target state="translated">たとえば、項目はキャッシュの内容を持つファイルまたはデータ エンティティとすることができます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the file or data entity is updated, the associated cache entry must be changed also.</source>
          <target state="translated">ファイルまたはデータのエンティティが更新された場合も、関連付けられているキャッシュ エントリを変更してください。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</source>
          <target state="translated">監視可能な共通の項目には、データ エンティティ (データベース フィールド、値、行、またはテーブル) など、別のキャッシュ エントリとファイルおよびファイル属性が含まれます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A dependency change is a change in the state of a dependency.</source>
          <target state="translated">依存関係の変更は、依存関係の状態の変更です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a typical cache implementation, after a ChangeMonitor instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</source>
          <target state="translated">一般的なキャッシュの実装で ChangeMonitor インスタンスが、キャッシュ依存関係が変更されたことを通知した後、キャッシュは、挿入されたキャッシュ エントリが無効になるなど、必要なアクションを実行します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Derived ChangeMonitor classes can be customized to monitor dependency changes for specific different data stores.</source>
          <target state="translated">特定のさまざまなデータ ストアの依存関係の変更を監視する派生 ChangeMonitor クラスをカスタマイズできます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, there are cache implementations for a file system, physical memory, or a database.</source>
          <target state="translated">たとえば、特定のファイル システム、物理メモリ、またはデータベースのキャッシュ実装が使用されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The ChangeMonitor class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</source>
          <target state="translated">ChangeMonitor クラスは、キャッシュ、外部で発生する変更内容を検査し、し、変更が発生したキャッシュを警告します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> includes the following classes that derive from ChangeMonitor class:      -   &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;       Each of these classes works with different types of dependencies.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> ChangeMonitor クラスから派生する次のクラスが含まれています:- &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;-&lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;これらの各クラスのさまざまな種類の依存関係の動作します&lt;/xref:System.Runtime.Caching.SqlChangeMonitor&gt;&lt;/xref:System.Runtime.Caching.HostFileChangeMonitor&gt;&lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt;&lt;/xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the derived &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt; class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</source>
          <target state="translated">たとえば、派生&lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;クラスは、キャッシュ項目が依存しているファイル システム データ (ファイルおよびフォルダー) のキャッシュへの変更を監視します&lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This constructor is called from constructors in derived classes to initialize the base class.</source>
          <target state="translated">このコンス トラクターは、基本クラスを初期化するために派生クラスのコンス トラクターから呼び出されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class has a default constructor.</source>
          <target state="translated">&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;クラスは、既定のコンス トラクターを持つ&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, classes that inherit from the base &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class and define custom change-monitoring behavior must perform initialization in the constructor.</source>
          <target state="translated">ただし、クラスを継承する基本から&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;クラスし、カスタムの変更の監視の定義の動作は、コンス トラクターで初期化を実行する必要があります&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see the Notes for Inheritors section.</source>
          <target state="translated">詳細については、継承元のセクションのノートを参照してください。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases all resources that are used by the current instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">現在のインスタンスによって使用されているすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Dispose method invokes the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method of derived classes only one time, the first time it is called.</source>
          <target state="translated">Dispose メソッドを呼び出して、&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;の派生クラスの&amp;1; 回だけ、初めて呼び出されたメソッド&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Subsequent calls to the Dispose method have no effect.</source>
          <target state="translated">Dispose メソッドの後続の呼び出しは、影響を与えるありません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>After the method has been called, the &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">メソッドが呼び出された後、&lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;プロパティに設定されている<ph id="ph1">`true`</ph>&lt;/xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; overload must be called to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;を破棄するオーバー ロードを呼び出す必要があります、&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;インスタンス&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following are the rules for calling the dispose method:      -   Before an item is inserted into the cache, it is the caller's responsibility to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Dispose メソッドを呼び出す場合の規則を次に示します:-キャッシュに項目が、前にすることは、呼び出し元の責任の破棄、&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;インスタンス&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-   Once cache item and the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances that are associated with it are passed to a cache, the cache implementer that must make sure that &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; is called, even if the insert fails.</source>
          <target state="translated">のキャッシュ項目&amp;1; 回、&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;が関連付けられているインスタンスが、キャッシュ、ように注意してください、キャッシュの実行者に渡される&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;が呼び出されると、挿入が失敗した場合でも&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>-   After an item and its associated &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances are passed to a cache, the caller must not dispose the dependency because when the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method is called, the call is treated as if the dependency has changed.</source>
          <target state="translated">項目とそれに関連付けられた後&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;インスタンスはキャッシュに渡される、ため、呼び出し元が、依存関係を破棄しなければならないときに、&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;メソッドが呼び出されると、依存関係が変更された場合、その呼び出しは処理します&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As a result, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is automatically invoked.</source>
          <target state="translated">その結果、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドが自動的に呼び出されます&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-   Taking these rules into consideration, the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method must be called in one of the following ways:          -   Users must call the Dispose method overload if they decide not to insert the derived change-monitor instance into a cache.</source>
          <target state="translated">-これらの規則を考慮に入れて、&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;メソッドは、次の方法のいずれかで呼び出す必要があります:-派生変更監視インスタンスをキャッシュに挿入する場合、ユーザーは、Dispose メソッドのオーバー ロードを呼び出す必要があります&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>-   The cache implementation is responsible for calling the Dispose overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</source>
          <target state="translated">-キャッシュの実装は、実装では、オブジェクトのキャッシュに変更監視インスタンスを挿入しようとしましたが、挿入が失敗する場合は、Dispose オーバー ロードを呼び出すことを担当します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</source>
          <target state="translated">挿入の試行は、例外を発生させ、キャッシュ実装が関連付けられている依存関係を破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>-   If the cache entry is removed, the cache implementation must also dispose the dependency.</source>
          <target state="translated">場合は、キャッシュ エントリを削除すると、キャッシュ実装では、依存関係が破棄もする必要があります。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The internal implementation of the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method after it calls a callback that is registered through the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">内部実装、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドが自動的に呼び出し、&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;を通してメソッドが呼び出された後、コールバックを登録している、&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;メソッド&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This automatic dispose during the event firing only occurs if the initialization of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance previously completed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 場合にのみ発生イベントの発生時にこの自動 dispose の初期化、&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;完了済みのインスタンス&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When a derived change monitor's constructor calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method will automatically dispose the change monitor.</source>
          <target state="translated">派生した変更モニターのコンス トラクターを呼び出すと、&lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;メソッド、既に変更モニターの状態が変更された場合 (つまり、監視されている状態に既に変更されて、コンス トラクターがまだアクティブであった場合)、&lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;メソッドが変更の監視を自動的に破棄されます&lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Users should not call the Dispose method.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; ユーザーでは、Dispose メソッドを呼び出す必要がありますされません。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, you cannot prevent users from calling the method.</source>
          <target state="translated">ただし、メソッドの呼び出しからユーザーを防ぐことはできません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Therefore, if they do, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked.</source>
          <target state="translated">そのため場合は、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドが呼び出されます&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In that case, the cache entry is notified as if the dependency has changed.</source>
          <target state="translated">その場合は、キャッシュ エントリは、依存関係が変更された場合、通知されます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To prevent derived classes from overriding Dispose method, the method is not an explicit interface implementation.</source>
          <target state="translated">派生クラスの Dispose メソッドのオーバーライドを防ぐために、メソッドは、明示的なインターフェイスの実装ではありません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initialization is not complete in the derived change-monitor class that called the base Dispose method.</source>
          <target state="translated">初期化では、基本の Dispose メソッドを呼び出した変更モニターの派生クラスで完了しません。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Releases all managed and unmanaged resources and any references to the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">すべてのマネージ コードとアンマネージ リソースおよびへの参照を解放、 <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>インスタンス。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This overload must be implemented by derived change-monitor classes.</source>
          <target state="translated">このオーバー ロードは、変更モニターの派生クラスで実装する必要があります。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When the value of <ph id="ph1">`disposing`</ph> value is <ph id="ph2">`true`</ph>, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</source>
          <target state="translated">ときに、値の<ph id="ph1">`disposing`</ph>値は<ph id="ph2">`true`</ph>、すべてのマネージ コードとアンマネージ リソースが破棄され、変更モニターの派生インスタンスがガベージ コレクトされるように、このオブジェクトへの参照は解放されます。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It is guaranteed that the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method will invoke the implemented Dispose method only one time.</source>
          <target state="translated">保証される基本&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;メソッドは、実装された Dispose&amp;1; 回だけです&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release managed and unmanaged resources and any references to a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ リソースとアンマネージ リソースおよびへの参照を解放する、 <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>インスタンス。<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the Dispose method is called by a <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> thread and any external managed references are likely no longer valid because they have already been garbage collected.</source>
          <target state="translated">ときに<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>渡されると、メソッドによって呼び出されます Dispose、 <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>スレッドと外部の管理対象の参照をすべて可能性が高いため、ガベージ コレクションが既に有効期限切れです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the state that is monitored by the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class has changed.</source>
          <target state="translated">状態監視していることを示す値を取得、 <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスが変更されました。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can check the value of this property in a derived &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class to see whether a dependency has changed.</source>
          <target state="translated">派生では、このプロパティの値をチェックする&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;クラスに依存関係が変更されたかどうかを参照してください&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The value is set to <ph id="ph1">`true`</ph> when a dependency change occurs (that is, when the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called).</source>
          <target state="translated">値に設定されて<ph id="ph1">`true`</ph>依存関係の変更が発生した場合 (いるとき、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドが呼び出されます).&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>After the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called by the derived class, the value of the HasChanged property will be <ph id="ph1">`true`</ph>, regardless of whether a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; instance has been notified by a call to the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">後に、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドが派生クラスによって呼び出されると、HasChanged プロパティの値になります<ph id="ph1">`true`</ph>かどうかに関係なく、&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;インスタンスへの呼び出しによって通知、&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;メソッド&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Callers can check the HasChanged property to see whether a dependency has changed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 呼び出し元は依存関係が変更されたかどうかを表示する HasChanged プロパティを確認できます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the HasChanged property.</source>
          <target state="translated">ただし、マルチ スレッド環境で、簡単かつより保守しやすいアプローチは HasChanged プロパティをチェックせず、データをキャッシュ実装を挿入します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Cache implementations must check the HasChanged property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</source>
          <target state="translated">キャッシュ実装する必要があります HasChanged プロパティを確認および必要があります not の挿入を実行または&amp;1; つまたは複数の関連する依存関係が既に変更されている場合は、操作を設定します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the state that is monitored by the <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance has changed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合によって監視されている状態、 <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>インスタンスが変更されました。 それ以外の場合、 <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called from the constructor of derived classes to indicate that initialization is finished.</source>
          <target state="translated">初期化の完了を示すために派生クラスのコンス トラクターから呼び出されます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">派生クラスのコンス トラクターを呼び出す必要がありますの初期化が派生クラスで完了する前に、依存関係が変更された場合、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッド&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked, the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is automatically set to <ph id="ph1">`true`</ph> by the change monitor.</source>
          <target state="translated">ときに、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドが呼び出され、&lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;プロパティに設定されて自動的に<ph id="ph1">`true`</ph>変更モニターによって&lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>As a result, when the change monitor's constructor calls the InitializationComplete method, the base class will automatically call the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method.</source>
          <target state="translated">その結果、変更モニターのコンス トラクターを呼び出すと、InitializationComplete メソッドを呼び出すの基本クラスが自動的に呼び出さ、&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;メソッド&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If initialization is complete, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically disposes the derived change-monitor instance.</source>
          <target state="translated">初期化が完了すると場合、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドが派生変更監視インスタンスを自動的に破棄します&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the derived instance of a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class is disposed.</source>
          <target state="translated">派生インスタンスのことを示す値を取得、 <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスが破棄されています。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The property is set to <ph id="ph1">`true`</ph> after the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method in a derived class to dispose of the instance.</source>
          <target state="translated">プロパティに設定<ph id="ph1">`true`</ph>ベース後&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;メソッドの呼び出し、&lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;インスタンスを破棄する派生クラスでメソッド&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the instance is disposed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インスタンスが破棄される場合それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Called by Cache implementers to register a callback and notify an <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance through the <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> delegate when a dependency has changed.</source>
          <target state="translated">コールバックを登録し、通知のキャッシュ実装によって呼び出される、 <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を通じてインスタンス、 <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>依存関係が変更されたときに委任します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Cache implementers use this method to wire themselves up to a change monitor.</source>
          <target state="translated">キャッシュの実装側は、変更監視機能に自身のネットワーク上にこのメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you associate one or more change monitors with the cache item, you pass a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; instance with a populated change monitors property to the cache item.</source>
          <target state="translated">関連付ける&amp;1; つまたは複数の変更、キャッシュ項目を使用してモニターを渡す、&lt;xref:System.Runtime.Caching.CacheItemPolicy&gt;キャッシュ項目に設定されている変更モニターのプロパティを使用してインスタンス&lt;/xref:System.Runtime.Caching.CacheItemPolicy&gt;。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A cache implementer that supports change monitors is responsible for iterating over the &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt; property and register the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegates with each change monitor that it finds.</source>
          <target state="translated">サポートしていますが、モニターを変更するキャッシュの実行者がに対する繰り返し処理を担当する、&lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;プロパティは、登録、&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;各デリゲートが検出したモニターを変更します&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;&lt;/xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</source>
          <target state="translated">&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;デリゲートには、省略可能な状態パラメーターが含まれています、具体的な変更モニターの実装は、省略可能な状態情報を渡すことができます&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</source>
          <target state="translated">キャッシュの実行者は、カスタムの変更の監視は、コールバックの一部として渡される状態の種類への明示的な依存関係を取得できるかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base cache extensibility API has no requirement for explicit dependency on the type of state.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 基本キャッシュ機能拡張 API を持たない明示的な依存関係の要件の状態の種類。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The implementation of the NotifyOnChanged method automatically determines whether the state of the monitor has already changed at the time NotifyOnChanged method is called.</source>
          <target state="translated">NotifyOnChanged メソッドの実装では、自動的にモニターの状態に既に NotifyOnChanged メソッドが呼び出された時点で変更されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is <ph id="ph1">`true`</ph>, then the method automatically calls the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; event handler, that was registered, through the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">場合、&lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;プロパティは<ph id="ph1">`true`</ph>、メソッドが自動的には呼び出して、&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;を通じて、登録されたイベント ハンドラー、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッド&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;&lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</source>
          <target state="translated">これは、キャッシュの実装にキャッシュの実装は、監視機能を取得し、まで、接続自体の変更モニターの作成時刻から基になる監視対象の状態が変更されたことを可能になっているために発生します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the state has already changed then the object that is passed to the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">かどうか、状態が既に変更しに渡されるオブジェクト、&lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;メソッドは<ph id="ph1">`null`</ph>&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The NotifyOnChanged method can be invoked only one time, and will throw an exception on subsequent calls.</source>
          <target state="translated">NotifyOnChanged メソッドは、1 回だけ呼び出すことができ、後続の呼び出しで例外がスローされます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A reference to a method that is invoked when a dependency has changed.</source>
          <target state="translated">依存関係が変更されたときに呼び出されるメソッドへの参照。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The callback method has already been invoked.</source>
          <target state="translated">コールバック メソッドは既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by derived classes to raise the event when a dependency changes.</source>
          <target state="translated">依存関係が変更されると、イベントを発生させるために派生クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Typically, the OnChanged method is called when dependency changes occur.</source>
          <target state="translated">通常、OnChanged メソッドは、依存関係の変更が発生したときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The OnChanged method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</source>
          <target state="translated">OnChanged もこのメソッドは変更監視インスタンスが破棄されるが、コールバックが既に呼び出されていない場合にのみに、破棄が発生します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the OnChanged method is called before the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is called, the state data from the call to the OnChanged method is saved by the cache implementation.</source>
          <target state="translated">前に、OnChanged メソッドが呼び出された場合、&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;メソッドが呼び出されると、キャッシュの実装によって OnChanged メソッドへの呼び出しの状態データを保存します&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Also, the callback to the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; method is invoked immediately when the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is invoked.</source>
          <target state="translated">コールバックにも、&lt;xref:System.Runtime.Caching.OnChangedCallback&gt;メソッドが即座に起動されるときに、&lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;メソッドが呼び出されます&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The data for the change event.</source>
          <target state="translated">変更イベントのデータ。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">この値は、 <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value that represents the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class instance.</source>
          <target state="translated">表す値を取得、 <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスのインスタンス。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The UniqueId property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">UniqueId プロパティ値通常から成る依存名結合文字列データを一意に識別子によって監視されているデータ、&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;インスタンス&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The value of the UniqueId property is a string.</source>
          <target state="translated">UniqueId プロパティの値は、文字列です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The value of the string is used to assign the unique ID of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">一意の ID を割り当てる文字列の値が使用される、&lt;xref:System.Runtime.Caching.ChangeMonitor&gt;インスタンス&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The identifier for a change-monitor instance.</source>
          <target state="translated">変更監視インスタンスの識別子。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>