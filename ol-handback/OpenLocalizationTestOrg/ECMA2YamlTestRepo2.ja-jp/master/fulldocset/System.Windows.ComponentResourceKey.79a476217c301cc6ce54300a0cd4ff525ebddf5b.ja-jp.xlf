<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b55420315afeb95c0db4f46e0e0d108b051e98dd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.ComponentResourceKey.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82905670938212d687b75d51e724b0ec5ffb0008</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc9948f370cf5b64dc9f9991eff2838fac36d5fc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.</source>
          <target state="translated">その他の識別子と同様に、外部アセンブリ内のクラス名に基づくリソース キーを参照または定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>についてを参照してください<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class implements an object type that is useful for creating keys that are based on types in assemblies plus an identifier.</source>
          <target state="translated">このクラスは、アセンブリと識別子の型に基づいたキーを作成するために便利ですが、オブジェクトの種類を実装します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because you define or reference the type, you do not need to request a specific &lt;xref:System.Windows.ResourceDictionary&gt;, and more than one set of resources can exist in the assembly, each differentiated by the type of their ComponentResourceKey.</source>
          <target state="translated">定義または型を参照しているため、特定の要求する必要はありません&lt;xref:System.Windows.ResourceDictionary&gt;、リソースの&amp;1; つ以上のセットがその ComponentResourceKey の型によって各差別化されたアセンブリで配置できます&lt;/xref:System.Windows.ResourceDictionary&gt;。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are two ways to define a ComponentResourceKey.</source>
          <target state="translated">ComponentResourceKey を定義する&amp;2; つの方法ができます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you want an easily accessible key, you can define a static property on your control class code that returns a ComponentResourceKey, constructed with a &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt; that exists in the external resource assembly, and a &lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;.</source>
          <target state="translated">返す、ComponentResourceKey、&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;外部リソース アセンブリおよび&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;。&lt;/xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;に存在すること&lt;/xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;で構築される、コントロール クラス コードに静的なプロパティを定義するには、簡単にアクセスできるキーにする場合は、</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The key can be used for defining alternate default styles for controls in an assembly, by swapping the original external resource assembly for a custom one.</source>
          <target state="translated">アセンブリでは、カスタムの元の外部リソース アセンブリをスワップしてコントロールの代替の既定のスタイルを定義するため、キーを使用できます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can also define a named resource part within a larger control style or template to expose a customization entry point.</source>
          <target state="translated">大きなコントロール スタイルまたはテンプレートのカスタマイズのエントリ ポイントを公開する内で名前付きリソースの一部を定義することもできます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is particularly useful if you are defining a theme resource dictionary for your control.</source>
          <target state="translated">これは、コントロールのテーマのリソース ディクショナリを定義している場合に特に便利です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](../Topic/ComponentResourceKey%20Markup%20Extension.md)</ept> in verbose syntax directly to create a loose instance of the key.</source>
          <target state="translated">使用することも、 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](../Topic/ComponentResourceKey%20Markup%20Extension.md)</ept>キーの厳密でないインスタンスを作成するには、直接冗語構文にします。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is useful if you want to declare private resources from other assemblies that are less discoverable to customize.</source>
          <target state="translated">これは、カスタマイズに見つけにくい、他のアセンブリのプライベート リソースを宣言する場合に便利です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    See Remarks</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML テキストの使用方法を参照してください解説</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The default constructor is not generally used, because a &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt; value and &lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt; value are required for proper initialization.</source>
          <target state="translated">既定のコンス トラクターを一般的に使用しないため、&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;値および&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;値が正常に初期化に必要な&lt;/xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;&lt;/xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The default constructor exists primarily to support <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> XAML usage in named parameter form.</source>
          <target state="translated">サポートするには、主に既定のコンス トラクターが存在する<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>名前付きパラメーターの形式で XAML を使用します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> , specifying the &lt;xref:System.Type&gt; that defines the key, and an object to use as an additional resource identifier.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>を指定して、 &lt;xref:System.Type&gt;、キー、およびその他のリソース識別子として使用するオブジェクトを定義する&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This constructor exist for two scenarios, with the first scenario being the most important:      -   Supports creating a &lt;xref:System.Windows.ComponentResourceKey&gt; that is then exposed as a public static field on a custom control class.</source>
          <target state="translated">このコンス トラクターが存在する最も重要な最初のシナリオで、2 つのシナリオの: -&lt;xref:System.Windows.ComponentResourceKey&gt;カスタム コントロール クラスのパブリックな静的フィールドとして公開し、&lt;/xref:System.Windows.ComponentResourceKey&gt;作成をサポート</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This simplifies a control's access to its own defined resources in the template through <ph id="ph1">`{x:Static}`</ph> usages for template property values.</source>
          <target state="translated">これが簡略化から、テンプレートで定義されているリソースへのアクセス制御の<ph id="ph1">`{x:Static}`</ph>テンプレート プロパティの値の使用法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-   Supports <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> XAML usage in positional parameter form, which is one technique available for third parties that reference a component resource.</source>
          <target state="translated">-サポート<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>コンポーネント リソースを参照するサード パーティの使用可能な&amp;1; つの方法は、位置指定パラメーター形式で XAML を使用します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type that defines the resource key.</source>
          <target state="translated">リソース キーを定義する型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A unique identifier to differentiate this <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from others associated with the <ph id="ph1">`typeInTargetAssembly`</ph> type.</source>
          <target state="translated">これを区別するために、一意識別子<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>に関連付けられている他のユーザーから、<ph id="ph1">`typeInTargetAssembly`</ph>型です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</source>
          <target state="translated">このキーに関連付けられている値を検索するアセンブリのディクショナリを示すアセンブリ オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The retrieved assembly, as a reflection class.</source>
          <target state="translated">リフレクション クラスとして取得したアセンブリ。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Determines whether the provided object is equal to the current <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定されたオブジェクトが現在と等しいかどうかを判断<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Two keys are equal if they both have the same values for all their immediate settable properties (&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;, &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;).</source>
          <target state="translated">2 つのキーは、同じ値をすべてイミディ エイト設定可能なプロパティがある場合、等しい (&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;、 &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;).&lt;/xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt; &lt;/xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Object to compare with the current <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">現在と比較するオブジェクト<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the objects are equal; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクトが等しい場合はそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns a hash code for this <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">このハッシュ コードを返します<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A signed 32-bit integer value.</source>
          <target state="translated">符号付き 32 ビット整数値。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets or sets a unique identifier to differentiate this key from others associated with this type.</source>
          <target state="translated">取得またはこの型に関連付けられている他のユーザーからこのキーを区別するために一意の識別子を設定します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>についてを参照してください<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Typically, the string used for a ResourceId value conforms to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">通常は、ResourceId の値を使用する文字列に準拠している、 <bpt id="p1">[</bpt>XamlName の文法<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    See Remarks</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML テキストの使用方法を参照してください解説</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A unique identifier.</source>
          <target state="translated">一意の識別子。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Typically this is a string.</source>
          <target state="translated">通常これは文字列です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the string representation of a <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">文字列表現を取得、 <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The string representation.</source>
          <target state="translated">文字列形式。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets or sets the &lt;xref:System.Type&gt; that defines the resource key.</source>
          <target state="translated">取得または設定、&lt;xref:System.Type&gt;リソース キーを定義する&lt;/xref:System.Type&gt;。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>についてを参照してください<bpt id="p1">[</bpt>ComponentResourceKey マークアップ拡張機能<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ComponentResourceKey&gt; element is used by custom components to define keys for resources that are accessed from external assemblies, based on targeting an assembly that contains the type.</source>
          <target state="translated">&lt;xref:System.Windows.ComponentResourceKey&gt;外部アセンブリ、型を含むアセンブリをターゲット設定に基づくからアクセスされるリソースのキーを定義するカスタム コンポーネントで使用される要素&lt;/xref:System.Windows.ComponentResourceKey&gt;。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Custom components often define new types which must be in the assembly where the resource is located.</source>
          <target state="translated">カスタム コンポーネントは、多くの場合、リソースがあるアセンブリに含める必要がありますのある新しい型を定義します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Generally these types have no other implementation, the types only exist in order to satisfy the lookup requirements of a &lt;xref:System.Windows.ComponentResourceKey&gt;.</source>
          <target state="translated">通常、これらの型が他の実装を持っていない、 &lt;xref:System.Windows.ComponentResourceKey&gt;。&lt;/xref:System.Windows.ComponentResourceKey&gt;ルックアップ要件を満たすために、型にのみ存在</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_3"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    See Remarks</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_3"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML テキストの使用方法を参照してください解説</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type that defines the resource key.</source>
          <target state="translated">リソース キーを定義する型。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>