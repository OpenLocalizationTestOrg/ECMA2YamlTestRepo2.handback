<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c539823de736ff3586b35f92d9977c856169d2b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.IO.UnmanagedMemoryStream.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16ee29dbf30a27fdbcc4001ce4564cbe3ae4a560</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfa56e92c483bf62f1602b1ab01e9a775cfcb34e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides access to unmanaged blocks of memory from managed code.</source>
          <target state="translated">メモリのアンマネージ ブロックにマネージ コードからのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.</source>
          <target state="translated">このクラスは、既存のストリームに基づくモデルを使用してアンマネージ メモリへのアクセスをサポートし、ヒープをアンマネージ メモリの内容をコピーすることは必要ありません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; この型は、&lt;xref:System.IDisposable&gt;インターフェイス&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">型を使用してが完了したらを直接的または間接的にその破棄する必要があります。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">型の直接 dispose を呼び出す、&lt;xref:System.IDisposable.Dispose%2A&gt;メソッドで、 <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph>ブロック&lt;/xref:System.IDisposable.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">直接ことのない破棄する場合など、言語コンストラクトを使用して<ph id="ph1">`using`</ph>(C# の場合) または<ph id="ph2">`Using`</ph>(Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">詳細についてを参照してください"を使用して、オブジェクトを実装する IDisposable"、&lt;xref:System.IDisposable&gt;インターフェイスに関するトピック&lt;/xref:System.IDisposable&gt;。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーには、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified location and memory length.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定した位置とメモリ長を使用します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This constructor creates a new instance of the &lt;xref:System.IO.UnmanagedMemoryStream&gt; class, and by default sets the &lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt; property to <ph id="ph1">`false`</ph> and the &lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt; property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">このコンス トラクターの新しいインスタンスを作成する、&lt;xref:System.IO.UnmanagedMemoryStream&gt;クラス、および既定では設定、&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;プロパティを<ph id="ph1">`false`</ph>と&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;プロパティを<ph id="ph2">`true`</ph>&lt;/xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;&lt;/xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;&lt;/xref:System.IO.UnmanagedMemoryStream&gt;。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt; property is set to the value of the <ph id="ph1">`length`</ph> parameter and cannot be changed.</source>
          <target state="translated">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;の値に設定されて、<ph id="ph1">`length`</ph>パラメーターは変更できません&lt;/xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">アンマネージ メモリ位置へのポインター。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The length of the memory to use.</source>
          <target state="translated">使用するメモリの長さ。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーには、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pointer</ph><ept id="p1">&lt;/code&gt;</ept> value is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pointer</ph><ept id="p1">&lt;/code&gt;</ept> value is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class in a safe buffer with a specified offset and length.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定されたオフセットと長さを使用して、セーフ バッファー内のクラスです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを格納するバッファー。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを開始する位置を示すバッファー内のバイト位置。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームの長さ。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified location, memory length, total amount of memory, and file access values.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定した場所、メモリ長、メモリの総量を使用して、ファイルの値にアクセスします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`length`</ph> parameter defines the current amount of memory in use.</source>
          <target state="translated"><ph id="ph1">`length`</ph>パラメーターは、使用中メモリの現在の量を定義します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If reading or appending data to the stream, the <ph id="ph1">`length`</ph> value should be equal to the amount of valid data in the stream to be read from or preserved.</source>
          <target state="translated">読み取り、ストリームにデータを追加する場合、<ph id="ph1">`length`</ph>値から読み込まれるストリームに有効なデータの量と等しくする必要がありますまたは保持されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If writing to the stream, this value should be zero.</source>
          <target state="translated">ストリームに書き込み、この値は&amp;0; にする必要があります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`capacity`</ph> parameter indicates the amount of total memory available.</source>
          <target state="translated"><ph id="ph1">`capacity`</ph>パラメーターが使用できる合計メモリの量を示します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This value can describe a region that is longer than the length specified, or indicate a region that can be appended to.</source>
          <target state="translated">この値は、指定された長さよりも長い地域を説明またはに追加できる領域を示すことができます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any attempt to write beyond this value will fail.</source>
          <target state="translated">この値を超える書き込みするあらゆる試みは失敗します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`access`</ph> parameter sets the &lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;, and &lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt; properties.</source>
          <target state="translated"><ph id="ph1">`access`</ph>パラメーター セット、 &lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;、および&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;プロパティ&lt;/xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;&lt;/xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that specifying &lt;xref:System.IO.FileAccess&gt; does not guarantee that the stream will be writable.</source>
          <target state="translated">指定する&lt;xref:System.IO.FileAccess&gt;ストリームを書き込み可能になることは保証されません&lt;/xref:System.IO.FileAccess&gt;。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.</source>
          <target state="translated">アクセスのパラメーターは、その実装が公開されている実際のストリームを照合できるオブジェクトを作成する実行者を使用します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">アンマネージ メモリ位置へのポインター。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The length of the memory to use.</source>
          <target state="translated">使用するメモリの長さ。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">ストリームに割り当てられたメモリの総量。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーには、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pointer</ph><ept id="p1">&lt;/code&gt;</ept> value is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pointer</ph><ept id="p1">&lt;/code&gt;</ept> value is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスを指定したオフセット、長さ、使用して、セーフ バッファー内で、ファイルへのアクセス。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを格納するバッファー。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを開始する位置を示すバッファー内のバイト位置。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームの長さ。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームにアクセスするファイルのモードです。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether a stream supports reading.</source>
          <target state="translated">ストリームが読み取りをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This property indicates whether the current stream object supports reading.</source>
          <target state="translated">このプロパティは、現在のストリーム オブジェクトが読み取りをサポートするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the object was created by a constructor with an <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p2">&lt;/code&gt;</ept> parameter that did not include reading the stream and if the stream is closed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>持つコンス トラクターによってオブジェクトが作成された場合、 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーター ストリームの読み取りが含まれていませんが、ストリームが閉じている、それ以外の場合と<bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether a stream supports seeking.</source>
          <target state="translated">ストリームがシークをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This property indicates whether the current stream object supports seeking.</source>
          <target state="translated">このプロパティは、現在のストリーム オブジェクトがシークをサポートするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stream is closed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、ストリームは閉じられます。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether a stream supports writing.</source>
          <target state="translated">ストリームが書き込みをサポートするかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This property indicates whether the current stream object supports writing.</source>
          <target state="translated">このプロパティは、現在のストリームが書き込みをサポートするかどうかを示します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the object was created by a constructor with an <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">access</ph><ept id="p2">&lt;/code&gt;</ept> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>持つコンス トラクターによってオブジェクトが作成された場合、 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">access</ph> <ept id="p2">&lt;/code&gt;</ept>書き込みをサポートしていますが、パラメーターを持たないコンス トラクターによって作成されたパラメーター値のストリームが閉じている、それ以外の場合、または<bpt id="p3">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</source>
          <target state="translated">ストリームの長さ (サイズ) またはストリーム (容量) に割り当てられたメモリの総量を取得します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This property returns the <ph id="ph1">`capacity`</ph> value provided to the constructor.</source>
          <target state="translated">このプロパティを返します、<ph id="ph1">`capacity`</ph>コンス トラクターに指定された値。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`capacity`</ph> value was specified when the stream was initialized, this property returns the stream length.</source>
          <target state="translated">ない場合は<ph id="ph1">`capacity`</ph>ストリームが初期化されたときに、値は指定された、このプロパティは、ストリームの長さを返します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The size or capacity of the stream.</source>
          <target state="translated">サイズまたはストリームの容量。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>し、必要に応じてマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.ComponentModel.Component.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">このメソッドは、パブリック&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;メソッドおよび&lt;xref:System.Object.Finalize%2A&gt;メソッド&lt;/xref:System.Object.Finalize%2A&gt;&lt;/xref:System.ComponentModel.Component.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.ComponentModel.Component.Dispose%2A&gt; invokes the protected Dispose method with the <ph id="ph1">`disposing`</ph> parameter set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;保護された Dispose メソッドを呼び出し、<ph id="ph1">`disposing`</ph>パラメーターに設定<ph id="ph2">`true`</ph>です。&lt;/xref:System.ComponentModel.Component.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes Dispose with <ph id="ph1">`disposing`</ph> set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;Dispose を呼び出す<ph id="ph1">`disposing`</ph>'éý'<ph id="ph2">`false`</ph>です。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.IO.UnmanagedMemoryStream&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.IO.UnmanagedMemoryStream&gt;参照。&lt;/xref:System.IO.UnmanagedMemoryStream&gt; 。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This method invokes the &lt;xref:System.ComponentModel.Component.Dispose%2A&gt; method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;参照される各オブジェクトのメソッド&lt;/xref:System.ComponentModel.Component.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Overrides the &lt;xref:System.IO.Stream.Flush*&gt; method so that no action is performed.</source>
          <target state="translated">上書き、&lt;xref:System.IO.Stream.Flush*&gt;メソッド操作が実行されないようにします&lt;/xref:System.IO.Stream.Flush*&gt;。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This method performs no action for this class but is included as part of the &lt;xref:System.IO.Stream&gt; base class.</source>
          <target state="translated">このメソッドは、このクラスの操作は実行されませんが、&lt;xref:System.IO.Stream&gt;基底クラス&lt;/xref:System.IO.Stream&gt;の一部として含まれて</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Since any data is written to RAM, this method is redundant.</source>
          <target state="translated">すべてのデータが書き込まれるため RAM をこのメソッドは冗長です。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Overrides the <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream.FlushAsync%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> method so that the operation is cancelled if specified, but no other action is performed.</source>
          <target state="translated">上書き、 <ph id="ph1">&amp;lt;</ph>xref:System.IO.Stream.FlushAsync%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>メソッド、指定した場合、操作がキャンセルされるが他のアクションが実行されないようにします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]</ph></source>
          <target state="translated">以降で利用可能<ph id="ph1">[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the operation isn’t cancelled, the &lt;xref:System.IO.UnmanagedMemoryStream&gt; calls the &lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt; method, which means that no action performed.</source>
          <target state="translated">操作はキャンセルされていない場合、&lt;xref:System.IO.UnmanagedMemoryStream&gt;呼び出し、&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;メソッドで、アクションが実行されないことを意味します&lt;/xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;&lt;/xref:System.IO.UnmanagedMemoryStream&gt;。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The default value is &lt;xref:System.Threading.CancellationToken.None*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Threading.CancellationToken.None*&gt;。&lt;/xref:System.Threading.CancellationToken.None*&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">非同期のフラッシュ操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by using a pointer to an unmanaged memory location.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>アンマネージ メモリ位置へのポインターを使用して、クラスです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This method is equivalent to the &lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt; constructor.</source>
          <target state="translated">このメソッドは、&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;コンス トラクター&lt;/xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor.</source>
          <target state="translated">ストリームの変数を設定する前に、ポインターを初期化する必要があるあり、そのため、パラメーター化されたコンス トラクターを呼び出すことはできませんの方法がサポートしています。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Such methods should use the default constructor, &lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;, initialize the pointer, and then invoke the Initialize method.</source>
          <target state="translated">このようなメソッドは、既定のコンス トラクターを使用する必要があります&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;、ポインターを初期化および初期化メソッドを呼び出します&lt;/xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">アンマネージ メモリ位置へのポインター。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The length of the memory to use.</source>
          <target state="translated">使用するメモリの長さ。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">ストリームに割り当てられたメモリの総量。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">1 つ、 <bpt id="p1">&lt;xref href="System.IO.FileAccess"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>値。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The user does not have the required permission.</source>
          <target state="translated">ユーザーには、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pointer</ph><ept id="p1">&lt;/code&gt;</ept> value is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">pointer</ph><ept id="p1">&lt;/code&gt;</ept> value is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.IO.UnmanagedMemoryStream"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスを指定したオフセット、長さ、使用して、セーフ バッファー内で、ファイルへのアクセス。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを格納するバッファー。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームを開始する位置を示すバッファー内のバイト位置。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームの長さ。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">アンマネージ メモリ ストリームにアクセスするファイルのモードです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets the length of the data in a stream.</source>
          <target state="translated">ストリーム内のデータの長さを取得します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If unchanged since the stream was initialized, this property returns the length value provided to the constructor.</source>
          <target state="translated">変更せずにストリームが初期化されたので、このプロパティは、コンス トラクターに渡された長さの値を返します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If changes to the stream have occurred, this property reflects any changes to the length of the data.</source>
          <target state="translated">ストリームへの変更が発生した場合、このプロパティは、データの長さへの変更を表します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The length of the data in the stream.</source>
          <target state="translated">ストリーム内のデータの長さ。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gets or sets the current position in a stream.</source>
          <target state="translated">取得またはストリーム内の現在位置を設定します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When a stream is initialized, this property is set to zero.</source>
          <target state="translated">ストリームが初期化されると、このプロパティは&amp;0; に設定します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the &lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt; and &lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt; methods.</source>
          <target state="translated">その領域を使用してアクセスできませんするストリームのキャパシティを超えるストリームの位置を設定できますが、&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;と&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;メソッド&lt;/xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;&lt;/xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt; will return 0 and &lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt; will throw a &lt;xref:System.NotSupportedException&gt;.</source>
          <target state="translated">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;0 と&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;&lt;xref:System.NotSupportedException&gt;。&lt;/xref:System.NotSupportedException&gt;がスローされます&lt;/xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;を返します&lt;/xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This support is primarily for design and code compatibility with basic stream operations.</source>
          <target state="translated">これは、主に、設計やコードとの互換性の基本的なストリーム操作です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The current position in the stream.</source>
          <target state="translated">ストリームの現在の位置。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The position is set to a value that is less than zero, or the position is larger than &lt;xref:System.Int32.MaxValue&gt; or results in overflow when added to the current pointer.</source>
          <target state="translated">位置がよりも大きな位置が、0 より小さい値に設定されているか&lt;xref:System.Int32.MaxValue&gt;か結果の現在のポインターに追加されるとオーバーフロー&lt;/xref:System.Int32.MaxValue&gt; 。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Gets or sets a byte pointer to a stream based on the current position in the stream.</source>
          <target state="translated">取得またはストリームの現在の位置に基づいてストリームにバイトのポインターを設定します。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To return a pointer to the entire stream, set the &lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt; property to zero, and then call this property.</source>
          <target state="translated">全体のストリームへのポインターを返しますするには設定、&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;プロパティを&amp;0;、し、このプロパティを呼び出します&lt;/xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A byte pointer.</source>
          <target state="translated">バイトのポインター。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The current position is larger than the capacity of the stream.</source>
          <target state="translated">現在の位置は、ストリームの容量を超えています。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The position is being set is not a valid position in the current stream.</source>
          <target state="translated">されている位置セットは、現在のストリーム内の正しい位置ではありません。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The pointer is being set to a lower value than the starting position of the stream.</source>
          <target state="translated">ポインターは、ストリームの開始位置より小さい値に設定されているされます。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The stream was initialized for use with a &lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;。&lt;/xref:System.Runtime.InteropServices.SafeBuffer&gt;で使用するためのストリームが初期化されました</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The PositionPointer property is valid only for streams that are initialized with a &lt;xref:System.Byte&gt; pointer.</source>
          <target state="translated">PositionPointer プロパティに初期化されるストリームに対してのみ有効では、&lt;xref:System.Byte&gt;ポインター&lt;/xref:System.Byte&gt; 。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Reads the specified number of bytes into the specified array.</source>
          <target state="translated">指定した配列に指定したバイト数を読み取ります。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in the <ph id="ph2">`array`</ph> parameter (the buffer index) at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph>パラメーターはバイトのオフセット、<ph id="ph2">`array`</ph>読み取りを開始する位置を示すパラメーター (バッファーのインデックス)、および<ph id="ph3">`count`</ph>パラメーターは、このストリームから読み取られるバイトの最大数を示します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">ストリームの末尾に達した場合は、実際の数バイトを読み取り、または&amp;0; を返されるです。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
          <target state="translated">読み取り操作が成功した場合、ストリームの現在の位置は読み取られたバイト数で進められます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">例外が発生する場合は、ストリームの現在の位置は変更されません。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The Read method returns zero only after reaching the end of the stream.</source>
          <target state="translated">Read メソッドでは、ストリームの末尾に到達した場合にのみゼロを返します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Otherwise, Read always reads at least one byte from the stream before returning.</source>
          <target state="translated">それ以外の場合、読み取り常に少なくとも&amp;1; バイトのストリームから読み取りを返す前にします。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If no data is available from the stream upon a call to Read, the method will block until at least one byte of data can be returned.</source>
          <target state="translated">読み取りを呼び出すとストリームから使用可能なデータがない場合、メソッドは、少なくとも&amp;1; バイトのデータを返すことができるまでにブロックされます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">実装は、ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことです。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the specified byte array with the values between <ph id="ph1">`offset`</ph> and (<ph id="ph2">`offset`</ph><ph id="ph3"> + </ph><ph id="ph4">`count`</ph> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">このメソッドが戻るときまでの値が指定したバイト配列が含まれています。<ph id="ph1">`offset`</ph>と (<ph id="ph2">`offset`</ph> <ph id="ph3"> + </ph> <ph id="ph4">`count`</ph> - 1) 現在のソースから読み取られたバイトに置き換えられます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">このパラメーターは初期化せずに渡されます。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`buffer`</ph> at which to begin storing the data read from the current stream.</source>
          <target state="translated">内の&amp;0; から始まるバイト オフセット<ph id="ph1">`buffer`</ph>開始位置を示す現在のストリームから読み取ったデータの格納します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read from the current stream.</source>
          <target state="translated">現在のストリームから読み取るバイトの最大数。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">バッファーに読み取られた合計バイト数。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">バイト数は要求より小さくバイト数が、現在ご利用いただけませんまたはゼロ (0) の場合、ストリームの末尾に達していることができます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The length of the buffer array minus the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">count</ph><ept id="p2">&lt;/code&gt;</ept> parameter.</source>
          <target state="translated">バッファー配列の長さ、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターより小さい<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">count</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーター。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Asynchronously reads the specified number of bytes into the specified array.</source>
          <target state="translated">指定された配列に指定したバイト数を非同期に読み取ります。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]</ph></source>
          <target state="translated">以降で利用可能<ph id="ph1">[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If an exception occurs during the read operation, it will be set as the &lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt; of the property of the returned task.</source>
          <target state="translated">として設定する読み取り操作中に例外が発生した場合、 &lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt;、返されるタスクのプロパティの&lt;/xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The buffer to write the data into.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The byte offset in <ph id="ph1">`buffer`</ph> at which to begin writing data from the stream.</source>
          <target state="translated">内のバイト オフセット<ph id="ph1">`buffer`</ph>ストリームからデータを書き込む開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">読み取るバイトの最大数。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The default value is &lt;xref:System.Threading.CancellationToken.None*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Threading.CancellationToken.None*&gt;。&lt;/xref:System.Threading.CancellationToken.None*&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">読み取り操作を表す、非同期タスク。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TResult</ph><ept id="p1">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">値、 <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">TResult</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターには、バッファーに読み取られたバイトの合計数が含まれています。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">結果の値は、現在使用できるバイト数が要求した数より小さいか、ストリームの末尾に達している場合 0 (ゼロ) であることを要求したバイト数より小さくできます。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">ストリームからバイトを読み取りますを&amp;1; バイト、ストリーム内の位置を進めますやストリームの末尾にある場合は-1 を返します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Use this method to return integer values from the stream.</source>
          <target state="translated">このメソッドを使用して、ストリームから整数値を返します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The unsigned byte cast to an &lt;xref:System.Int32&gt; object, or -1 if at the end of the stream.</source>
          <target state="translated">キャストされた符号なしバイト、&lt;xref:System.Int32&gt;オブジェクト、または、ストリームの末尾にある場合は-1&lt;/xref:System.Int32&gt; 。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Sets the current position of the current stream to the given value.</source>
          <target state="translated">指定した値を現在のストリームの現在の位置を設定します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For more information about seeking, see &lt;xref:System.IO.FileStream.Seek%2A&gt;.</source>
          <target state="translated">詳細については、シーク、 &lt;xref:System.IO.FileStream.Seek%2A&gt;。&lt;/xref:System.IO.FileStream.Seek%2A&gt;を参照してください。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The point relative to <ph id="ph1">`origin`</ph> to begin seeking from.</source>
          <target state="translated">に対する相対ポイント<ph id="ph1">`origin`</ph>シークの開始。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Specifies the beginning, the end, or the current position as a reference point for <ph id="ph1">`origin`</ph>, using a value of type &lt;xref:System.IO.SeekOrigin&gt;.</source>
          <target state="translated">参照ポイントとして先頭、末尾、または現在位置を示す<ph id="ph1">`origin`</ph>、 &lt;xref:System.IO.SeekOrigin&gt;.&lt;/xref:System.IO.SeekOrigin&gt;型の値を使用します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The new position in the stream.</source>
          <target state="translated">ストリームの新しい位置。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An attempt was made to seek before the beginning of the stream.</source>
          <target state="translated">ストリームの先頭より前に、をシークしようとしました。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> value is larger than the maximum size of the stream.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>値は、ストリームの最大サイズを超えています。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;loc&lt;/code&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;loc&lt;/code&gt;</ph>正しくありません。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Sets the length of a stream to a specified value.</source>
          <target state="translated">指定した値に、ストリームの長さを設定します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If the given value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより小さい場合は、ストリームは切り捨てられます。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If the given value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">指定した値が、ストリームの現在の長さより大きい場合は、ストリームが拡張されます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.</source>
          <target state="translated">ストリームが展開されている場合、古いクライアント シークレットと新しい長さの間のストリームの内容は未定義です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A stream must support both writing and seeking for SetLength to work.</source>
          <target state="translated">ストリームには、書き込みとシーク操作 SetLength の両方をサポートする必要があります。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The length of the stream.</source>
          <target state="translated">ストリームの長さ。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An I/O error has occurred.</source>
          <target state="translated">I/O エラーが発生しました。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Writes a block of bytes to the current stream using data from a buffer.</source>
          <target state="translated">バッファーからデータを使用して現在のストリームにバイトのブロックを書き込みます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Writing occurs at the current position in the stream.</source>
          <target state="translated">ストリームの現在位置にある書き込みが発生します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The byte array from which to copy bytes to the current stream.</source>
          <target state="translated">現在のストリームにバイトをコピーするバイト配列。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The offset in the buffer at which to begin copying bytes to the current stream.</source>
          <target state="translated">現在のストリームにバイトのコピーを開始する位置を示すバッファー内のオフセット。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The number of bytes to write to the current stream.</source>
          <target state="translated">現在のストリームに書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O エラーが発生します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>One of the specified parameters is less than zero.</source>
          <target state="translated">指定したパラメーターのいずれかが&amp;0; 未満です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> parameter minus the length of the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">buffer</ph><ept id="p2">&lt;/code&gt;</ept> parameter is less than the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p3">&lt;/code&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">offset</ph> <ept id="p1">&lt;/code&gt;</ept>パラメーターの長さマイナス、 <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph2">buffer</ph> <ept id="p2">&lt;/code&gt;</ept>パラメーターより小さい<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph3">count</ph> <ept id="p3">&lt;/code&gt;</ept>パラメーター。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">buffer</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">非同期的に現在のストリームにバイトのシーケンスを書き込み、書き込んだバイト数だけストリーム内の現在位置を進めます、キャンセル要求を監視します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]</ph></source>
          <target state="translated">以降で利用可能<ph id="ph1">[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If an exception occurs during the write operation, it will be set as the &lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt; of the property of the returned task.</source>
          <target state="translated">として設定する書き込み操作中に例外が発生した場合、 &lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt;、返されるタスクのプロパティの&lt;/xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The buffer to write data from.</source>
          <target state="translated">データを書き込むバッファー。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The zero-based byte offset in <ph id="ph1">`buffer`</ph> from which to begin copying bytes to the stream.</source>
          <target state="translated">内の&amp;0; から始まるバイト オフセット<ph id="ph1">`buffer`</ph>ストリームにバイトのコピー開始位置を示すです。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">書き込むバイトの最大数。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">キャンセル要求を監視するトークンです。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The default value is &lt;xref:System.Threading.CancellationToken.None*&gt;.</source>
          <target state="translated">既定値は&lt;xref:System.Threading.CancellationToken.None*&gt;。&lt;/xref:System.Threading.CancellationToken.None*&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">非同期の書き込み操作を表すタスク。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Writes a byte to the current position in the file stream.</source>
          <target state="translated">ファイル ストリームの現在の位置にバイトを書き込みます。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A byte value written to the stream.</source>
          <target state="translated">ストリームに書き込むバイト値。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The stream is closed.</source>
          <target state="translated">ストリームは閉じられます。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The supplied <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> causes the stream exceed its maximum capacity.</source>
          <target state="translated">指定された<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p1">&lt;/code&gt;</ept>ストリームと、処理能力の上限を超えます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>