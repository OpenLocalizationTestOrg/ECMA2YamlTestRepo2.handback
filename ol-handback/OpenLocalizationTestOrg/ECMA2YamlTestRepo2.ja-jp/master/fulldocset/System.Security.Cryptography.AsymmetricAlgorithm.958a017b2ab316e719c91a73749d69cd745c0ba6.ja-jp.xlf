<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d8b1e8be1c48c449645555c662e7ed1d18b6394</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Cryptography.AsymmetricAlgorithm.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1787a35c2c415c8f833abed7afe3b102788d500</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f09ba21c69a7f0723d678612bd61d90a0b96b0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.</source>
          <target state="translated">非対称アルゴリズムのすべての実装が継承する必要があります元となる抽象基本クラスを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key.</source>
          <target state="translated">非対称の暗号アルゴリズムとも呼ばれる公開キー アルゴリズム、送信者と受信者の両方が関連するキーのペアを保持することを必要とします。 秘密キーと公開キー。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Both keys are unique to the entity.</source>
          <target state="translated">両方のキーは、エンティティに固有です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver.</source>
          <target state="translated">公開キーが利用できるだれこのキーは受信者に送信されるデータをエンコードするために使用されます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver's public key.</source>
          <target state="translated">秘密キー保持する必要がプライベート; 受信側でこのキーは、受信者の公開キーを使用してエンコードされたメッセージをデコードに使用されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; class is an implementation of a public-key algorithm.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;クラスは、公開キー アルゴリズムの実装&lt;/xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For an in-depth discussion of public-key encryption and algorithms, see the "Public-Key Encryption" section in <bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">公開キー暗号化アルゴリズムとアルゴリズムの詳しい説明、「公開キー暗号化」セクションを参照してください。 <bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see <bpt id="p1">[</bpt>How to: Create a Public-Private Key Pair<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">厳密名ツール (Sn.exe) を使用して、キーのペアを作成する方法については、次を参照してください。<bpt id="p1">[</bpt>する方法: 公開/秘密キー ペアを作成する<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use public-key systems to form digital signatures.</source>
          <target state="translated">公開キー システムを使用すると、デジタル署名を形成します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Digital signatures are used to help to protect the integrity of data.</source>
          <target state="translated">デジタル署名は、データの整合性を保護するために使用されます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest.</source>
          <target state="translated">たとえばを公開キー システムを使用して、メッセージのデジタル署名、送信者まずハッシュ関数を適用、メッセージ ダイジェストを作成するためです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The sender then encrypts the message digest with the sender's private key to create the sender's personal signature.</source>
          <target state="translated">送信者は、送信者の個人用の署名を作成する、送信側の秘密キーで、メッセージ ダイジェストを暗号化します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used.</source>
          <target state="translated">メッセージと署名を受信したときに、受信者は、メッセージ ダイジェストを復元する送信者の公開キーを使用して署名を復号化され、送信者が使用されるのと同じハッシュ アルゴリズムを使用してメッセージをハッシュします。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit.</source>
          <target state="translated">受信者が計算メッセージ ダイジェストには、送信者から受け取ったメッセージ ダイジェストが一致すると、受信側はメッセージが転送中に変更されなかったことを想定できます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that anyone can verify a signature, because the sender's public key is common knowledge.</source>
          <target state="translated">送信者の公開キーは、一般的な知識があるため、署名すべてのユーザーを確認できることに注意してください。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted.</source>
          <target state="translated">この手法ではメッセージを秘密にすることはできません。メッセージが秘密にするには、その必要がありますも暗号化されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides the following classes that implement digital signature algorithms: &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;, &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;, &lt;xref:System.Security.Cryptography.ECDsa&gt; (base class), and &lt;xref:System.Security.Cryptography.ECDsaCng&gt;.</source>
          <target state="translated">.NET Framework には、デジタル署名アルゴリズムを実装する次のクラスが用意されています: &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;、 &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;、 &lt;xref:System.Security.Cryptography.ECDsa&gt;(基本クラス)、および&lt;xref:System.Security.Cryptography.ECDsaCng&gt;.&lt;/xref:System.Security.Cryptography.ECDsaCng&gt; &lt;/xref:System.Security.Cryptography.ECDsa&gt; &lt;/xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; &lt;/xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography&gt; namespace provides concrete classes for &lt;xref:System.Security.Cryptography.RSA&gt; and &lt;xref:System.Security.Cryptography.DSA&gt; only.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography&gt;名前空間の具象クラスを提供する&lt;xref:System.Security.Cryptography.RSA&gt;と&lt;xref:System.Security.Cryptography.DSA&gt;のみ&lt;/xref:System.Security.Cryptography.DSA&gt;&lt;/xref:System.Security.Cryptography.RSA&gt;&lt;/xref:System.Security.Cryptography&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:      -   <bpt id="p1">[</bpt>How to: Encrypt XML Elements with Asymmetric Keys<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">      -   </ph><bpt id="p2">[</bpt>How to: Decrypt XML Elements with Asymmetric Keys<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph2">      -   </ph><bpt id="p3">[</bpt>How to: Sign XML Documents with Digital Signatures<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph3">      -   </ph><bpt id="p4">[</bpt>How to: Verify the Digital Signatures of XML Documents<ept id="p4">](~/add/includes/ajax-current-ext-md.md)</ept></source>
          <target state="translated">RSA アルゴリズムを使用して、暗号化し、XML データの暗号化を解除し、XML デジタル署名を確認する方法については、次の記事を参照してください:-<bpt id="p1">[</bpt>する方法: 非対称キーで XML 要素を暗号化<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph1">      -   </ph><bpt id="p2">[</bpt>する方法: 非対称キーで XML 要素を復号化<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph2">      -   </ph><bpt id="p3">[</bpt>する方法: デジタル署名で XML ドキュメントに<ept id="p3">](~/add/includes/ajax-current-ext-md.md)</ept><ph id="ph3">      -   </ph><bpt id="p4">[</bpt>する方法: XML ドキュメントのデジタル署名のことを確認<ept id="p4">](~/add/includes/ajax-current-ext-md.md)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You cannot create an instance of an abstract class.</source>
          <target state="translated">抽象クラスのインスタンスを作成することはできません。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Application code creates a new instance of a derived class.</source>
          <target state="translated">アプリケーション コードでは、派生クラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt; and &lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt; classes are the only currently supported implementations.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;と&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;クラスは、現在サポートされている唯一の実装&lt;/xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;&lt;/xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The implementation of the derived class is not valid.</source>
          <target state="translated">派生クラスの実装が正しくありません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">によって使用されるすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This method is a simple call to the &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">このメソッドは、単純に、&lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; class to be reallocated for other purposes.</source>
          <target state="translated">呼び出す<ph id="ph1">`Dispose`</ph>により、リソースで使用される、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;を他の目的を再割り当てするクラスです&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">`Dispose`</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creates a default cryptographic object used to perform the asymmetric algorithm.</source>
          <target state="translated">非対称アルゴリズムを実行するために使用する既定の暗号オブジェクトを作成します。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance, unless the default settings have been changed with the <bpt id="p2">[</bpt><ph id="ph1">&amp;lt;</ph>cryptoClass<ph id="ph2">&amp;gt;</ph> element<ept id="p2">](../Topic/%3CcryptoClass%3E%20Element.md)</ept>.</source>
          <target state="translated">新しい<bpt id="p1">&lt;xref href="System.Security.Cryptography.RSACryptoServiceProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>インスタンス、既定の設定が変更されていない限り、 <bpt id="p2">[</bpt> <ph id="ph1">&amp;lt;</ph>cryptoClass<ph id="ph2">&amp;gt;</ph>要素<ept id="p2">](../Topic/%3CcryptoClass%3E%20Element.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creates an instance of the specified implementation of an asymmetric algorithm.</source>
          <target state="translated">非対称アルゴリズムの指定した実装のインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The asymmetric algorithm implementation to use.</source>
          <target state="translated">使用する非対称アルゴリズムの実装です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following table shows the valid values for the <ph id="ph1">`algName`</ph> parameter and the algorithms they map to.</source>
          <target state="translated">次の表に有効な値を示しています、<ph id="ph1">`algName`</ph>パラメーターおよびそれらの割り当て先のアルゴリズムです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Parameter value</source>
          <target state="translated">パラメーターの値</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Implements</source>
          <target state="translated">実装</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>System.Security.Cryptography.AsymmetricAlgorithm</source>
          <target state="translated">System.Security.Cryptography.AsymmetricAlgorithm</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>RSA</source>
          <target state="translated">RSA</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>System.Security.Cryptography.RSA</source>
          <target state="translated">System.Security.Cryptography.RSA</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>DSA</source>
          <target state="translated">DSA</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>System.Security.Cryptography.DSA</source>
          <target state="translated">System.Security.Cryptography.DSA</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>ECDsa</source>
          <target state="translated">ECDsa</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ECDsaCng</source>
          <target state="translated">ECDsaCng</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>System.Security.Cryptography.ECDsaCng</source>
          <target state="translated">System.Security.Cryptography.ECDsaCng</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ECDH</source>
          <target state="translated">ECDH</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ECDiffieHellman</source>
          <target state="translated">ECDiffieHellman</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ECDiffieHellmanCng</source>
          <target state="translated">ECDiffieHellmanCng</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>System.Security.Cryptography.ECDiffieHellmanCng</source>
          <target state="translated">System.Security.Cryptography.ECDiffieHellmanCng</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A new instance of the specified asymmetric algorithm implementation.</source>
          <target state="translated">指定した非対称アルゴリズムの実装の新しいインスタンス。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">現在のインスタンスによって使用されるすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;.</source>
          <target state="translated">呼び出す<ph id="ph1">`Dispose`</ph> &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;.&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;の使用が終了したときに</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; in an unusable state.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph>メソッドによって、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;使用不可の状態&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; was occupying.</source>
          <target state="translated">呼び出した後<ph id="ph1">`Dispose`</ph>へのすべての参照を解放する必要があります、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;ガベージ コレクターがメモリを再利用できるようにする、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;占有されていた&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>と<bpt id="p2">[</bpt>Dispose メソッドの実装<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call <ph id="ph2">`Dispose`</ph> before you release your last reference to the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; 常に呼び出し<ph id="ph2">`Dispose`</ph>&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;の最後の参照を解放する前に。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;オブジェクトの<ph id="ph1">`Finalize`</ph>メソッド&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスし、必要に応じてマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose()`</ph>メソッドおよび<ph id="ph2">`Finalize`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph>呼び出す<ph id="ph2">`Dispose`</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;参照。&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm&gt; 。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、<ph id="ph1">`Dispose()`</ph>参照される各オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, reconstructs an <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object from an XML string.</source>
          <target state="translated">派生クラスでオーバーライドされると、再構築、 <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> XML 文字列からオブジェクト。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise, throws a &lt;xref:System.NotImplementedException&gt;.</source>
          <target state="translated">それ以外の場合、 &lt;xref:System.NotImplementedException&gt;。&lt;/xref:System.NotImplementedException&gt;がスローされます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The XML string to use to reconstruct the <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">再構築に使用する XML 文字列の<bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, gets the name of the key exchange algorithm.</source>
          <target state="translated">派生クラスでオーバーライドされると、キー交換アルゴリズムの名前を取得します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Otherwise, throws an &lt;xref:System.NotImplementedException&gt;.</source>
          <target state="translated">それ以外の場合、 &lt;xref:System.NotImplementedException&gt;。&lt;/xref:System.NotImplementedException&gt;がスローされます。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The name of the key exchange algorithm.</source>
          <target state="translated">キー交換アルゴリズムの名前。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.</source>
          <target state="translated">取得または非対称アルゴリズムで使用されるキー モジュラスのビット単位、サイズを設定します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt; property.</source>
          <target state="translated">有効なキー サイズが非対称アルゴリズムの特定の実装によって指定されに記載されて、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt;プロパティ&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The size, in bits, of the key modulus used by the asymmetric algorithm.</source>
          <target state="translated">非対称アルゴリズムで使用されるキー モジュラスのビット単位のサイズ。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The key modulus size is invalid.</source>
          <target state="translated">キー モジュラスのサイズが正しくありません。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Represents the size, in bits, of the key modulus used by the asymmetric algorithm.</source>
          <target state="translated">非対称アルゴリズムで使用されるキー モジュラスのビット単位のサイズを表します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt; property.</source>
          <target state="translated">有効なキー サイズが非対称アルゴリズムの特定の実装によって指定されに記載されて、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt;プロパティ&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This field is accessed through the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A&gt; property.</source>
          <target state="translated">このフィールドには、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A&gt;プロパティ&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets the key sizes that are supported by the asymmetric algorithm.</source>
          <target state="translated">非対称アルゴリズムでサポートされているキー サイズを取得します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The asymmetric algorithm supports only key sizes that match an entry in this array.</source>
          <target state="translated">非対称アルゴリズムでは、この配列内のエントリに一致するキーのサイズのみをサポートします。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An array that contains the key sizes supported by the asymmetric algorithm.</source>
          <target state="translated">非対称アルゴリズムでサポートされているキー サイズを格納する配列。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifies the key sizes that are supported by the asymmetric algorithm.</source>
          <target state="translated">非対称アルゴリズムでサポートされているキー サイズを指定します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The asymmetric algorithm supports only key sizes that match an entry in this array.</source>
          <target state="translated">非対称アルゴリズムでは、この配列内のエントリに一致するキーのサイズのみをサポートします。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This field is accessed through the &lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt; property.</source>
          <target state="translated">このフィールドには、&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt;プロパティ&lt;/xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A&gt;。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">追加します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, gets the name of the signature algorithm.</source>
          <target state="translated">派生クラスとして実装された場合は、署名アルゴリズムの名前を取得します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Otherwise, always throws a &lt;xref:System.NotImplementedException&gt;.</source>
          <target state="translated">それ以外の場合、 &lt;xref:System.NotImplementedException&gt;。&lt;/xref:System.NotImplementedException&gt;は常にスローします。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The name of the signature algorithm.</source>
          <target state="translated">署名アルゴリズムの名前です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates and returns an XML string representation of the current <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">派生クラスでオーバーライドされると、作成し、現在の XML 文字列表現を返します<bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Otherwise, throws a &lt;xref:System.NotImplementedException&gt;.</source>
          <target state="translated">それ以外の場合、 &lt;xref:System.NotImplementedException&gt;。&lt;/xref:System.NotImplementedException&gt;がスローされます。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to include private parameters; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>プライベート パラメーターを含めるそれ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>An XML string encoding of the current <bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">現在の XML 文字列エンコーディング<bpt id="p1">&lt;xref href="System.Security.Cryptography.AsymmetricAlgorithm"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>オブジェクト。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>