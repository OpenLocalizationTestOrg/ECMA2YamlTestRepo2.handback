<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a40ee65525c50ec46473cc26996105f5ef91650a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.CompilerServices.CallConvThiscall.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f5d79ab0b5a6f10d9045d4b3c584003e97534f9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5c216fff4206ac176d8dc93fab2b32d6f2d5271</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates that a method should use the <bpt id="p1">&lt;xref uid="langword_csharp_ThisCall" name="ThisCall" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> calling convention.</source>
          <target state="translated">メソッドを使用することを示す、 <bpt id="p1">&lt;xref uid="langword_csharp_ThisCall" name="ThisCall" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>呼び出し規約です。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">`ThisCall`</ph> calling convention, the first parameter of a method call is the <ph id="ph2">`this`</ph> pointer, which is stored in register ECX.</source>
          <target state="translated">使用する場合、<ph id="ph1">`ThisCall`</ph>呼び出し規約、メソッド呼び出しの最初のパラメーターは、 <ph id="ph2">`this`</ph> ECX レジスタに格納されているポインター。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Other parameters of a method call are pushed on the stack.</source>
          <target state="translated">メソッドの呼び出しの他のパラメーターをスタックにプッシュされます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This calling convention is used to call methods on classes exported from an unmanaged DLL.</source>
          <target state="translated">この呼び出し規約を使用して、アンマネージ DLL からエクスポートされたクラスのメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The classes in &lt;xref:System.Runtime.CompilerServices&gt; are for compiler writers' use only.</source>
          <target state="translated">クラスは、&lt;xref:System.Runtime.CompilerServices&gt;コンパイラ ライターの使用のみ&lt;/xref:System.Runtime.CompilerServices&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</source>
          <target state="translated">コンパイラは、ジャストイン タイム (JIT) コンパイラが既定の動作が適切ではない場合に、値を処理する方法を変更するメタデータ内のカスタム修飾子を生成します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</source>
          <target state="translated">JIT コンパイラには、カスタム修飾子が検出されると、修飾子を指定する方法で値を処理します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compilers can apply custom modifiers to methods, parameters, and return values.</source>
          <target state="translated">コンパイラは、メソッド、パラメーターにカスタム修飾子を適用し、値を返します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The JIT compiler must respond to required modifiers but can ignore optional modifiers.</source>
          <target state="translated">JIT コンパイラでは、必須の修飾子に応答する必要がありますが、省略可能な修飾子を無視することができます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</source>
          <target state="translated">C++ コンパイラでは、既定では、バイト処理、JIT コンパイラが C++ との互換性のない方法でバイトを処理する場合に使用する方法を定義するカスタム修飾子を生成可能性があります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the &lt;xref:System.Reflection.Emit.TypeBuilder&gt; class such as &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, and &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.</source>
          <target state="translated">次の手法のいずれかを使用してメタデータにカスタム修飾子を出力することができます:-内のメソッドを使用して、&lt;xref:System.Reflection.Emit.TypeBuilder&gt;などクラス&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;、 &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;、 &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;、 &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;&lt;/xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder&gt; 。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id="ph1">`modopt`</ph> and <ph id="ph2">`modreq`</ph>, and assembling the file with the <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">呼び出しを含む Microsoft intermediate language (MSIL) の命令ファイルを生成する<ph id="ph1">`modopt`</ph>と<ph id="ph2">`modreq`</ph>を使用してファイルをまとめることと、 <bpt id="p1">[</bpt>Ilasm.exe (IL アセンブラー)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>-   Using the unmanaged reflection API.</source>
          <target state="translated">アンマネージ リフレクション API を使用します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.CompilerServices.CallConvThiscall"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Runtime.CompilerServices.CallConvThiscall"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The classes in &lt;xref:System.Runtime.CompilerServices&gt; are for compiler writers' use only.</source>
          <target state="translated">クラスは、&lt;xref:System.Runtime.CompilerServices&gt;コンパイラ ライターの使用のみ&lt;/xref:System.Runtime.CompilerServices&gt;。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>