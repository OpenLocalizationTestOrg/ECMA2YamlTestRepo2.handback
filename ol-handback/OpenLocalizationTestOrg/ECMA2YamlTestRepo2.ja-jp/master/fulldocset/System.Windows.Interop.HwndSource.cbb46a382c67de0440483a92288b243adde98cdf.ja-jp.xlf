<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a81e40b9009905d8831137a0249b3348431659b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Interop.HwndSource.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bfb1c13585d8e03cc41f7b6a4a0f7b0180e56b0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9705cf6641d5a3355f2b1ae3c51ceba957caae14</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Presents <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> content in a <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> window.</source>
          <target state="translated">提示<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>でコンテンツを<ph id="ph2">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>ウィンドウです。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  Many members of this class are unavailable in the Internet security zone.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; インターネットのセキュリティ ゾーンでは、このクラスの多くのメンバーを使用できません。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An HwndSource implements a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window that can contain <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">HwndSource を実装して、<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>含めることができるウィンドウ<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>コンテンツ。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content in the window is arranged, measured, and rendered; and is interactive to input.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>ウィンドウにコンテンツが配置されている、評価しレンダリングされ、対話形式を入力します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Because the HwndSource is specifically designed to interoperate with <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>, this class exposes several low-level <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> features.</source>
          <target state="translated">HwndSource は具体的と相互運用するように設計されていますので<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>、このクラスでは、いくつかの低レベルでは公開<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>機能します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use this class to do the following:      -   Specify window styles, window class styles, and extended window styles.</source>
          <target state="translated">このクラスは、次の操作を使用することができます。 拡張ウィンドウ スタイルとウィンドウ クラス スタイルのウィンドウ スタイルを指定します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>-   Hook the window procedure.</source>
          <target state="translated">ウィンドウ プロシージャをフックします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   Provide access to the window handle (HWND).</source>
          <target state="translated">ウィンドウ ハンドル (HWND) へのアクセスを提供します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>-   Destroy the window.</source>
          <target state="translated">ウィンドウを破棄します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The HwndSource class is designed for general interoperability and is not designed as a managed HWND wrapper.</source>
          <target state="translated">HwndSource クラスでは、一般的な相互運用のために設計されていますがあり、マネージ HWND ラッパーとして設計されていません。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In general, it does not provide managed methods for manipulating the window or properties for inspecting its state.</source>
          <target state="translated">一般に、ウィンドウまたはプロパティの状態を調べることを操作するための管理対象のメソッドは提供しません。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Instead, the HwndSource class provides access to the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window handle (HWND) through the &lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt; property, which can be passed by means of PInvoke techniques to <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> in order to manipulate the window.</source>
          <target state="translated">HwndSource クラスが代わりへのアクセスを提供、<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>ウィンドウ ハンドル (HWND)) を通じて、 &lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;PInvoke 手法を使用して渡すことができるプロパティ<ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph><ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>ウィンドウを操作するためにします&lt;/xref:System.Windows.Interop.HwndSource.Handle%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Construction<ept id="p1">**</ept>       Many aspects of the HwndSource can only be specified at construction time.</source>
          <target state="translated"><bpt id="p1">**</bpt>構築<ept id="p1">**</ept>HwndSource の多くの側面は、構築時にのみ指定できます。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create an HwndSource, first create an &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure and populate it with the desired parameters.</source>
          <target state="translated">HwndSource を作成するには、まず作成、&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;を構造化し、目的のパラメーターを設定します&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These parameters include the following:      -   The class, window, and extended window styles.</source>
          <target state="translated">これらのパラメーター、次のとおりです:-クラス、ウィンドウ、および拡張ウィンドウ スタイル。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You must use PInvoke to change the styles after the window is created.</source>
          <target state="translated">PInvoke を使用して、ウィンドウが作成された後にスタイルを変更する必要があります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Not all styles can be changed after the window is created.</source>
          <target state="translated">ウィンドウを作成した後、すべてのスタイルを変更できます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Consult the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> documentation before changing window styles.</source>
          <target state="translated">参照してください、<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>ウィンドウ スタイルを変更する前にドキュメント。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-   The initial position of the window.</source>
          <target state="translated">ウィンドウの-最初の位置。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-   The initial size of the window, which includes whether the size is specified or should be determined from the determined size of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">サイズが指定されているかの決定されるサイズから決定する必要があるかどうかを含むウィンドウの初期サイズ、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>コンテンツ。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>-   The parent window.</source>
          <target state="translated">親ウィンドウです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>-   The &lt;xref:System.Windows.Interop.HwndSourceHook&gt; to include in the window procedure chain.</source>
          <target state="translated">-&lt;xref:System.Windows.Interop.HwndSourceHook&gt;ウィンドウ プロシージャのチェーンに含める&lt;/xref:System.Windows.Interop.HwndSourceHook&gt;。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you specify a hook at construction time, it receives all messages for the window.</source>
          <target state="translated">構築時にフックを指定する場合は、ウィンドウのすべてのメッセージを受信します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; to add a hook after the window is created.</source>
          <target state="translated">使用することができます&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;ウィンドウが作成された後にフックを追加する&lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>-   The transparency settings.</source>
          <target state="translated">透過性の設定。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A top-level window can be configured to blend with the other windows on the desktop according to the per-pixel transparency of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">Blend のピクセルごとに透明度に従ってデスクトップ上の他のウィンドウとするトップレベル ウィンドウを構成できます、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>コンテンツ。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To enable this, set the &lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt; property in the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">これを有効にするには設定、&lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt;プロパティに、&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;に<ph id="ph1">`true`</ph>&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;&lt;/xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt;。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This property can only be specified at construction time, and only through the &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; constructor signature, and it imposes several limitations.</source>
          <target state="translated">構築時に、を通してのみ、このプロパティを指定することができますのみ、&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;コンス トラクターのシグネチャとそのいくつかの制限が生じます&lt;/xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>After you populate the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure, pass it to the &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; constructor for the HwndSource.</source>
          <target state="translated">設定した後、&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;構造体に渡すこと、 &lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;、HwndSource のコンス トラクター&lt;/xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt; &lt;/xref:System.Windows.Interop.HwndSourceParameters&gt; 。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object Lifetime<ept id="p1">**</ept>       An HwndSource is a regular <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> object, and its lifetime is managed by the garbage collector.</source>
          <target state="translated"><bpt id="p1">**</bpt>オブジェクトの有効期間<ept id="p1">**</ept>An HwndSource は、通常<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>オブジェクト、およびその有効期間は、ガベージ コレクターによって管理されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because the HwndSource represents an unmanaged resource, HwndSource implements &lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">HwndSource が&lt;xref:System.IDisposable&gt;。&lt;/xref:System.IDisposable&gt;を実装して、HwndSource を表すためにアンマネージ リソース、</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Synchronously calling &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt; immediately destroys the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window if called from the owner thread.</source>
          <target state="translated">同期的に呼び出して&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;を即座に破棄、<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>ウィンドウ所有者スレッドから呼び出された場合&lt;/xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If called from another thread, the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph> window is destroyed asynchronously.</source>
          <target state="translated">別のスレッドから呼び出された場合、<ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]</ph>ウィンドウが非同期的に破棄します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Calling &lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt; explicitly from the interoperating code might be necessary for certain interoperation scenarios.</source>
          <target state="translated">呼び出す&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;明示的に相互運用コードから必要があります、特定の相互運用シナリオ&lt;/xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Window Procedures<ept id="p1">**</ept>       The HwndSource class implements its own window procedure.</source>
          <target state="translated"><bpt id="p1">**</bpt>ウィンドウ プロシージャ<ept id="p1">**</ept>HwndSource クラスは、独自のウィンドウ プロシージャを実装します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This window procedure is used to process important window messages, such as those related to layout, rendering, and input.</source>
          <target state="translated">このウィンドウ プロシージャが、レイアウト、レンダリングに関連するものなどの重要なウィンドウ メッセージを処理するために使用し、入力します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, you can also hook the window procedure for your own use.</source>
          <target state="translated">ただし、独自のウィンドウ プロシージャをフックすることもできます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can specify your own hook during construction by setting the &lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt; property, or you can also use &lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt; and &lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt; to add and remove hooks after the window is created.</source>
          <target state="translated">構築時に、独自のフックを設定して指定できます、&lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt;プロパティを使用するかも&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;と&lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt;を追加して、ウィンドウを作成した後、フック関数を削除します&lt;/xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt;&lt;/xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;&lt;/xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The hooks are called by last-in first-out order, which enables your hooks to execute before the built-in processing.</source>
          <target state="translated">後入れ先出しの順序にフックを組み込みの処理の前に実行できるように、フックを呼び出します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The actual hooks are held by a weak reference.</source>
          <target state="translated">実際のフック関数は、弱い参照によって保持されます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Therefore, make sure that you manage the lifetime of your hook delegate.</source>
          <target state="translated">したがって、フック デリゲートの有効期間を管理することを確認します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about HwndSource and other interoperation classes, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">HwndSource と他の相互運用のクラスの詳細については、次を参照してください。 <bpt id="p1">[</bpt>WPF および Win32 の相互運用<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Notice how the constructors for HwndSource take parameters that resemble the parameters for <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph> functions such as <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>.</source>
          <target state="translated">HwndSource のコンス トラクターがパラメーターのようなパラメーターを受け取る方法に注意してください。<ph id="ph1">[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]</ph>などの関数<bpt id="p1">[</bpt>について<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>です。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Scale transformations should not be applied to the &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt; of an HwndSource.</source>
          <target state="translated">スケール変換を適用する必要があります、 &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;、HwndSource の&lt;/xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;。&lt;/xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;の「解説」を参照してください</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by using a structure that contains the initial settings.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>初期設定を格納する構造体を使用して、クラスです。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This method is not available in the Internet security zone.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; インターネット ゾーンのセキュリティはこのメソッドを使用できません。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This constructor signature might be more convenient in certain situations, because the default structure contains some appropriate initial default values.</source>
          <target state="translated">既定の構造には、いくつかの適切な既定の初期値が含まれているために、このコンス トラクターのシグネチャが特定の状況で方が便利な可能性があります。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If you use this signature, do not use the default &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor to construct the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; structure for the <ph id="ph2">`parameters`</ph> value.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; この署名を使用する場合、既定値は使用しないでください&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;構築するコンス トラクター、&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;の構造体、<ph id="ph2">`parameters`</ph>値&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You must use the &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor that enables you to specify an initial window name.</source>
          <target state="translated">使用する必要があります、&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;コンス トラクター [初期] ウィンドウの名前を指定することができます&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you use the default &lt;xref:System.Windows.Interop.HwndSourceParameters&gt; constructor and create an &lt;xref:System.Windows.Interop.HwndSource&gt; with it, that &lt;xref:System.Windows.Interop.HwndSource&gt; does not display because an initial window name is a construction requirement for the represented HWND.</source>
          <target state="translated">既定値を使用する場合&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;コンス トラクターを作成し、 &lt;xref:System.Windows.Interop.HwndSource&gt;、いる&lt;xref:System.Windows.Interop.HwndSource&gt;初期ウィンドウ名が表現されている HWND の構築要件のためには表示されません&lt;/xref:System.Windows.Interop.HwndSource&gt;&lt;/xref:System.Windows.Interop.HwndSource&gt;&lt;/xref:System.Windows.Interop.HwndSourceParameters&gt;。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A structure that contains the parameters that are required to create the window.</source>
          <target state="translated">ウィンドウを作成するために必要なパラメーターを格納する構造体。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a specified class style, style, extended style, x-y position, name, and parent window.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.Windows.Interop.HwndSource"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>指定したクラス スタイルをスタイル、スタイル、x と y 位置、名、および親ウィンドウを拡張します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This method is not available in the Internet security zone.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>&gt; インターネット ゾーンのセキュリティはこのメソッドを使用できません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>