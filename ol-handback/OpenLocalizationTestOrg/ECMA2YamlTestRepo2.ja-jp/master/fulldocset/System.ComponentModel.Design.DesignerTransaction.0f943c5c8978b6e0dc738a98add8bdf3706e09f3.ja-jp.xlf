<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08a0c21b43d81b7ec0fa14c20c194ee5330ec10a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.DesignerTransaction.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72ce88bc6de1785bb2a64e5a617a24ab8cedbfdf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6048d255421b46381c032019ed37779ba8a27805</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.</source>
          <target state="translated">一連のパフォーマンスを改善し、ほとんどの種類の変更を元に戻すを有効にするデザイン時のアクションをグループ化する方法を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Transactions can track actions that can be undone later.</source>
          <target state="translated">トランザクションは、ことのできる完了した後で操作を追跡できます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Changes made during a transaction can be reversed by canceling a transaction, which automatically attempts to reverse each change by setting each changed property to its pre-change value.</source>
          <target state="translated">前の変更の値に変更された各プロパティを設定して各変更を破棄しようとして自動的にトランザクションをキャンセルして、トランザクション中に行われた変更を取り消すことができます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Transactions can also improve performance during a series of operations by deferring updates to the display until the completion of the transaction.</source>
          <target state="translated">トランザクションのトランザクションが完了するまで画面への更新を遅らせることで、一連の操作中にパフォーマンスを改善できます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When a transaction is in progress, some components defer their processing until the transaction has completed by listening to the &lt;xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening&gt; and &lt;xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed&gt; events.</source>
          <target state="translated">一部のコンポーネントを聞くことにより、トランザクションが完了するまで、その処理を遅延トランザクションが実行中のときに、&lt;xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening&gt;と&lt;xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed&gt;イベント&lt;/xref:System.ComponentModel.Design.IDesignerHost.TransactionClosed&gt;&lt;/xref:System.ComponentModel.Design.IDesignerHost.TransactionOpening&gt;。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Properties window, for example, does not update its display after a transaction has opened until the transaction has closed.</source>
          <target state="translated">[プロパティ] ウィンドウは更新されませんの表示が、トランザクションが閉じられるまで、トランザクションが開いた後。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To use transactions for reversible or multiple operations, have your designer create a DesignerTransaction for each operation or series of operations which should be reversible.</source>
          <target state="translated">可逆または複数の操作のトランザクションを使用するには、作成操作または一連の元に戻すこと対象となる操作ごとに DesignerTransaction、デザイナーがあります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Be careful not to perform actions outside the transactions that might prevent a sequence of undo events from completing successfully.</source>
          <target state="translated">元に戻すイベントのシーケンスが正常に完了するを妨げる可能性があるトランザクションの外部アクションを実行しないように注意します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can obtain a new DesignerTransaction by calling the &lt;xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt; method of an &lt;xref:System.ComponentModel.Design.IDesignerHost&gt;.</source>
          <target state="translated">新しい DesignerTransaction &lt;xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt; &lt;xref:System.ComponentModel.Design.IDesignerHost&gt;。&lt;/xref:System.ComponentModel.Design.IDesignerHost&gt;のメソッド&lt;/xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt;を呼び出すことによって取得できます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Be sure to obtain each DesignerTransaction from the active &lt;xref:System.ComponentModel.Design.IDesignerHost&gt; in order to correctly integrate with the designer transaction processing mechanism, rather than creating a new DesignerTransaction directly.</source>
          <target state="translated">必ず、アクティブなから各 DesignerTransaction を取得して&lt;xref:System.ComponentModel.Design.IDesignerHost&gt;正しく新しい DesignerTransaction を直接作成するのではなく、処理メカニズムでは、デザイナーのトランザクションと統合するためにします&lt;/xref:System.ComponentModel.Design.IDesignerHost&gt;。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To perform an action within a transaction, you must first create a transaction.</source>
          <target state="translated">トランザクション内でアクションを実行するには、まずにトランザクションを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Then you must call the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt; method before each change or set of changes occurs, and the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt; method after each change or set of changes occur.</source>
          <target state="translated">呼び出す必要があります、&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;メソッドのそれぞれの変更または変更のセットが発生すると、前に、&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;メソッド各変更または一連の変更した後に発生します&lt;/xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;&lt;/xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Finally, complete and close the transaction by calling the &lt;xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt; method.</source>
          <target state="translated">最後に完了しを呼び出して、トランザクションを終了、&lt;xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt;メソッド&lt;/xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When making changes to property values, use the &lt;xref:System.ComponentModel.PropertyDescriptor.SetValue%2A&gt; method of a &lt;xref:System.ComponentModel.PropertyDescriptor&gt;, which calls the component change methods of the &lt;xref:System.ComponentModel.Design.IComponentChangeService&gt; and creates a DesignerTransaction representing the change automatically.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; プロパティの値に変更を加える際に使用、&lt;xref:System.ComponentModel.PropertyDescriptor.SetValue%2A&gt;のメソッド、&lt;xref:System.ComponentModel.PropertyDescriptor&gt;のコンポーネントの変更メソッドを呼び出しますが、&lt;xref:System.ComponentModel.Design.IComponentChangeService&gt;され自動的に変更を表す DesignerTransaction が作成されます&lt;/xref:System.ComponentModel.Design.IComponentChangeService&gt;&lt;/xref:System.ComponentModel.PropertyDescriptor&gt;&lt;/xref:System.ComponentModel.PropertyDescriptor.SetValue%2A&gt;。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To perform a transaction, complete the following steps:      1.</source>
          <target state="translated">トランザクションを実行するには、次の手順を実行します。 1。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Call &lt;xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt; to obtain a DesignerTransaction that can be used to control the transaction.</source>
          <target state="translated">呼び出す&lt;xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt;をトランザクションの制御に使用できる DesignerTransaction を取得します&lt;/xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A&gt;。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>2.</source>
          <target state="translated">2.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Within a <ph id="ph1">`try`</ph> block, for each action that you want to track with a DesignerTransaction, call the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt; method, make the change or changes, then call the &lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt; method to signal that the change or changes have been made.</source>
          <target state="translated">内で、 <ph id="ph1">`try`</ph> DesignerTransaction、呼び出しを追跡したい各アクションのブロック、&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;メソッドを呼び出して、変更または変更、&lt;xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;変更または変更が行われたことを通知するメソッド&lt;/xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A&gt;&lt;/xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A&gt;。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>3.</source>
          <target state="translated">3.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To complete the transaction, call &lt;xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt; from within a <ph id="ph1">`finally`</ph> block.</source>
          <target state="translated">トランザクションを完了するには、呼び出す&lt;xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt;内から、<ph id="ph1">`finally`</ph>ブロック&lt;/xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A&gt;。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In C#, you can use the <ph id="ph1">`using`</ph> statement rather than a <ph id="ph2">`try/finally`</ph> block, such as in the following example.</source>
          <target state="translated">C# の場合は、使用することができます、<ph id="ph1">`using`</ph>ステートメントではなく、<ph id="ph2">`try/finally`</ph>ブロックする場合に、次の例のようにします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```   using (host.CreateTransaction() {   // Insert your code here.   }   ```</ph>       To cancel and attempt to roll back a transaction before it has been committed, call the &lt;xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt; method.</source>
          <target state="translated"><ph id="ph1">```   using (host.CreateTransaction() {   // Insert your code here.   }   ```</ph>[キャンセル] を前に、コミットされたトランザクションをロールバックしようとしていますは、呼び出し、&lt;xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt;メソッド。&lt;/xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt; 。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt; method is invoked, the actions tracked by the DesignerTransaction are reversed to attempt to roll back the changes.</source>
          <target state="translated">ときに、&lt;xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt;メソッドが呼び出され、変更をロールバックしようとする、DesignerTransaction で追跡操作が取り消されます&lt;/xref:System.ComponentModel.Design.DesignerTransaction.Cancel%2A&gt;。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To undo actions that occurred as part of earlier transactions, you must use the undo command provided by the development environment.</source>
          <target state="translated">以前のトランザクションの一部として発生したアクションを元に戻すには、開発環境で提供元に戻すコマンドを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with no description.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>説明のないクラスです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified transaction description.</source>
          <target state="translated">新しいインスタンスを初期化、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>クラスの指定されたトランザクションの説明を使用します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This constructor initializes the transaction with the specified description.</source>
          <target state="translated">このコンス トラクターは、指定された説明を使用してトランザクションを初期化します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A description for this transaction.</source>
          <target state="translated">このトランザクションの説明。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Cancels the transaction and attempts to roll back the changes made by the events of the transaction.</source>
          <target state="translated">トランザクションをキャンセルし、そのトランザクションのイベントによって行われた変更をロールバックしようとしています。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the transaction was canceled.</source>
          <target state="translated">トランザクションがキャンセルされたかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction.</source>
          <target state="translated">デザイナーのトランザクションが取り消されると、トランザクション処理機構は、トランザクションでこれまでに行われた変更をロールバックしようとします。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.</source>
          <target state="translated">これが成功したかどうかは、干渉して関連するコードの状態のいずれかの他の操作かどうかと、一連の必要な操作を完了できなかったかどうか、各操作の種類などの要因によって異なります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the transaction was canceled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、トランザクションが取り消されました。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Commits this transaction.</source>
          <target state="translated">このトランザクションをコミットします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When a designer transaction is committed, the transaction is considered complete and does not track further changes.</source>
          <target state="translated">デザイナーのトランザクションがコミットされると、トランザクションが完了したと見なす詳細の変更は追跡されません。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Once a transaction has been committed, further calls to this method do nothing.</source>
          <target state="translated">トランザクションがコミットされた後さらにこのメソッドの呼び出しを何もありません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Always call this method after creating a transaction to ensure that the transaction closes properly.</source>
          <target state="translated">常に、トランザクションが正常に閉じることを確認するトランザクションの作成後にこのメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the transaction was committed.</source>
          <target state="translated">トランザクションがコミットされたかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When a designer transaction is committed, the transaction is considered complete and does not track further changes.</source>
          <target state="translated">デザイナーのトランザクションがコミットされると、トランザクションが完了したと見なす詳細の変更は追跡されません。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the transaction was committed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>場合は、トランザクションがコミットされます。それ以外の場合、 <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets a description for the transaction.</source>
          <target state="translated">トランザクションの説明を取得します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A transaction can have a description that is useful in identifying the nature of the operation or operations.</source>
          <target state="translated">トランザクション操作の性質を特定するに役に立つ説明ことができます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A description for the transaction.</source>
          <target state="translated">トランザクションの説明。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">によって使用されるアンマネージ リソースを解放、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>し、必要に応じてマネージ リソースを解放します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose()`</ph>メソッドおよび&lt;xref:System.Object.Finalize%2A&gt;メソッド&lt;/xref:System.Object.Finalize%2A&gt;。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;呼び出す<ph id="ph1">`Dispose`</ph>で<ph id="ph2">`disposing`</ph>'éý'<ph id="ph3">`false`</ph>です。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.ComponentModel.Design.DesignerTransaction&gt; references.</source>
          <target state="translated">ときに、<ph id="ph1">`disposing`</ph>パラメーターは<ph id="ph2">`true`</ph>、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの&lt;xref:System.ComponentModel.Design.DesignerTransaction&gt;参照。&lt;/xref:System.ComponentModel.Design.DesignerTransaction&gt; 。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドを呼び出して、<ph id="ph1">`Dispose()`</ph>参照される各オブジェクトのメソッドです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>マネージ コードとアンマネージ リソースを解放するには<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>アンマネージ リソースだけを解放します。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Releases the resources associated with this object.</source>
          <target state="translated">このオブジェクトに関連付けられているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This override commits this transaction if it was not already committed.</source>
          <target state="translated">このオーバーライドは、まだコミットされていなかった場合、このトランザクションをコミットします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This method overrides &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; and cleans up resources by calling <ph id="ph1">`Dispose(false)`</ph>.</source>
          <target state="translated">このメソッドは&lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;呼び出すことによって、リソースをクリーンアップし、 <ph id="ph1">`Dispose(false)`</ph>&lt;/xref:System.Object.Finalize%2A?displayProperty=fullName&gt; 。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`Dispose(Boolean)`</ph> to customize the cleanup.</source>
          <target state="translated">オーバーライド<ph id="ph1">`Dispose(Boolean)`</ph>してクリーンアップをカスタマイズします。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Application code should not call this method; an object's <ph id="ph1">`Finalize`</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the &lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの<ph id="ph1">`Finalize`</ph>への呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、ガベージ コレクション中にメソッドが自動的に起動、&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;メソッド&lt;/xref:System.GC.SuppressFinalize%2A?displayProperty=fullName&gt;。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。 <bpt id="p1">[</bpt>Finalize メソッドおよびデストラクター<ept id="p1">](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)</ept>、<bpt id="p2">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>、および<bpt id="p3">[</bpt>Finalize メソッドをオーバーライドする<ept id="p3">](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref uid="langword_csharp_Cancel" name="Cancel" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">発生させる、 <bpt id="p1">&lt;xref uid="langword_csharp_Cancel" name="Cancel" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>イベント。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When a designer transaction is canceled, the transaction processing mechanism attempts to roll back the changes that have been made so far in the transaction.</source>
          <target state="translated">デザイナーのトランザクションが取り消されると、トランザクション処理機構は、トランザクションでこれまでに行われた変更をロールバックしようとします。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Whether this succeeds is dependent upon such factors as the type of each operation, whether other operations interfered with any of the involved code's state, and whether a sequence of expected operations failed to complete.</source>
          <target state="translated">これが成功したかどうかは、干渉して関連するコードの状態のいずれかの他の操作かどうかと、一連の必要な操作を完了できなかったかどうか、各操作の種類などの要因によって異なります。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Performs the actual work of committing a transaction.</source>
          <target state="translated">トランザクションのコミットの実際の作業を実行します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When a designer transaction is committed, the transaction is considered complete and does not track further changes.</source>
          <target state="translated">デザイナーのトランザクションがコミットされると、トランザクションが完了したと見なす詳細の変更は追跡されません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">によって使用されるすべてのリソースを解放、 <bpt id="p1">&lt;xref href="System.ComponentModel.Design.DesignerTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When a transaction is disposed, it is committed.</source>
          <target state="translated">トランザクションが破棄されると、それがコミットされます。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>