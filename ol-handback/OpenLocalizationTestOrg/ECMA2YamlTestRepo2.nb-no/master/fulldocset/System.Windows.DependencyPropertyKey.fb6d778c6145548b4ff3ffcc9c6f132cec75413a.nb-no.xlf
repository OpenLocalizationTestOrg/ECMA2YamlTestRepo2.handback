<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nb-no">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4691a6e122ecbf5305faed03fb963be4f3007c7e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.DependencyPropertyKey.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6841db7b46cbc620ad780d693b6cf47c03bc2d50</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8a436c8a112474f58b9bb1881a040508df4e8e6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a dependency property identifier for limited write access to a read-only dependency property.</source>
          <target state="translated">Inneholder en avhengighet egenskapsidentifikator for begrenset skrivetilgang til en skrivebeskyttet avhengighetsegenskapen.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>DependencyPropertyKey instances are obtained as the return value of a dependency property registration call using the methods &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt; or &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.</source>
          <target state="translated">Forekomster av DependencyPropertyKey hentes som returverdi av avhengighet egenskapen registrering samtaler med metoder &lt;xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;eller &lt;xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt;.&lt;/xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A&gt; &lt;/xref:System.Windows.DependencyProperty.RegisterReadOnly%2A&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The types that register a dependency property can use the DependencyPropertyKey in calls to &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt; and &lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt; that adjust the property's value as part of class logic.</source>
          <target state="translated">Typene som registrerer en avhengighetsegenskapen kan bruke DependencyPropertyKey i kall til &lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;og &lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;som justerer egenskapsverdien som en del av klassen logic.&lt;/xref:System.Windows.DependencyObject.ClearValue%2A&gt; &lt;/xref:System.Windows.DependencyObject.SetValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If permitted by the access level of the key, related classes can use the key and the dependency property also.</source>
          <target state="translated">Hvis tillatt av tilgangsnivå for nøkkelen, kan relaterte klassene bruke nøkkelen og avhengighetsegenskapen også.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</source>
          <target state="translated">For eksempel kan du deklarere nøkkelen som intern, og andre typer i samme samling kan også angi at avhengighetsegenskapen.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DependencyPropertyKey returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</source>
          <target state="translated">DependencyPropertyKey ble returnert av skrivebeskyttet avhengighet egenskapen registrering bør ikke bli offentliggjort, fordi at nøkkelen gjør egenskapen angis, noe som dermed oppveier punktet med å registrere den som en skrivebeskyttet avhengighetsegenskap.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, exposing the key causes a mismatch between the available dependency property behaviors and its <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> property wrapper implementations, which is bad class design.</source>
          <target state="translated">Også at nøkkelen får ikke samsvar mellom tilgjengelig avhengigheten egenskapen virkemåter og <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> egenskapen wrapper implementeringer, som er utformet for ugyldig klasse.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of exposing the key itself, you should instead expose the &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A&gt; value of the DependencyPropertyKey as a <ph id="ph1">`public static readonly`</ph>&lt;xref:System.Windows.DependencyProperty&gt; on your class.</source>
          <target state="translated">I stedet for at selve nøkkelen, må du i stedet utsette den &lt;xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A&gt;verdien for DependencyPropertyKey som en <ph id="ph1">`public static readonly`</ph> &lt;xref:System.Windows.DependencyProperty&gt;på din klasse.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</source>
          <target state="translated">Det gjør det til å returnere en ugyldig avhengighet egenskapsidentifikator for en bestemt egenskapen systemoperasjoner, for eksempel opplisting av lokalt sett verdier.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the identifier thus obtained does not have the full capabilities of a &lt;xref:System.Windows.DependencyProperty&gt; for many property system operations.</source>
          <target state="translated">Identifikatoren dermed hente har imidlertid ikke alle egenskapene i en &lt;xref:System.Windows.DependencyProperty&gt;for mange egenskapen systemoperasjoner.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</source>
          <target state="translated">Henter avhengighet egenskapsidentifikator som er tilknyttet denne egenskapsidentifikator for spesialiserte skrivebeskyttet avhengighet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The DependencyProperty value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</source>
          <target state="translated">Verdien for DependencyProperty aktiverer en skrivebeskyttet egenskapen ID til å delta i felles egenskapen systemoperasjoner bruker noen av de samme grensesnittene som brukes for lese-/ avhengighetsegenskaper.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to implement the get property accessor for a read-only dependency property, you should create and expose a &lt;xref:System.Windows.DependencyProperty&gt; identifier on your class.</source>
          <target state="translated">For å implementere get Egenskapsaksessor for et skrivebeskyttet avhengighetsegenskapen, må du opprette og vise en &lt;xref:System.Windows.DependencyProperty&gt;ID for din klasse.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This serves two purposes:      -   Your own class needs the &lt;xref:System.Windows.DependencyProperty&gt; identifier in order to implement the get accessor for the property wrapper.</source>
          <target state="translated">Dette fungerer to formål: – din eier klassen må den &lt;xref:System.Windows.DependencyProperty&gt;identifikator for å implementere get-aksessor for den egenskap wrapperen.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You use the &lt;xref:System.Windows.DependencyProperty&gt; as a parameter for the &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt; call that implements the get accessor.</source>
          <target state="translated">Du bruker den &lt;xref:System.Windows.DependencyProperty&gt;som en parameter for de &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;oppringing som implementerer get-aksessor.&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.DependencyProperty&gt; identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</source>
          <target state="translated">- &lt;xref:System.Windows.DependencyProperty&gt;identifikatorer vise din avhengighetsegenskapen egenskapen systemet slik at andre metoder som avhenger av metadata kan få tilgang til den i et standard skjema.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, if you called &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt; on some &lt;xref:System.Windows.DependencyObject&gt; and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your &lt;xref:System.Windows.DependencyProperty&gt; value rather than the key.</source>
          <target state="translated">For eksempel hvis du kalte &lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;på noen &lt;xref:System.Windows.DependencyObject&gt;og anskaffet en opplisting av lokalt angi egenskaper (verdiene og identifikatorer) i identifikator som ble returnert for en skrivebeskyttet avhengighetsegenskapen ville bli din &lt;xref:System.Windows.DependencyProperty&gt;verdi i stedet for nøkkelen.&lt;/xref:System.Windows.DependencyProperty&gt; &lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Not exposing a &lt;xref:System.Windows.DependencyProperty&gt; identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</source>
          <target state="translated">Ikke at en &lt;xref:System.Windows.DependencyProperty&gt;identifikator øker ikke sikkerheten for din skrivebeskyttet avhengighetsegenskapen på noen måte, gjør det bare operasjoner som involverer egenskapen mer ubeleilige både etterfølgende avledede klasser og klasseforekomster.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>To expose the  &lt;xref:System.Windows.DependencyProperty&gt; identifier on your class, you call DependencyProperty directly on your key.</source>
          <target state="translated">Vise den &lt;xref:System.Windows.DependencyProperty&gt;ID for klassen du kaller DependencyProperty direkte i nøkkelen.&lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this value to create a <ph id="ph1">`public static readonly`</ph>&lt;xref:System.Windows.DependencyProperty&gt; identifier on the class, which parallels the &lt;xref:System.Windows.DependencyPropertyKey&gt;.</source>
          <target state="translated">Bruk denne verdien til å opprette en <ph id="ph1">`public static readonly`</ph> &lt;xref:System.Windows.DependencyProperty&gt;identifikator i klassen som parallels &lt;xref:System.Windows.DependencyPropertyKey&gt;.&lt;/xref:System.Windows.DependencyPropertyKey&gt; &lt;/xref:System.Windows.DependencyProperty&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The relevant dependency property identifier.</source>
          <target state="translated">Relevante avhengighet egenskapsidentifikator.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</source>
          <target state="translated">Overstyrer metadataene i en skrivebeskyttet avhengighetsegenskapen som representeres av egenskapsidentifikator denne avhengighet.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</source>
          <target state="translated">Overstyrer metadata på en skrivebeskyttet avhengighetsegenskapen gjøres lignende grunner som overstyrer metadata på en skrivebeskyttet avhengighetsegenskapen og er begrenset til tilgang på key nivå fordi virkemåter som er angitt i metadata kan endre virkemåten sett (standardverdien, for eksempel).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</source>
          <target state="translated">Som med lese-/ avhengighetsegenskaper bør overstyrer metadata på en skrivebeskyttet avhengighetsegenskapen bare gjøres før denne egenskapen er plassert i bruk av egenskapen systemet (dette lik klokkeslettet bestemte forekomster av objekter som registrerer egenskapen startes).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calls to OverrideMetadata should only be performed within the static constructors of the type that provides itself as the <ph id="ph1">`forType`</ph> parameter of this method, or equivalent initialization for that class.</source>
          <target state="translated">Kall til OverrideMetadata kan bare utføres i statiske konstruktører av typen som gir seg selv som den <ph id="ph1">`forType`</ph> -parameteren for denne metoden eller tilsvarende initialisering for denne klassen.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method effectively forwards to the &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt; method, passing the &lt;xref:System.Windows.DependencyPropertyKey&gt; instance as the key parameter.</source>
          <target state="translated">Denne metoden videresender effektivt til den &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;metoden sending av &lt;xref:System.Windows.DependencyPropertyKey&gt;forekomsten som parameteren key.&lt;/xref:System.Windows.DependencyPropertyKey&gt; &lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The type on which this dependency property exists and metadata should be overridden.</source>
          <target state="translated">Typen som denne avhengighetsegenskapen finnes, og metadata skal overstyres.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Metadata supplied for this type.</source>
          <target state="translated">Metadata som er angitt for denne typen.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Attempted metadata override on a read-write dependency property (cannot be done using this signature).</source>
          <target state="translated">Forsøkt metadata override i en skrivebeskyttet avhengighetsegenskapen (kan ikke utføres ved hjelp av denne signaturen).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Metadata was already established for the property as it exists on the provided type.</source>
          <target state="translated">Metadata ble allerede opprettet for egenskapen som det finnes på den angitte typen.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>