<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nb-no">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f98a5f21694485805037062331e61c84ab6c7b89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.CoerceValueCallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de928fc261daaadfc2ef65128adb603e4dd87ffb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8a15d9a78bddc35a28aedda845459834d8a028d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</source>
          <target state="translated">Inneholder en mal for en metode som kalles når en avhengighet egenskapsverdi på nytt evalueres eller rangeringen spesifikt er angitt.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Callbacks based on CoerceValueCallback can be assigned to a dependency property through several different techniques.</source>
          <target state="translated">Tilbakeringinger basert på CoerceValueCallback kan tilordnes til en avhengighet via flere forskjellige teknikker.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these techniques requires that you first create a new property metadata object (&lt;xref:System.Windows.PropertyMetadata&gt;, or a derived class such as &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).</source>
          <target state="translated">Hvert enkelt av disse metodene krever at du først oppretter et nytt egenskapen metadataobjekt (&lt;xref:System.Windows.PropertyMetadata&gt;, eller en avledet som &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create the metadata object using a constructor signature that takes the <ph id="ph1">`coerceValueCallback`</ph> parameter, and assign that parameter to your callback handler.</source>
          <target state="translated">Opprett Metadataobjektet ved hjelp av en konstruktørsignatur som bruker den <ph id="ph1">`coerceValueCallback`</ph> parameter, og tilordne den parameteren tilbakeringing-behandlingsprogram.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or construct the metadata by any signature and set the &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; property prior to putting the metadata in use.</source>
          <target state="translated">Eller konstruere metadataene av noen signatur og angitt av &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;egenskapen før angivelse metadataene i bruk.&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have this metadata, you can:      -   Define a new dependency property on a new class, using either signature of  &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, giving the metadata as the <ph id="ph1">`typeMetadata`</ph> value.</source>
          <target state="translated">Når du har disse metadataene, kan du:-definere en ny avhengighetsegenskapen på en ny klasse, ved hjelp av enten signaturen til &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, gir metadataene som den <ph id="ph1">`typeMetadata`</ph> verdi.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Override the metadata (call &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) for an existing dependency property, when you derive from the class that owns the dependency property.</source>
          <target state="translated">-Overstyre metadataene (kall &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) for en eksisterende avhengighetsegenskapen, når du avledet fra klassen som eier avhengighetsegenskapen.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Add an existing dependency property to a new &lt;xref:System.Windows.DependencyObject&gt; class, using new metadata, by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">-Legg til en eksisterende avhengighetsegenskapen for en ny &lt;xref:System.Windows.DependencyObject&gt;klasse, ved hjelp av nye metadata, ved å kalle &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; &lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations of this callback should check the value in <ph id="ph1">`baseValue`</ph> and determine based on either the value or the type whether this is a value that needs to be further coerced.</source>
          <target state="translated">Implementeringer av denne tilbakeringing skal se verdien <ph id="ph1">`baseValue`</ph> og fastslå basert på verdien eller typen om dette er en verdi som skal konverteres videre.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for a dependency property is invoked any time that the property system or any other caller calls &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt; on a &lt;xref:System.Windows.DependencyObject&gt; instance, specifying that property's identifier as the <ph id="ph1">`dp`</ph>.</source>
          <target state="translated">Den &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;for en avhengighet startes property når som helst som egenskapen systemet eller andre oppkaller kaller &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;på en &lt;xref:System.Windows.DependencyObject&gt;forekomsten ved å angi denne egenskapen identifikator som den <ph id="ph1">`dp`</ph>.&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.CoerceValue%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes to the property value may have come from any possible participant in the property system.</source>
          <target state="translated">Endringer i egenskapsverdi kan ha blitt levert fra alle mulige deltakeren i egenskapen-systemet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</source>
          <target state="translated">Dette omfatter stiler generisk invalidation, utløsere, egenskapen verdien arv og lokal innstillingen.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally you should avoid specifying more than one &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for any given dependency property (overriding or adding with new metadata for a dependency property that already had a &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).</source>
          <target state="translated">Du bør vanligvis ikke angi mer enn ett &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;for en gitt avhengighetsegenskapen (overstyrer eller legge til nye metadata for en avhengighetsegenskapen som allerede er en &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one of the callbacks will be able to act.</source>
          <target state="translated">Bare ett av tilbakeringinger vil kunne brukes.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the &lt;xref:System.Windows.DependencyObject&gt; caller.</source>
          <target state="translated">Fungerer tilbakekallingen blir den som ble brukt på den mest utledede klassen i arv enn den &lt;xref:System.Windows.DependencyObject&gt;oppkalleren.&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</source>
          <target state="translated">Andre tilbakeringinger som tilordnes til metadata for avhengighetsegenskapen som det fantes høyere i hierarkiet eieren erstattes når metadataene overstyres.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>