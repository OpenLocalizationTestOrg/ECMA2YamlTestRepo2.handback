<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-pt">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac9498873469daff17ad3b38bfa9cf967028530a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.InteropServices.ICustomMarshaler.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">213a6099db9f52670cebea5a2dbbccb2b08631ba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d826986e297e5e712358c7a49dc0ecaf8dc024fa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides custom wrappers for handling method calls.</source>
          <target state="translated">Fornece wrappers personalizados para processar as chamadas de método.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A marshaler provides a bridge between the functionality of old and new interfaces.</source>
          <target state="translated">Um empacotador de referências fornece uma ponte entre as funcionalidades do antigo e novo interfaces.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom marshaling provides the following benefits:      -   It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</source>
          <target state="translated">Empacotamento de referências personalizado fornece as seguintes vantagens:-permite que aplicações cliente que foram concebidas para funcionarem com uma interface antiga também funcionar com servidores que implementam uma nova interface.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   It enables client applications built to work with a new interface to work with servers that implement an old interface.</source>
          <target state="translated">-Permite que aplicações de cliente criadas de modo a trabalhar com uma nova interface de trabalhar com servidores que implementam uma interface antiga.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</source>
          <target state="translated">Se tiver uma interface que apresenta o comportamento de empacotamento de referências diferente ou que é exposto para o modelo de objeto do componente (COM) de forma diferente, pode conceber um empacotador de referências personalizado em vez de utilizar o empacotador de referências de interoperabilidade.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</source>
          <target state="translated">Ao utilizar um empacotador de referências personalizado, pode minimizar a distinção entre novos componentes de .NET Framework e componentes COM existentes.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, suppose that you are developing a managed interface called <ph id="ph1">`INew`</ph>.</source>
          <target state="translated">Por exemplo, suponha que estiver a desenvolver uma interface gerida chamada <ph id="ph1">`INew`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</source>
          <target state="translated">Quando esta interface está exposta a COM através de um padrão COM possível chamar EndRead papel de embrulho (CCW), tem os mesmos métodos de que a interface gerida e utiliza as empacotamento de referências regras incorporadas no empacotador de referências de interoperabilidade.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Now suppose that a well-known COM interface called <ph id="ph1">`IOld`</ph> already provides the same functionality as the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">Agora, suponha que chama uma interface COM conhecidos <ph id="ph1">`IOld`</ph> já fornece a mesma funcionalidade que o <ph id="ph2">`INew`</ph> interface.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>By designing a custom marshaler, you can provide an unmanaged implementation of <ph id="ph1">`IOld`</ph> that simply delegates the calls to the managed implementation of the <ph id="ph2">`INew`</ph> interface.</source>
          <target state="translated">Ao conceber um empacotador de referências personalizado, pode fornecer uma implementação de não gerida <ph id="ph1">`IOld`</ph> que delega simplesmente as chamadas para a implementação de gerido a <ph id="ph2">`INew`</ph> interface.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</source>
          <target state="translated">Por conseguinte, o empacotador de referências personalizado atua como uma ponte entre as interfaces geridas e não geridas.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Os empacotadores de referências personalizados não são invocados quando chamar de geridos de código de código gerido para uma interface de só de envio.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Defining the Marshaling Type    Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</source>
          <target state="translated">Definir o empacotamento de referências tipo antes de pode criar um empacotador de referências personalizado, tem de definir as interfaces geridas e não geridas que serão possível empacotar as referências.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</source>
          <target state="translated">Estas interfaces normalmente efetuam a mesma função, mas são expostas de forma diferente, para objetos geridos e.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</source>
          <target state="translated">Um compilador gerido produz uma interface gerida de metadados e a interface resultante aspeto quaisquer outro interface gerida.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows a typical interface.</source>
          <target state="translated">O exemplo seguinte mostra uma interface comum.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept><ept id="p5">]</ept>       You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#1<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb)</ept> <ept id="p5">]</ept> definir o tipo não gerido na linguagem de definição de Interface (IDL) e compilá-la com o compilador de linguagem de definição de Interface do Microsoft (MIDL).    </target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</source>
          <target state="translated">Predefinir a interface dentro de uma instrução de biblioteca e atribua-lhe um ID de interface com o atributo de identificador exclusivo universal (UUID), como o exemplo seguinte demonstra.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>       The MIDL compiler produces several output files.</source>
          <target state="translated"><ph id="ph1">```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```</ph>O compilador MIDL produz vários ficheiros de saída.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the interface is defined in Old.idl, the output file Old_i.c defines a <ph id="ph1">`const`</ph> variable with the interface identifier (IID) of the interface, as the following example demonstrates.</source>
          <target state="translated">Se a interface está definida no Old.idl, o ficheiro de saída Old_i.c define um <ph id="ph1">`const`</ph> variável com o identificador de interface (IID) da interface, o exemplo seguinte demonstra.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>       The Old.h file is also produced by MIDL.</source>
          <target state="translated"><ph id="ph1">```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```</ph>O ficheiro Old.h também é produzido pelo MIDL.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>It contains a C++ definition of the interface that can be included in your C++ source code.</source>
          <target state="translated">Contém uma definição de C++ da interface que pode ser incluída no seu código de origem do C++.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementing the ICustomMarshaler Interface    Your custom marshaler must implement the ICustomMarshaler interface to provide the appropriate wrappers to the runtime.</source>
          <target state="translated">Implementar a sua de Interface ICustomMarshaler empacotador de referências personalizado tem de implementar a interface ICustomMarshaler para fornecer os wrappers adequados para o tempo de execução.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following C# code displays the base interface that must be implemented by all custom marshalers.</source>
          <target state="translated">O seguinte código c# apresenta a interface de base tem de ser implementada por todos os empacotadores de referências personalizados.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept><ept id="p5">]</ept>       The ICustomMarshaler interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#2<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb)</ept> <ept id="p5">]</ept> ICustomMarshaler a interface inclui métodos que fornecem suporte à conversão, suporte de limpeza e informações sobre os dados de referências.    </target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>|Type of operation|ICustomMarshaler method|Description|   |-----------------------|-----------------------------|-----------------|   |Conversion (from native to managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;|Marshals a pointer to native data into a managed object.</source>
          <target state="translated">| Tipo de operação | Método de ICustomMarshaler | Descrição |   |-----------------------|-----------------------------|-----------------|   | Conversão (a partir de nativo para código gerido) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;| Marshals um ponteiro para dados de nativos para um objeto gerido.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">Este método devolve um wrapper de possível chamar EndRead runtime personalizado (RCW), que pode empacotar referências a interface não gerida que é transmitida como um argumento.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom RCW for that type.|   |Conversion (from managed to native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;|Marshals a managed object into a pointer to native data.</source>
          <target state="translated">O empacotador de referências deve devolver uma instância do RCW personalizado para esse tipo. |   | Conversão (a partir do código gerido ao nativo) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;| Marshals um objeto gerido para um ponteiro para dados nativos.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">Este método devolve um COM possível chamar EndRead wrapper personalizados (CCW) que pode empacotar referências a interface gerida que é transmitida como um argumento.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom CCW for that type.|   |Cleanup (of native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;|Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.|   |Cleanup (of managed code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;|Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.|   |Information (about native code)|&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;|Returns the size of the unmanaged data to be marshaled.|      ### Conversion    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;       Marshals a pointer to native data into a managed object.</source>
          <target state="translated">O empacotador de referências deve devolver uma instância do CCW personalizado para esse tipo. |   | Limpar (de código nativo) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;| Permite o empacotador de referências limpar os dados de nativos (o CCW) que são devolvidos pelo método &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;. |   | Limpar (de código gerido) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt;| Permite o empacotador de referências limpar os dados geridos (o RCW) que são devolvidos pelo método &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;. |   | Informações (sobre código nativo) | &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt;| Devolve o tamanho dos dados não geridos a possível empacotar as referências. |      # # # Conversão &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt;Marshals um ponteiro para dados de nativos para um objeto gerido.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</source>
          <target state="translated">Este método devolve um wrapper de possível chamar EndRead runtime personalizado (RCW), que pode empacotar referências a interface não gerida que é transmitida como um argumento.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom RCW for that type.</source>
          <target state="translated">O empacotador de referências deve devolver uma instância do RCW personalizado para esse tipo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;       Marshals a managed object into a pointer to native data.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;Marshals um objeto gerido para um ponteiro para dados nativos.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</source>
          <target state="translated">Este método devolve um COM possível chamar EndRead wrapper personalizados (CCW) que pode empacotar referências a interface gerida que é transmitida como um argumento.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The marshaler should return an instance of the custom CCW for that type.</source>
          <target state="translated">O empacotador de referências deve devolver uma instância do CCW personalizado para esse tipo.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cleanup    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the native data (the CCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; method.</source>
          <target state="translated">Limpeza &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;permite o empacotador de referências limpar os dados de nativos (o CCW) que são devolvidos pelo &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;método.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;       Enables the marshaler to clean up the managed data (the RCW) that is returned by the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; method.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;Permite o empacotador de referências limpar os dados geridos (o RCW) que são devolvidos pelo &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;método.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Size Information    &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;       Returns the size of the unmanaged data to be marshaled.</source>
          <target state="translated">Informações de tamanho &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;devolve o tamanho dos dados não geridos a possível empacotar as referências.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementing the GetInstance Method    In addition to implementing the ICustomMarshaler interface, custom marshalers must implement a <ph id="ph1">`static`</ph> method called <ph id="ph2">`GetInstance`</ph> that accepts a &lt;xref:System.String&gt; as a parameter and has a return type of ICustomMarshaler.</source>
          <target state="translated">Implementar o método GetInstance para além de implementar a interface ICustomMarshaler, os empacotadores de referências personalizados tem de implementar um <ph id="ph1">`static`</ph> método chamado <ph id="ph2">`GetInstance`</ph> que aceita um &lt;xref:System.String&gt;como um parâmetro e tem um tipo de retorno de ICustomMarshaler.&lt;/xref:System.String&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`static`</ph> method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</source>
          <target state="translated">Isto <ph id="ph1">`static`</ph> método é denominado pela camada de interoperabilidade COM o runtime idioma comum ao instanciar a uma instância do empacotador de referências personalizado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The string that is passed to <ph id="ph1">`GetInstance`</ph> is a cookie that the method can use to customize the returned custom marshaler.</source>
          <target state="translated">A cadeia que é transmitida ao <ph id="ph1">`GetInstance`</ph> é um cookie que pode utilizar o método para personalizar o empacotador de referências personalizado devolvido.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph>      ## Applying MarshalAsAttribute    To use a custom marshaler, you must apply the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute to the parameter or field that is being marshaled.</source>
          <target state="translated"><ph id="ph1">```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```</ph># # Aplicar MarshalAsAttribute para utilizar um empacotador de referências personalizado, tem de aplicar o &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;atributo para o parâmetro ou o campo que está a ser empacotado.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must also pass the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;constructor.</source>
          <target state="translated">Tem de passar também o &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;valor de enumeração para a &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;construtor.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; &lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you must specify the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field with one of the following named parameters:      -   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; (required): The assembly-qualified name of the custom marshaler.</source>
          <target state="translated">Além disso, tem de especificar o &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;campo com um dos seguintes parâmetros nomeados:- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;(obrigatório): O nome completamente qualificado do empacotador de referências personalizado.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The name should include the namespace and class of the custom marshaler.</source>
          <target state="translated">O nome deve incluir o espaço de nomes e a classe de empacotador de referências personalizado.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</source>
          <target state="translated">O empacotador de referências personalizado não está definido na assemblagem que é utilizado, tem de especificar o nome da assemblagem no qual está definido.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph>     &gt;  You can use the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; field instead of the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Pode utilizar o &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;campo em vez do &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;campo.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt; takes a type that is easier to specify.</source>
          <target state="translated">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;cria um tipo que seja mais fácil especificar.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt; (optional): A cookie that is passed to the custom marshaler.</source>
          <target state="translated">- &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;(opcional): um cookie que é transferido para o empacotador de referências personalizado.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the cookie to provide additional information to the marshaler.</source>
          <target state="translated">Pode utilizar o cookie para fornecer informações adicionais para o empacotador de referências.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</source>
          <target state="translated">Por exemplo, se for utilizado o mesmo empacotador de referências para fornecer um número de wrappers, o cookie identifica um wrapper específico.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cookie is passed to the <ph id="ph1">`GetInstance`</ph> method of the marshaler.</source>
          <target state="translated">O cookie é transmitido para o <ph id="ph1">`GetInstance`</ph> método do empacotador de referências.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute identifies the custom marshaler so it can activate the appropriate wrapper.</source>
          <target state="translated">O &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;atributo identifica o empacotador de referências personalizado, pelo que pode ativar o wrapper de adequado.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</source>
          <target state="translated">Serviço de interoperabilidade do language runtime, em seguida, examina o atributo e cria o tempo de empacotador de referências personalizado o primeiro o argumento (parâmetro ou campo) tem de ser empacotado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>The runtime then calls the &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt; and &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; methods on the custom marshaler to activate the correct wrapper to handle the call.</source>
          <target state="translated">O tempo de execução, em seguida, chama o &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;e &lt;xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt;métodos em empacotador de referências personalizado para ativar o wrapper de correto para processar a chamada.&lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A&gt; &lt;/xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a Custom Marshaler    When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</source>
          <target state="translated">A utilização de um empacotador de referências personalizado quando a empacotador de referências personalizado é concluída, pode utilizá-lo como um wrapper personalizados para um determinado tipo.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example shows the definition of the <ph id="ph1">`IUserData`</ph> managed interface:       <bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept><ept id="p5">]</ept>       In the following example, the <ph id="ph2">`IUserData`</ph> interface uses the <ph id="ph3">`NewOldMarshaler`</ph> custom marshaler to enable unmanaged client applications to pass an <ph id="ph4">`IOld`</ph> interface to the <ph id="ph5">`DoSomeStuff`</ph> method.</source>
          <target state="translated">O exemplo seguinte mostra a definição do <ph id="ph1">`IUserData`</ph> interface gerida: <bpt id="p1">[!code-cpp</bpt> <bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#3<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb)</ept> <ept id="p5">]</ept> no exemplo seguinte, o <ph id="ph2">`IUserData`</ph> interface utiliza o <ph id="ph3">`NewOldMarshaler`</ph> empacotador de referências personalizado para ativar as aplicações de cliente não geridos passar uma <ph id="ph4">`IOld`</ph> interface para o <ph id="ph5">`DoSomeStuff`</ph> método.    </target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>The managed description of the <ph id="ph1">`DoSomeStuff`</ph> method takes an <ph id="ph2">`INew`</ph> interface, as shown in the previous example, whereas the unmanaged version of <ph id="ph3">`DoSomeStuff`</ph> takes an <ph id="ph4">`IOld`</ph> interface pointer, as shown in the following example.</source>
          <target state="translated">A descrição da gerido a <ph id="ph1">`DoSomeStuff`</ph> método um <ph id="ph2">`INew`</ph> interface, conforme mostrado no exemplo anterior, enquanto que a versão não gerida da <ph id="ph3">`DoSomeStuff`</ph> demora um <ph id="ph4">`IOld`</ph> apontador de interface, conforme mostrado no exemplo seguinte.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>       The type library that is generated by exporting the managed definition of <ph id="ph2">`IUserData`</ph> yields the unmanaged definition shown in this example instead of the standard definition.</source>
          <target state="translated"><ph id="ph1">```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```</ph>A biblioteca de tipos que é gerada através da exportação definição gerida do <ph id="ph2">`IUserData`</ph> gera a definição não gerida mostrada neste exemplo, em vez da definição do padrão.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute applied to the <ph id="ph1">`INew`</ph> argument in the managed definition of the <ph id="ph2">`DoSomeStuff`</ph> method indicates that the argument uses a custom marshaler, as the following example shows.</source>
          <target state="translated">O &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;atributo aplicado para o <ph id="ph1">`INew`</ph> argumento na definição gerida do <ph id="ph2">`DoSomeStuff`</ph> método indica que o argumento utiliza um empacotador de referências personalizado, como o seguinte exemplo mostra.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept>       <bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept>  <bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept>  <bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept><ept id="p11">]</ept>       In the previous examples, the first parameter provided to the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt; attribute is the &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; enumeration value <ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>.</source>
          <target state="translated"><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p2">](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cs</bpt><bpt id="p4">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p4">](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)</ept><ept id="p3">]</ept><bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#4<ept id="p6">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)</ept><ept id="p5">]</ept><bpt id="p7">[!code-cpp</bpt><bpt id="p8">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p8">](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)</ept><ept id="p7">]</ept><bpt id="p9">[!code-cs</bpt><bpt id="p10">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p10">](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)</ept><ept id="p9">]</ept><bpt id="p11">[!code-vb</bpt><bpt id="p12">[</bpt>System.Runtime.InteropServices.ICustomMarshaler#5<ept id="p12">](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb)</ept> <ept id="p11">]</ept> nos exemplos anteriores, o primeiro parâmetro fornecido para o &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;atributo é a &lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;valor de enumeração <ph id="ph1">`UnmanagedType.CustomMarshaler`</ph>.&lt;/xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt; &lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;               </target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second parameter is the &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt; field, which provides the assembly-qualified name of the custom marshaler.</source>
          <target state="translated">O segundo parâmetro é o &lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;campo, o que fornece o nome completamente qualificado do empacotador de referências personalizado.&lt;/xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This name consists of the namespace and class of the custom marshaler (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>).</source>
          <target state="translated">Este nome é constituído pelo espaço de nomes e a classe de empacotador de referências personalizado (<ph id="ph1">`MarshalType="MyCompany.NewOldMarshaler"`</ph>).</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the managed data when it is no longer needed.</source>
          <target state="translated">Executa necessária limpeza dos dados geridos quando este já não é necessário.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The managed object to be destroyed.</source>
          <target state="translated">O objeto gerido para ser destruída.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Performs necessary cleanup of the unmanaged data when it is no longer needed.</source>
          <target state="translated">Executa necessária limpeza dos dados não geridos quando este já não é necessário.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be destroyed.</source>
          <target state="translated">Um apontador para os dados não geridos para ser destruída.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Returns the size of the native data to be marshaled.</source>
          <target state="translated">Devolve o tamanho dos dados de nativos para possível empacotar as referências.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the native data.</source>
          <target state="translated">O tamanho, em bytes, dos dados de nativos.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Converts the managed data to unmanaged data.</source>
          <target state="translated">Converte os dados geridos dados não geridos.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The managed object to be converted.</source>
          <target state="translated">O objeto gerido a converter.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A pointer to the COM view of the managed object.</source>
          <target state="translated">Um apontador para a vista de COM do objeto gerido.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Converts the unmanaged data to managed data.</source>
          <target state="translated">Converte dados geridos os dados não geridos.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A pointer to the unmanaged data to be wrapped.</source>
          <target state="translated">Um apontador para os dados não geridos a ser encapsulada.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that represents the managed view of the COM data.</source>
          <target state="translated">Um objeto que representa a vista dos dados COM gerido.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>