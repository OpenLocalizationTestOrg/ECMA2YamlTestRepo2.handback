<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-pt">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9471ecf37d14e3c9866cdceab3911bc1e16e81d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Threading.Dispatcher.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1ba75c6776009c08979bc9c0c805a47cac363df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1749f49a8457313de1aebbbb85b52e79efa4befd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides services for managing the queue of work items for a thread.</source>
          <target state="translated">Fornece serviços para gerir a fila de itens de trabalho de um thread.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispatcher maintains a prioritized queue of work items for a specific thread.</source>
          <target state="translated">O Dispatcher mantém uma fila prioritários de itens de trabalho de um thread específico.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a Dispatcher is created on a thread, it becomes the only Dispatcher that can be associated with the thread, even if the Dispatcher is shut down.</source>
          <target state="translated">Quando um distribuidor é criado num thread, torna-se o distribuidor apenas que pode ser associado ao thread, mesmo que o emissor foi encerrado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to get the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; for the current thread and a Dispatcher is not associated with the thread, a Dispatcher will be created.</source>
          <target state="translated">Se tentar obter o &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;para o thread actual e um distribuidor não está associado o thread, será criado um Dispatcher.&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Dispatcher is also created when you create a &lt;xref:System.Windows.Threading.DispatcherObject&gt;.</source>
          <target state="translated">Um distribuidor também é criado quando cria um &lt;xref:System.Windows.Threading.DispatcherObject&gt;.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create a Dispatcher on a background thread, be sure to shut down the dispatcher before exiting the thread.</source>
          <target state="translated">Se criar um distribuidor no thread de segundo plano, não se esqueça de encerrar o distribuidor antes de sair do thread.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a Dispatcher is shut down, it cannot be restarted.</source>
          <target state="translated">Se um distribuidor está a ser encerrado, não podendo ser reiniciada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, a &lt;xref:System.Windows.Threading.DispatcherObject&gt; can only be accessed by the Dispatcher it is associated with.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, um &lt;xref:System.Windows.Threading.DispatcherObject&gt;só pode ser acedido pelo emissor que está associada.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that is associated with the Dispatcher on the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que se encontra associado o Dispatcher no <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the Dispatcher associated with the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;propriedade o &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o emissor associado a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.&lt;/xref:System.Windows.Controls.Button&gt; &lt;/xref:System.Windows.Controls.ContentControl.Content%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the queue of the Dispatcher at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de emissor em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a Dispatcher that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;denomina-se num distribuidor que foi encerrado, a propriedade de estado de devolvido &lt;xref:System.Windows.Threading.DispatcherOperation&gt;está definido como &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>All of the methods on Dispatcher, with the exception of &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, are free-threaded.</source>
          <target state="translated">Todos os métodos no distribuidor, com exceção do &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, são free-threaded.&lt;/xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from &lt;xref:System.Windows.Threading.DispatcherObject&gt; have thread affinity.</source>
          <target state="translated">Objetos que derivem de &lt;xref:System.Windows.Threading.DispatcherObject&gt;têm afinidade de threads.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from &lt;xref:System.Windows.Freezable&gt; are free-threaded when they are frozen.</source>
          <target state="translated">Objetos que derivem de &lt;xref:System.Windows.Freezable&gt;são free-threaded quando estes são interrompidas.&lt;/xref:System.Windows.Freezable&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Para obter mais informações, consulte <bpt id="p1">[</bpt>descrição geral de objetos Freezable<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">Executa o delegado especificado no modo assíncrono com os argumentos especificados no thread que o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> foi criado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objecto devolvido por &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;pode ser utilizado em várias formas para interagir com o delegado especificado, tais como: - alteração o &lt;xref:System.Windows.Threading.DispatcherPriority&gt;do delegado porque está pendente execução de eventos da fila.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Remover o delegado de fila de eventos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-A aguardar que o delegado devolver.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Obter o valor que o delegado devolve após-é executado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona; Por conseguinte, controlo devolve imediatamente para o objeto de chamar após é chamado.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é chamado um &lt;xref:System.Windows.Threading.Dispatcher&gt;que foi encerrado, a propriedade de estado de devolvido &lt;xref:System.Windows.Threading.DispatcherOperation&gt;está definido como &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">O delegado para um método que utiliza os parâmetros especificados na <ph id="ph1">`args`</ph>, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Um objeto, que é devolvido imediatamente após &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;denomina-se, que pode ser utilizado para interagir com o delegado como está pendente de execução de eventos fila.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado no modo assíncrono com a prioridade especificado no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple BeginInvoke calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Se várias chamadas de BeginInvoke são efetuadas em simultâneo &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, estes serão executados pela ordem as chamadas efetuadas.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;Devolve um &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objeto que pode ser utilizado para interagir com o delegado quando o delegado de eventos é a fila.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objecto devolvido por &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;pode ser utilizado em várias formas para interagir com o delegado especificado, tais como: - alteração o &lt;xref:System.Windows.Threading.DispatcherPriority&gt;do delegado porque está pendente execução de eventos da fila.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Remover o delegado de fila de eventos.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-A aguardar que o delegado devolver.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Obter o valor que o delegado devolve após-é executado.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona; Por conseguinte, controlo devolve imediatamente para o objeto de chamar após é chamado.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é chamado um &lt;xref:System.Windows.Threading.Dispatcher&gt;que foi encerrado, a propriedade de estado de devolvido &lt;xref:System.Windows.Threading.DispatcherOperation&gt;está definido como &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">O delegado para um método que não necessita de nenhum argumentos, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Um objeto, que é devolvido imediatamente após &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;denomina-se, que pode ser utilizado para interagir com o delegado como está pendente de execução de eventos fila.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é um <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">Executa o delegado especificado no modo assíncrono com os argumentos especificados, com a prioridade especificada, no thread que o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> foi criado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objecto devolvido por &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;pode ser utilizado em várias formas para interagir com o delegado especificado, tais como: - alteração o &lt;xref:System.Windows.Threading.DispatcherPriority&gt;do delegado porque está pendente execução de eventos da fila.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Remover o delegado de fila de eventos.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-A aguardar que o delegado devolver.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Obter o valor que o delegado devolve após-é executado.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona; Por conseguinte, controlo devolve imediatamente para o objeto de chamar após é chamado.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é chamado um &lt;xref:System.Windows.Threading.Dispatcher&gt;que foi encerrado, a propriedade de estado de devolvido &lt;xref:System.Windows.Threading.DispatcherOperation&gt;está definido como &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">O delegado para um método que utiliza os parâmetros especificados na <ph id="ph1">`args`</ph>, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Um objeto, que é devolvido imediatamente após &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;denomina-se, que pode ser utilizado para interagir com o delegado como está pendente de execução de eventos fila.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado de forma assíncrona com a prioridade especificada e com o argumento especificado no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>pode ser <ph id="ph2">`null`</ph> se forem necessárias sem argumentos.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;Devolve um &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objeto que pode ser utilizado para interagir com o delegado quando o delegado de eventos é a fila.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objecto devolvido por &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;pode ser utilizado em várias formas para interagir com o delegado especificado, tais como: - alteração o &lt;xref:System.Windows.Threading.DispatcherPriority&gt;do delegado porque está pendente execução de eventos da fila.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Remover o delegado de fila de eventos.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-A aguardar que o delegado devolver.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Obter o valor que o delegado devolve após-é executado.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona; Por conseguinte, controlo devolve imediatamente para o objeto de chamar após é chamado.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Se vários &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;as chamadas são efetuadas em simultâneo &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, estes serão executados pela ordem as chamadas efetuadas.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é chamado um &lt;xref:System.Windows.Threading.Dispatcher&gt;que foi encerrado, a propriedade de estado de devolvido &lt;xref:System.Windows.Threading.DispatcherOperation&gt;está definido como &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um método que assume um argumento, o que é feito por um delegado a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">O objeto para passar como um argumento para o método especificado.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Um objeto, que é devolvido imediatamente após &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;denomina-se, que pode ser utilizado para interagir com o delegado como está pendente de execução de eventos fila.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é um <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado no modo assíncrono com a prioridade especificada e com a matriz de argumentos especificada no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`arg`</ph> parameter can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated">O <ph id="ph1">`arg`</ph> parâmetro pode ser <ph id="ph2">`null`</ph> se forem necessárias sem argumentos.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;Devolve um &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objeto que pode ser utilizado para interagir com o delegado quando o delegado de eventos é a fila.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.DispatcherOperation&gt;objecto devolvido por &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;pode ser utilizado em várias formas para interagir com o delegado especificado, tais como: - alteração o &lt;xref:System.Windows.Threading.DispatcherPriority&gt;do delegado porque está pendente execução de eventos da fila.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Remover o delegado de fila de eventos.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-A aguardar que o delegado devolver.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Obter o valor que o delegado devolve após-é executado.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona; Por conseguinte, controlo devolve imediatamente para o objeto de chamar após é chamado.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Se vários &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;as chamadas são efetuadas em simultâneo &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, estes serão executados pela ordem as chamadas efetuadas.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é chamado um &lt;xref:System.Windows.Threading.Dispatcher&gt;que foi encerrado, a propriedade de estado de devolvido &lt;xref:System.Windows.Threading.DispatcherOperation&gt;está definido como &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado a um método que demora vários argumentos, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">O objeto para passar como um argumento para o método especificado.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">Um objeto, que é devolvido imediatamente após &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;denomina-se, que pode ser utilizado para interagir com o delegado como está pendente de execução no <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not a valid priority.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Não é uma prioridade válida.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Initiates shutdown of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> asynchronously.</source>
          <target state="translated">Inicia o encerramento do <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> no modo assíncrono.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>BeginInvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">BeginInvokeShutdown exige permissões de IU sem restrições.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o &lt;xref:System.Windows.Threading.Dispatcher&gt;começa a encerrar o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;o evento é gerado e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;está definido como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher&gt;não será encerrado completamente até que a fila de eventos unwinds.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o distribuidor conclui a ser encerrado, o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;o evento é gerado e o &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;propriedade está definida como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Depois de iniciar o processo de encerramento, todas as pendentes trabalho itens na fila foram abortadas.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The priority at which to begin shutting down the dispatcher.</source>
          <target state="translated">A prioridade no qual pretende começar a encerrar o dispatcher.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread is the thread associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Determina se o thread de chamada de thread associado a este <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the &lt;xref:System.Windows.Threading.Dispatcher&gt; that a &lt;xref:System.Windows.Threading.DispatcherObject&gt; is created on may access the object.</source>
          <target state="translated">Apenas o &lt;xref:System.Windows.Threading.Dispatcher&gt;que um &lt;xref:System.Windows.Threading.DispatcherObject&gt;é criado no pode aceder ao objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; to access the object from a different thread.</source>
          <target state="translated">Utilize &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;para aceder ao objeto a partir de um thread diferente.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>CheckAccess can be called from any thread.</source>
          <target state="translated">CheckAccess pode ser chamado a partir de qualquer thread.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between CheckAccess and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; is CheckAccess returns a Boolean indicating whether the calling thread has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; throws an exception.</source>
          <target state="translated">A diferença entre CheckAccess e &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;é CheckAccess devolve um valor boleano que indica se o thread de chamada tem acesso para o &lt;xref:System.Windows.Threading.Dispatcher&gt;e &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;emite uma exceção.&lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the calling thread is the thread associated with this <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o thread de chamada é o thread associado a este <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>; caso contrário, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the thread currently executing and creates a new <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if one is not already associated with the thread.</source>
          <target state="translated">Obtém o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> para o thread atualmente em execução e cria um novo <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> se já não estiver associado o thread.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Windows.Threading.Dispatcher&gt; is not associated with the current thread, a new &lt;xref:System.Windows.Threading.Dispatcher&gt; will be created.</source>
          <target state="translated">Se um &lt;xref:System.Windows.Threading.Dispatcher&gt;não está associada ao thread actual, um novo &lt;xref:System.Windows.Threading.Dispatcher&gt;será criada.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is not the case with the &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; method.</source>
          <target state="translated">Não é o caso do &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;método.&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; will return <ph id="ph1">`null`</ph> if there is not a dispatcher associated with the specified thread.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;irá devolver <ph id="ph1">`null`</ph> se não houver um distribuidor associado ao thread especificado.&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The dispatcher associated with the current thread.</source>
          <target state="translated">O dispatcher associado ao thread actual.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Disables processing of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">Desativa o processamento do <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</source>
          <target state="translated">Desativar o processamento do emissor é um método avançado que se destina a eliminar a possibilidade de reentrancy relacionado com.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The effects of disabling processing are as follows:      -   <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> locks will not pump messages internally.</source>
          <target state="translated">Os efeitos da desativação de processamento são os seguintes:- <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> bloqueios serão não pump mensagens internamente.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.Threading.DispatcherFrame&gt; objects are not allowed to be pushed.</source>
          <target state="translated">- &lt;xref:System.Windows.Threading.DispatcherFrame&gt;Objetos não são permitidos para ser enviado.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Message processing is not permitted.</source>
          <target state="translated">-O processamento da mensagem não é permitido.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure that DisableProcessing returns when it is called can be used to re-enable dispatcher processing.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;estrutura DisableProcessing devolve quando é chamado pode ser utilizada para voltar a ativar o processamento do emissor.&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure re-enables processing.</source>
          <target state="translated">Chamar &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;no &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;estrutura novamente permite o processamento.&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; &lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>DisableProcessing can only be called on the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is associated with.</source>
          <target state="translated">DisableProcessing só pode ser chamado no thread de &lt;xref:System.Windows.Threading.Dispatcher&gt;está associado.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A structure used to re-enable dispatcher processing.</source>
          <target state="translated">Uma estrutura utilizada para voltar a ativar o processamento do emissor.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requests that all frames exit, including nested frames.</source>
          <target state="translated">Pedidos de que todos os fotogramas sair, incluindo frames aninhadas.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the specified thread.</source>
          <target state="translated">Obtém o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> para o thread especificado.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dispatcher is not available for the specified thread, <ph id="ph1">`null`</ph> will be returned.</source>
          <target state="translated">Se o distribuidor não está disponível para o thread especificado, <ph id="ph1">`null`</ph> vai ser devolvido.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>FromThread does not create a &lt;xref:System.Windows.Threading.Dispatcher&gt; on a thread that does not have a &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">FromThread não cria um &lt;xref:System.Windows.Threading.Dispatcher&gt;num thread que não tem um &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on a thread that does not already have a &lt;xref:System.Windows.Threading.Dispatcher&gt; when attempting to get the &lt;xref:System.Windows.Threading.Dispatcher&gt; by using the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; property.</source>
          <target state="translated">Um novo &lt;xref:System.Windows.Threading.Dispatcher&gt;é criado num thread que ainda não tiver um &lt;xref:System.Windows.Threading.Dispatcher&gt;ao tentar obter o &lt;xref:System.Windows.Threading.Dispatcher&gt;utilizando o &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;propriedade.&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The thread to obtain the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from.</source>
          <target state="translated">O thread para obter o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> do.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The dispatcher for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">thread</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">O dispatcher para <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">thread</ph> <ept id="p1">&lt;/code&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has finished shutting down.</source>
          <target state="translated">Determina se o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> terminou a encerrar.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o &lt;xref:System.Windows.Threading.Dispatcher&gt;começa a encerrar o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;o evento é gerado e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;está definido como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher&gt;não encerramento completamente até que a fila de eventos unwinds.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the HasShutdownFinished property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o distribuidor conclui a ser encerrado, o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;o evento é gerado e a propriedade HasShutdownFinished está definida como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Depois de iniciar o processo de encerramento, todas as pendentes trabalho itens na fila foram abortadas.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dispatcher has finished shutting down; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o dispatcher concluiu a encerrar; caso contrário, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is shutting down.</source>
          <target state="translated">Determina se o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está a encerrar.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and HasShutdownStarted is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o &lt;xref:System.Windows.Threading.Dispatcher&gt;começa a encerrar o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;o evento é gerado e HasShutdownStarted está definido como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher&gt;não será encerrado completamente até que a fila de eventos unwinds.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o distribuidor conclui a ser encerrado, o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;o evento é gerado e o &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;propriedade está definida como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Depois de iniciar o processo de encerramento, todas as pendentes trabalho itens na fila foram abortadas.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has started shutting down; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se o <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> iniciou-se para baixo; caso contrário, a encerrar <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets the collection of hooks that provide additional event information about the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Obtém a coleção de hooks que fornecem informações sobre eventos adicionais sobre o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherHooks&gt; class provides additional event information about the &lt;xref:System.Windows.Threading.Dispatcher&gt;, such as when the &lt;xref:System.Windows.Threading.Dispatcher&gt; is inactive or when an operation has competed.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.DispatcherHooks&gt;classe fornece informações sobre eventos adicionais sobre o &lt;xref:System.Windows.Threading.Dispatcher&gt;, tais como o &lt;xref:System.Windows.Threading.Dispatcher&gt;está inativo ou quando uma operação tem competed.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.DispatcherHooks&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The hooks associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Hooks associadas a este <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa especificado &lt;xref:System.Action&gt;forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Um delegado invocar através do distribuidor.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa especificado &lt;xref:System.Action&gt;em sincronia com a prioridade especificada no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Um delegado invocar através do distribuidor.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A prioridade que determina a ordem pela qual a chamada de retorno especificada é invocada relativo as outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado com os argumentos especificados de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado para um método que utiliza os parâmetros especificados na <ph id="ph1">`args`</ph>, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority on the thread on which the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado em sincronia com a prioridade especificado no thread no qual o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado a um método que não necessita de nenhum argumentos, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>é igual ao <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é uma prioridade válida.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa especificado &lt;xref:System.Action&gt;em sincronia com a prioridade especificada no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Um delegado invocar através do distribuidor.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A prioridade que determina a ordem pela qual a chamada de retorno especificada é invocada relativo as outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Um objeto que indica se deve cancelar a ação.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado dentro do intervalo de tempo designado com a prioridade especificado com os argumentos especificados de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado para um método que utiliza os parâmetros especificados na <ph id="ph1">`args`</ph>, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">A quantidade máxima de tempo a aguardar a conclusão da operação.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado com a prioridade especificado com os argumentos especificados de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado para um método que utiliza os parâmetros especificados na <ph id="ph1">`args`</ph>, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado com a prioridade especificada com o argumento especificado de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>pode ser <ph id="ph2">`null`</ph> se um argumento não é necessária no <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um método que assume um argumento, o que é feito por um delegado a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Um objeto para passar como um argumento para o método especificado.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>é igual ao <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é uma prioridade válida.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created.</source>
          <target state="translated">Executa o delegado especificado em sincronia com a prioridade especificada e com o valor de limite de tempo especificado no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> foi criado.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">O tempo máximo para aguardar a conclusão da operação.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">O delegado para um método que não necessita de nenhum argumentos, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa especificado &lt;xref:System.Action&gt;em sincronia com a prioridade especificada no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Um delegado invocar através do distribuidor.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A prioridade que determina a ordem pela qual a chamada de retorno especificada é invocada relativo as outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Um objeto que indica se deve cancelar a ação.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The minimum amount of time to wait for the operation to start.</source>
          <target state="translated">A quantidade mínima de tempo de espera para a operação iniciar.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado dentro do intervalo de tempo designado com a prioridade especificado com os argumentos especificados de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado para um método que utiliza os parâmetros especificados na <ph id="ph1">`args`</ph>, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">A quantidade máxima de tempo a aguardar a conclusão da operação.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado com a prioridade especificado com os argumentos especificados de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>pode ser <ph id="ph2">`null`</ph> se um argumento não é necessária no <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado a um método que demora vários argumentos, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Um objeto para passar como um argumento para o método especificado.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>é igual ao <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é uma prioridade válida.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado com a prioridade especificada com o argumento especificado de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>pode ser <ph id="ph2">`null`</ph> se um argumento não é necessária no <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">O tempo máximo para aguardar a conclusão da operação.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado a um método que demora vários argumentos, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Um objeto para passar como um argumento para o método especificado.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no arguments are needed.</source>
          <target state="translated">Isto pode ser <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se forem necessárias sem argumentos.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>é igual ao <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é uma prioridade válida.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa o delegado especificado com a prioridade especificado com os argumentos especificados de forma síncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>pode ser <ph id="ph2">`null`</ph> se um argumento não é necessária.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">No <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, apenas o thread que criou um &lt;xref:System.Windows.Threading.DispatcherObject&gt;pode aceder a esse objeto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Por exemplo, um thread de segundo plano é puserem do thread de IU principal não é possível atualizar o conteúdo de um &lt;xref:System.Windows.Controls.Button&gt;que foi criado num thread de IU.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Para que o thread de segundo plano aceder a propriedade de conteúdo a &lt;xref:System.Windows.Controls.Button&gt;, o thread de segundo plano deve delegar o trabalho para o &lt;xref:System.Windows.Threading.Dispatcher&gt;associada ao thread da IU.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Isto é conseguido através da utilização de um &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é síncrona e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é assíncrona.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">A operação é adicionada à fila de eventos &lt;xref:System.Windows.Threading.Dispatcher&gt;em &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; especificado&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;é uma operação síncrona; Por conseguinte, controlo não irá retornar ao chamar objeto até após a chamada de retorno devolve.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">A prioridade, relativo às outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos, o método especificado é invocada.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">O tempo máximo para aguardar a conclusão da operação.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Um delegado a um método que demora vários argumentos, que é feita pelo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> fila de eventos.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the specified method.</source>
          <target state="translated">Um objeto para passar como um argumento para o método especificado.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">Uma matriz de objetos para passar como argumentos para o método especificado.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">O valor devolvido do delegado que está a ser invocado ou <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se o delegado não tem nenhum valor de retorno.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>é igual ao <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é um <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa especificado &lt;xref:System.Action&gt;assíncrona no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Um delegado invocar através do distribuidor.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Um objeto, que é devolvida imediatamente após InvokeAsync é designado, que pode ser utilizado para interagir com o delegado como está pendente de execução de eventos fila.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa especificado &lt;xref:System.Action&gt;assíncrona com a prioridade especificada no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Um delegado invocar através do distribuidor.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A prioridade que determina a ordem pela qual a chamada de retorno especificada é invocada relativo as outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Um objeto, que é devolvida imediatamente após InvokeAsync é designado, que pode ser utilizado para interagir com o delegado como está pendente de execução de eventos fila.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Executa especificado &lt;xref:System.Action&gt;assíncrona com a prioridade especificada no thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Um delegado invocar através do distribuidor.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A prioridade que determina a ordem pela qual a chamada de retorno especificada é invocada relativo as outras operações no pendentes a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Um objeto que indica se deve cancelar a ação.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Um objeto, que é devolvida imediatamente após InvokeAsync é designado, que pode ser utilizado para interagir com o delegado como está pendente de execução de eventos fila.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Initiates the shutdown process of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> synchronously.</source>
          <target state="translated">Inicia o processo de encerramento do <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> forma síncrona.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>InvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">InvokeShutdown exige permissões de IU sem restrições.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o &lt;xref:System.Windows.Threading.Dispatcher&gt;começa a encerrar o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;o evento é gerado e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;está definido como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher&gt;não será encerrado completamente até que a fila de eventos unwinds.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o distribuidor conclui a ser encerrado, o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;o evento é gerado e o &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;propriedade está definida como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Depois de iniciar o processo de encerramento, todas as pendentes trabalho itens na fila foram abortadas.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Enters an execute loop.</source>
          <target state="translated">Introduz um ciclo de execução.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Windows.Threading.DispatcherFrame&gt; represents a loop that processes pending work items.</source>
          <target state="translated">A &lt;xref:System.Windows.Threading.DispatcherFrame&gt;representa um ciclo que processa os itens de trabalho pendentes.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispatcher processes the work item queue in a loop.</source>
          <target state="translated">O Dispatcher processa a fila de item de trabalho em ciclo.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">O ciclo é referido como moldura.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.</source>
          <target state="translated">O ciclo inicial é normalmente iniciado pela aplicação chamando &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>PushFrame enters a loop represented by the parameter <ph id="ph1">`frame`</ph>.</source>
          <target state="translated">PushFrame introduz um ciclo representado pelo parâmetro <ph id="ph1">`frame`</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>At each iteration of the loop, the &lt;xref:System.Windows.Threading.Dispatcher&gt; will check the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property on the &lt;xref:System.Windows.Threading.DispatcherFrame&gt; class to determine whether the loop should continue or if it should stop.</source>
          <target state="translated">Em cada iteração do ciclo, o &lt;xref:System.Windows.Threading.Dispatcher&gt;irá verificar a &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;propriedade o &lt;xref:System.Windows.Threading.DispatcherFrame&gt;classe para determinar se o ciclo deve continuar ou se se deverá ser interrompida.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.DispatcherFrame&gt; allows for the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property to be set explicitly and it respects the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; property on the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;permite a &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;propriedade ser definida explicitamente e respeita a &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;propriedade &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means when the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, frames that use the default &lt;xref:System.Windows.Threading.DispatcherFrame&gt; implementation will exit, which enables all nested frames to exit.</source>
          <target state="translated">Isto significa que quando o &lt;xref:System.Windows.Threading.Dispatcher&gt;começa a encerrar, fotogramas que utilizam a predefinição &lt;xref:System.Windows.Threading.DispatcherFrame&gt;implementação será fechada, que permite que todos os aninhada frames sair.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The frame for the dispatcher to process.</source>
          <target state="translated">A frame para o distribuidor processar.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>-or-       Dispatcher processing has been disabled.</source>
          <target state="translated">- ou - o processamento do emissor foi desativado.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Pushes the main execution frame on the event queue of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Pushes o intervalo de execução principal na fila de eventos do <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; processes the event queue in a loop.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher&gt;processa a fila de eventos em ciclo.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">O ciclo é referido como moldura.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling Run.</source>
          <target state="translated">O ciclo inicial é normalmente iniciado pela aplicação chamando executar.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main execution frame will continue until the &lt;xref:System.Windows.Threading.Dispatcher&gt; is shutdown.</source>
          <target state="translated">O intervalo de execução principal continuará até o &lt;xref:System.Windows.Threading.Dispatcher&gt;for encerrado.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> finishes shutting down.</source>
          <target state="translated">Ocorre quando o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> conclusão do encerramento.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o processo de encerramento de uma &lt;xref:System.Windows.Threading.Dispatcher&gt;é iniciado, o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;o evento é gerado e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;está definido como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher&gt;não encerramento completamente até que a fila de eventos unwinds.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the ShutdownFinished event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o distribuidor conclui a encerrar, é gerado o evento ShutdownFinished e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;propriedade está definida como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Depois de iniciar o processo de encerramento, todas as pendentes trabalho itens na fila foram abortadas.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> begins to shut down.</source>
          <target state="translated">Ocorre quando o <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> começa a encerrar.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the ShutdownStarted event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o processo de encerramento de uma &lt;xref:System.Windows.Threading.Dispatcher&gt;é iniciado, o evento ShutdownStarted é gerado e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;está definido como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher&gt;não encerramento completamente até que a fila de eventos unwinds.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando o distribuidor conclui a ser encerrado, o &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;o evento é gerado e o &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;propriedade está definida como <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Depois de iniciar o processo de encerramento, todas as pendentes trabalho itens na fila foram abortadas.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets the thread this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Obtém o thread isto <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> está associado.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The thread.</source>
          <target state="translated">O thread.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt;.</source>
          <target state="translated">Ocorre quando uma exceção do thread é acionada e não identificada durante a execução de um delegado por way de &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; ou &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt;.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when an exception that was thrown during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is uncaught.</source>
          <target state="translated">Este evento é desencadeado quando uma exceção que foi emitida durante a execução de um delegado por way de &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;é não identificadas.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</source>
          <target state="translated">Um processador pode marcar a exceção como processada, que irá impedir que o processador de exceções interna que está a ser chamado.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">Processadores de eventos para este evento têm de ser escritos com cuidado para evitar criar exceções secundárias e para detetar quaisquer que ocorrem.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">Recomenda-se para evitar a atribuição de memória ou fazer qualquer recurso operações intensivas de processador.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event provides a means to not raise the UnhandledException event.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;evento fornece um meio para não gerar o evento UnhandledException.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the UnhandledException event will not be raised.</source>
          <target state="translated">O &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;o evento é gerado pela primeira vez e se &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;no &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;está definido como <ph id="ph1">`false`</ph>, o evento UnhandledException não será gerado.&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt; when in the filter stage.</source>
          <target state="translated">Ocorre quando uma exceção do thread é acionada e não identificada durante a execução de um delegado por way de &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; ou &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; quando na fase de filtro.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; and is uncaught.</source>
          <target state="translated">Este evento é desencadeado durante a fase de filtro para uma exceção que é gerada durante a execução de um delegado por way de &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;ou &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;e é não identificadas.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is not unwound at this point (first-chance exception).</source>
          <target state="translated">A pilha de chamadas não é descarregar nesta fase (exceção de primeira hipótese).</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">Processadores de eventos para este evento têm de ser escritos com cuidado para evitar criar exceções secundárias e para detetar quaisquer que ocorrem.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">Recomenda-se para evitar a atribuição de memória ou fazer qualquer recurso operações intensivas de processador.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnhandledExceptionFilter event provides a means to not raise the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event.</source>
          <target state="translated">O evento UnhandledExceptionFilter fornece um meio para não gerar o &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;eventos.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnhandledExceptionFilter event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event will not be raised.</source>
          <target state="translated">O evento de UnhandledExceptionFilter é gerado pela primeira vez e se &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;no &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;está definido como <ph id="ph1">`false`</ph>, a &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;evento não será gerado.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">A adicionar.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is a valid priority.</source>
          <target state="translated">Determina se especificado <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> é uma prioridade válida.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The priority to check.</source>
          <target state="translated">A prioridade para verificar.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A string that will be returned by the exception that occurs if the priority is invalid.</source>
          <target state="translated">Uma cadeia que será devolvida pela exceção que ocorre se a prioridade é inválida.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>Não é um <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread has access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Determina se o thread de chamada tem acesso a este <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on may access the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">Apenas o thread de &lt;xref:System.Windows.Threading.Dispatcher&gt;é criado no possam aceder &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is public; therefore, any thread can check to see whether it has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">Este método é público; Por conseguinte, qualquer thread pode verificar se tem acesso ao &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; and VerifyAccess is &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; returns a Boolean if the calling thread does not have access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and VerifyAccess throws an exception.</source>
          <target state="translated">A diferença entre &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;e VerifyAccess &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;devolve um valor boleano se o thread de chamada não tiver acesso para o &lt;xref:System.Windows.Threading.Dispatcher&gt;e VerifyAccess emite uma exceção.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The calling thread does not have access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">O thread de chamada não tem acesso a este <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Cria um objeto passível de espera que gera o controlo de volta para o distribuidor atual e fornece uma oportunidade para o emissor a processar outros eventos de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">Este método proporciona uma forma de libertar temporariamente controlo de execução para o distribuidor atual, pelo que pode efetuar outras tarefas, tais como a processar outros eventos.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">Utilize o <ph id="ph1">`await`</ph>, ou <ph id="ph2">`Await`</ph> no Visual Basic, operador no valor de retorno para devolver o controlo para o distribuidor atual.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">Utilize este método se pretender dar uma oportunidade para processar os eventos enquanto a aplicação está a fazer uma grande quantidade de trabalho no thread de IU a sua aplicação.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">Por exemplo, pode utilizar este método num ciclo de longa execução que atualiza um controlo.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to calling the &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt; method and passing in &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.</source>
          <target state="translated">Este método é equivalente ao chamar o &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;método e transmitir em &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Um objeto passível de espera que gera o controlo de volta para o distribuidor atual e fornece uma oportunidade para o emissor a processar outros eventos de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Cria um objeto passível de espera que gera o controlo de volta para o distribuidor atual e fornece uma oportunidade para o emissor a processar outros eventos de forma assíncrona.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</source>
          <target state="translated">O trabalho que ocorre quando o controlo devolve o código a aguardar o resultado deste método é agendado com a prioridade especificada.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">Este método proporciona uma forma de libertar temporariamente controlo de execução para o distribuidor atual, pelo que pode efetuar outras tarefas, tais como a processar outros eventos.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">Utilize o <ph id="ph1">`await`</ph>, ou <ph id="ph2">`Await`</ph> no Visual Basic, operador no valor de retorno para devolver o controlo para o distribuidor atual.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">Utilize este método se pretender dar uma oportunidade para processar os eventos enquanto a aplicação está a fazer uma grande quantidade de trabalho no thread de IU a sua aplicação.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">Por exemplo, pode utilizar este método num ciclo de longa execução que atualiza um controlo.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The priority at which to schedule the continuation.</source>
          <target state="translated">A prioridade que agendar a continuação.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Um objeto passível de espera que gera o controlo de volta para o distribuidor atual e fornece uma oportunidade para o emissor a processar outros eventos de forma assíncrona.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>