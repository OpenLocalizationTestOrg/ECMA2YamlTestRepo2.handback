<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7394e5f549eebeb5d6874d28a8c1acadec70fd95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.MemoryFailPoint.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6367821b3c5ecca26342c3a63d46ad7cb5f28193</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5241403282e8494c4010a116ca0146ec85a43ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">Cerca le risorse di memoria sufficienti prima di eseguire un'operazione.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This class is intended for use in advanced development.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; Questa classe è destinata all'uso nello sviluppo avanzato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an instance of the MemoryFailPoint class creates a memory gate.</source>
          <target state="translated">Creazione di un'istanza della classe MemoryFailPoint crea un gate di memoria.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">Gate di memoria controlla prima di avviare un'attività che richiede una grande quantità di memoria sufficienti risorse.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing the check results in an &lt;xref:System.InsufficientMemoryException&gt; exception being thrown.</source>
          <target state="translated">Superato il controllo comporta un &lt;xref:System.InsufficientMemoryException&gt;venga generata un'eccezione.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">Questa eccezione impedisce un'operazione di avvio e riduce la possibilità di errore a causa di mancanza di risorse.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you decrease performance to avoid an &lt;xref:System.OutOfMemoryException&gt; exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">In questo modo si riduzione delle prestazioni per evitare un &lt;xref:System.OutOfMemoryException&gt;eccezione e qualsiasi stato di errore che può derivare da una gestione errata delle eccezioni in posizioni arbitrarie nel codice.&lt;/xref:System.OutOfMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Questo tipo implementa il &lt;xref:System.IDisposable&gt;interfaccia.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Dopo aver utilizzando il tipo, è necessario eliminarlo di esso direttamente o indirettamente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">Per eliminare direttamente il tipo, chiamare il relativo &lt;xref:System.IDisposable.Dispose%2A&gt;metodo in un <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> blocco.&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio, ad esempio <ph id="ph1">`using`</ph> (in c#) o <ph id="ph2">`Using`</ph> (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel &lt;xref:System.IDisposable&gt;argomento relativo all'interfaccia.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>By throwing an &lt;xref:System.InsufficientMemoryException&gt; exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">Generando un &lt;xref:System.InsufficientMemoryException&gt;eccezione, un'applicazione può distinguere tra una stima che un'operazione non sarà in grado di completare e un'operazione parzialmente completata che ha danneggiato lo stato dell'applicazione.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current &lt;xref:System.AppDomain&gt; or recycling the process.</source>
          <target state="translated">In questo modo un'applicazione per ridurre la frequenza dei criteri di escalation pessimistico, che possono richiedere lo scaricamento corrente &lt;xref:System.AppDomain&gt;o il riciclo del processo.&lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated">MemoryFailPoint controlla per vedere se sono disponibili in garbage collection per tutti gli heap sufficiente memoria e spazio degli indirizzi virtuali consecutivi e può aumentare le dimensioni del file di scambio.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the &lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt; method to ensure that resources associated with MemoryFailPoint are released.</source>
          <target state="translated">MemoryFailPoint garantisce in alcun relative alla disponibilità della memoria a lungo termine per la durata del controllo, ma i chiamanti devono usare sempre il &lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;metodo per garantire che vengano rilasciate le risorse associate MemoryFailPoint.&lt;/xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use a memory gate, you must create a MemoryFailPoint object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">Per utilizzare un gate di memoria, è necessario creare un oggetto MemoryFailPoint e specificare il numero di megabyte (MB) di memoria che deve utilizzare l'operazione successiva.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If enough memory is not available, an &lt;xref:System.InsufficientMemoryException&gt; exception is thrown.</source>
          <target state="translated">Se non è disponibile memoria sufficiente un &lt;xref:System.InsufficientMemoryException&gt;viene generata un'eccezione.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">Il parametro del costruttore deve essere un numero intero positivo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A negative value raises an &lt;xref:System.ArgumentOutOfRangeException&gt; exception.</source>
          <target state="translated">Un valore negativo genera un &lt;xref:System.ArgumentOutOfRangeException&gt;eccezione.&lt;/xref:System.ArgumentOutOfRangeException&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint operates at a granularity of 16 MB.</source>
          <target state="translated">MemoryFailPoint opera con una granularità di 16 MB.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">Qualsiasi valore inferiore a 16 MB vengono considerati come 16 MB e altri valori vengono considerati come il successivo più grande multiplo di 16 MB.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">Inizializza una nuova istanza di <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (classe), che specifica la quantità di memoria richiesta per la corretta esecuzione.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">La quantità di memoria utilizzata dall'applicazione per elaborare un elemento di lavoro può essere determinata empiricamente.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To estimate the amount of memory your application needs to process a request, consider using the &lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt; method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">Per stimare la quantità di memoria necessaria per elaborare una richiesta all'applicazione, è consigliabile utilizzare il &lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;metodo per determinare la quantità di memoria disponibile prima e dopo la chiamata al metodo che elabora l'elemento di lavoro.&lt;/xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.Runtime.MemoryFailPoint&gt; class for a code example that dynamically determines the value for the <ph id="ph1">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">Vedere il &lt;xref:System.Runtime.MemoryFailPoint&gt;per un esempio di codice che determina in modo dinamico il valore per il <ph id="ph1">`sizeInMegabytes`</ph> parametro.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">Le dimensioni di memoria necessaria, in megabyte.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This must be a positive value.</source>
          <target state="translated">Deve trattarsi di un valore positivo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The specified memory size is negative.</source>
          <target state="translated">La dimensione specificata per la memoria è negativo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">Vi è memoria sufficiente per avviare l'esecuzione del codice protetto dalla verifica.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Rilascia tutte le risorse utilizzate da di <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call Dispose when you are finished using the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">Chiamare Dispose dopo aver terminato di utilizzare &lt;xref:System.Runtime.MemoryFailPoint&gt;.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method leaves the &lt;xref:System.Runtime.MemoryFailPoint&gt; in an unusable state.</source>
          <target state="translated">Il metodo Dispose lascia il &lt;xref:System.Runtime.MemoryFailPoint&gt;in uno stato inutilizzabile.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling &lt;xref:System.Runtime.MemoryFailPoint&gt;, you must release all references to the &lt;xref:System.Runtime.MemoryFailPoint&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Runtime.MemoryFailPoint&gt; was occupying.</source>
          <target state="translated">Dopo la chiamata &lt;xref:System.Runtime.MemoryFailPoint&gt;, è necessario rilasciare tutti i riferimenti al &lt;xref:System.Runtime.MemoryFailPoint&gt;in modo che il garbage collector può recuperare la memoria che di &lt;xref:System.Runtime.MemoryFailPoint&gt;occupata.&lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>la pulizia di risorse non gestite<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> e <bpt id="p2">[</bpt>implementazione di un metodo Dispose<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Chiamare sempre Dispose prima di rilasciare l'ultimo riferimento a &lt;xref:System.Runtime.MemoryFailPoint&gt;.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Runtime.MemoryFailPoint&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la &lt;xref:System.Runtime.MemoryFailPoint&gt;dell'oggetto <ph id="ph1">`Finalize`</ph> metodo.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">Garantisce che le risorse vengano liberate e altre operazioni di pulizia vengono eseguite quando il garbage collector recupera la <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> oggetto.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The garbage collector calls the Finalize method when the current object is ready to be finalized.</source>
          <target state="translated">Quando l'oggetto corrente è pronto per essere completato, il garbage collector chiama il metodo Finalize.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>