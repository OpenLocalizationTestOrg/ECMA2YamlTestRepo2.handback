<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9471ecf37d14e3c9866cdceab3911bc1e16e81d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Threading.Dispatcher.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1ba75c6776009c08979bc9c0c805a47cac363df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1749f49a8457313de1aebbbb85b52e79efa4befd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides services for managing the queue of work items for a thread.</source>
          <target state="translated">Fornisce servizi per la gestione della coda di elementi di lavoro per un thread.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispatcher maintains a prioritized queue of work items for a specific thread.</source>
          <target state="translated">Il Dispatcher gestisce una coda con priorità degli elementi di lavoro per un thread specifico.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a Dispatcher is created on a thread, it becomes the only Dispatcher that can be associated with the thread, even if the Dispatcher is shut down.</source>
          <target state="translated">Creazione di un Dispatcher in un thread, diventa l'unico Dispatcher che possono essere associate al thread, anche se il Dispatcher è stato arrestato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to get the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; for the current thread and a Dispatcher is not associated with the thread, a Dispatcher will be created.</source>
          <target state="translated">Se si tenta di ottenere il &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;per il thread corrente e un Dispatcher non è associato al thread, verrà creato un Dispatcher.&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Dispatcher is also created when you create a &lt;xref:System.Windows.Threading.DispatcherObject&gt;.</source>
          <target state="translated">Quando si crea un &lt;xref:System.Windows.Threading.DispatcherObject&gt;.&lt;/xref:System.Windows.Threading.DispatcherObject&gt; viene inoltre creato un Dispatcher</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create a Dispatcher on a background thread, be sure to shut down the dispatcher before exiting the thread.</source>
          <target state="translated">Se si crea un Dispatcher in un thread in background, assicurarsi di arrestare il dispatcher prima della chiusura del thread.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a Dispatcher is shut down, it cannot be restarted.</source>
          <target state="translated">Se un Dispatcher viene arrestato, non può essere riavviato.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, a &lt;xref:System.Windows.Threading.DispatcherObject&gt; can only be accessed by the Dispatcher it is associated with.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, &lt;xref:System.Windows.Threading.DispatcherObject&gt;accessibile solo dal Dispatcher è associato.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that is associated with the Dispatcher on the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">Ad esempio, un thread in background non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è associato al Dispatcher sul <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the Dispatcher associated with the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">Affinché il thread in background accedere il &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;proprietà del &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare l'operazione per il Dispatcher associato il <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.&lt;/xref:System.Windows.Controls.Button&gt; &lt;/xref:System.Windows.Controls.ContentControl.Content%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the queue of the Dispatcher at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda del Dispatcher all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a Dispatcher that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;viene chiamato in un Dispatcher che arrestato, la proprietà status dell' restituito &lt;xref:System.Windows.Threading.DispatcherOperation&gt;è impostato su &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>All of the methods on Dispatcher, with the exception of &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, are free-threaded.</source>
          <target state="translated">Tutti i metodi nel Dispatcher, ad eccezione di &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, sono a thread libero.&lt;/xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from &lt;xref:System.Windows.Threading.DispatcherObject&gt; have thread affinity.</source>
          <target state="translated">Gli oggetti che derivano da &lt;xref:System.Windows.Threading.DispatcherObject&gt;presentano affinità di thread.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from &lt;xref:System.Windows.Freezable&gt; are free-threaded when they are frozen.</source>
          <target state="translated">Gli oggetti che derivano da &lt;xref:System.Windows.Freezable&gt;sono a thread libero quando sono bloccati.&lt;/xref:System.Windows.Freezable&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>panoramica sugli oggetti Freezable<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">Esegue il delegato specificato in modo asincrono con gli argomenti specificati nel thread che il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è stato creato.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto restituito da &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;può essere usato in vari modi per interagire con il delegato specificato, ad esempio: - modifica il &lt;xref:System.Windows.Threading.DispatcherPriority&gt;del delegato mentre è in attesa esecuzione nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Rimozione del delegato dalla coda degli eventi.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-In attesa per il delegato da restituire.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Il recupero del valore restituito dal delegato dopo di esso viene eseguito.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrona; Pertanto, restituendo immediatamente il controllo per l'oggetto chiamante dopo la chiamata.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;viene chiamato su un &lt;xref:System.Windows.Threading.Dispatcher&gt;oggetto arrestato, la proprietà status dell' restituito &lt;xref:System.Windows.Threading.DispatcherOperation&gt;è impostato su &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Il delegato a un metodo che accetta i parametri specificati <ph id="ph1">`args`</ph>, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Un oggetto che viene restituito immediatamente dopo &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;viene chiamato, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione dell'evento della coda.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue in modo asincrono il delegato specificato con la priorità specificata nel thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple BeginInvoke calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Se vengono apportate più chiamate BeginInvoke contemporaneamente &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, verranno eseguite nell'ordine in cui sono state effettuate.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;Restituisce un &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto che può essere utilizzato per interagire con il delegato quando il delegato incluso nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto restituito da &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;può essere usato in vari modi per interagire con il delegato specificato, ad esempio: - modifica il &lt;xref:System.Windows.Threading.DispatcherPriority&gt;del delegato mentre è in attesa esecuzione nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Rimozione del delegato dalla coda degli eventi.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-In attesa per il delegato da restituire.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Il recupero del valore restituito dal delegato dopo di esso viene eseguito.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrona; Pertanto, restituendo immediatamente il controllo per l'oggetto chiamante dopo la chiamata.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;viene chiamato su un &lt;xref:System.Windows.Threading.Dispatcher&gt;oggetto arrestato, la proprietà status dell' restituito &lt;xref:System.Windows.Threading.DispatcherOperation&gt;è impostato su &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Il delegato a un metodo che non accetta alcun argomento, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Un oggetto che viene restituito immediatamente dopo &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;viene chiamato, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione dell'evento della coda.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è un valido <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">Esegue il delegato specificato in modo asincrono con gli argomenti specificati, la priorità specificata sul thread che il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è stato creato.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto restituito da &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;può essere usato in vari modi per interagire con il delegato specificato, ad esempio: - modifica il &lt;xref:System.Windows.Threading.DispatcherPriority&gt;del delegato mentre è in attesa esecuzione nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Rimozione del delegato dalla coda degli eventi.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-In attesa per il delegato da restituire.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Il recupero del valore restituito dal delegato dopo di esso viene eseguito.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrona; Pertanto, restituendo immediatamente il controllo per l'oggetto chiamante dopo la chiamata.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;viene chiamato su un &lt;xref:System.Windows.Threading.Dispatcher&gt;oggetto arrestato, la proprietà status dell' restituito &lt;xref:System.Windows.Threading.DispatcherOperation&gt;è impostato su &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Il delegato a un metodo che accetta i parametri specificati <ph id="ph1">`args`</ph>, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Un oggetto che viene restituito immediatamente dopo &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;viene chiamato, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione dell'evento della coda.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato in modo asincrono la priorità specificata e con l'argomento specificato sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>può essere <ph id="ph2">`null`</ph> se non sono richiesti argomenti.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;Restituisce un &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto che può essere utilizzato per interagire con il delegato quando il delegato incluso nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto restituito da &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;può essere usato in vari modi per interagire con il delegato specificato, ad esempio: - modifica il &lt;xref:System.Windows.Threading.DispatcherPriority&gt;del delegato mentre è in attesa esecuzione nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Rimozione del delegato dalla coda degli eventi.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-In attesa per il delegato da restituire.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Il recupero del valore restituito dal delegato dopo di esso viene eseguito.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrona; Pertanto, restituendo immediatamente il controllo per l'oggetto chiamante dopo la chiamata.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Se più &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;chiamate vengono eseguite contemporaneamente &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, verranno eseguite nell'ordine in cui sono state effettuate.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;viene chiamato su un &lt;xref:System.Windows.Threading.Dispatcher&gt;oggetto arrestato, la proprietà status dell' restituito &lt;xref:System.Windows.Threading.DispatcherOperation&gt;è impostato su &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta un argomento, viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">Oggetto da passare come argomento al metodo specificato.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Un oggetto che viene restituito immediatamente dopo &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;viene chiamato, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione dell'evento della coda.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è un valido <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato in modo asincrono la priorità specificata e con la matrice di argomenti specificati nel thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`arg`</ph> parameter can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated">Il <ph id="ph1">`arg`</ph> parametro può essere <ph id="ph2">`null`</ph> se non sono richiesti argomenti.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;Restituisce un &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto che può essere utilizzato per interagire con il delegato quando il delegato incluso nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.DispatcherOperation&gt;oggetto restituito da &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;può essere usato in vari modi per interagire con il delegato specificato, ad esempio: - modifica il &lt;xref:System.Windows.Threading.DispatcherPriority&gt;del delegato mentre è in attesa esecuzione nella coda degli eventi.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-Rimozione del delegato dalla coda degli eventi.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-In attesa per il delegato da restituire.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Il recupero del valore restituito dal delegato dopo di esso viene eseguito.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrona; Pertanto, restituendo immediatamente il controllo per l'oggetto chiamante dopo la chiamata.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Se più &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;chiamate vengono eseguite contemporaneamente &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, verranno eseguite nell'ordine in cui sono state effettuate.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Se &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;viene chiamato su un &lt;xref:System.Windows.Threading.Dispatcher&gt;oggetto arrestato, la proprietà status dell' restituito &lt;xref:System.Windows.Threading.DispatcherOperation&gt;è impostato su &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta più argomenti, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">Oggetto da passare come argomento al metodo specificato.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">Un oggetto che viene restituito immediatamente dopo &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;viene chiamato, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione nel <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not a valid priority.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>non è una priorità valida.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Initiates shutdown of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> asynchronously.</source>
          <target state="translated">Avvia la chiusura del <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> in modo asincrono.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>BeginInvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">BeginInvokeShutdown richiede le autorizzazioni senza restrizioni dell'interfaccia utente.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando il &lt;xref:System.Windows.Threading.Dispatcher&gt;inizia l'arresto, la &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;è impostato su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher&gt;non arresta completamente finché la coda degli eventi viene rimosso.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Al termine dell'arresto, il Dispatcher di &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;è impostata su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Una volta avviato il processo di arresto, tutte in sospeso di lavoro vengono interrotti elementi nella coda.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The priority at which to begin shutting down the dispatcher.</source>
          <target state="translated">La priorità da cui iniziare l'arresto del dispatcher.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread is the thread associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Determina se il thread chiamante è il thread associato a questo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the &lt;xref:System.Windows.Threading.Dispatcher&gt; that a &lt;xref:System.Windows.Threading.DispatcherObject&gt; is created on may access the object.</source>
          <target state="translated">Solo il &lt;xref:System.Windows.Threading.Dispatcher&gt;che un &lt;xref:System.Windows.Threading.DispatcherObject&gt;viene creato in cui possono accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; to access the object from a different thread.</source>
          <target state="translated">Utilizzare &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;per accedere all'oggetto da un thread diverso.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>CheckAccess can be called from any thread.</source>
          <target state="translated">CheckAccess può essere chiamato da qualsiasi thread.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between CheckAccess and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; is CheckAccess returns a Boolean indicating whether the calling thread has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; throws an exception.</source>
          <target state="translated">La differenza tra CheckAccess e &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;CheckAccess restituisce un valore booleano che indica se il thread chiamante dispone dell'accesso per il &lt;xref:System.Windows.Threading.Dispatcher&gt;e &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;genera un'eccezione.&lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the calling thread is the thread associated with this <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se il thread chiamante è il thread associato a questo <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>; in caso contrario, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the thread currently executing and creates a new <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if one is not already associated with the thread.</source>
          <target state="translated">Ottiene il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> per il thread attualmente in esecuzione e crea un nuovo <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> se non è già associato al thread.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Windows.Threading.Dispatcher&gt; is not associated with the current thread, a new &lt;xref:System.Windows.Threading.Dispatcher&gt; will be created.</source>
          <target state="translated">Se un &lt;xref:System.Windows.Threading.Dispatcher&gt;non è associato il thread corrente, un nuovo &lt;xref:System.Windows.Threading.Dispatcher&gt;verrà creato.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is not the case with the &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; method.</source>
          <target state="translated">Non è il caso di &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;metodo.&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; will return <ph id="ph1">`null`</ph> if there is not a dispatcher associated with the specified thread.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;restituirà <ph id="ph1">`null`</ph> se non è disponibile un dispatcher associato al thread specificato.&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The dispatcher associated with the current thread.</source>
          <target state="translated">Il dispatcher associato al thread corrente.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Disables processing of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">Disabilita l'elaborazione del <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</source>
          <target state="translated">Disabilitare l'elaborazione del dispatcher è un metodo avanzato è pensato per eliminare la possibilità di reentrancy non correlata.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The effects of disabling processing are as follows:      -   <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> locks will not pump messages internally.</source>
          <target state="translated">Gli effetti della disabilitazione dell'elaborazione sono i seguenti:- <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> blocchi verranno non message pump internamente.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.Threading.DispatcherFrame&gt; objects are not allowed to be pushed.</source>
          <target state="translated">- &lt;xref:System.Windows.Threading.DispatcherFrame&gt;oggetti non sono consentiti per essere inserita.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Message processing is not permitted.</source>
          <target state="translated">-L'elaborazione dei messaggi non è consentito.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure that DisableProcessing returns when it is called can be used to re-enable dispatcher processing.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;struttura DisableProcessing restituisce quando viene chiamata consente di abilitare di nuovo l'elaborazione del dispatcher.&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure re-enables processing.</source>
          <target state="translated">La chiamata &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;sul &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;struttura elaborazione verrà riattivata.&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; &lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>DisableProcessing can only be called on the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is associated with.</source>
          <target state="translated">DisableProcessing può essere chiamato solo sul thread di &lt;xref:System.Windows.Threading.Dispatcher&gt;è associato.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A structure used to re-enable dispatcher processing.</source>
          <target state="translated">Una struttura utilizzata per abilitare nuovamente l'elaborazione del dispatcher.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requests that all frames exit, including nested frames.</source>
          <target state="translated">Richiede che tutti i frame uscire, inclusi i frame annidati.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the specified thread.</source>
          <target state="translated">Ottiene il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> per il thread specificato.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dispatcher is not available for the specified thread, <ph id="ph1">`null`</ph> will be returned.</source>
          <target state="translated">Se non è disponibile per il thread specificato, un dispatcher <ph id="ph1">`null`</ph> verranno restituiti.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>FromThread does not create a &lt;xref:System.Windows.Threading.Dispatcher&gt; on a thread that does not have a &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">FromThread non crea un &lt;xref:System.Windows.Threading.Dispatcher&gt;su un thread che non dispone di un &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on a thread that does not already have a &lt;xref:System.Windows.Threading.Dispatcher&gt; when attempting to get the &lt;xref:System.Windows.Threading.Dispatcher&gt; by using the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; property.</source>
          <target state="translated">Un nuovo &lt;xref:System.Windows.Threading.Dispatcher&gt;viene creato su un thread che non dispone già di un &lt;xref:System.Windows.Threading.Dispatcher&gt;durante il tentativo di ottenere il &lt;xref:System.Windows.Threading.Dispatcher&gt;utilizzando il &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;proprietà.&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The thread to obtain the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from.</source>
          <target state="translated">Il thread per ottenere il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> da.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The dispatcher for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">thread</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">Il dispatcher per <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">thread</ph> <ept id="p1">&lt;/code&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has finished shutting down.</source>
          <target state="translated">Determina se il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ha terminato l'arresto.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando il &lt;xref:System.Windows.Threading.Dispatcher&gt;inizia l'arresto, la &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;è impostato su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher&gt;non si arresta completamente fino a quando la coda degli eventi viene rimosso.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the HasShutdownFinished property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Al termine dell'arresto, il Dispatcher di &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;viene generato l'evento e la proprietà HasShutdownFinished è impostata su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Una volta avviato il processo di arresto, tutte in sospeso di lavoro vengono interrotti elementi nella coda.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dispatcher has finished shutting down; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se il dispatcher ha completato l'arresto; in caso contrario, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is shutting down.</source>
          <target state="translated">Determina se il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è in corso l'arresto.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and HasShutdownStarted is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando il &lt;xref:System.Windows.Threading.Dispatcher&gt;inizia l'arresto, la &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;evento viene generato e HasShutdownStarted è impostato su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher&gt;non arresta completamente finché la coda degli eventi viene rimosso.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Al termine dell'arresto, il Dispatcher di &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;è impostata su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Una volta avviato il processo di arresto, tutte in sospeso di lavoro vengono interrotti elementi nella coda.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has started shutting down; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Se il <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> avviato la fase di chiusura; in caso contrario, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets the collection of hooks that provide additional event information about the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Ottiene la raccolta di hook che forniscono informazioni aggiuntive sull'evento relativamente il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherHooks&gt; class provides additional event information about the &lt;xref:System.Windows.Threading.Dispatcher&gt;, such as when the &lt;xref:System.Windows.Threading.Dispatcher&gt; is inactive or when an operation has competed.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.DispatcherHooks&gt;classe vengono fornite informazioni aggiuntive sul &lt;xref:System.Windows.Threading.Dispatcher&gt;, ad esempio quando il &lt;xref:System.Windows.Threading.Dispatcher&gt;è inattivo o quando un'operazione è stata completata.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.DispatcherHooks&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The hooks associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Gli hook associati a questo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue l'oggetto specificato &lt;xref:System.Action&gt;in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Un delegato da richiamare tramite il dispatcher.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue l'oggetto specificato &lt;xref:System.Action&gt;in modo sincrono con una priorità specificata sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Un delegato da richiamare tramite il dispatcher.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">La priorità determina l'ordine viene richiamato il callback specificato rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato con gli argomenti specificati in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta i parametri specificati <ph id="ph1">`args`</ph>, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority on the thread on which the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue in modo sincrono il delegato specificato con la priorità specificata sul thread in cui il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che non accetta argomenti, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>è uguale a <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è una priorità valida.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue l'oggetto specificato &lt;xref:System.Action&gt;in modo sincrono con una priorità specificata sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Un delegato da richiamare tramite il dispatcher.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">La priorità determina l'ordine viene richiamato il callback specificato rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Oggetto che indica se annullare l'azione.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato entro l'intervallo di tempo designato la priorità specificata con gli argomenti specificati in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta i parametri specificati <ph id="ph1">`args`</ph>, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">La quantità massima di tempo di attesa del completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato con la priorità specificata con gli argomenti specificati in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta i parametri specificati <ph id="ph1">`args`</ph>, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato con la priorità specificata con l'argomento specificato in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>può essere <ph id="ph2">`null`</ph> se un argomento non è necessaria In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta un argomento, viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Oggetto da passare come argomento al metodo specificato.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>è uguale a <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è una priorità valida.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created.</source>
          <target state="translated">Esegue il delegato specificato in modo sincrono la priorità specificata e con il valore di timeout specificato sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è stato creato.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">Il tempo massimo di attesa per l'operazione da completare.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Il delegato a un metodo che non accetta alcun argomento, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue l'oggetto specificato &lt;xref:System.Action&gt;in modo sincrono con una priorità specificata sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Un delegato da richiamare tramite il dispatcher.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">La priorità determina l'ordine viene richiamato il callback specificato rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Oggetto che indica se annullare l'azione.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The minimum amount of time to wait for the operation to start.</source>
          <target state="translated">La quantità minima di tempo di attesa per l'operazione di avvio.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato entro l'intervallo di tempo designato la priorità specificata con gli argomenti specificati in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta i parametri specificati <ph id="ph1">`args`</ph>, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">La quantità massima di tempo di attesa del completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato con la priorità specificata con gli argomenti specificati in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>può essere <ph id="ph2">`null`</ph> se un argomento non è necessaria In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta più argomenti, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Oggetto da passare come argomento al metodo specificato.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>è uguale a <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è una priorità valida.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato con la priorità specificata con l'argomento specificato in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>può essere <ph id="ph2">`null`</ph> se un argomento non è necessaria In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">Il tempo massimo di attesa per l'operazione da completare.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta più argomenti, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Oggetto da passare come argomento al metodo specificato.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no arguments are needed.</source>
          <target state="translated">Può trattarsi di <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se non sono richiesti argomenti.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>è uguale a <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è una priorità valida.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue il delegato specificato con la priorità specificata con gli argomenti specificati in modo sincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>può essere <ph id="ph2">`null`</ph> se non è necessario un argomento.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, solo i thread che ha creato un &lt;xref:System.Windows.Threading.DispatcherObject&gt;può accedere all'oggetto.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Ad esempio, un thread in background che viene rimosso dal thread principale della UI non è possibile aggiornare il contenuto di un &lt;xref:System.Windows.Controls.Button&gt;che è stato creato nel thread UI.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Affinché il thread in background accedere alla proprietà di contenuto di &lt;xref:System.Windows.Controls.Button&gt;, il thread in background deve delegare il lavoro dal &lt;xref:System.Windows.Threading.Dispatcher&gt;associata al thread dell'interfaccia utente.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Questa operazione viene eseguita tramite uno &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è sincrono e &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;è asincrono.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">L'operazione viene aggiunta alla coda degli eventi &lt;xref:System.Windows.Threading.Dispatcher&gt;all'indirizzo specificato &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;è un'operazione sincrona. Pertanto, controllo non verrà restituito per l'oggetto chiamante fino a dopo il callback restituisce.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">La priorità, rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda degli eventi, il metodo specificato viene richiamata.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">Il tempo massimo di attesa per l'operazione da completare.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Un delegato a un metodo che accetta più argomenti, che viene inserito il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> coda eventi.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the specified method.</source>
          <target state="translated">Oggetto da passare come argomento al metodo specificato.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">Matrice di oggetti da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">Il valore restituito dal delegato richiamato oppure <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>è uguale a <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è un valido <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue l'oggetto specificato &lt;xref:System.Action&gt;in modo asincrono sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Un delegato da richiamare tramite il dispatcher.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Un oggetto, che viene restituito immediatamente dopo la chiamata di metodo InvokeAsync, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione dell'evento della coda.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue l'oggetto specificato &lt;xref:System.Action&gt;in modo asincrono con una priorità specificata sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Un delegato da richiamare tramite il dispatcher.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">La priorità determina l'ordine viene richiamato il callback specificato rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Un oggetto, che viene restituito immediatamente dopo la chiamata di metodo InvokeAsync, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione dell'evento della coda.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Esegue l'oggetto specificato &lt;xref:System.Action&gt;in modo asincrono con una priorità specificata sul thread di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Un delegato da richiamare tramite il dispatcher.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">La priorità determina l'ordine viene richiamato il callback specificato rispetto alle altre operazioni in sospeso il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Oggetto che indica se annullare l'azione.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Un oggetto, che viene restituito immediatamente dopo la chiamata di metodo InvokeAsync, che può essere utilizzato per interagire con il delegato mentre è in attesa di esecuzione dell'evento della coda.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Initiates the shutdown process of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> synchronously.</source>
          <target state="translated">Avvia il processo di arresto di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> in modo sincrono.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>InvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">InvokeShutdown richiede le autorizzazioni senza restrizioni dell'interfaccia utente.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando il &lt;xref:System.Windows.Threading.Dispatcher&gt;inizia l'arresto, la &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;è impostato su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher&gt;non arresta completamente finché la coda degli eventi viene rimosso.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Al termine dell'arresto, il Dispatcher di &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;è impostata su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Una volta avviato il processo di arresto, tutte in sospeso di lavoro vengono interrotti elementi nella coda.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Enters an execute loop.</source>
          <target state="translated">Immette un ciclo di esecuzione.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Windows.Threading.DispatcherFrame&gt; represents a loop that processes pending work items.</source>
          <target state="translated">Oggetto &lt;xref:System.Windows.Threading.DispatcherFrame&gt;rappresenta un ciclo che elabora gli elementi di lavoro in sospeso.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispatcher processes the work item queue in a loop.</source>
          <target state="translated">Il Dispatcher elabora la coda di elementi di lavoro in un ciclo.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">Il ciclo viene considerato un frame.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.</source>
          <target state="translated">Il ciclo iniziale viene in genere avviato dall'applicazione chiamando &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>PushFrame enters a loop represented by the parameter <ph id="ph1">`frame`</ph>.</source>
          <target state="translated">PushFrame entra in un ciclo rappresentato dal parametro <ph id="ph1">`frame`</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>At each iteration of the loop, the &lt;xref:System.Windows.Threading.Dispatcher&gt; will check the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property on the &lt;xref:System.Windows.Threading.DispatcherFrame&gt; class to determine whether the loop should continue or if it should stop.</source>
          <target state="translated">A ogni iterazione del ciclo, il &lt;xref:System.Windows.Threading.Dispatcher&gt;controllerà il &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;proprietà la &lt;xref:System.Windows.Threading.DispatcherFrame&gt;classe per determinare se il ciclo deve continuare o se deve essere arrestata.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.DispatcherFrame&gt; allows for the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property to be set explicitly and it respects the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; property on the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;Consente di &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;proprietà da impostare in modo esplicito e rispetta la &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;proprietà &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means when the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, frames that use the default &lt;xref:System.Windows.Threading.DispatcherFrame&gt; implementation will exit, which enables all nested frames to exit.</source>
          <target state="translated">Ciò significa che, quando il &lt;xref:System.Windows.Threading.Dispatcher&gt;inizia l'arresto, frame che utilizzano il valore predefinito &lt;xref:System.Windows.Threading.DispatcherFrame&gt;implementazione viene chiusa, che consente a tutti i frame annidati uscire dall'installazione.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The frame for the dispatcher to process.</source>
          <target state="translated">Il frame per il dispatcher da elaborare.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>-or-       Dispatcher processing has been disabled.</source>
          <target state="translated">- oppure - l'elaborazione del Dispatcher è stata disabilitata.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Pushes the main execution frame on the event queue of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Inserisce il frame di esecuzione principale nella coda degli eventi di <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; processes the event queue in a loop.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher&gt;Elabora la coda degli eventi in un ciclo.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">Il ciclo viene considerato un frame.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling Run.</source>
          <target state="translated">Il ciclo iniziale viene in genere avviato dall'applicazione mediante la chiamata di esecuzione.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main execution frame will continue until the &lt;xref:System.Windows.Threading.Dispatcher&gt; is shutdown.</source>
          <target state="translated">Il frame di esecuzione principale continuerà fino a quando il &lt;xref:System.Windows.Threading.Dispatcher&gt;viene arrestato.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> finishes shutting down.</source>
          <target state="translated">Si verifica quando il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> termina l'arresto.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando il processo di arresto di un &lt;xref:System.Windows.Threading.Dispatcher&gt;viene avviato, il &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;è impostato su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher&gt;non si arresta completamente fino a quando la coda degli eventi viene rimosso.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the ShutdownFinished event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando il Dispatcher termina l'arresto, viene generato l'evento ShutdownFinished e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;è impostata su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Una volta avviato il processo di arresto, tutte in sospeso di lavoro vengono interrotti elementi nella coda.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> begins to shut down.</source>
          <target state="translated">Si verifica quando il <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> inizia l'arresto.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the ShutdownStarted event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Quando il processo di arresto di un &lt;xref:System.Windows.Threading.Dispatcher&gt;viene avviato, viene generato l'evento ShutdownStarted e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;è impostato su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher&gt;non si arresta completamente fino a quando la coda degli eventi viene rimosso.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Al termine dell'arresto, il Dispatcher di &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;evento viene generato e &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;è impostata su <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Una volta avviato il processo di arresto, tutte in sospeso di lavoro vengono interrotti elementi nella coda.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets the thread this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Ottiene il thread si <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> è associato.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The thread.</source>
          <target state="translated">Il thread.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt;.</source>
          <target state="translated">Si verifica quando una thread viene generata un'eccezione intercettata durante l'esecuzione di un delegato per mezzo di &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; o &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt;.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when an exception that was thrown during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is uncaught.</source>
          <target state="translated">Questo evento viene generato quando un'eccezione generata durante l'esecuzione di un delegato per mezzo di &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;non viene intercettata.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</source>
          <target state="translated">Un gestore può contrassegnare l'eccezione come gestito, che impedirà il gestore dell'eccezione interna la chiamata.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">Gestori eventi per questo evento devono essere scritto con attenzione per evitare di creare eccezioni secondarie e per rilevare eventuali che si verificano.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">È consigliabile evitare di allocare memoria o effettuare operazioni con uso intensivo nel gestore di qualsiasi risorsa.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event provides a means to not raise the UnhandledException event.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;evento fornisce un mezzo per non generare l'evento UnhandledException.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the UnhandledException event will not be raised.</source>
          <target state="translated">Il &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;evento viene generato per primo e se &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;sul &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;è impostato su <ph id="ph1">`false`</ph>, non verrà generato l'evento UnhandledException.&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt; when in the filter stage.</source>
          <target state="translated">Si verifica quando una thread viene generata un'eccezione intercettata durante l'esecuzione di un delegato per mezzo di &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; o &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; quando in fase di filtro.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; and is uncaught.</source>
          <target state="translated">Questo evento viene generato in fase di filtro per un'eccezione generata durante l'esecuzione di un delegato per mezzo di &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;o &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;e non viene intercettata.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is not unwound at this point (first-chance exception).</source>
          <target state="translated">Lo stack di chiamate non viene rimosso a questo punto (eccezione first-chance).</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">Gestori eventi per questo evento devono essere scritto con attenzione per evitare di creare eccezioni secondarie e per rilevare eventuali che si verificano.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">È consigliabile evitare di allocare memoria o effettuare operazioni con uso intensivo nel gestore di qualsiasi risorsa.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnhandledExceptionFilter event provides a means to not raise the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event.</source>
          <target state="translated">L'evento UnhandledExceptionFilter fornisce un mezzo per non generare la &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;evento.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnhandledExceptionFilter event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event will not be raised.</source>
          <target state="translated">Viene generato l'evento UnhandledExceptionFilter prima e se &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;nel &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;è impostato su <ph id="ph1">`false`</ph>, &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;non verrà generato l'evento.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is a valid priority.</source>
          <target state="translated">Determina se l'oggetto specificato <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> una priorità valida.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The priority to check.</source>
          <target state="translated">La priorità da controllare.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A string that will be returned by the exception that occurs if the priority is invalid.</source>
          <target state="translated">Stringa che verrà restituita l'eccezione che si verifica se la priorità non è valida.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>non è un valido <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread has access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Determina se il thread chiamante ha accesso a questo <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on may access the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">Solo il thread di &lt;xref:System.Windows.Threading.Dispatcher&gt;viene creato sarà accessibile &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is public; therefore, any thread can check to see whether it has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">Questo metodo è pubblico; Pertanto, qualsiasi thread può verificare se ha accesso a &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; and VerifyAccess is &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; returns a Boolean if the calling thread does not have access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and VerifyAccess throws an exception.</source>
          <target state="translated">La differenza tra &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;e VerifyAccess &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;restituisce un valore booleano se il thread chiamante non dispone di accesso per il &lt;xref:System.Windows.Threading.Dispatcher&gt;e VerifyAccess genera un'eccezione.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The calling thread does not have access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Il thread chiamante non ha accesso a <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Crea un oggetto awaitable che restituisce il controllo torna al dispatcher corrente in modo asincrono e offre l'opportunità per il dispatcher elaborare gli altri eventi.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">Questo metodo fornisce un modo rilasciare temporaneamente il controllo di esecuzione per il dispatcher corrente in modo è possibile eseguire altre operazioni, ad esempio elaborare altri eventi.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`await`</ph>, o <ph id="ph2">`Await`</ph> in Visual Basic, l'operatore sul valore restituito per restituire il controllo al dispatcher corrente.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">Utilizzare questo metodo se desidera possibilità di elaborare gli eventi, mentre l'app esegue il lavoro nel thread UI dell'app.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">Ad esempio, è possibile utilizzare questo metodo in un ciclo a esecuzione prolungata che aggiorna un controllo.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to calling the &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt; method and passing in &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.</source>
          <target state="translated">Questo metodo equivale a chiamare il &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;metodo e passando &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Un oggetto awaitable che restituisce il controllo torna al dispatcher corrente in modo asincrono e offre l'opportunità per il dispatcher elaborare gli altri eventi.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Crea un oggetto awaitable che restituisce il controllo torna al dispatcher corrente in modo asincrono e offre l'opportunità per il dispatcher elaborare gli altri eventi.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</source>
          <target state="translated">Il lavoro che si verifica quando il controllo torna al codice in attesa il risultato di questo metodo è pianificato con la priorità specificata.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">Questo metodo fornisce un modo rilasciare temporaneamente il controllo di esecuzione per il dispatcher corrente in modo è possibile eseguire altre operazioni, ad esempio elaborare altri eventi.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`await`</ph>, o <ph id="ph2">`Await`</ph> in Visual Basic, l'operatore sul valore restituito per restituire il controllo al dispatcher corrente.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">Utilizzare questo metodo se desidera possibilità di elaborare gli eventi, mentre l'app esegue il lavoro nel thread UI dell'app.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">Ad esempio, è possibile utilizzare questo metodo in un ciclo a esecuzione prolungata che aggiorna un controllo.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The priority at which to schedule the continuation.</source>
          <target state="translated">La priorità in cui pianificare la continuazione.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Un oggetto awaitable che restituisce il controllo torna al dispatcher corrente in modo asincrono e offre l'opportunità per il dispatcher elaborare gli altri eventi.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>