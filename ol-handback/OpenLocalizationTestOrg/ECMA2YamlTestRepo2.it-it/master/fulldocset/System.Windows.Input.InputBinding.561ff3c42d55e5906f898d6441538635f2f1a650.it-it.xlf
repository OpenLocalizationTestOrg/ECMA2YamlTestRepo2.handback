<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0aacd4cb6cd14bbcf5939edbbea7d4a0865948ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Input.InputBinding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6b32498e7f7ce7787a286ac3199b39335ee229b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97904ba366e3b08a5924475b0b4986a3aa2e5ec5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a binding between an <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and a command.</source>
          <target state="translated">Rappresenta un'associazione tra un <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> e un comando.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The command is potentially a <bpt id="p1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Il comando è potenzialmente un <bpt id="p1">&lt;xref href="System.Windows.Input.RoutedCommand"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides base initialization for classes derived from <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Fornisce l'inizializzazione di base per classi derivate da <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Input.InputBinding&gt; is not technically an abstract class, but the default constructor is deliberately protected access.</source>
          <target state="translated">&lt;xref:System.Windows.Input.InputBinding&gt;non è tecnicamente una classe astratta, ma il costruttore predefinito è deliberatamente di accesso protetto.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This has the effect of making &lt;xref:System.Windows.Input.InputBinding&gt; an "abstract" class for <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Questo ha l'effetto di rendere &lt;xref:System.Windows.Input.InputBinding&gt;classe "astratta" per <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are existing properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type &lt;xref:System.Windows.Input.InputBinding&gt;, but you cannot specify an &lt;xref:System.Windows.Input.InputBinding&gt; instance in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Sono disponibili proprietà esistente in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> che dispongono di <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> utilizzi che prevedono gli oggetti di tipo &lt;xref:System.Windows.Input.InputBinding&gt;, ma non è possibile specificare un &lt;xref:System.Windows.Input.InputBinding&gt;dell'istanza in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.&lt;/xref:System.Windows.Input.InputBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you can specify one of the device-specific &lt;xref:System.Windows.Input.InputBinding&gt; derived classes as values, for instance &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">In alternativa, è possibile specificare uno delle specifiche del dispositivo &lt;xref:System.Windows.Input.InputBinding&gt;derivate valori, come ad esempio &lt;xref:System.Windows.Input.KeyBinding&gt; &lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; o&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified command and input gesture.</source>
          <target state="translated">Inizializza una nuova istanza di <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> classe con il comando specificato e i movimenti di input.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</source>
          <target state="translated">Se si è uno sviluppatore di software utilizzando le classi di associazioni di input esistente, è in genere non utilizzerà questo costruttore, anche se si siano definendo comandi personalizzati.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, you will either use constructors of derived classes (&lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;), or you will use this constructor as the base instantiation of a custom class.</source>
          <target state="translated">Al contrario, si utilizzeranno costruttori delle classi derivate (&lt;xref:System.Windows.Input.KeyBinding&gt; e &lt;xref:System.Windows.Input.MouseBinding&gt;), o si utilizza questo costruttore come istanze di base di una classe personalizzata.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the &lt;xref:System.Windows.Input.InputBinding&gt; class supports different input devices in principle, in practice you must choose which device the input binding will represent.</source>
          <target state="translated">Sebbene la &lt;xref:System.Windows.Input.InputBinding&gt;classe supporta diversi dispositivi di input in sostanza, in pratica, è necessario scegliere quale dispositivo verrà rappresentato l'associazione di input.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You only can set only one &lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt; value on the input binding, and gestures are device-specific.</source>
          <target state="translated">È possibile impostare solo uno solo &lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;valore l'associazione di input e i movimenti sono specifiche del dispositivo.&lt;/xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The command to associate with <ph id="ph1">`gesture`</ph>.</source>
          <target state="translated">Il comando da associare a <ph id="ph1">`gesture`</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The input gesture to associate with <ph id="ph1">`command`</ph>.</source>
          <target state="translated">Il movimento di input da associare a <ph id="ph1">`command`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;command&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;gesture&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copies the base (non-animated) values of the properties of the specified object.</source>
          <target state="translated">Copia i valori di base (non animati) delle proprietà dell'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">Oggetto da clonare.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copies the current values of the properties of the specified object.</source>
          <target state="translated">Copia i valori correnti delle proprietà dell'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">Oggetto da clonare.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Gets or sets the &lt;xref:System.Windows.Input.ICommand&gt; associated with this input binding.</source>
          <target state="translated">Ottiene o imposta il &lt;xref:System.Windows.Input.ICommand&gt;associata a questa associazione di input.&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">La &lt;xref:System.Windows.Input.InputBinding&gt;classe non supporta <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> utilizzo perché non esporre un costruttore predefinito pubblico (ha un costruttore predefinito, ma è protetto).&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and therefore, can use properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto possono utilizzare le proprietà ereditate da &lt;xref:System.Windows.Input.InputBinding&gt;.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usages are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">Due esistente &lt;xref:System.Windows.Input.InputBinding&gt;le classi derivate che possono essere implementate in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> e impostare le proprietà con <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> utilizzi sono &lt;xref:System.Windows.Input.KeyBinding&gt;e &lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Input.ICommand&gt; references a type converter that enables certain preexisting &lt;xref:System.Windows.Input.ICommand&gt; implementations to specify values in the form of a string.</source>
          <target state="translated">&lt;xref:System.Windows.Input.ICommand&gt;fa riferimento a un convertitore di tipi che consente a determinate preesistenti &lt;xref:System.Windows.Input.ICommand&gt;implementazioni per specificare i valori sotto forma di stringa.&lt;/xref:System.Windows.Input.ICommand&gt;&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type conversion behavior sets the attribute value form of this property.</source>
          <target state="translated">Questo comportamento di conversione di tipo imposta la forma di valore di attributo di questa proprietà.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also bind the Command, &lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.</source>
          <target state="translated">È anche possibile associare il comando, &lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;, e &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;proprietà per un &lt;xref:System.Windows.Input.ICommand&gt;definito su un oggetto.&lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">In questo modo è possibile definire un comando personalizzato e associarlo all'input dell'utente.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">Per ulteriori informazioni, vedere il secondo esempio &lt;xref:System.Windows.Input.InputBinding&gt;.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_Command"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage    &lt;<ph id="ph1">`inputBindingDerivedClass`</ph> <ph id="ph2">`Command`</ph>="&lt;xref:System.Windows.Input.ICommand&gt;"/&gt;      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Command"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph3">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.Command&gt;       &lt;iCommandImplementation/&gt;     &lt;/inputBindingDerivedClass.Command&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_Command"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph4">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_Command"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # Utilizzo dell'attributo XAML <ph id="ph1">`inputBindingDerivedClass`</ph> <ph id="ph2">`Command`</ph>= "&lt;xref:System.Windows.Input.ICommand&gt;" / &gt; <bpt id="p2">&lt;a name="xamlPropertyElementUsage_Command"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # utilizzo dell'elemento di proprietà XAML <ph id="ph3">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.Command&gt;       &lt;iCommandImplementation/&gt;     &lt;/inputBindingDerivedClass.Command&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_Command"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # valori XAML <ph id="ph4">`inputBindingDerivedClass`</ph> una classe derivata di &lt;xref:System.Windows.Input.InputBinding&gt;che supporta la sintassi degli elementi oggetto, ad esempio &lt;xref:System.Windows.Input.KeyBinding&gt; &lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; o&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;       &lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
          <target state="translated">Vedere la sezione Osservazioni.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`iCommandImplementation`</ph>    An object implementation of &lt;xref:System.Windows.Input.ICommand&gt; that supports object element syntax (has a public default constructor).</source>
          <target state="translated"><ph id="ph1">`iCommandImplementation`</ph>Un'implementazione dell'oggetto &lt;xref:System.Windows.Input.ICommand&gt;che supporta la sintassi dell'elemento oggetto (ha un costruttore predefinito pubblico).&lt;/xref:System.Windows.Input.ICommand&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The associated command.</source>
          <target state="translated">Il comando associato.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The Command value is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Il valore del comando è <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets or sets the command-specific data for a particular command.</source>
          <target state="translated">Ottiene o imposta i dati di comandi specifici per un determinato comando.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The CommandParameter property is used to pass specific information to the command when it is executed.</source>
          <target state="translated">La proprietà CommandParameter viene utilizzata per passare informazioni specifiche per il comando quando viene eseguita.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The type of the data is defined by the command.</source>
          <target state="translated">Il tipo di dati è definito dal comando.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</source>
          <target state="translated">Molti comandi non si prevedono i parametri di comando. Per questi comandi, verranno ignorati i parametri di comando passati.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the command that an input binding is associated with is a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the CommandParameter of the input binding is passed to the &lt;xref:System.Windows.Input.RoutedCommand&gt; handlers through the &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt; and the &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt; event data when the command is processed.</source>
          <target state="translated">Se il comando associato a un'associazione di input è un &lt;xref:System.Windows.Input.RoutedCommand&gt;, CommandParameter dell'associazione di input viene passato per il &lt;xref:System.Windows.Input.RoutedCommand&gt;gestori tramite il &lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;e &lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;dati dell'evento quando viene elaborato il comando.&lt;/xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt; &lt;/xref:System.Windows.Input.ExecutedRoutedEventArgs&gt; &lt;/xref:System.Windows.Input.RoutedCommand&gt; &lt;/xref:System.Windows.Input.RoutedCommand&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The data type and purpose of the command parameter are defined differently for each command and can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il tipo di dati e lo scopo del parametro di comando vengono definiti in modo diverso per ogni comando e può essere <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can bind the &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;, CommandParameter, and &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; properties to an &lt;xref:System.Windows.Input.ICommand&gt; that is defined on an object.</source>
          <target state="translated">È possibile associare il &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;, CommandParameter, e &lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;proprietà per un &lt;xref:System.Windows.Input.ICommand&gt;definito su un oggetto.&lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt; &lt;/xref:System.Windows.Input.InputBinding.Command%2A&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">In questo modo è possibile definire un comando personalizzato e associarlo all'input dell'utente.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the second example in &lt;xref:System.Windows.Input.InputBinding&gt;.</source>
          <target state="translated">Per ulteriori informazioni, vedere il secondo esempio &lt;xref:System.Windows.Input.InputBinding&gt;.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">La &lt;xref:System.Windows.Input.InputBinding&gt;classe non supporta <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> utilizzo perché non esporre un costruttore predefinito pubblico (ha un costruttore predefinito, ma è protetto).&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and therefore, can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto è possibile impostare le proprietà ereditate da &lt;xref:System.Windows.Input.InputBinding&gt;con <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> utilizzo.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">Due esistente &lt;xref:System.Windows.Input.InputBinding&gt;le classi derivate che possono essere implementate in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> e impostare le proprietà in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> sono &lt;xref:System.Windows.Input.KeyBinding&gt; &lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; e&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandParameter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;inputBindingDerivedClass CommandParameter="commandParameterString"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlPropertyElementUsage_CommandParameter"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph2">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.CommandParameter&gt;       &lt;commandParameterObject/&gt;     &lt;/inputBindingDerivedClass.CommandParameter&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph>      <bpt id="p3">&lt;a name="xamlValues_CommandParameter"&gt;</bpt><ept id="p3">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph3">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandParameter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # Utilizzo dell'attributo XAML <ph id="ph1">```   &lt;inputBindingDerivedClass CommandParameter="commandParameterString"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlPropertyElementUsage_CommandParameter"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # utilizzo dell'elemento di proprietà XAML <ph id="ph2">```   &lt;inputBindingDerivedClass&gt;     &lt;inputBindingDerivedClass.CommandParameter&gt;       &lt;commandParameterObject/&gt;     &lt;/inputBindingDerivedClass.CommandParameter&gt;   &lt;/inputBindingDerivedClass&gt;   ```</ph> <bpt id="p3">&lt;a name="xamlValues_CommandParameter"&gt;</bpt> <ept id="p3">&lt;/a&gt;</ept> # # valori XAML <ph id="ph3">`inputBindingDerivedClass`</ph> una classe derivata di &lt;xref:System.Windows.Input.InputBinding&gt;che supporta la sintassi degli elementi oggetto, ad esempio &lt;xref:System.Windows.Input.KeyBinding&gt;o &lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;            </target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
          <target state="translated">Vedere la sezione Osservazioni.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`commandParameterString`</ph>    A string that is processed by a particular command.</source>
          <target state="translated"><ph id="ph1">`commandParameterString`</ph>Stringa che viene elaborata da un particolare comando.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Strings are the common type used for command parameters because they can be easily set in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Le stringhe sono il tipo comune utilizzato per i parametri del comando, perché possono essere impostate facilmente in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</source>
          <target state="translated">Per il formato è prevista una stringa e il suo scopo, vedere la documentazione relativa al comando associato all'associazione di input.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many commands do not expect parameters.</source>
          <target state="translated">Molti comandi non richiedono parametri.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`commandParameterObject`</ph>    An object that is processed by a particular command.</source>
          <target state="translated"><ph id="ph1">`commandParameterObject`</ph>Oggetto che viene elaborato da un particolare comando.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>All existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.</source>
          <target state="translated">Tutti i valori esistenti <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> comandi usano le stringhe.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, this property element syntax is only relevant for custom command scenarios.</source>
          <target state="translated">Pertanto, questa sintassi degli elementi di proprietà è rilevante solo per gli scenari di comando personalizzato.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to support this syntax, the <ph id="ph1">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).</source>
          <target state="translated">Per supportare questa sintassi, il <ph id="ph1">`commandParameterObject`</ph> oggetto deve supportare anche la sintassi degli elementi oggetto (deve avere un costruttore predefinito pubblico).</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The command-specific data.</source>
          <target state="translated">I dati specifici del comando.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Il valore predefinito è <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandParameter*&gt; dependency property.</source>
          <target state="translated">Identifica la &lt;xref:System.Windows.Input.InputBinding.CommandParameter*&gt;proprietà di dipendenza.&lt;/xref:System.Windows.Input.InputBinding.CommandParameter*&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.Command*&gt; dependency property.</source>
          <target state="translated">Identifica la &lt;xref:System.Windows.Input.InputBinding.Command*&gt;proprietà di dipendenza.&lt;/xref:System.Windows.Input.InputBinding.Command*&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets or sets the target element of the command.</source>
          <target state="translated">Ottiene o imposta l'elemento di destinazione del comando.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the CommandTarget property on an &lt;xref:System.Windows.Input.ICommandSource&gt; object is applicable only when the &lt;xref:System.Windows.Input.ICommand&gt; is a &lt;xref:System.Windows.Input.RoutedCommand&gt;.</source>
          <target state="translated">Nel <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]</ph> sistema, la proprietà CommandTarget dei comandi in un &lt;xref:System.Windows.Input.ICommandSource&gt;oggetto è applicabile solo quando &lt;xref:System.Windows.Input.ICommand&gt;è un &lt;xref:System.Windows.Input.RoutedCommand&gt;.&lt;/xref:System.Windows.Input.RoutedCommand&gt; &lt;/xref:System.Windows.Input.ICommand&gt; &lt;/xref:System.Windows.Input.ICommandSource&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the CommandTarget is set on an &lt;xref:System.Windows.Input.ICommandSource&gt; and the corresponding command is not a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is ignored.</source>
          <target state="translated">Se il CommandTarget è impostata su un &lt;xref:System.Windows.Input.ICommandSource&gt;e il comando corrispondente non è un &lt;xref:System.Windows.Input.RoutedCommand&gt;, la destinazione del comando viene ignorata.&lt;/xref:System.Windows.Input.RoutedCommand&gt; &lt;/xref:System.Windows.Input.ICommandSource&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>When used with a &lt;xref:System.Windows.Input.RoutedCommand&gt;, the command target is the object on which the &lt;xref:System.Windows.Input.CommandManager.Executed&gt; and &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt; events are raised.</source>
          <target state="translated">Quando si utilizza un &lt;xref:System.Windows.Input.RoutedCommand&gt;, la destinazione del comando è l'oggetto in cui il &lt;xref:System.Windows.Input.CommandManager.Executed&gt;e &lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;gli eventi vengono generati.&lt;/xref:System.Windows.Input.CommandManager.CanExecute&gt; &lt;/xref:System.Windows.Input.CommandManager.Executed&gt; &lt;/xref:System.Windows.Input.RoutedCommand&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the CommandTarget property is not set, the element with keyboard focus is used as the target.</source>
          <target state="translated">Se la proprietà CommandTarget non è impostata, l'elemento con stato attivo della tastiera è utilizzato come destinazione.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Input.InputBinding&gt; class itself does not support <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">Il &lt;xref:System.Windows.Input.InputBinding&gt;stessa classe non supporta <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> utilizzo, in quanto non espone un costruttore predefinito pubblico (è presente un costruttore predefinito, ma è protetto).&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, derived classes can expose a public constructor and therefore can set properties that are inherited from &lt;xref:System.Windows.Input.InputBinding&gt; with a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">Tuttavia, le classi derivate possono esporre un costruttore pubblico e pertanto possibile impostare le proprietà ereditate da &lt;xref:System.Windows.Input.InputBinding&gt;con un <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> utilizzo.&lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two existing &lt;xref:System.Windows.Input.InputBinding&gt; derived classes that can be instantiated in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> are &lt;xref:System.Windows.Input.KeyBinding&gt; and &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated">Due esistente &lt;xref:System.Windows.Input.InputBinding&gt;le classi derivate che possono essere implementate in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> e impostare le proprietà in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> sono &lt;xref:System.Windows.Input.KeyBinding&gt; &lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; e&lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandTarget"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Attribute Usage      <ph id="ph1">```   &lt;inputBindingDerivedClass CommandTarget="bindingToTarget"/&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_CommandTarget"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <ph id="ph2">`inputBindingDerivedClass`</ph>    A derived class of &lt;xref:System.Windows.Input.InputBinding&gt; that supports object element syntax, such as &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlAttributeUsage_CommandTarget"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # Utilizzo dell'attributo XAML <ph id="ph1">```   &lt;inputBindingDerivedClass CommandTarget="bindingToTarget"/&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_CommandTarget"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # valori XAML <ph id="ph2">`inputBindingDerivedClass`</ph> una classe derivata di &lt;xref:System.Windows.Input.InputBinding&gt;che supporta la sintassi degli elementi oggetto, ad esempio &lt;xref:System.Windows.Input.KeyBinding&gt;o &lt;xref:System.Windows.Input.MouseBinding&gt;.&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;      </target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
          <target state="translated">Vedere la sezione Osservazioni.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`bindingToTarget`</ph>    A string that uses a type of binding syntax that can return an object reference to an existing named element.</source>
          <target state="translated"><ph id="ph1">`bindingToTarget`</ph>Elemento denominato da una stringa che utilizza un tipo di sintassi di associazione che può restituire un riferimento all'oggetto a un oggetto esistente.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>See Remarks.</source>
          <target state="translated">Vedere la sezione Osservazioni.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The target of the command.</source>
          <target state="translated">La destinazione del comando.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Il valore predefinito è <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.Input.InputBinding.CommandTarget*&gt; dependency property.</source>
          <target state="translated">Identifica la &lt;xref:System.Windows.Input.InputBinding.CommandTarget*&gt;proprietà di dipendenza.&lt;/xref:System.Windows.Input.InputBinding.CommandTarget*&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Da aggiungere.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creates an instance of an <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Crea un'istanza di un <bpt id="p1">&lt;xref href="System.Windows.Input.InputBinding"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The new object.</source>
          <target state="translated">Nuovo oggetto.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with this input binding.</source>
          <target state="translated">Ottiene o imposta il <bpt id="p1">&lt;xref href="System.Windows.Input.InputGesture"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> associata a questa associazione di input.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The associated gesture.</source>
          <target state="translated">Il movimento associato.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Il valore predefinito è <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Makes the instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> by using base (non-animated) property values.</source>
          <target state="translated">Rende l'istanza un clone bloccato dell'oggetto specificato <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> utilizzando i valori di proprietà di base (non animati).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">Oggetto da clonare.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Makes the current instance a frozen clone of the specified <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Rende l'istanza corrente di un clone bloccato dell'oggetto specificato <bpt id="p1">&lt;xref href="System.Windows.Freezable"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
          <target state="translated">Se l'oggetto ha proprietà di dipendenza animate, i valori animati correnti vengono copiati.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The object to clone.</source>
          <target state="translated">Oggetto da clonare.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>