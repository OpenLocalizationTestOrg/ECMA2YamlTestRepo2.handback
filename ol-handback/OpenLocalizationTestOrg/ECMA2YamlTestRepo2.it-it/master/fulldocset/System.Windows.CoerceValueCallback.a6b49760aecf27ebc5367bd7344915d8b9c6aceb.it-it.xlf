<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f98a5f21694485805037062331e61c84ab6c7b89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.CoerceValueCallback.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de928fc261daaadfc2ef65128adb603e4dd87ffb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8a15d9a78bddc35a28aedda845459834d8a028d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</source>
          <target state="translated">Fornisce un modello per un metodo che viene chiamato ogni volta che un valore di proprietà di dipendenza viene rivalutato o coercizione specificamente richiesto.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Callbacks based on CoerceValueCallback can be assigned to a dependency property through several different techniques.</source>
          <target state="translated">I callback basati su CoerceValueCallback possono essere assegnati a una proprietà di dipendenza tramite alcune tecniche diverse.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each of these techniques requires that you first create a new property metadata object (&lt;xref:System.Windows.PropertyMetadata&gt;, or a derived class such as &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).</source>
          <target state="translated">Ognuna di queste tecniche è necessario creare innanzitutto un nuovo oggetto di metadati di proprietà (&lt;xref:System.Windows.PropertyMetadata&gt;, o una classe derivata, ad esempio &lt;xref:System.Windows.FrameworkPropertyMetadata&gt;).&lt;/xref:System.Windows.FrameworkPropertyMetadata&gt; &lt;/xref:System.Windows.PropertyMetadata&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Create the metadata object using a constructor signature that takes the <ph id="ph1">`coerceValueCallback`</ph> parameter, and assign that parameter to your callback handler.</source>
          <target state="translated">Creare l'oggetto di metadati utilizzando una firma del costruttore che accetta il <ph id="ph1">`coerceValueCallback`</ph> parametro e assegnare tale parametro al gestore del callback.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or construct the metadata by any signature and set the &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; property prior to putting the metadata in use.</source>
          <target state="translated">O creare i metadati da qualsiasi firma e un set di &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;proprietà prima di portare i metadati in uso.&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have this metadata, you can:      -   Define a new dependency property on a new class, using either signature of  &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, giving the metadata as the <ph id="ph1">`typeMetadata`</ph> value.</source>
          <target state="translated">Quando si dispone di questi metadati, è possibile:-definire una nuova proprietà di dipendenza in una nuova classe, utilizzando la firma di &lt;xref:System.Windows.DependencyProperty.Register%2A&gt;, fornendo i metadati come il <ph id="ph1">`typeMetadata`</ph> valore.&lt;/xref:System.Windows.DependencyProperty.Register%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Override the metadata (call &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) for an existing dependency property, when you derive from the class that owns the dependency property.</source>
          <target state="translated">-Eseguire l'override dei metadati (chiamare &lt;xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;) per una proprietà di dipendenza esistente, quando si deriva dalla classe cui appartiene la proprietà di dipendenza.&lt;/xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Add an existing dependency property to a new &lt;xref:System.Windows.DependencyObject&gt; class, using new metadata, by calling &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.</source>
          <target state="translated">-Aggiungere una proprietà di dipendenza esistente in una nuova &lt;xref:System.Windows.DependencyObject&gt;classe, utilizzando i nuovi metadati, chiamando &lt;xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt;.&lt;/xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29&gt; &lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Implementations of this callback should check the value in <ph id="ph1">`baseValue`</ph> and determine based on either the value or the type whether this is a value that needs to be further coerced.</source>
          <target state="translated">Le implementazioni di questo callback devono controllare il valore <ph id="ph1">`baseValue`</ph> e determinare in base il valore o il tipo se si tratta di un valore che deve essere ulteriormente assegnato.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for a dependency property is invoked any time that the property system or any other caller calls &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt; on a &lt;xref:System.Windows.DependencyObject&gt; instance, specifying that property's identifier as the <ph id="ph1">`dp`</ph>.</source>
          <target state="translated">Il &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;per una dipendenza di proprietà viene richiamata ogni volta che il sistema di proprietà o altri chiamanti chiamano &lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;su un &lt;xref:System.Windows.DependencyObject&gt;istanza, specificando l'identificatore della proprietà come il <ph id="ph1">`dp`</ph>.&lt;/xref:System.Windows.DependencyObject&gt; &lt;/xref:System.Windows.DependencyObject.CoerceValue%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changes to the property value may have come from any possible participant in the property system.</source>
          <target state="translated">Le modifiche al valore della proprietà potrebbero provenire da un partecipante possibili nel sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</source>
          <target state="translated">Sono inclusi gli stili, invalidazione generica, trigger, ereditarietà del valore di proprietà e impostazione del valore locale.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generally you should avoid specifying more than one &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; for any given dependency property (overriding or adding with new metadata for a dependency property that already had a &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).</source>
          <target state="translated">In genere, è consigliabile evitare di specificare più di una &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;per una determinata proprietà di dipendenza (si esegue l'override o l'aggiunta di nuovi metadati per una proprietà di dipendenza che dispone già di un &lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;).&lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt; &lt;/xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one of the callbacks will be able to act.</source>
          <target state="translated">Solo uno dei callback sarà in grado di agire.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the &lt;xref:System.Windows.DependencyObject&gt; caller.</source>
          <target state="translated">Il callback che agisce sarà quello che è stato applicato alla classe più derivata nell'ereditarietà rispetto al &lt;xref:System.Windows.DependencyObject&gt;chiamante.&lt;/xref:System.Windows.DependencyObject&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</source>
          <target state="translated">Quando viene eseguito l'override dei metadati, vengono sostituiti gli altri callback assegnati ai metadati per la proprietà di dipendenza esistenti superiore nella gerarchia del proprietario.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>