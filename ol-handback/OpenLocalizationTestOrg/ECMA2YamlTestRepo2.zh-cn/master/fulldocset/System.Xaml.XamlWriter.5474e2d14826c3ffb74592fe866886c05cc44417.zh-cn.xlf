<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f55a66b17a0893f709950c5df6dd09df06a0d1f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlWriter.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c1d5cdf045e6e0c7279481a6b3c5549586dc398</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a29166a9764d72ef00d0e8acb4275872a44bc25e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides default implementation and base class definitions for a XAML writer.</source>
          <target state="translated">提供了默认的 XAML 编写器的实现和基类定义。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is not a working default XAML writer; you must either derive from XamlWriter and implement its abstract members, or use an existing XamlWriter derived class.</source>
          <target state="translated">这不是工作默认 XAML 编写器;你必须从 XamlWriter 派生和实现的抽象成员，或使用现有 XamlWriter 派生类。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The two most relevant practical derived classes of XamlWriter are the &lt;xref:System.Xaml.XamlXmlWriter&gt; and &lt;xref:System.Xaml.XamlObjectWriter&gt; classes, as the following details explain:      -   &lt;xref:System.Xaml.XamlXmlWriter&gt; processes a XAML node set and produces an XML text file.</source>
          <target state="translated">两个最相关实际派生的类 XamlWriter 很&lt;xref:System.Xaml.XamlXmlWriter&gt;和&lt;xref:System.Xaml.XamlObjectWriter&gt;类，如以下详细信息说明:-&lt;xref:System.Xaml.XamlXmlWriter&gt;处理 XAML 节点集并生成一个 XML 文本文件。&lt;/xref:System.Xaml.XamlXmlWriter&gt; &lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlXmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This class might be used for serialization or as part of the function of a tool that works with in-memory representation of XAML and produces XAML file output.</source>
          <target state="translated">用于序列化或作为一种工具，使用内存中表示形式的 XAML 工作，并且生成 XAML 文件输出的函数的一部分，则可能会使用此类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-   &lt;xref:System.Xaml.XamlObjectWriter&gt; processes a XAML node set and produces an object graph.</source>
          <target state="translated">-&lt;xref:System.Xaml.XamlObjectWriter&gt;处理 XAML 节点集并生成对象图。&lt;/xref:System.Xaml.XamlObjectWriter&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This class might be used as part of a full or partial customization of a technology's XAML parser.</source>
          <target state="translated">此类可能使用的一种技术的 XAML 分析器的完整或部分自定义项的一部分。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.XamlWriterSettings&gt; is a class for settings that are used by a XamlWriter; however, by default, the &lt;xref:System.Xaml.XamlWriterSettings&gt; class does not hold any specific settings.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlWriterSettings&gt;是用于使用 XamlWriter; 的设置的类但是，默认情况下，&lt;xref:System.Xaml.XamlWriterSettings&gt;类不包含任何特定的设置。&lt;/xref:System.Xaml.XamlWriterSettings&gt;&lt;/xref:System.Xaml.XamlWriterSettings&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The XamlWriter base constructor does not use this settings class as an argument, nor does any other XamlWriter member.</source>
          <target state="translated">XamlWriter 基构造函数不使用此设置类作为自变量，也不任何其他 XamlWriter 成员。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Instead, the &lt;xref:System.Xaml.XamlXmlWriter&gt; and &lt;xref:System.Xaml.XamlObjectWriter&gt; classes include their own settings classes as construction arguments.</source>
          <target state="translated">相反，&lt;xref:System.Xaml.XamlXmlWriter&gt;和&lt;xref:System.Xaml.XamlObjectWriter&gt;类包括其自己设置类作为构造参数。&lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlXmlWriter&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These settings classes are &lt;xref:System.Xaml.XamlXmlWriterSettings&gt; and &lt;xref:System.Xaml.XamlObjectWriterSettings&gt;.</source>
          <target state="translated">这些设置类是&lt;xref:System.Xaml.XamlXmlWriterSettings&gt;和&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;。&lt;/xref:System.Xaml.XamlObjectWriterSettings&gt; &lt;/xref:System.Xaml.XamlXmlWriterSettings&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The settings classes define actual settings values and are based on &lt;xref:System.Xaml.XamlWriterSettings&gt;, so that they can use the &lt;xref:System.Xaml.XamlWriterSettings&gt; merge feature.</source>
          <target state="translated">设置类定义实际设置值和基于&lt;xref:System.Xaml.XamlWriterSettings&gt;，以便他们可以使用&lt;xref:System.Xaml.XamlWriterSettings&gt;合并功能。&lt;/xref:System.Xaml.XamlWriterSettings&gt; &lt;/xref:System.Xaml.XamlWriterSettings&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Closes the XAML writer object.</source>
          <target state="translated">关闭 XAML 编写器对象。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the base implementation, calling Close calls the &lt;xref:System.Xaml.XamlWriter.Dispose%2A&gt; method with the <ph id="ph1">`isDisposing`</ph> parameter as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">在基实现中，调用关闭调用&lt;xref:System.Xaml.XamlWriter.Dispose%2A&gt;方法替换<ph id="ph1">`isDisposing`</ph>参数作为<ph id="ph2">`true`</ph>。&lt;/xref:System.Xaml.XamlWriter.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">释放由非托管的资源<bpt id="p1">&lt;xref href="System.Xaml.XamlWriter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，还可以释放托管的资源。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You must call the base class to get &lt;xref:System.Xaml.XamlWriter.IsDisposed%2A&gt; = <ph id="ph1">`true`</ph>.</source>
          <target state="translated">必须调用基的类，以获取&lt;xref:System.Xaml.XamlWriter.IsDisposed%2A&gt;= <ph id="ph1">`true`</ph>。&lt;/xref:System.Xaml.XamlWriter.IsDisposed%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release the managed resources; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要释放托管的资源;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Gets whether &lt;xref:System.Xaml.XamlWriter.Dispose*&gt; has been called.</source>
          <target state="translated">获取是否&lt;xref:System.Xaml.XamlWriter.Dispose*&gt;已调用。&lt;/xref:System.Xaml.XamlWriter.Dispose*&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if &lt;xref:System.Xaml.XamlWriter.Dispose*&gt; has been called; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Xaml.XamlWriter.Dispose*&gt;调用; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Xaml.XamlWriter.Dispose*&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, gets the active XAML schema context.</source>
          <target state="translated">派生类中实现时，获取活动的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The active XAML schema context.</source>
          <target state="translated">活动的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.IDisposable.Dispose*&gt;.</source>
          <target state="translated">请参阅&lt;xref:System.IDisposable.Dispose*&gt;。&lt;/xref:System.IDisposable.Dispose*&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces the representation of an end member node.</source>
          <target state="translated">派生类中实现时，将生成最终成员节点的表示形式。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces the representation of an end object node.</source>
          <target state="translated">派生类中实现时，将生成结束对象节点的表示形式。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.</source>
          <target state="translated">派生类中实现时，生成的情况下，该对象的默认或隐式设置，而不是指定为输入的 XAML 节点集合中的离散对象值的属性值的对象。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes a XAML namespace declaration node.</source>
          <target state="translated">派生类中实现时，写入 XAML 命名空间声明节点。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The namespace declaration to write.</source>
          <target state="translated">要写入的命名空间声明。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Performs switching based on node type from the XAML reader (<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlReader.NodeType%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>) and calls the relevant <bpt id="p1">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> method for the writer implementation.</source>
          <target state="translated">执行切换基于 XAML 读取器中的节点类型 (<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlReader.NodeType%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>) 并调用相关<bpt id="p1">&lt;xref uid="langword_csharp_Write" name="Write" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>的编写器实现的方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">##</ph> Notes for Inheritors    The WriteNode method is not a virtual method because it has practical implementation for all existing &lt;xref:System.Xaml.XamlNodeType&gt; values.</source>
          <target state="translated"><ph id="ph1">##</ph>说明继承者 WriteNode 方法不是虚拟方法，因为它具有所有现有的实际实现&lt;xref:System.Xaml.XamlNodeType&gt;值。&lt;/xref:System.Xaml.XamlNodeType&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Based on &lt;xref:System.Xaml.XamlNodeType&gt;, WriteNode calls into the <ph id="ph1">`Write`</ph> virtual members that are dedicated to particular node types.</source>
          <target state="translated">基于&lt;xref:System.Xaml.XamlNodeType&gt;，WriteNode 调入<ph id="ph1">`Write`</ph>专用于特定节点类型的虚拟成员。&lt;/xref:System.Xaml.XamlNodeType&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you have an advanced XAML writing scenario that expands the XAML type system and XAML node stream concept so that new node types are defined, do not use WriteNode calls in your logic.</source>
          <target state="translated">如果必须扩展的 XAML 类型系统和 XAML 节点流概念，以便定义新的节点类型的高级的 XAML 编写方案，请不要在你的逻辑中使用 WriteNode 调用。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You must instead provide your own alternative for node-type switching logic in the class or in virtual overrides.</source>
          <target state="translated">而是必须的节点类型切换逻辑在类或虚拟的重写中提供您自己的替代。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The reader to use for node determination.</source>
          <target state="translated">要用于确定节点的读取器。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default implementation encountered a <bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is not in the default enumeration.</source>
          <target state="translated">默认实现遇到<bpt id="p1">&lt;xref href="System.Xaml.XamlNodeType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>不在默认枚举。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes the representation of a start member node.</source>
          <target state="translated">派生类中实现时，将开始成员节点的表示形式写入。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The member node to write.</source>
          <target state="translated">要写入的成员节点。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes the representation of a start object node.</source>
          <target state="translated">派生类中实现时，将开始对象节点的表示形式写入。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The XAML type of the object to write.</source>
          <target state="translated">要写入的对象的 XAML 类型。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, writes a value node.</source>
          <target state="translated">派生类中实现时，写入的值节点。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value to write.</source>
          <target state="translated">要写入的值。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>