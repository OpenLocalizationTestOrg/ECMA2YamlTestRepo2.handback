<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddc805849dad52b7f6ecc8dc61619425ff6d15ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.AppDomain.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f47267a56bd269c42a048de45ae6d1f5a39a15c3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">447c5c8ccca396a96683bb7393a2ee01d04ec844</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an application domain, which is an isolated environment where applications execute.</source>
          <target state="translated">表示应用程序域，它是一个独立应用程序在其中执行的环境。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Application domains, which are represented by AppDomain objects, help provide isolation, unloading, and security boundaries for executing managed code.</source>
          <target state="translated">应用程序域，它们由 AppDomain 对象的形式表示，帮助提供有关执行托管的代码的隔离、 卸载和安全边界。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Use application domains to isolate tasks that might bring down a process.</source>
          <target state="translated">-使用应用程序域隔离可能会终止进程的任务。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the state of the AppDomain that's executing a task becomes unstable, the AppDomain can be unloaded without affecting the process.</source>
          <target state="translated">如果正在执行任务的 appdomain 状态变得不稳定，AppDomain 可以卸载而不会影响该过程。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This is important when a process must run for long periods without restarting.</source>
          <target state="translated">进程必须运行很长一段无需重新启动时，这很重要。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can also use application domains to isolate tasks that should not share data.</source>
          <target state="translated">你还可以使用应用程序域隔离不应共享数据的任务。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>-   If an assembly is loaded into the default application domain, it cannot be unloaded from memory while the process is running.</source>
          <target state="translated">-如果程序集被加载到默认应用程序域，它不能从内存中卸载过程运行时。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, if you open a second application domain to load and execute the assembly, the assembly is unloaded when that application domain is unloaded.</source>
          <target state="translated">但是，如果您打开第二个应用程序域加载和执行程序集，程序集是卸载卸载该应用程序域时。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use this technique to minimize the working set of long-running processes that occasionally use large DLLs.</source>
          <target state="translated">使用此方法最大程度减少偶尔使用大型 Dll 的长时间运行进程的工作集。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Multiple application domains can run in a single process; however, there is not a one-to-one correlation between application domains and threads.</source>
          <target state="translated">多个应用程序域可以运行在一个进程中;但是，没有应用程序域和线程之间的一对一的相关性。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Several threads can belong to a single application domain, and while a given thread is not confined to a single application domain, at any given time, a thread executes in a single application domain.</source>
          <target state="translated">多个线程可以属于单个应用程序域，并且单个应用程序域中时的给定的线程并不局限于单个应用程序域，在任何给定时间，执行线程。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Application domains are created using the &lt;xref:System.AppDomain.CreateDomain%2A&gt; method.</source>
          <target state="translated">使用创建应用程序域&lt;xref:System.AppDomain.CreateDomain%2A&gt;方法。&lt;/xref:System.AppDomain.CreateDomain%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>AppDomain instances are used to load and execute assemblies (&lt;xref:System.Reflection.Assembly&gt;).</source>
          <target state="translated">AppDomain 实例用于加载和执行程序集 (&lt;xref:System.Reflection.Assembly&gt;)。&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When an AppDomain is no longer in use, it can be unloaded.</source>
          <target state="translated">AppDomain 中不再使用时，它可以卸载。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The AppDomain class implements a set of events that enable applications to respond when an assembly is loaded, when an application domain will be unloaded, or when an unhandled exception is thrown.</source>
          <target state="translated">AppDomain 类实现一的组启用应用程序时加载的程序集，当应用程序域将被卸载，或引发未经处理的异常时进行响应的事件。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information on using application domains, see <bpt id="p1">[</bpt>Application Domains<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关使用应用程序域的详细信息，请参阅<bpt id="p1">[</bpt>应用程序域<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This class implements the &lt;xref:System.MarshalByRefObject&gt;, &lt;xref:System._AppDomain&gt;, and &lt;xref:System.Security.IEvidenceFactory&gt; interfaces.</source>
          <target state="translated">此类实现&lt;xref:System.MarshalByRefObject&gt;， &lt;xref:System._AppDomain&gt;，和&lt;xref:System.Security.IEvidenceFactory&gt;接口。&lt;/xref:System.Security.IEvidenceFactory&gt; &lt;/xref:System._AppDomain&gt; &lt;/xref:System.MarshalByRefObject&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You should never create a remotable wrapper for an AppDomain object.</source>
          <target state="translated">切勿创建 AppDomain 对象的远程操作包装器。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Doing so could publish a remote reference to that AppDomain, exposing methods such as &lt;xref:System.AppDomain.CreateInstance%2A&gt; to remote access and effectively destroying code access security for that AppDomain.</source>
          <target state="translated">这样可以将发布到该 AppDomain 中，如公开方法的远程引用&lt;xref:System.AppDomain.CreateInstance%2A&gt;与远程访问和有效地销毁该 appdomain 的代码访问安全性。&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Malicious clients connecting to the remoted AppDomain could obtain access to any resource the AppDomain itself has access to.</source>
          <target state="translated">连接到远程连接的 AppDomain 的恶意客户端无法获取到 AppDomain 本身有权访问任何资源的访问权限。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Do not create remotable wrappers for any type that extends &lt;xref:System.MarshalByRefObject&gt; and that implements methods that could be used by malicious clients to bypass the security system.</source>
          <target state="translated">不创建任何扩展的类型的远程操作包装&lt;xref:System.MarshalByRefObject&gt;并实现恶意客户端无法用于绕过安全系统的方法。&lt;/xref:System.MarshalByRefObject&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  The default value for the &lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt; property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!CAUTION]</ph>&amp;1;&gt; 的默认值为&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;属性是<ph id="ph2">`false`</ph>。&lt;/xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This setting is unsafe for services.</source>
          <target state="translated">此设置是不安全的服务。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To prevent services from downloading partially trusted code, set this property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">若要防止服务下载部分受信任的代码，请将此属性设置为<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the activation context for the current application domain.</source>
          <target state="translated">获取当前的应用程序域的激活上下文。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An object that represents the activation context for the current application domain, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the domain has no activation context.</source>
          <target state="translated">一个对象，表示当前的应用程序域中的激活上下文或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果域具有没有激活上下文。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Appends the specified directory name to the private path list.</source>
          <target state="translated">将指定的目录名追加到专用路径列表中。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The use of this property is not recommended, because it might change the probing path for assemblies after they have already been loaded.</source>
          <target state="translated">不建议使用此属性，因为它可能会更改之后它们都已加载程序集的探测路径。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt; property instead.</source>
          <target state="translated">使用&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;属性改为。&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The private path, or relative search path, is the path relative to the base directory where the assembly resolver probes for private assemblies.</source>
          <target state="translated">专用路径或相对搜索路径是相对于此程序集冲突解决程序从中探测专用程序集的基目录的路径。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The name of the directory to be appended to the private path.</source>
          <target state="translated">要追加到专用路径的目录的名称。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets the identity of the application in the application domain.</source>
          <target state="translated">应用程序域中获取的应用程序的标识。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object that identifies the application in the application domain.</source>
          <target state="translated">用于标识应用程序域中的应用程序的对象。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</source>
          <target state="translated">获取说明授予应用程序和应用程序是否拥有允许其运行的信任级别的权限信息。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An object that encapsulates permission and trust information for the application in the application domain.</source>
          <target state="translated">封装应用程序域中应用程序的权限及信任信息的对象。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returns the assembly display name after policy has been applied.</source>
          <target state="translated">返回应用策略后的程序集显示名称。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The ApplyPolicy method takes an assembly display name and returns the post-policy display name.</source>
          <target state="translated">方法采用程序集 ApplyPolicy 显示名称，并返回应用策略后显示名称。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is useful if you need to load an assembly using policy, because the reflection-only context does not apply policy.</source>
          <target state="translated">这是你需要使用策略，将程序集的加载，因为只反射上下文不适用于策略的情况下很有用。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The assembly display name, in the form provided by the <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">程序集显示名称，在提供的格式<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A string containing the assembly display name after policy has been applied.</source>
          <target state="translated">在应用策略后，显示名称包含该程序集的字符串。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Occurs when an assembly is loaded.</source>
          <target state="translated">加载程序集时发生。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AssemblyLoadEventHandler&gt; delegate for this event indicates what assembly was loaded.</source>
          <target state="translated">&lt;xref:System.AssemblyLoadEventHandler&gt;委托此事件指示哪些程序集被加载。&lt;/xref:System.AssemblyLoadEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">若要注册的事件处理程序此事件，你必须具有所需的权限，或&lt;xref:System.Security.SecurityException&gt;引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of an assembly fails.</source>
          <target state="translated">程序集的解析失败时发生。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the &lt;xref:System.ResolveEventHandler&gt; for this event to return the assembly that is specified by the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property, or to return null if the assembly is not recognized.</source>
          <target state="translated">它负责&lt;xref:System.ResolveEventHandler&gt;此事件返回的程序集指定&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;属性，或者若要返回无法识别程序集的情况下为 null。&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; &lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The assembly must be loaded into an execution context; if it is loaded into the reflection-only context, the load that caused this event to be raised fails.</source>
          <target state="translated">该程序集必须加载到执行上下文;如果它加载到只反射上下文，导致引发此事件加载会失败。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For guidance on the use of this event, see <bpt id="p1">[</bpt>Resolving Assembly Loads<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关使用此事件的指南，请参阅<bpt id="p1">[</bpt>解析程序集加载<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property returns the assembly that requested the assembly load that could not be resolved.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>、&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;属性返回的请求无法解析的程序集加载的程序集。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, the loader might be unable to load a dependency of the requesting assembly because the requesting assembly and its dependency are not in the probing path.</source>
          <target state="translated">例如，加载程序可能无法加载请求的程序集的依赖项，因为请求的程序集和其依赖项不探测路径中。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Knowing the identity of the requesting assembly might be useful in locating the dependency or in identifying the correct version, if more than one version of the dependency is available.</source>
          <target state="translated">了解请求的程序集的标识可能定位依赖项或者在很有用标识正确的版本，如果多个依赖项的版本可用。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Beginning with the <ph id="ph2">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the &lt;xref:System.ResolveEventHandler&gt; event is raised for all assemblies, including resource assemblies.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 开头<ph id="ph2">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>、&lt;xref:System.ResolveEventHandler&gt;事件引发的所有程序集，包括资源程序集。&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In earlier versions, the event was not raised for resource assemblies.</source>
          <target state="translated">在早期版本中的资源程序集不引发事件。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the operating system is localized, the handler might be called multiple times: once for each culture in the fallback chain.</source>
          <target state="translated">如果本地化操作系统，则可能会调用处理程序多次︰ 一次针对回退链中每个区域性。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For this event, the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property returns the assembly name before policy is applied.</source>
          <target state="translated">对于此事件，&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;属性返回的程序集名称，应用策略之前。&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  If more than one event handler is registered for this event, the event handlersarecalled in order until an event handler returns a value that isn't <ph id="ph2">`null`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 如果多个事件处理程序已注册用于此事件，事件 handlersarecalled 顺序，直到事件处理程序返回一个值，不<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Subsequent event handlers are ignored.</source>
          <target state="translated">将忽略后续的事件处理程序。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets the base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">获取程序集冲突解决程序用来探测程序集的基目录。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This property corresponds to the &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">此属性对应于&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It can also be retrieved using the &lt;xref:System.AppDomain.GetData%2A&gt; method with the string "APPBASE".</source>
          <target state="translated">它可以还使用检索&lt;xref:System.AppDomain.GetData%2A&gt;与字符串"APPBASE"的方法。&lt;/xref:System.AppDomain.GetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">程序集冲突解决程序用来探测程序集基目录。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Resets the path that specifies the location of private assemblies to the empty string ("").</source>
          <target state="translated">重置指定专用程序集为空字符串的位置的路径 ("")。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The private path is a path relative to the base directory that the common language runtime searches to locate private assemblies.</source>
          <target state="translated">专用的路径是相对于基目录，公共语言运行时搜索来查找私有程序集的路径。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;。&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Resets the list of directories containing shadow copied assemblies to the empty string ("").</source>
          <target state="translated">将包含影像复制程序集为空字符串的目录列表重置 ("")。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The shadow copy path is a list of directories where shadow copied assemblies are stored.</source>
          <target state="translated">卷影复制路径是存储的卷影复制的程序集的目录列表。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;和<bpt id="p1">[</bpt>影像复制程序集<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。&lt;/xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Creates a new instance of a specified COM type.</source>
          <target state="translated">创建指定 COM 类型的新实例。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</source>
          <target state="translated">参数指定包含程序集包含类型的文件的名称和类型的名称。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Use this method to create objects remotely without having to load the type locally.</source>
          <target state="translated">使用此方法以远程创建对象，而无需本地加载该类型。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The return value must to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt; attribute with a value of <ph id="ph1">`true`</ph> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, &lt;xref:System.TypeLoadException&gt; is thrown.</source>
          <target state="translated">A&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;属性值为<ph id="ph1">`true`</ph>必须以显式或默认方式对此方法 COM 类型，来创建该类型; 的实例应用否则为&lt;xref:System.TypeLoadException&gt;引发。&lt;/xref:System.TypeLoadException&gt; &lt;/xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The name of a file containing an assembly that defines the requested type.</source>
          <target state="translated">包含定义所请求的类型的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The name of the requested type.</source>
          <target state="translated">请求类型的名称。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">一个对象，它指定的新实例的包装<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The type cannot be loaded.</source>
          <target state="translated">无法加载此类型。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>No public parameterless constructor was found.</source>
          <target state="translated">找到没有公共的无参数构造函数。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>是一个抽象类。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>-or-       This member was invoked with a late-binding mechanism.</source>
          <target state="translated">-或者-此成员使用晚期绑定机制调用。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The COM object that is being referred to is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">所引用的 COM 对象是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Creates a new instance of a specified COM type.</source>
          <target state="translated">创建指定 COM 类型的新实例。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</source>
          <target state="translated">参数指定包含程序集包含类型的文件的名称和类型的名称。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Use this method to create objects remotely without having to load the type locally.</source>
          <target state="translated">使用此方法以远程创建对象，而无需本地加载该类型。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The return value must to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt; attribute with a value of <ph id="ph1">`true`</ph> must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, &lt;xref:System.TypeLoadException&gt; is thrown.</source>
          <target state="translated">A&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;属性值为<ph id="ph1">`true`</ph>必须以显式或默认方式对此方法 COM 类型，来创建该类型; 的实例应用否则为&lt;xref:System.TypeLoadException&gt;引发。&lt;/xref:System.TypeLoadException&gt; &lt;/xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The name of a file containing an assembly that defines the requested type.</source>
          <target state="translated">包含定义所请求的类型的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The name of the requested type.</source>
          <target state="translated">请求类型的名称。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">表示计算所得的哈希代码的值。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">表示程序集清单使用的哈希算法。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">一个对象，它指定的新实例的包装<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The type cannot be loaded.</source>
          <target state="translated">无法加载此类型。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>No public parameterless constructor was found.</source>
          <target state="translated">找到没有公共的无参数构造函数。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is an abstract class.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>是一个抽象类。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>-or-       This member was invoked with a late-binding mechanism.</source>
          <target state="translated">-或者-此成员使用晚期绑定机制调用。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is the empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The COM object that is being referred to is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">所引用的 COM 对象是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the specified name.</source>
          <target state="translated">具有指定名称创建新的应用程序域。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`friendlyName`</ph> parameter is intended to identify the domain in a manner that is meaningful to humans.</source>
          <target state="translated"><ph id="ph1">`friendlyName`</ph>参数用于确定对用户有意义的方式的域。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This string should be suitable for display in user interfaces.</source>
          <target state="translated">此字符串应适合在用户界面中显示。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This method overload uses the &lt;xref:System.AppDomainSetup&gt; information from the default application domain.</source>
          <target state="translated">此方法重载使用&lt;xref:System.AppDomainSetup&gt;从默认应用程序域的信息。&lt;/xref:System.AppDomainSetup&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">新创建的应用程序域中。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the given name using the supplied evidence.</source>
          <target state="translated">具有给定名称使用提供的证据创建新的应用程序域。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">此友好名称可以显示在用户界面，以标识域中。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.FriendlyName*&gt;。&lt;/xref:System.AppDomain.FriendlyName*&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">确定在应用程序域中运行代码的标识的证据。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">传递<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以使用当前的应用程序域的证据。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">新创建的应用程序域中。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Creates a new application domain using the specified name, evidence, and application domain setup information.</source>
          <target state="translated">创建一个新的应用程序域，使用指定的名称、 证据和应用程序域设置信息。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">此友好名称可以显示在用户界面，以标识域中。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.FriendlyName*&gt;。&lt;/xref:System.AppDomain.FriendlyName*&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">确定在应用程序域中运行代码的标识的证据。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">传递<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以使用当前的应用程序域的证据。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">包含应用程序域初始化信息的对象。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">新创建的应用程序域中。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</source>
          <target state="translated">创建一个新的应用程序域，使用指定的名称、 证据、 应用程序域设置信息、 默认权限集和完全信任程序集的数组。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>You must set the &lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt; property of the &lt;xref:System.AppDomainSetup&gt; object that you supply for <ph id="ph1">`info`</ph>.</source>
          <target state="translated">必须设置&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;属性&lt;xref:System.AppDomainSetup&gt;为提供的对象<ph id="ph1">`info`</ph>。&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.ApplicationBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Otherwise, an exception is thrown.</source>
          <target state="translated">否则，会引发异常。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`securityInfo`</ph> is not supplied, the evidence from the current application domain is used.</source>
          <target state="translated">如果<ph id="ph1">`securityInfo`</ph>是未提供，用于从当前的应用程序域的证据。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The information provided for <ph id="ph1">`grantSet`</ph> and <ph id="ph2">`fullTrustAssemblies`</ph> is used to create an &lt;xref:System.Security.Policy.ApplicationTrust&gt; object for the new application domain.</source>
          <target state="translated">为提供的信息<ph id="ph1">`grantSet`</ph>和<ph id="ph2">`fullTrustAssemblies`</ph>用于创建&lt;xref:System.Security.Policy.ApplicationTrust&gt;新的应用程序域的对象。&lt;/xref:System.Security.Policy.ApplicationTrust&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">此友好名称可以显示在用户界面，以标识域中。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For more information, see the description of &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.FriendlyName*&gt;.&lt;/xref:System.AppDomain.FriendlyName*&gt;的说明</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">确定在应用程序域中运行代码的标识的证据。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">传递<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以使用当前的应用程序域的证据。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">包含应用程序域初始化信息的对象。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants.</source>
          <target state="translated">默认权限集，它是授予到所有程序集加载到不具有特定权限的新应用程序域。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>An array of strong names representing assemblies to be considered fully trusted in the new application domain.</source>
          <target state="translated">数组的强名称，表示程序集被认为完全受信任新的应用程序域中。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">新创建的应用程序域中。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The application domain is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">应用程序域<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>-or-       The &lt;xref:System.AppDomainSetup.ApplicationBase*&gt; property is not set on the <bpt id="p1">&lt;xref href="System.AppDomainSetup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that is supplied for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
          <target state="translated">-或-&lt;xref:System.AppDomainSetup.ApplicationBase*&gt;上未设置属性<bpt id="p1">&lt;xref href="System.AppDomainSetup"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>为提供的对象<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">info</ph> <ept id="p2">&lt;/code&gt;</ept>。&lt;/xref:System.AppDomainSetup.ApplicationBase*&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</source>
          <target state="translated">具有给定名称，使用证据、 应用程序基路径、 相对搜索路径和一个参数，指定是否要加载到应用程序域的程序集卷影副本创建新的应用程序域。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">此友好名称可以显示在用户界面，以标识域中。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.FriendlyName*&gt;。&lt;/xref:System.AppDomain.FriendlyName*&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">确定在应用程序域中运行代码的标识的证据。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">传递<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以使用当前的应用程序域的证据。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">程序集冲突解决程序用来探测程序集基目录。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.BaseDirectory*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.BaseDirectory*&gt;。&lt;/xref:System.AppDomain.BaseDirectory*&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The path relative to the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">相对于基目录在此程序集冲突解决程序应探测专用程序集路径。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.RelativeSearchPath*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.RelativeSearchPath*&gt;。&lt;/xref:System.AppDomain.RelativeSearchPath*&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, a shadow copy of an assembly is loaded into this application domain.</source>
          <target state="translated">如果<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，到此应用程序域加载程序集的卷影副本。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">新创建的应用程序域中。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</source>
          <target state="translated">具有给定名称，使用证据、 应用程序基路径、 相对搜索路径和一个参数，指定是否要加载到应用程序域的程序集卷影副本创建新的应用程序域。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</source>
          <target state="translated">指定初始化应用程序域时，调用的回调方法以及传递回调方法的字符串参数的数组。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This friendly name can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">此友好名称可以显示在用户界面，以标识域中。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.FriendlyName*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.FriendlyName*&gt;。&lt;/xref:System.AppDomain.FriendlyName*&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Evidence that establishes the identity of the code that runs in the application domain.</source>
          <target state="translated">确定在应用程序域中运行代码的标识的证据。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the evidence of the current application domain.</source>
          <target state="translated">传递<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以使用当前的应用程序域的证据。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The base directory that the assembly resolver uses to probe for assemblies.</source>
          <target state="translated">程序集冲突解决程序用来探测程序集基目录。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.BaseDirectory*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.BaseDirectory*&gt;。&lt;/xref:System.AppDomain.BaseDirectory*&gt;</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The path relative to the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">相对于基目录在此程序集冲突解决程序应探测专用程序集路径。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomain.RelativeSearchPath*&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.RelativeSearchPath*&gt;。&lt;/xref:System.AppDomain.RelativeSearchPath*&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to load a shadow copy of an assembly into the application domain.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>程序集卷影副本加载到应用程序域。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.AppDomainInitializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate that represents a callback method to invoke when the new <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object is initialized.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.AppDomainInitializer"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>表示时调用的回调方法的委托新<bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>初始化对象。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>An array of string arguments to be passed to the callback represented by <ph id="ph1">`adInit`</ph>, when the new <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object is initialized.</source>
          <target state="translated">数组的字符串实自变量传递给由回调<ph id="ph1">`adInit`</ph>，当新<bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>初始化对象。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The newly created application domain.</source>
          <target state="translated">新创建的应用程序域中。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;friendlyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">创建在指定的程序集中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">此方法调用的默认构造函数<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>An attempt to call CreateInstance on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">尝试在不是当前的应用程序域的目标应用程序域上调用 CreateInstance 将导致目标应用程序域中的程序集成功加载。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">由于&lt;xref:System.Reflection.Assembly&gt;不&lt;xref:System.MarshalByRefObject&gt;，当此方法尝试返回&lt;xref:System.Reflection.Assembly&gt;到当前的应用程序域加载程序集，公共语言运行时将尝试到当前的应用程序域加载程序集和负载可能会失败。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集加载到当前的应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">一个对象，它指定的新实例的包装<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">创建在指定的程序集中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A parameter specifies an array of activation attributes.</source>
          <target state="translated">一个参数指定包含激活特性的数组。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">此方法调用的默认构造函数<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>An attempt to call &lt;xref:System.AppDomain.CreateInstance%2A&gt; on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">尝试调用&lt;xref:System.AppDomain.CreateInstance%2A&gt;在目标上不是当前的应用程序域的应用程序域将导致目标应用程序域中的程序集成功加载。&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">由于&lt;xref:System.Reflection.Assembly&gt;不&lt;xref:System.MarshalByRefObject&gt;，当此方法尝试返回&lt;xref:System.Reflection.Assembly&gt;到当前的应用程序域加载程序集，公共语言运行时将尝试到当前的应用程序域加载程序集和负载可能会失败。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集加载到当前的应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">此参数与客户端激活的对象。客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">一个对象，它指定的新实例的包装<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">创建在指定的程序集中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</source>
          <target state="translated">参数指定联编程序、 绑定标志、 构造函数自变量、 区域性特定信息用于解释自变量，以及可选激活特性。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>An attempt to call &lt;xref:System.AppDomain.CreateInstance%2A&gt; on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">尝试调用&lt;xref:System.AppDomain.CreateInstance%2A&gt;在目标上不是当前的应用程序域的应用程序域将导致目标应用程序域中的程序集成功加载。&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">由于&lt;xref:System.Reflection.Assembly&gt;不&lt;xref:System.MarshalByRefObject&gt;，当此方法尝试返回&lt;xref:System.Reflection.Assembly&gt;到当前的应用程序域加载程序集，公共语言运行时将尝试到当前的应用程序域加载程序集和负载可能会失败。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集加载到当前的应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;对象使用反射。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">控制强制转换的区域性特定信息<ph id="ph1">`args`</ph>为声明的正式类型<ph id="ph2">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、&lt;xref:System.Globalization.CultureInfo&gt;则使用当前线程。&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">此参数与客户端激活的对象。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">一个对象，它指定的新实例的包装<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用比当前加载的版本更高版本的公共语言运行时编译。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">找不匹配的构造函数。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly.</source>
          <target state="translated">创建在指定的程序集中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</source>
          <target state="translated">参数指定联编程序、 绑定标志、 构造函数自变量、 区域性特定信息用于解释自变量、 激活特性和授权，以创建类型。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>An attempt to call &lt;xref:System.AppDomain.CreateInstance%2A&gt; on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</source>
          <target state="translated">尝试调用&lt;xref:System.AppDomain.CreateInstance%2A&gt;在目标上不是当前的应用程序域的应用程序域将导致目标应用程序域中的程序集成功加载。&lt;/xref:System.AppDomain.CreateInstance%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Since an &lt;xref:System.Reflection.Assembly&gt; is not &lt;xref:System.MarshalByRefObject&gt;, when this method attempts to return the &lt;xref:System.Reflection.Assembly&gt; for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</source>
          <target state="translated">由于&lt;xref:System.Reflection.Assembly&gt;不&lt;xref:System.MarshalByRefObject&gt;，当此方法尝试返回&lt;xref:System.Reflection.Assembly&gt;到当前的应用程序域加载程序集，公共语言运行时将尝试到当前的应用程序域加载程序集和负载可能会失败。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</source>
          <target state="translated">可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集加载到当前的应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;对象使用反射。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">控制强制转换的区域性特定信息<ph id="ph1">`args`</ph>为声明的正式类型<ph id="ph2">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、&lt;xref:System.Globalization.CultureInfo&gt;则使用当前线程。&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">此参数与客户端激活的对象。客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">用于授权创建信息<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">一个对象，它指定的新实例的包装<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">找不匹配的构造函数。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> should be <bpt id="p2">&lt;xref uid="langword_csharp_null." name="null." href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept></source>
          <target state="translated">当未启用旧版 CAS 策略时， <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">securityAttributes</ph> <ept id="p1">&lt;/code&gt;</ept>应为<bpt id="p2">&lt;xref uid="langword_csharp_null." name="null." href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">创建指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Parameters specify the assembly where the type is defined, and the name of the type.</source>
          <target state="translated">参数指定定义类型的程序集和类型的名称。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstance%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstance%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">此方法调用的默认构造函数<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;属性的格式<ph id="ph1">`typeName`</ph>。&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by CreateInstanceAndUnwrap, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果你进行早期绑定调用的方法<ph id="ph2">`M`</ph>类型的对象的<ph id="ph3">`T1`</ph>由 CreateInstanceAndUnwrap，返回并该方法使对类型的对象的方法的早期绑定调用<ph id="ph4">`T2`</ph>的程序集中<ph id="ph5">`C`</ph>当前程序集或包含的程序集以外<ph id="ph6">`T1`</ph>，程序集<ph id="ph7">`C`</ph>会加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">如果即使早期绑定调用，则会发生此加载<ph id="ph1">`T1.M()`</ph>的正文中进行&lt;xref:System.Reflection.Emit.DynamicMethod&gt;，或在其他动态生成的代码中。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">如果当前域是默认域，程序集<ph id="ph1">`C`</ph>进程结束前不能卸载。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">如果当前域稍后尝试加载程序集<ph id="ph1">`C`</ph>，则加载可能失败。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">指定的对象的实例<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">创建指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</source>
          <target state="translated">参数指定定义该类型的程序集、 类型的名称和激活特性的数组。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstance%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstance%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">此方法调用的默认构造函数<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;属性的格式<ph id="ph1">`typeName`</ph>。&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果你进行早期绑定调用的方法<ph id="ph2">`M`</ph>类型的对象的<ph id="ph3">`T1`</ph>由返回&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;，并方法使对类型的对象的方法的早期绑定调用<ph id="ph4">`T2`</ph>的程序集中<ph id="ph5">`C`</ph>当前程序集或包含的程序集以外<ph id="ph6">`T1`</ph>，程序集<ph id="ph7">`C`</ph>会加载到当前的应用程序域。&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">如果即使早期绑定调用，则会发生此加载<ph id="ph1">`T1.M()`</ph>的正文中进行&lt;xref:System.Reflection.Emit.DynamicMethod&gt;，或在其他动态生成的代码中。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">如果当前域是默认域，程序集<ph id="ph1">`C`</ph>进程结束前不能卸载。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">如果当前域稍后尝试加载程序集<ph id="ph1">`C`</ph>，则加载可能失败。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">此参数与客户端激活的对象。客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">指定的对象的实例<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</source>
          <target state="translated">创建在指定的程序集中，指定是否忽略类型名称的大小写; 定义的指定类型的新实例绑定特性和用于选择要创建; 类型的联编构造函数; 参数区域性;以及激活特性。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstance%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstance%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;属性的格式<ph id="ph1">`typeName`</ph>。&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果你进行早期绑定调用的方法<ph id="ph2">`M`</ph>类型的对象的<ph id="ph3">`T1`</ph>由返回&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;，并方法使对类型的对象的方法的早期绑定调用<ph id="ph4">`T2`</ph>的程序集中<ph id="ph5">`C`</ph>当前程序集或包含的程序集以外<ph id="ph6">`T1`</ph>，程序集<ph id="ph7">`C`</ph>会加载到当前的应用程序域。&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">如果即使早期绑定调用，则会发生此加载<ph id="ph1">`T1.M()`</ph>的正文中进行&lt;xref:System.Reflection.Emit.DynamicMethod&gt;，或在其他动态生成的代码中。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">如果当前域是默认域，程序集<ph id="ph1">`C`</ph>进程结束前不能卸载。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">如果当前域稍后尝试加载程序集<ph id="ph1">`C`</ph>，则加载可能失败。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;对象使用反射。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>A culture-specific object used to govern the coercion of types.</source>
          <target state="translated">用于控制类型强制的特定于区域性的对象。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、 <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>则使用当前线程。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">指定激活远程对象所需的 URL。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">此参数与客户端激活的对象。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">指定的对象的实例<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">找不匹配的构造函数。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用比当前加载的版本更高版本的公共语言运行时编译。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type.</source>
          <target state="translated">创建指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Parameters specify the name of the type, and how it is found and created.</source>
          <target state="translated">参数指定的类型，以及如何查找和创建它的名称。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstance%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstance%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstance%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>See &lt;xref:System.Reflection.AssemblyName&gt; for the format of <ph id="ph1">`assemblyName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Reflection.AssemblyName&gt;的格式<ph id="ph1">`assemblyName`</ph>。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt; property for the format of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">请参阅&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;属性的格式<ph id="ph1">`typeName`</ph>。&lt;/xref:System.Type.FullName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you make an early-bound call to a method <ph id="ph2">`M`</ph> of an object of type <ph id="ph3">`T1`</ph> that was returned by &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;, and that method makes an early-bound call to a method of an object of type <ph id="ph4">`T2`</ph> in an assembly <ph id="ph5">`C`</ph> other than the current assembly or the assembly containing <ph id="ph6">`T1`</ph>, assembly <ph id="ph7">`C`</ph> is loaded into the current application domain.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果你进行早期绑定调用的方法<ph id="ph2">`M`</ph>类型的对象的<ph id="ph3">`T1`</ph>由返回&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;，并方法使对类型的对象的方法的早期绑定调用<ph id="ph4">`T2`</ph>的程序集中<ph id="ph5">`C`</ph>当前程序集或包含的程序集以外<ph id="ph6">`T1`</ph>，程序集<ph id="ph7">`C`</ph>会加载到当前的应用程序域。&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This loading occurs even if the early-bound call to <ph id="ph1">`T1.M()`</ph> was made in the body of a &lt;xref:System.Reflection.Emit.DynamicMethod&gt;, or in other dynamically generated code.</source>
          <target state="translated">如果即使早期绑定调用，则会发生此加载<ph id="ph1">`T1.M()`</ph>的正文中进行&lt;xref:System.Reflection.Emit.DynamicMethod&gt;，或在其他动态生成的代码中。&lt;/xref:System.Reflection.Emit.DynamicMethod&gt;</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>If the current domain is the default domain, assembly <ph id="ph1">`C`</ph> cannot be unloaded until the process ends.</source>
          <target state="translated">如果当前域是默认域，程序集<ph id="ph1">`C`</ph>进程结束前不能卸载。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>If the current domain later attempts to load assembly <ph id="ph1">`C`</ph>, the load might fail.</source>
          <target state="translated">如果当前域稍后尝试加载程序集<ph id="ph1">`C`</ph>，则加载可能失败。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects using reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;对象使用反射。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>A culture-specific object used to govern the coercion of types.</source>
          <target state="translated">用于控制类型强制的特定于区域性的对象。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、 <bpt id="p2">&lt;xref uid="langword_csharp_CultureInfo" name="CultureInfo" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>则使用当前线程。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">此参数与客户端激活的对象。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">用于授权创建信息<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>An instance of the object specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">指定的对象的实例<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p1">&lt;/code&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>No matching constructor was found.</source>
          <target state="translated">找不匹配的构造函数。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typename&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The caller does not have permission to call this constructor.</source>
          <target state="translated">调用方没有权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">创建在指定的程序集文件中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The default constructor for <ph id="ph1">`typeName`</ph> is invoked.</source>
          <target state="translated">默认构造函数<ph id="ph1">`typeName`</ph>调用。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>When the CreateInstanceFrom method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">当 CreateInstanceFrom 方法用于在目标应用程序域中，而不从其进行调用时，应用程序域中创建实例时程序集加载位于目标应用程序域。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">但是，如果该实例调用的应用程序域处于解包，则以某些方式使用解包的实例会导致要加载到调用应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">例如，实例解包后，可能会请求其类型信息、 要调用其方法后期绑定。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">程序集加载到调用应用程序域时，可能会发生异常。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-如果以前的同一个程序集的另一个版本加载到调用应用程序域，或如果调用应用程序域的负载路径是不同的目标应用程序域，异常诸如&lt;xref:System.MissingMethodException&gt;可以发生。&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-如果调用应用程序域进行早期绑定调用实例类型，&lt;xref:System.InvalidCastException&gt;当尝试强制转换实例可能会引发。&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">包括包含定义所请求的类型的程序集的文件的路径名称。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">使用加载的程序集&lt;xref:System.Reflection.Assembly.LoadFrom*&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">一个对象，它的新实例，包装或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">找到没有无参数公共构造函数。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">创建在指定的程序集文件中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The default constructor for <ph id="ph1">`typeName`</ph> is invoked.</source>
          <target state="translated">默认构造函数<ph id="ph1">`typeName`</ph>调用。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关此方法的详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">当&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;方法用于在目标应用程序域中，而不从其进行调用的应用程序域中创建实例时，目标应用程序域中则加载程序集。&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">但是，如果该实例调用的应用程序域处于解包，则以某些方式使用解包的实例会导致要加载到调用应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">例如，实例解包后，可能会请求其类型信息、 要调用其方法后期绑定。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">程序集加载到调用应用程序域时，可能会发生异常。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-如果以前的同一个程序集的另一个版本加载到调用应用程序域，或如果调用应用程序域的负载路径是不同的目标应用程序域，异常诸如&lt;xref:System.MissingMethodException&gt;可以发生。&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-如果调用应用程序域进行早期绑定调用实例类型，&lt;xref:System.InvalidCastException&gt;当尝试强制转换实例可能会引发。&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">包括包含定义所请求的类型的程序集的文件的路径名称。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">使用加载的程序集&lt;xref:System.Reflection.Assembly.LoadFrom*&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">此参数与客户端激活的对象。客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">一个对象，它的新实例，包装或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">创建在指定的程序集文件中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">当&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;方法用于在目标应用程序域中，而不从其进行调用的应用程序域中创建实例时，目标应用程序域中则加载程序集。&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">但是，如果该实例调用的应用程序域处于解包，则以某些方式使用解包的实例会导致要加载到调用应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">例如，实例解包后，可能会请求其类型信息、 要调用其方法后期绑定。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">程序集加载到调用应用程序域时，可能会发生异常。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-如果以前的同一个程序集的另一个版本加载到调用应用程序域，或如果调用应用程序域的负载路径是不同的目标应用程序域，异常诸如&lt;xref:System.MissingMethodException&gt;可以发生。&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-如果调用应用程序域进行早期绑定调用实例类型，&lt;xref:System.InvalidCastException&gt;当尝试强制转换实例可能会引发。&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">包括包含定义所请求的类型的程序集的文件的路径名称。</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">使用加载的程序集&lt;xref:System.Reflection.Assembly.LoadFrom*&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;通过反射的对象。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">控制强制转换的区域性特定信息<ph id="ph1">`args`</ph>为声明的正式类型<ph id="ph2">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、&lt;xref:System.Globalization.CultureInfo&gt;则使用当前线程。&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">此参数与客户端激活的对象。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">一个对象，它的新实例，包装或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用比当前加载的版本更高版本的公共语言运行时编译。</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">创建在指定的程序集文件中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关此方法的详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>When the &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</source>
          <target state="translated">当&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;方法用于在目标应用程序域中，而不从其进行调用的应用程序域中创建实例时，目标应用程序域中则加载程序集。&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</source>
          <target state="translated">但是，如果该实例调用的应用程序域处于解包，则以某些方式使用解包的实例会导致要加载到调用应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</source>
          <target state="translated">例如，实例解包后，可能会请求其类型信息、 要调用其方法后期绑定。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>When the assembly is loaded into the calling application domain, exceptions can occur.</source>
          <target state="translated">程序集加载到调用应用程序域时，可能会发生异常。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>-   If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as &lt;xref:System.MissingMethodException&gt; can occur.</source>
          <target state="translated">-如果以前的同一个程序集的另一个版本加载到调用应用程序域，或如果调用应用程序域的负载路径是不同的目标应用程序域，异常诸如&lt;xref:System.MissingMethodException&gt;可以发生。&lt;/xref:System.MissingMethodException&gt;</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>-   If the calling application domain makes early-bound calls to the instance type, &lt;xref:System.InvalidCastException&gt; can be thrown when an attempt is made to cast the instance.</source>
          <target state="translated">-如果调用应用程序域进行早期绑定调用实例类型，&lt;xref:System.InvalidCastException&gt;当尝试强制转换实例可能会引发。&lt;/xref:System.InvalidCastException&gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>The name, including the path, of a file that contains an assembly that defines the requested type.</source>
          <target state="translated">包括包含定义所请求的类型的程序集的文件的路径名称。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>The assembly is loaded using the &lt;xref:System.Reflection.Assembly.LoadFrom*&gt; method.</source>
          <target state="translated">使用加载的程序集&lt;xref:System.Reflection.Assembly.LoadFrom*&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFrom*&gt;</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;通过反射的对象。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">控制强制转换的区域性特定信息<ph id="ph1">`args`</ph>为声明的正式类型<ph id="ph2">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、&lt;xref:System.Globalization.CultureInfo&gt;则使用当前线程。&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">此参数与客户端激活的对象。</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">用于授权创建信息<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>An object that is a wrapper for the new instance, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">一个对象，它的新实例，包装或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>The return value needs to be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> is not <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityAttributes</ph><ept id="p1">&lt;/code&gt;</ept> should be <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">当未启用旧版 CAS 策略时， <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">securityAttributes</ph> <ept id="p1">&lt;/code&gt;</ept>应<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>This instance is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">此实例是否<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">创建在指定的程序集文件中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">此方法调用的默认构造函数<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">文件名称和定义所请求的类型的程序集的路径。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">请求的对象，或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">找到没有无参数公共构造函数。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">创建在指定的程序集文件中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>This method calls the default constructor for <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">此方法调用的默认构造函数<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关此方法的详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">文件名称和定义所请求的类型的程序集的路径。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly (see the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property).</source>
          <target state="translated">请求的类型，包括命名空间而不是程序集的完全限定的名称 (请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性)。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">此参数与客户端激活的对象。客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">请求的对象，或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>No parameterless public constructor was found.</source>
          <target state="translated">找到没有无参数公共构造函数。</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</source>
          <target state="translated">创建定义在指定的程序集文件中，指定是否忽略类型名称的大小写; 的指定类型的新实例绑定特性和用于选择要创建; 类型的联编构造函数; 参数区域性;以及激活特性。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关此方法的详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">文件名称和定义所请求的类型的程序集的路径。</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;通过反射的对象。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">控制强制转换的区域性特定信息<ph id="ph1">`args`</ph>为声明的正式类型<ph id="ph2">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、&lt;xref:System.Globalization.CultureInfo&gt;则使用当前线程。&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">此参数与客户端激活的对象。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">请求的对象，或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version of the common language runtime that the version that is currently loaded.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本的公共语言运行时编译的版本，是当前加载。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the specified type defined in the specified assembly file.</source>
          <target state="translated">创建在指定的程序集文件中定义的指定类型的新实例。</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>This is a convenience method that combines &lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt; and &lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">这是将&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;和&lt;xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;.&lt;/xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.CreateInstanceFrom%2A&gt;合并的便捷方法</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>For more information about this method, see the &lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">有关此方法的详细信息，请参阅&lt;xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Activator.CreateInstanceFrom%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>The file name and path of the assembly that defines the requested type.</source>
          <target state="translated">文件名称和定义所请求的类型的程序集的路径。</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">包括命名空间而不是程序集，以返回所请求类型的完全限定的名称<ph id="ph1">&amp;lt;</ph>xref:System.Type.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>A Boolean value specifying whether to perform a case-sensitive search or not.</source>
          <target state="translated">一个布尔值，指定是否执行区分大小写的搜索。</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>A combination of zero or more bit flags that affect the search for the <ph id="ph1">`typeName`</ph> constructor.</source>
          <target state="translated">影响搜索的零个或多个位标志的组合<ph id="ph1">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bindingAttr`</ph> is zero, a case-sensitive search for public constructors is conducted.</source>
          <target state="translated">如果<ph id="ph1">`bindingAttr`</ph>为零，区分大小写的搜索，对公共构造函数。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;xref:System.Reflection.MemberInfo&gt; objects through reflection.</source>
          <target state="translated">启用绑定、 强制自变量的对象类型、 成员的调用，以及检索&lt;xref:System.Reflection.MemberInfo&gt;通过反射的对象。&lt;/xref:System.Reflection.MemberInfo&gt;</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`binder`</ph> is null, the default binder is used.</source>
          <target state="translated">如果<ph id="ph1">`binder`</ph>是 null，则使用默认的联编程序。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>The arguments to pass to the constructor.</source>
          <target state="translated">要传递给构造函数的参数。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</source>
          <target state="translated">此自变量数组必须在数量、 顺序中匹配的参数和类型的构造函数调用。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>If the default constructor is preferred, <ph id="ph1">`args`</ph> must be an empty array or null.</source>
          <target state="translated">如果默认构造函数是首选方法，<ph id="ph1">`args`</ph>必须是空数组或 null。</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Culture-specific information that governs the coercion of <ph id="ph1">`args`</ph> to the formal types declared for the <ph id="ph2">`typeName`</ph> constructor.</source>
          <target state="translated">控制强制转换的区域性特定信息<ph id="ph1">`args`</ph>为声明的正式类型<ph id="ph2">`typeName`</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`culture`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the &lt;xref:System.Globalization.CultureInfo&gt; for the current thread is used.</source>
          <target state="translated">如果<ph id="ph1">`culture`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>、&lt;xref:System.Globalization.CultureInfo&gt;则使用当前线程。&lt;/xref:System.Globalization.CultureInfo&gt;</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>An array of one or more attributes that can participate in activation.</source>
          <target state="translated">一个或多个可以参与激活的特性的数组。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Typically, an array that contains a single <bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the URL that is required to activate a remote object.</source>
          <target state="translated">通常情况下，一个数组，包含单个<bpt id="p1">&lt;xref href="System.Runtime.Remoting.Activation.UrlAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定激活远程对象所需的 URL 的对象。</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>This parameter is related to client-activated objects.</source>
          <target state="translated">此参数与客户端激活的对象。</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</source>
          <target state="translated">客户端激活是一项传统技术，保留用于向后兼容，但不是建议新的开发。</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Distributed applications should instead use Windows Communication Foundation.</source>
          <target state="translated">分布式应用程序应改用 Windows Communication Foundation。</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Information used to authorize creation of <ph id="ph1">`typeName`</ph>.</source>
          <target state="translated">用于授权创建信息<ph id="ph1">`typeName`</ph>。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>The requested object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p2">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">请求的对象，或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">typeName</ph> <ept id="p2">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>The caller cannot provide activation attributes for an object that does not inherit from <bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">调用方不能为不是继承自的对象提供激活属性<bpt id="p1">&lt;xref href="System.MarshalByRefObject"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> was not found in <ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>中未找到<ph id="ph2">&lt;code&gt;assemblyName&lt;/code&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>No matching public constructor was found.</source>
          <target state="translated">找不匹配的公共构造函数。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>The caller does not have sufficient permission to call this constructor.</source>
          <target state="translated">调用方没有足够的权限调用此构造函数。</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Gets the current application domain for the current <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取当前应用程序域当前<bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The current application domain.</source>
          <target state="translated">当前的应用程序域中。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name and access mode.</source>
          <target state="translated">定义具有指定名称和访问模式的动态程序集。</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你使用的重载&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和权限，提供你想要具有，并且包含的动态程序集的证据&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">动态程序集的访问模式。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and access mode.</source>
          <target state="translated">具有指定名称和访问模式的动态程序集。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name, access mode, and custom attributes.</source>
          <target state="translated">定义具有指定的名称、 访问模式和自定义特性的动态程序集。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">使用此方法重载来指定属性，除非在已应用创建的动态程序集时，可能无法正常工作。</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">例如，安全特性例如&lt;xref:System.Security.SecurityTransparentAttribute&gt;和&lt;xref:System.Security.SecurityCriticalAttribute&gt;如果它们未添加创建的动态程序集后，可能无法正常工作。&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>This method should be used only to define a dynamic assembly in the current application domain.</source>
          <target state="translated">应使用此方法只能用于当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>For more information about this restriction, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关此限制的详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>This method overload is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">此方法重载在中引入<ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">动态程序集的访问模式。</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">要应用于程序集的特性的可枚举列表或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>是否存在任何属性。</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头为空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, and evidence.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式和证据。</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">仅完全受信任的调用方可以提供其<ph id="ph1">`evidence`</ph>定义动态&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;时</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt;through the security policy to determine the granted permissions.</source>
          <target state="translated">运行时将映射&lt;xref:System.Security.Policy.Evidence&gt;通过安全策略以确定授予的权限。&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">部分受信任的调用方必须提供一个为 null 的<ph id="ph1">`evidence`</ph>。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">如果<ph id="ph1">`evidence`</ph>是<ph id="ph2">`null`</ph>、 运行时将复制的权限集，也就是说，当前授予和拒绝集，从调用方的&lt;xref:System.Reflection.Assembly&gt;为动态&lt;xref:System.Reflection.Assembly&gt;正在定义并将策略标记为已解决。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">如果动态&lt;xref:System.Reflection.Assembly&gt;是保存到磁盘，后面的加载将获得授予基于与位置关联的策略其中&lt;xref:System.Reflection.Assembly&gt;已保存。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你使用的重载&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和权限，提供你想要具有，并且包含的动态程序集的证据&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">为动态程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">使用证据始终作为最后一组用于策略解析的证据。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, and storage directory.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式和存储目录。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你使用的重载&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和权限，提供你想要具有，并且包含的动态程序集的证据&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">保存程序集的目录的名称。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">如果<ph id="ph1">`dir`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，目录将默认为当前目录。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</source>
          <target state="translated">定义具有指定的名称、 访问模式和自定义特性的动态程序集并指定的源用于它的安全上下文。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">使用此方法重载来指定属性，除非在已应用创建的动态程序集时，可能无法正常工作。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">例如，安全特性例如&lt;xref:System.Security.SecurityTransparentAttribute&gt;和&lt;xref:System.Security.SecurityCriticalAttribute&gt;如果它们未添加创建的动态程序集后，可能无法正常工作。&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>This method should be used only to define a dynamic assembly in the current application domain.</source>
          <target state="translated">应使用此方法只能用于当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>For more information about this restriction, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关此限制的详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>The access mode for the dynamic assembly.</source>
          <target state="translated">动态程序集的访问模式。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">要应用于程序集的特性的可枚举列表或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>是否存在任何属性。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>The source of the security context.</source>
          <target state="translated">安全上下文的源。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头为空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">securityContextSource</ph><ept id="p1">&lt;/code&gt;</ept> was not one of the enumeration values.</source>
          <target state="translated">值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">securityContextSource</ph> <ept id="p1">&lt;/code&gt;</ept>不是枚举值之一。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式、 存储目录和证据。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">仅完全受信任的调用方可以提供其<ph id="ph1">`evidence`</ph>定义动态&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;时</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">运行时将映射&lt;xref:System.Security.Policy.Evidence&gt;通过安全策略以确定授予的权限。&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">部分受信任的调用方必须提供一个为 null 的<ph id="ph1">`evidence`</ph>。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">如果<ph id="ph1">`evidence`</ph>是<ph id="ph2">`null`</ph>、 运行时将复制的权限集，也就是说，当前授予和拒绝集，从调用方的&lt;xref:System.Reflection.Assembly&gt;为动态&lt;xref:System.Reflection.Assembly&gt;正在定义并将策略标记为已解决。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">如果动态&lt;xref:System.Reflection.Assembly&gt;是保存到磁盘，后面的加载将获得授予基于与位置关联的策略其中&lt;xref:System.Reflection.Assembly&gt;已保存。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你使用的重载&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和权限，提供你想要具有，并且包含的动态程序集的证据&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">保存程序集的目录的名称。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">如果<ph id="ph1">`dir`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，目录将默认为当前目录。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">为动态程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">使用证据始终作为最后一组用于策略解析的证据。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, and permission requests.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式和权限请求。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are not used unless the dynamic assembly has been saved and reloaded into memory.</source>
          <target state="translated">为指定的权限请求<ph id="ph1">`requiredPermissions`</ph>， <ph id="ph2">`optionalPermissions`</ph>，和<ph id="ph3">`refusedPermissions`</ph>不使用除非保存动态程序集并将其重新加载到内存。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>To specify permission requests for a transient assembly that is never saved to disk, use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence as well as requested permissions, and supply an &lt;xref:System.Security.Policy.Evidence&gt; object.</source>
          <target state="translated">若要指定从不会保存到磁盘中，使用的重载的瞬态程序集的权限请求&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和所请求的权限，并提供&lt;xref:System.Security.Policy.Evidence&gt;对象。&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你使用的重载&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和权限，提供你想要具有，并且包含的动态程序集的证据&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload .</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">必需的权限请求。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">可选的权限请求。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">请求被拒绝的权限。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式、 存储目录和同步选项。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">使用此方法重载来指定属性，除非在已应用创建的动态程序集时，可能无法正常工作。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">例如，安全特性例如&lt;xref:System.Security.SecurityTransparentAttribute&gt;和&lt;xref:System.Security.SecurityCriticalAttribute&gt;如果它们未添加创建的动态程序集后，可能无法正常工作。&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; will be synchronized: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, and &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.</source>
          <target state="translated">如果<ph id="ph1">`isSynchronized`</ph>是<ph id="ph2">`true`</ph>，生成的以下方法&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;将同步︰ &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;，和&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;。&lt;/xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder&gt;</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>If two of these methods are called on different threads, one will block until the other is completed.</source>
          <target state="translated">如果其中两种方法在不同的线程调用的一个将其他完成之前一直阻止。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">保存动态程序集的目录的名称。</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the current directory is used.</source>
          <target state="translated">如果<ph id="ph1">`dir`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，则使用当前目录。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要同步的模块、 类型和成员在动态程序集，则创建否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">要应用于程序集的特性的可枚举列表或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>是否存在任何属性。</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头为空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式、 证据和权限请求。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">为指定的权限请求<ph id="ph1">`requiredPermissions`</ph>， <ph id="ph2">`optionalPermissions`</ph>，和<ph id="ph3">`refusedPermissions`</ph>才会使用<ph id="ph4">`evidence`</ph>还提供，或如果动态程序集保存并重新加载到内存。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你在包含&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">仅完全受信任的调用方可以提供其<ph id="ph1">`evidence`</ph>定义动态&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;时</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">运行时将映射&lt;xref:System.Security.Policy.Evidence&gt;通过安全策略以确定授予的权限。&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">部分受信任的调用方必须提供一个为 null 的<ph id="ph1">`evidence`</ph>。</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">如果<ph id="ph1">`evidence`</ph>是<ph id="ph2">`null`</ph>、 运行时将复制的权限集，也就是说，当前授予和拒绝集，从调用方的&lt;xref:System.Reflection.Assembly&gt;为动态&lt;xref:System.Reflection.Assembly&gt;正在定义并将策略标记为已解决。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">如果动态&lt;xref:System.Reflection.Assembly&gt;是保存到磁盘，后面的加载将获得授予基于与位置关联的策略其中&lt;xref:System.Reflection.Assembly&gt;已保存。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">为动态程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">使用证据始终作为最后一组用于策略解析的证据。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">必需的权限请求。</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">可选的权限请求。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">请求被拒绝的权限。</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式、 存储目录和权限请求。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are not used unless the dynamic assembly has been saved and reloaded into memory.</source>
          <target state="translated">为指定的权限请求<ph id="ph1">`requiredPermissions`</ph>， <ph id="ph2">`optionalPermissions`</ph>，和<ph id="ph3">`refusedPermissions`</ph>不使用除非保存动态程序集并将其重新加载到内存。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>To specify permission requests for a transient assembly that is never saved to disk, use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence as well as requested permissions, and supply an &lt;xref:System.Security.Policy.Evidence&gt; object.</source>
          <target state="translated">若要指定从不会保存到磁盘中，使用的重载的瞬态程序集的权限请求&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和所请求的权限，并提供&lt;xref:System.Security.Policy.Evidence&gt;对象。&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the &lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt; method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你使用的重载&lt;xref:System.AppDomain.DefineDynamicAssembly%2A&gt;方法，它指定证据和权限，提供你想要具有，并且包含的动态程序集的证据&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.DefineDynamicAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">保存程序集的目录的名称。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">如果<ph id="ph1">`dir`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，目录将默认为当前目录。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">必需的权限请求。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">可选的权限请求。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">请求被拒绝的权限。</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式、 存储目录、 证据和权限请求。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">为指定的权限请求<ph id="ph1">`requiredPermissions`</ph>， <ph id="ph2">`optionalPermissions`</ph>，和<ph id="ph3">`refusedPermissions`</ph>才会使用<ph id="ph4">`evidence`</ph>还提供，或如果动态程序集保存并重新加载到内存。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你在包含&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Only fully trusted callers can supply their <ph id="ph1">`evidence`</ph> when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">仅完全受信任的调用方可以提供其<ph id="ph1">`evidence`</ph>定义动态&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;时</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">运行时将映射&lt;xref:System.Security.Policy.Evidence&gt;通过安全策略以确定授予的权限。&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Partially trusted callers must supply a null <ph id="ph1">`evidence`</ph>.</source>
          <target state="translated">部分受信任的调用方必须提供一个为 null 的<ph id="ph1">`evidence`</ph>。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">如果<ph id="ph1">`evidence`</ph>是<ph id="ph2">`null`</ph>、 运行时将复制的权限集，也就是说，当前授予和拒绝集，从调用方的&lt;xref:System.Reflection.Assembly&gt;为动态&lt;xref:System.Reflection.Assembly&gt;正在定义并将策略标记为已解决。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">如果动态&lt;xref:System.Reflection.Assembly&gt;是保存到磁盘，后面的加载将获得授予基于与位置关联的策略其中&lt;xref:System.Reflection.Assembly&gt;已保存。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>This method should only be used to define a dynamic assembly in the current application domain.</source>
          <target state="translated">此方法仅应使用当前的应用程序域中定义的动态程序集。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>The name of the directory where the assembly will be saved.</source>
          <target state="translated">保存程序集的目录的名称。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">如果<ph id="ph1">`dir`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，目录将默认为当前目录。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">为动态程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">使用证据始终作为最后一组用于策略解析的证据。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">必需的权限请求。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">可选的权限请求。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">请求被拒绝的权限。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</source>
          <target state="translated">定义动态程序集使用指定的名称、 访问模式、 存储目录、 证据、 权限请求和同步选项。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>The permission requests specified for <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> are used only if <ph id="ph4">`evidence`</ph> is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">为指定的权限请求<ph id="ph1">`requiredPermissions`</ph>， <ph id="ph2">`optionalPermissions`</ph>，和<ph id="ph3">`refusedPermissions`</ph>才会使用<ph id="ph4">`evidence`</ph>还提供，或如果动态程序集保存并重新加载到内存。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  During the development of code that emits dynamic assemblies, it is recommended that you include &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; in <ph id="ph2">`refusedPermissions`</ph>.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在开发期间用于发出动态程序集的代码，建议你在包含&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中<ph id="ph2">`refusedPermissions`</ph>。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Including &lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt; in the <ph id="ph1">`refusedPermissions`</ph> parameter ensures that the MSIL is verified.</source>
          <target state="translated">包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag&gt;中<ph id="ph1">`refusedPermissions`</ph>参数可确保验证 MSIL。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag&gt;</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;要求完全信任的代码一起使用时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Only fully trusted callers can supply their evidence when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">只有完全受信任的调用可以提供其证据定义动态&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;时</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>The runtime will map the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">运行时将映射&lt;xref:System.Security.Policy.Evidence&gt;通过安全策略以确定授予的权限。&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Partially trusted callers must supply <ph id="ph1">`null`</ph> for the <ph id="ph2">`evidence`</ph> parameter.</source>
          <target state="translated">部分受信任的调用方必须提供<ph id="ph1">`null`</ph>为<ph id="ph2">`evidence`</ph>参数。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's &lt;xref:System.Reflection.Assembly&gt; to the dynamic &lt;xref:System.Reflection.Assembly&gt; being defined and marks policy as resolved.</source>
          <target state="translated">如果<ph id="ph1">`evidence`</ph>是<ph id="ph2">`null`</ph>、 运行时将复制的权限集，也就是说，当前授予和拒绝集，从调用方的&lt;xref:System.Reflection.Assembly&gt;为动态&lt;xref:System.Reflection.Assembly&gt;正在定义并将策略标记为已解决。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>If the dynamic &lt;xref:System.Reflection.Assembly&gt; is saved to disk, subsequent loads will get grants based on policies associated with the location where the &lt;xref:System.Reflection.Assembly&gt; was saved.</source>
          <target state="translated">如果动态&lt;xref:System.Reflection.Assembly&gt;是保存到磁盘，后面的加载将获得授予基于与位置关联的策略其中&lt;xref:System.Reflection.Assembly&gt;已保存。&lt;/xref:System.Reflection.Assembly&gt; &lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; will be synchronized: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, and &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.</source>
          <target state="translated">如果<ph id="ph1">`isSynchronized`</ph>是<ph id="ph2">`true`</ph>，生成的以下方法&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;将同步︰ &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;，和&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;。&lt;/xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder&gt;</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>If two of these methods are called on different threads, one will block until the other completes.</source>
          <target state="translated">如果其中两种方法在不同的线程调用的一个将其他完成之前一直阻止。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">保存动态程序集的目录的名称。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the directory defaults to the current directory.</source>
          <target state="translated">如果<ph id="ph1">`dir`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，目录将默认为当前目录。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>The evidence supplied for the dynamic assembly.</source>
          <target state="translated">为动态程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">使用证据始终作为最后一组用于策略解析的证据。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">必需的权限请求。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">可选的权限请求。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">请求被拒绝的权限。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要同步的模块、 类型和成员在动态程序集，则创建否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> begins with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</source>
          <target state="translated">定义具有指定的名称、 访问模式、 存储目录、 证据、 权限请求、 同步选项和自定义特性的动态程序集。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</source>
          <target state="translated">使用此方法重载来指定属性，除非在已应用创建的动态程序集时，可能无法正常工作。</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>For example, security attributes such as &lt;xref:System.Security.SecurityTransparentAttribute&gt; and &lt;xref:System.Security.SecurityCriticalAttribute&gt; do not work correctly if they are added after a dynamic assembly has been created.</source>
          <target state="translated">例如，安全特性例如&lt;xref:System.Security.SecurityTransparentAttribute&gt;和&lt;xref:System.Security.SecurityCriticalAttribute&gt;如果它们未添加创建的动态程序集后，可能无法正常工作。&lt;/xref:System.Security.SecurityCriticalAttribute&gt; &lt;/xref:System.Security.SecurityTransparentAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>The permission requests specified for the <ph id="ph1">`requiredPermissions`</ph>, <ph id="ph2">`optionalPermissions`</ph>, and <ph id="ph3">`refusedPermissions`</ph> parameters are used only if the <ph id="ph4">`evidence`</ph> parameter is also supplied, or if the dynamic assembly is saved and reloaded into memory.</source>
          <target state="translated">为指定的权限请求<ph id="ph1">`requiredPermissions`</ph>， <ph id="ph2">`optionalPermissions`</ph>，和<ph id="ph3">`refusedPermissions`</ph>参数才会使用<ph id="ph4">`evidence`</ph>还提供参数，或如果动态程序集保存并重新加载到内存。</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you develop code that emits dynamic assemblies, we recommend that you include the &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt; flag in the <ph id="ph2">`refusedPermissions`</ph> parameter.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 开发时发出动态程序集的代码，我们建议您包括&lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;中标记出来<ph id="ph2">`refusedPermissions`</ph>参数。&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>The inclusion of this flag ensures that the Microsoft intermediate language (MSIL) will be verified.</source>
          <target state="translated">此标志包含可确保的 Microsoft 中间语言 (MSIL) 将进行验证。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>This technique will detect the unintentional generation of unverifiable code, which otherwise is very difficult to detect.</source>
          <target state="translated">此方法会检测无意间生成无法验证的代码，否则为它是很难检测到了。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>A limitation of this technique is that it also causes &lt;xref:System.Security.SecurityException&gt; to be thrown when it is used with code that demands full trust.</source>
          <target state="translated">此技术的局限性是它还使&lt;xref:System.Security.SecurityException&gt;当它用于要求完全信任的代码时引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>Only fully trusted callers can supply evidence when defining a dynamic &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">只有完全受信任的调用可以提供证据定义动态&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;时</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>The runtime maps the &lt;xref:System.Security.Policy.Evidence&gt; through the security policy to determine the granted permissions.</source>
          <target state="translated">运行时将映射&lt;xref:System.Security.Policy.Evidence&gt;通过安全策略以确定授予的权限。&lt;/xref:System.Security.Policy.Evidence&gt;</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Partially trusted callers must supply <ph id="ph1">`null`</ph> for the <ph id="ph2">`evidence`</ph> parameter.</source>
          <target state="translated">部分受信任的调用方必须提供<ph id="ph1">`null`</ph>为<ph id="ph2">`evidence`</ph>参数。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`evidence`</ph> is <ph id="ph2">`null`</ph>, the runtime copies the permission sets (that is, the current grant and deny sets) from the caller's assembly to the dynamic assembly that is being defined, and marks the policy as resolved.</source>
          <target state="translated">如果<ph id="ph1">`evidence`</ph>是<ph id="ph2">`null`</ph>，运行时将从调用方的程序集的权限集 （即，当前授予和拒绝集） 复制到正在定义中，并将策略标记为已解决的动态程序集。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>If the dynamic assembly is saved to disk, subsequent loads will get grants based on policies that are associated with the location where the dynamic assembly was saved.</source>
          <target state="translated">如果将动态程序集保存到磁盘，后续加载将获得授予基于保存动态程序集的位置与关联的策略。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`isSynchronized`</ph> is <ph id="ph2">`true`</ph>, the following methods of the resulting &lt;xref:System.Reflection.Emit.AssemblyBuilder&gt; will be synchronized: &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;, &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;, and &lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;.</source>
          <target state="translated">如果<ph id="ph1">`isSynchronized`</ph>是<ph id="ph2">`true`</ph>，生成的以下方法&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;将同步︰ &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt;， &lt;xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt;，和&lt;xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt;。&lt;/xref:System.Reflection.Emit.AssemblyBuilder.Save%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A&gt; &lt;/xref:System.Reflection.Emit.AssemblyBuilder&gt;</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>If two of these methods are called on different threads, one will block until the other is completed.</source>
          <target state="translated">如果其中两种方法在不同的线程调用的一个将其他完成之前一直阻止。</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>This method overload is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>.</source>
          <target state="translated">此方法重载在中引入<ph id="ph1">[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>The unique identity of the dynamic assembly.</source>
          <target state="translated">动态程序集的唯一标识。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>The mode in which the dynamic assembly will be accessed.</source>
          <target state="translated">将在其中访问动态程序集的模式。</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>The name of the directory where the dynamic assembly will be saved.</source>
          <target state="translated">保存动态程序集的目录的名称。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`dir`</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, the current directory is used.</source>
          <target state="translated">如果<ph id="ph1">`dir`</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，则使用当前目录。</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>The evidence that is supplied for the dynamic assembly.</source>
          <target state="translated">为动态程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>The evidence is used unaltered as the final set of evidence used for policy resolution.</source>
          <target state="translated">使用证据始终作为最后一组用于策略解析的证据。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>The required permissions request.</source>
          <target state="translated">必需的权限请求。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>The optional permissions request.</source>
          <target state="translated">可选的权限请求。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>The refused permissions request.</source>
          <target state="translated">请求被拒绝的权限。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要同步的模块、 类型和成员在动态程序集，则创建否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>An enumerable list of attributes to be applied to the assembly, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if there are no attributes.</source>
          <target state="translated">要应用于程序集的特性的可枚举列表或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>是否存在任何属性。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>A dynamic assembly with the specified name and features.</source>
          <target state="translated">具有指定的名称和功能的动态程序集。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>-or-       The <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p2">&lt;/code&gt;</ept> starts with white space, or contains a forward or backward slash.</source>
          <target state="translated">-或- <bpt id="p1">&lt;xref uid="langword_csharp_Name" name="Name" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p2">&lt;/code&gt;</ept>开头为空格，或包含向前或向后的斜杠。</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Executes the code in another application domain that is identified by the specified delegate.</source>
          <target state="translated">在由指定的委托标识的另一个应用程序域中执行代码。</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`callBackDelegate`</ph> can specify a marshal-by-value, &lt;xref:System.MarshalByRefObject&gt;, or &lt;xref:System.ContextBoundObject&gt;.</source>
          <target state="translated"><ph id="ph1">`callBackDelegate`</ph>可以指定封送按值， &lt;xref:System.MarshalByRefObject&gt;，或&lt;xref:System.ContextBoundObject&gt;。&lt;/xref:System.ContextBoundObject&gt; &lt;/xref:System.MarshalByRefObject&gt;</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>A delegate that specifies a method to call.</source>
          <target state="translated">指定要调用的方法的委托。</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBackDelegate&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBackDelegate&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Gets the domain manager that was provided by the host when the application domain was initialized.</source>
          <target state="translated">获得初始化应用程序域时主机提供的域管理器。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>An unmanaged host of the common language runtime (CLR) can provide a domain manager.</source>
          <target state="translated">公共语言运行时 (CLR) 的非托管的主机可以提供域管理器。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>The domain manager can participate in initializing the new application domain and supply other managers, such as a &lt;xref:System.Security.HostSecurityManager&gt;, that participate in the operations of the application domain.</source>
          <target state="translated">域管理器可以参与初始化新的应用程序域，并提供其他管理器，如&lt;xref:System.Security.HostSecurityManager&gt;，该元素参与应用程序域的操作。&lt;/xref:System.Security.HostSecurityManager&gt;</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>An object that represents the domain manager provided by the host when the application domain was initialized, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no domain manager was provided.</source>
          <target state="translated">一个对象，表示初始化应用程序域时, 主机提供的域管理器或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果没有域管理器提供。</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Occurs when an <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is about to be unloaded.</source>
          <target state="translated">发生时<bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>将被卸载。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.EventHandler&gt; delegate for this event can perform any termination activities before the application domain is unloaded.</source>
          <target state="translated">&lt;xref:System.EventHandler&gt;委托中卸载应用程序域之前，此事件可以执行任何终止活动。&lt;/xref:System.EventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Each application domain that needs to perform processing when it is unloaded should register an event handler for this event.</source>
          <target state="translated">需要用来执行处理卸载时每个应用程序域应该注册的事件处理程序此事件。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>A shared event handler should not be used, because the &lt;xref:System.EventHandler&gt; delegate does not identify the domain that is being unloaded.</source>
          <target state="translated">共享的事件处理程序不应使用，因为&lt;xref:System.EventHandler&gt;委托不会确定正在卸载的域。&lt;/xref:System.EventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This event is never raised in the default application domain.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 默认应用程序域中永远不会引发此事件。</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>Do not make assumptions about the thread the event is raised on.</source>
          <target state="translated">不进行有关线程引发该事件的假设。</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>The event can be raised on a different thread than the one that called the &lt;xref:System.AppDomain.Unload%2A&gt; method.</source>
          <target state="translated">可以在与调用的一个不同的线程上引发该事件&lt;xref:System.AppDomain.Unload%2A&gt;方法。&lt;/xref:System.AppDomain.Unload%2A&gt;</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</source>
          <target state="translated">获取此程序集冲突解决程序用来探测动态创建的程序集的目录。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>To set the dynamic directory, assign a base directory path to the &lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt; property of the &lt;xref:System.AppDomainSetup&gt; object that will be used to create the new application domain.</source>
          <target state="translated">若要设置的动态目录，分配的基目录路径&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;属性&lt;xref:System.AppDomainSetup&gt;将用于创建新的应用程序域的对象。&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>The base directory path you assign to the property is modified by the addition of a subdirectory whose simple name is the hash code of the string you assign to the &lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt; property, so the format of the base directory is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept>.</source>
          <target state="translated">分配给属性的基目录路径修改通过其简单的名称是你将分配给字符串的哈希代码的子目录添加&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;属性，因此基目录的格式是<bpt id="p1">*</bpt>原始路径<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>哈希代码<ept id="p2">*</ept>。&lt;/xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>The dynamic directory is a subdirectory of this base directory.</source>
          <target state="translated">动态目录是此基目录的子目录。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Its simple name is the value of the &lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt; property, so its format is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept><ph id="ph2">\\</ph><bpt id="p3">*</bpt>application name<ept id="p3">*</ept>.</source>
          <target state="translated">其简单的名称为的值&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;属性，因此其格式是<bpt id="p1">*</bpt>原始路径<ept id="p1">*</ept><ph id="ph1">\\</ph><bpt id="p2">*</bpt>哈希代码<ept id="p2">*</ept><ph id="ph2">\\</ph><bpt id="p3">*</bpt>应用程序名称<ept id="p3">*</ept>。&lt;/xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>The directory that the assembly resolver uses to probe for dynamically created assemblies.</source>
          <target state="translated">目录，它由程序集冲突解决程序用来探测动态创建的程序集。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Security.Policy.Evidence"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> associated with this application domain.</source>
          <target state="translated">获取<bpt id="p1">&lt;xref href="System.Security.Policy.Evidence"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>与该应用程序域关联。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>The evidence associated with this application domain.</source>
          <target state="translated">与此应用程序域关联的证据。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file.</source>
          <target state="translated">执行指定文件中包含的程序集。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">此方法加载程序集使用&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">你还可以执行程序集使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法，后者将加载程序集使用&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>To create the &lt;xref:System.AppDomain&gt; to load and execute, use the &lt;xref:System.AppDomain.CreateDomain%2A&gt; method.</source>
          <target state="translated">若要创建&lt;xref:System.AppDomain&gt;加载并执行，请使用&lt;xref:System.AppDomain.CreateDomain%2A&gt;方法。&lt;/xref:System.AppDomain.CreateDomain%2A&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">包含要执行的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified evidence.</source>
          <target state="translated">执行程序集包含在指定的文件中，使用指定的证据。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。&lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">此方法加载程序集使用&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">你还可以执行程序集使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法，后者将加载程序集使用&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">包含要执行的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">用于加载程序集的证据。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified arguments.</source>
          <target state="translated">执行使用指定的参数指定的文件中包含的程序集。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">此方法加载程序集使用&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">你还可以执行程序集使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法，后者将加载程序集使用&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">包含要执行的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">程序集的入口点参数。</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用比当前加载的版本更高版本的公共语言运行时编译。</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified evidence and arguments.</source>
          <target state="translated">执行使用指定的证据和自变量指定的文件中包含的程序集。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">此方法加载程序集使用&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">你还可以执行程序集使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法，后者将加载程序集使用&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">包含要执行的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>The supplied evidence for the assembly.</source>
          <target state="translated">程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">程序集的入口点参数。</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">当未启用旧版 CAS 策略时，<ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>应<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</source>
          <target state="translated">执行使用指定的参数、 哈希值和哈希算法指定的文件中包含的程序集。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">此方法加载程序集使用&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">你还可以执行程序集使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法，后者将加载程序集使用&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">包含要执行的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">程序集的入口点参数。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">表示计算所得的哈希代码的值。</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">表示程序集清单使用的哈希算法。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">-或-<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用比当前加载的版本更高版本的公共语言运行时编译。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</source>
          <target state="translated">执行使用指定的证据、 参数、 哈希值和哈希算法指定的文件中包含的程序集。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>This method loads assemblies using the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">此方法加载程序集使用&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt;</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>You can also execute assemblies using the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method, which loads assemblies using the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method.</source>
          <target state="translated">你还可以执行程序集使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法，后者将加载程序集使用&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>The name of the file that contains the assembly to execute.</source>
          <target state="translated">包含要执行的程序集的文件的名称。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>The supplied evidence for the assembly.</source>
          <target state="translated">程序集提供的证据。</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>The arguments to the entry point of the assembly.</source>
          <target state="translated">程序集的入口点参数。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Represents the value of the computed hash code.</source>
          <target state="translated">表示计算所得的哈希代码的值。</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Represents the hash algorithm used by the assembly manifest.</source>
          <target state="translated">表示程序集清单使用的哈希算法。</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyFile&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">当未启用旧版 CAS 策略时，<ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>应<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Executes an assembly given its display name.</source>
          <target state="translated">执行在给定其显示名称的程序集。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法提供与类似的功能&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;方法，但按显示名称指定的程序集或&lt;xref:System.Reflection.AssemblyName&gt;而不是文件位置。&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">因此，&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;加载程序集与&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法而不是与&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>To create the &lt;xref:System.AppDomain&gt; to load and execute, use the &lt;xref:System.AppDomain.CreateDomain%2A&gt; method.</source>
          <target state="translated">若要创建&lt;xref:System.AppDomain&gt;加载并执行，请使用&lt;xref:System.AppDomain.CreateDomain%2A&gt;方法。&lt;/xref:System.AppDomain.CreateDomain%2A&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>已找到，但无法加载。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>Executes the assembly given an &lt;xref:System.Reflection.AssemblyName&gt;, using the specified arguments.</source>
          <target state="translated">执行给定的程序集&lt;xref:System.Reflection.AssemblyName&gt;，使用指定的参数。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法提供与类似的功能&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;方法，但按显示名称指定的程序集或&lt;xref:System.Reflection.AssemblyName&gt;而不是文件位置。&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">因此，&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;加载程序集与&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法而不是与&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.AssemblyName&gt; object representing the name of the assembly.</source>
          <target state="translated">&lt;xref:System.Reflection.AssemblyName&gt;对象，表示程序集的名称。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">若要启动进程时传递的命令行参数。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>已找到，但无法加载。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">- <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>用比当前加载的版本更高版本的公共语言运行时编译。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Executes an assembly given its display name, using the specified evidence.</source>
          <target state="translated">执行在给定其显示名称，使用指定的证据程序集。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法提供与类似的功能&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;方法，但按显示名称指定的程序集或&lt;xref:System.Reflection.AssemblyName&gt;而不是文件位置。&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">因此，&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;加载程序集与&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法而不是与&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you use the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method with an &lt;xref:System.Security.Policy.Evidence&gt; parameter, pieces of evidence are merged.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 当你使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法替换&lt;xref:System.Security.Policy.Evidence&gt;合并参数，证据。&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Pieces of evidence supplied as an argument to the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">作为参数提供的证据&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法取代加载程序提供的证据。&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">用于加载程序集的证据。</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>已找到，但无法加载。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Executes the assembly given its display name, using the specified arguments.</source>
          <target state="translated">执行程序集在给定其显示名称，使用指定的参数。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法提供与类似的功能&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;方法，但按显示名称指定的程序集或&lt;xref:System.Reflection.AssemblyName&gt;而不是文件位置。&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">因此，&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;加载程序集与&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法而不是与&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">若要启动进程时传递的命令行参数。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>The value that is returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>已找到，但无法加载。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>-or-       <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version of the common language runtime than the version that is currently loaded.</source>
          <target state="translated">- <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>用比当前加载的版本更高版本的公共语言运行时编译。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>Executes the assembly given an &lt;xref:System.Reflection.AssemblyName&gt;, using the specified evidence and arguments.</source>
          <target state="translated">执行给定的程序集&lt;xref:System.Reflection.AssemblyName&gt;，使用指定的证据和自变量。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法提供与类似的功能&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;方法，但按显示名称指定的程序集或&lt;xref:System.Reflection.AssemblyName&gt;而不是文件位置。&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">因此，&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;加载程序集与&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法而不是与&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you use the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method with an &lt;xref:System.Security.Policy.Evidence&gt; parameter, pieces of evidence are merged.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 当你使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法替换&lt;xref:System.Security.Policy.Evidence&gt;合并参数，证据。&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>Pieces of evidence supplied as an argument to the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">作为参数提供的证据&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法取代加载程序提供的证据。&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.Reflection.AssemblyName&gt; object representing the name of the assembly.</source>
          <target state="translated">&lt;xref:System.Reflection.AssemblyName&gt;对象，表示程序集的名称。&lt;/xref:System.Reflection.AssemblyName&gt;</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">用于加载程序集的证据。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">若要启动进程时传递的命令行参数。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>已找到，但无法加载。</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">当未启用旧版 CAS 策略时，<ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>应<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>Executes the assembly given its display name, using the specified evidence and arguments.</source>
          <target state="translated">执行程序集在给定其显示名称，使用指定的证据和自变量。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method provides similar functionality to the &lt;xref:System.AppDomain.ExecuteAssembly%2A&gt; method, but specifies the assembly by display name or &lt;xref:System.Reflection.AssemblyName&gt; rather than by file location.</source>
          <target state="translated">&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法提供与类似的功能&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;方法，但按显示名称指定的程序集或&lt;xref:System.Reflection.AssemblyName&gt;而不是文件位置。&lt;/xref:System.Reflection.AssemblyName&gt; &lt;/xref:System.AppDomain.ExecuteAssembly%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>Therefore, &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; loads assemblies with the &lt;xref:System.Reflection.Assembly.Load%2A&gt; method rather than with the &lt;xref:System.Reflection.Assembly.LoadFile%2A&gt; method.</source>
          <target state="translated">因此，&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;加载程序集与&lt;xref:System.Reflection.Assembly.Load%2A&gt;方法而不是与&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;方法。&lt;/xref:System.Reflection.Assembly.LoadFile%2A&gt; &lt;/xref:System.Reflection.Assembly.Load%2A&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>The assembly begins executing at the entry point specified in the .NET Framework header.</source>
          <target state="translated">程序集开始在.NET Framework 标头中指定的入口点执行。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</source>
          <target state="translated">此方法不会创建新的进程或应用程序域，并且不会在新线程上执行入口点方法。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When you use the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method with an &lt;xref:System.Security.Policy.Evidence&gt; parameter, pieces of evidence are merged.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 当你使用&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法替换&lt;xref:System.Security.Policy.Evidence&gt;合并参数，证据。&lt;/xref:System.Security.Policy.Evidence&gt; &lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>Pieces of evidence supplied as an argument to the &lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt; method supersede pieces of evidence supplied by the loader.</source>
          <target state="translated">作为参数提供的证据&lt;xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;方法取代加载程序提供的证据。&lt;/xref:System.AppDomain.ExecuteAssemblyByName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">用于加载程序集的证据。</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass when starting the process.</source>
          <target state="translated">若要启动进程时传递的命令行参数。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>The value returned by the entry point of the assembly.</source>
          <target state="translated">程序集的入口点返回的值。</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not found.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>找不到。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was found, but could not be loaded.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>已找到，但无法加载。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>The assembly specified by <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> is not a valid assembly.</source>
          <target state="translated">通过指定的程序集<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">assemblyName</ph><ept id="p1">&lt;/code&gt;</ept> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">assemblyName</ph> <ept id="p1">&lt;/code&gt;</ept>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">当未启用旧版 CAS 策略时，<ph id="ph1">&lt;code&gt;assemblySecurity&lt;/code&gt;</ph>应<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>The specified assembly has no entry point.</source>
          <target state="translated">指定程序集具有不到入口点。</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</source>
          <target state="translated">当运行时应用程序域中搜索调用堆栈的异常处理程序之前，在托管代码中，引发的异常时发生。</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>This event is only a notification.</source>
          <target state="translated">此事件是仅一个通知。</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>Handling this event does not handle the exception or affect subsequent exception handling in any way.</source>
          <target state="translated">处理此事件不会处理的异常或会影响后续以任何方式处理的异常。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>After the event has been raised and event handlers have been invoked, the common language runtime (CLR) begins to search for a handler for the exception.</source>
          <target state="translated">引发事件并在调用事件处理程序后，公共语言运行时 (CLR) 开始搜索的异常处理程序。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>FirstChanceException provides the application domain with a first chance to examine any managed exception.</source>
          <target state="translated">FirstChanceException 提供与第一个机会检查任何托管的异常的应用程序域。</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>The event can be handled per application domain.</source>
          <target state="translated">每个应用程序域可以处理此事件。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>If a thread passes through multiple application domains while executing a call, the event is raised in each application domain that has registered an event handler, before the CLR begins searching for a matching exception handler in that application domain.</source>
          <target state="translated">如果一个线程通过多个应用程序域传递执行调用时，CLR 开始搜索该应用程序域中的匹配异常处理程序之前已注册事件处理程序，每个应用程序域中将引发事件。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>After the event has been handled, a search is made for a matching exception handler in that application domain.</source>
          <target state="translated">处理此事件后，将为该应用程序域中的匹配异常处理程序中进行搜索。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source>If none is found, the event is raised in the next application domain.</source>
          <target state="translated">如果找不到下, 一步的应用程序域中将引发事件。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>You must handle all exceptions that occur in the event handler for the FirstChanceException event.</source>
          <target state="translated">你必须处理在事件发生 FirstChanceException 事件处理程序的所有异常。</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>Otherwise, FirstChanceException is raised recursively.</source>
          <target state="translated">否则，FirstChanceException 为引发以递归方式。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>This could result in a stack overflow and termination of the application.</source>
          <target state="translated">这可能导致堆栈上溢和终止应用程序。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>We recommend that you implement event handlers for this event as constrained execution regions (CERs), to keep infrastructure-related exceptions such as out-of-memory or stack overflow from affecting the virtual machine while the exception notification is being processed.</source>
          <target state="translated">我们建议你实现此事件的事件处理程序作为受约束的执行区域 (Cer)，以防止与基础结构相关的异常，例如内存不足或堆栈溢出异常通知在处理时影响虚拟机。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>This event is not raised for exceptions that indicate corruption of process state, such as access violations, unless the event handler is security-critical and has the &lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt; attribute.</source>
          <target state="translated">此事件不会引发的异常的指示损坏进程的状态，例如访问冲突，除非事件处理程序是安全关键，并且具有&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;属性。&lt;/xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>The common language runtime suspends thread aborts while this notification event is being handled.</source>
          <target state="translated">公共语言运行时挂起线程中止时正在处理此通知事件。</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>Gets the friendly name of this application domain.</source>
          <target state="translated">获取此应用程序域的友好名称。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>The friendly name of the default application domain is the file name of the process executable.</source>
          <target state="translated">默认应用程序域的友好名称是进程可执行文件的文件名。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>For example, if the executable used to start the process is <ph id="ph1">`"c:\MyAppDirectory\MyAssembly.exe"`</ph>, the friendly name of the default application domain is <ph id="ph2">`"MyAssembly.exe"`</ph>.</source>
          <target state="translated">例如，如果使用可执行文件以启动该过程是<ph id="ph1">`"c:\MyAppDirectory\MyAssembly.exe"`</ph>，默认应用程序域的友好名称是<ph id="ph2">`"MyAssembly.exe"`</ph>。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>The friendly name of this application domain.</source>
          <target state="translated">此应用程序域的友好名称。</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>Gets the assemblies that have been loaded into the execution context of this application domain.</source>
          <target state="translated">获取已加载到此应用程序域的执行上下文的程序集。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>An array of assemblies in this application domain.</source>
          <target state="translated">此应用程序域中的程序集的数组。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>Gets the current thread identifier.</source>
          <target state="translated">获取当前线程标识符。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>Use the &lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName&gt; property, which is stable even when the .NET Framework is hosted by an environment that supports fibers (that is, lightweight threads).</source>
          <target state="translated">使用&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName&gt;属性，它是稳定甚至.NET Framework 承载环境支持纤程 （即，轻量级线程）。&lt;/xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer that is the identifier of the current thread.</source>
          <target state="translated">一个 32 位有符号的整数，是当前线程的标识符。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>Gets the value stored in the current application domain for the specified name.</source>
          <target state="translated">获取存储在当前应用程序域中为指定名称的值。</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>Use this method to retrieve the value of an entry in an internal cache of name-data pairs that describe properties of this instance of &lt;xref:System.AppDomain&gt;.</source>
          <target state="translated">使用此方法来检索描述&lt;xref:System.AppDomain&gt;.&lt;/xref:System.AppDomain&gt;此实例的属性的名称数据对内部缓存中的项的值</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>Note that the comparison of <ph id="ph1">`name`</ph> with the name of key-value pairs is case-sensitive.</source>
          <target state="translated">请注意，比较<ph id="ph1">`name`</ph>同名的键 / 值对是区分大小写。</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">该缓存自动包含在创建应用程序域后插入的预定义的系统项。</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>You can inspect their values with the GetData method, or the equivalent &lt;xref:System.AppDomainSetup&gt; properties.</source>
          <target state="translated">你可以检查它们的值与 GetData 方法中或等效&lt;xref:System.AppDomainSetup&gt;属性。&lt;/xref:System.AppDomainSetup&gt;</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>You can insert or modify your own user defined name-data pairs with the &lt;xref:System.AppDomain.SetData%2A&gt; method and inspect their values with the GetData method.</source>
          <target state="translated">你可以插入或修改与自己用户定义名称数据对&lt;xref:System.AppDomain.SetData%2A&gt;方法，并使用 GetData 方法检查其值。&lt;/xref:System.AppDomain.SetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>The following table describes the <ph id="ph1">`name`</ph> of each predefined system entry and its corresponding &lt;xref:System.AppDomainSetup&gt; property.</source>
          <target state="translated">下表描述了<ph id="ph1">`name`</ph>每个预定义系统条目和其对应&lt;xref:System.AppDomainSetup&gt;属性。&lt;/xref:System.AppDomainSetup&gt;</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>|Value of 'name'|Property|   |---------------------|--------------|   |"APPBASE"|&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;|   |"APP_CONFIG_FILE"|&lt;xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=fullName&gt;|   |"APP_LAUNCH_URL"|(no property)</source>
          <target state="translated">|Name 的值 |属性 |  |---------------------|--------------|  |"APPBASE"|&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;|  |"APP_CONFIG_FILE"|&lt;xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=fullName&gt;|  |"APP_LAUNCH_URL"|（没有属性）&lt;/xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>"APP_LAUNCH_URL" represents the URL originally requested by the user, before any redirection.</source>
          <target state="translated">"APP_LAUNCH_URL"表示最初由用户之前任何重定向请求的 URL。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>It is available only when the application has been launched with a browser such as Internet Explorer.</source>
          <target state="translated">仅当使用如 Internet Explorer 浏览器中启动应用程序时，才，它才可用。</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>Not all browsers provide this value.|   |"APP_NAME"|&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;|   |"BINPATH_PROBE_ONLY"|&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=fullName&gt;|   |"CACHE_BASE"|&lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;|   |"CODE_DOWNLOAD_DISABLED"|&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;|   |"DEV_PATH"|(no property)|   |"DISALLOW_APP"|&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=fullName&gt;|   |"DISALLOW_APP_BASE_PROBING"|&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=fullName&gt;|   |"DISALLOW_APP_REDIRECTS"|&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=fullName&gt;|   |"DYNAMIC_BASE"|&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;|   |"FORCE_CACHE_INSTALL"|&lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;|   |"LICENSE_FILE", or an application-specific string|&lt;xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=fullName&gt;|   |"LOADER_OPTIMIZATION"|&lt;xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=fullName&gt;|   |"LOCATION_URI"|(no property)|   |"PRIVATE_BINPATH"|&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;|   |"REGEX_DEFAULT_MATCH_TIMEOUT"|&lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=fullName&gt;</source>
          <target state="translated">并非所有浏览器都提供此值。 |  |"APP_NAME"|&lt;xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;|  |"BINPATH_PROBE_ONLY"|&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=fullName&gt;|  |"CACHE_BASE"|&lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;|  |"CODE_DOWNLOAD_DISABLED"|&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;|  |"DEV_PATH"|（没有属性） |  |"DISALLOW_APP"|&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=fullName&gt;|  |"DISALLOW_APP_BASE_PROBING"|&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=fullName&gt;|  |"DISALLOW_APP_REDIRECTS"|&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=fullName&gt;|  |"DYNAMIC_BASE"|&lt;xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;|  |"FORCE_CACHE_INSTALL"|&lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;|  |"LICENSE_FILE"，或应用程序特有字符串 |&lt;xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=fullName&gt;|  |"LOADER_OPTIMIZATION"|&lt;xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=fullName&gt;|  |"LOCATION_URI"|（没有属性） |  |"PRIVATE_BINPATH"|&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;|  |"REGEX_DEFAULT_MATCH_TIMEOUT"|&lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=fullName&gt;&lt;/xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>"REGEX_DEFAULT_MATCH_TIMEOUT" is not a system entry, and its value can be set by calling the &lt;xref:System.AppDomain.SetData%2A&gt; method.|   |"SHADOW_COPY_DIRS"|&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;|</source>
          <target state="translated">"REGEX_DEFAULT_MATCH_TIMEOUT"不是一个系统项，并且可通过调用&lt;xref:System.AppDomain.SetData%2A&gt;方法设置其值。 |  |"SHADOW_COPY_DIRS"|&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;|&lt;/xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=fullName&gt;&lt;/xref:System.AppDomain.SetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>The name of a predefined application domain property, or the name of an application domain property you have defined.</source>
          <target state="translated">预定义的应用程序域属性的名称或你定义应用程序域属性的名称。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>The value of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">name</ph><ept id="p1">&lt;/code&gt;</ept> property, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the property does not exist.</source>
          <target state="translated">值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">name</ph> <ept id="p1">&lt;/code&gt;</ept>属性，或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果属性不存在。</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Gets the type of the current instance.</source>
          <target state="translated">获取当前实例的类型。</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>The type of the current instance.</source>
          <target state="translated">当前实例的类型。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>Gets an integer that uniquely identifies the application domain within the process.</source>
          <target state="translated">获取一个整数，唯一标识进程中的应用程序域。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>An integer that identifies the application domain.</source>
          <target state="translated">一个用于标识应用程序域的整数。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>Gives the <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> an infinite lifetime by preventing a lease from being created.</source>
          <target state="translated">提供<bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>通过防止创建租约无限生存期。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Always <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Always <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</source>
          <target state="translated">获取可以为 null 的布尔值，该值指示是否设置了任何兼容性开关，如果是这样，是否设置了指定的兼容性开关。</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>The compatibility switch to test.</source>
          <target state="translated">要测试的兼容性开关。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>A null reference (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p2">&lt;/code&gt;</ept> is set.</source>
          <target state="translated">空引用 (<bpt id="p1">&lt;xref uid="langword_csharp_Nothing" name="Nothing" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>在 Visual Basic 中) 如果未不设置任何兼容性开关; 否则为一个布尔值，该值指示指定的兼容性开关， <bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">value</ph> <ept id="p2">&lt;/code&gt;</ept>设置。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the application domain is the default application domain for the process.</source>
          <target state="translated">返回一个值，该值指示应用程序域是否进程的默认应用程序域。</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Every managed process has a default application domain.</source>
          <target state="translated">每个托管的进程都有默认应用程序域。</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Execution begins in the default domain.</source>
          <target state="translated">默认域中开始执行。</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current <bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object represents the default application domain for the process; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果当前<bpt id="p2">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>对象表示的默认应用程序域的进程; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</source>
          <target state="translated">指示是否正在卸载此应用程序域，并且公共语言运行时正在终止该域包含的对象。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected.</source>
          <target state="translated">一个对象的完成方法提供机会在对象垃圾回收之前执行任何必要的清理操作。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>After finalization, the object is accessible but in an invalid state and therefore unusable.</source>
          <target state="translated">完成后，该对象处于可访问但处于无效状态，因而无法使用。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>Eventually, garbage collection completes and reclaims the object.</source>
          <target state="translated">最终，垃圾回收完成，并回收对象。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>An object's finalization method is called in one of the following situations: during garbage collection, when the common language runtime is shutting down, or when the application domain that contains the object is unloaded.</source>
          <target state="translated">在下列情况之一调用对象的完成方法︰ 垃圾回收期间时公共语言运行时正在关闭，或卸载应用程序域包含的对象时。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>The IsFinalizingForUnload method returns <ph id="ph1">`true`</ph> only in the last case; it does not return <ph id="ph2">`true`</ph> if finalization results from routine garbage collection or from CLR shutdown.</source>
          <target state="translated">IsFinalizingForUnload 方法返回<ph id="ph1">`true`</ph>仅在最后一种情况; 它不返回<ph id="ph2">`true`</ph>如果终止结果从例程垃圾回收或 CLR 关闭。</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  To determine whether finalization is due to CLR shutdown, use the &lt;xref:System.Environment.HasShutdownStarted%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 若要确定终止是否由于 CLR 已关闭，请使用&lt;xref:System.Environment.HasShutdownStarted%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.Environment.HasShutdownStarted%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`true`</ph> if finalization is due to an application domain being unloaded or to the CLR shutting down.</source>
          <target state="translated">它将返回<ph id="ph1">`true`</ph>终止是否由于应用程序域正在卸载或者 CLR 正在关闭。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>While executing in your finalization method during domain unloading, you might want to access another object that is referenced by a static field and has a finalization method.</source>
          <target state="translated">执行时终止方法中在域卸载过程，你可能想要访问另一个对象引用的静态字段，已终止方法。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>However, you cannot reliably do so because the accessed object might already have been finalized.</source>
          <target state="translated">但是，不能可靠地这样做是因为访问的对象可能已终止。</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  An exception to this rule is the &lt;xref:System.Console&gt; class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 此规则的唯一例外是&lt;xref:System.Console&gt;类，该类包含引用流对象的静态字段，但该类实现，以便你可以始终写入系统控制台中，即使在域卸载或系统关闭期间专门。&lt;/xref:System.Console&gt;</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>Use this method in an object's finalization method to determine whether the application domain that contains the object is unloading.</source>
          <target state="translated">在对象的完成方法使用此方法，以确定是否包含对象的应用程序域正在卸载。</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</source>
          <target state="translated">如果是这种情况，你无法可靠地访问任何对象，具有完成方法并由静态字段引用。</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此应用程序域卸载，并且公共语言运行时已开始调用终结器;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</source>
          <target state="translated">获取一个值，该值指示是否加载到当前的应用程序域的程序集以完全信任方式执行。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>This method always returns <ph id="ph1">`true`</ph> for the default application domain of an application that runs on the desktop.</source>
          <target state="translated">此方法始终返回<ph id="ph1">`true`</ph>在桌面上运行的应用程序的默认应用程序域。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`false`</ph> for a sandboxed application domain that was created by using the <bpt id="p1">[</bpt>AppDomain.CreateDomain(String, Evidence, AppDomainSetup, PermissionSet, StrongName<ph id="ph2">\[</ph><ph id="ph3">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept> method overload, unless the permissions that are granted to the application domain are equivalent to full trust.</source>
          <target state="translated">它将返回<ph id="ph1">`false`</ph>通过使用创建的沙盒应用程序域<bpt id="p1">[</bpt>AppDomain.CreateDomain (字符串、 证据、 AppDomainSetup、 PermissionSet、 StrongName<ph id="ph2">\[</ph><ph id="ph3">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept>方法重载，除非授予应用程序域的权限是等效于完全信任。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if assemblies that are loaded into the current application domain execute with full trust; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果加载到当前的应用程序域的程序集执行完全信任;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</source>
          <target state="translated">获取一个值，该值指示当前的应用程序域是否已加载到应用程序域的所有程序集授予的权限集。</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current application domain has a homogenous set of permissions; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果当前的应用程序域具有一组同构权限;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Loads the &lt;xref:System.Reflection.Assembly&gt; with a common object file format (COFF) based image containing an emitted &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">加载&lt;xref:System.Reflection.Assembly&gt;与包含发出&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;通用对象文件格式 (COFF) 基于图像&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>，使用此方法加载程序集的信任级别是应用程序域的信任级别相同。</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">应使用此方法只是为了将程序集加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">为方便起见那些不能调用静态的互操作性调用方提供此方法是&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">若要将程序集加载到其他应用程序域中，使用&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;之类的方法</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">普遍适用于此方法的所有重载的信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，它是基于 COFF 的图像包含已发出程序集。</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">加载的程序集。</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its &lt;xref:System.Reflection.AssemblyName&gt;.</source>
          <target state="translated">&lt;xref:System.Reflection.Assembly&gt;给定其&lt;xref:System.Reflection.AssemblyName&gt;.&lt;/xref:System.Reflection.AssemblyName&gt;&lt;/xref:System.Reflection.Assembly&gt;加载</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">应使用此方法只是为了将程序集加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">为方便起见那些不能调用静态的互操作性调用方提供此方法是&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">若要将程序集加载到其他应用程序域中，使用&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;之类的方法</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>If a version of the requested assembly is already loaded, this method returns the loaded assembly, even if a different version is requested.</source>
          <target state="translated">如果已加载请求的程序集的版本，则此方法返回加载的程序集，即使请求的不同版本。</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>Supplying a partial assembly name for <ph id="ph1">`assemblyRef`</ph> is not recommended.</source>
          <target state="translated">提供的部分程序集名称<ph id="ph1">`assemblyRef`</ph>不建议。</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>(A partial name omits one or more of culture, version, or public key token.</source>
          <target state="translated">（一个或多个区域性、 版本或公钥标记，则会忽略部分名称。</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>For overloads that take a string instead of an &lt;xref:System.Reflection.AssemblyName&gt; object, "MyAssembly, Version=1.0.0.0" is an example of a partial name and "MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ab3442da84b47" is an example of a full name.) Using partial names has a negative effect on performance.</source>
          <target state="translated">对于采用字符串而不是重载&lt;xref:System.Reflection.AssemblyName&gt;对象，"MyAssembly，Version =&amp;1;.0.0.0"是一个示例部分的名称和"MyAssembly，Version =&amp;1;.0.0.0，Culture = neutral，PublicKeyToken =&amp;18;ab3442da84b47"举例说明的完整名称。)&lt;/xref:System.Reflection.AssemblyName&gt;使用部分名称具有负面性能影响。</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>In addition, a partial assembly name can load an assembly from the global assembly cache only if there is an exact copy of the assembly in the application base directory (&lt;xref:System.AppDomain.BaseDirectory%2A&gt; or &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;).</source>
          <target state="translated">此外，部分程序集名称可以加载程序集从全局程序集缓存只有在应用程序基目录中的程序集的一个精确副本 (&lt;xref:System.AppDomain.BaseDirectory%2A&gt;或&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;)。&lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt; &lt;/xref:System.AppDomain.BaseDirectory%2A&gt;</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>If the current &lt;xref:System.AppDomain&gt; object represents application domain <ph id="ph1">`A`</ph>, and the &lt;xref:System.AppDomain.Load%2A&gt; method is called from application domain <ph id="ph2">`B`</ph>, the assembly is loaded into both application domains.</source>
          <target state="translated">如果当前&lt;xref:System.AppDomain&gt;对象表示应用程序域<ph id="ph1">`A`</ph>，和&lt;xref:System.AppDomain.Load%2A&gt;方法从应用程序域调用<ph id="ph2">`B`</ph>，程序集将会加载到这两个应用程序域。&lt;/xref:System.AppDomain.Load%2A&gt; &lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>For example, the following code loads <ph id="ph1">`MyAssembly`</ph> into the new application domain <ph id="ph2">`ChildDomain`</ph> and also into the application domain where the code executes:       <bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.AppDomain.Load#1<ept id="p2">](~/add/codesnippet/visualbasic/m-system.appdomain.load-_2_1.vb)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.AppDomain.Load#1<ept id="p4">](~/add/codesnippet/cpp/m-system.appdomain.load-_2_1.cpp)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>System.AppDomain.Load#1<ept id="p6">](~/add/codesnippet/csharp/m-system.appdomain.load-_2_1.cs)</ept><ept id="p5">]</ept>       The assembly is loaded into both domains because &lt;xref:System.Reflection.Assembly&gt; does not derive from &lt;xref:System.MarshalByRefObject&gt;, and therefore the return value of the &lt;xref:System.AppDomain.Load%2A&gt; method cannot be marshaled.</source>
          <target state="translated">例如，下面的代码加载<ph id="ph1">`MyAssembly`</ph>到新的应用程序域<ph id="ph2">`ChildDomain`</ph>和也到代码的执行位置的应用程序域︰ <bpt id="p1">[!code-vb</bpt> <bpt id="p2">[</bpt>System.AppDomain.Load#1<ept id="p2">](~/add/codesnippet/visualbasic/m-system.appdomain.load-_2_1.vb)</ept><ept id="p1">]</ept><bpt id="p3">[!code-cpp</bpt><bpt id="p4">[</bpt>System.AppDomain.Load#1<ept id="p4">](~/add/codesnippet/cpp/m-system.appdomain.load-_2_1.cpp)</ept><ept id="p3">]</ept><bpt id="p5">[!code-cs</bpt><bpt id="p6">[</bpt>System.AppDomain.Load#1<ept id="p6">](~/add/codesnippet/csharp/m-system.appdomain.load-_2_1.cs)</ept> <ept id="p5">]</ept>程序集加载到这两个域，因为&lt;xref:System.Reflection.Assembly&gt;不是派生自&lt;xref:System.MarshalByRefObject&gt;，和的因此返回的值&lt;xref:System.AppDomain.Load%2A&gt;方法不能进行封送处理。&lt;/xref:System.AppDomain.Load%2A&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.Reflection.Assembly&gt;    </target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Instead, the common language runtime tries to load the assembly into the calling application domain.</source>
          <target state="translated">相反，公共语言运行时尝试加载到调用应用程序域的程序集。</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>The assemblies that are loaded into the two application domains might be different if the path settings for the two application domains are different.</source>
          <target state="translated">如果两个应用程序域的路径设置不同，到两个应用程序域加载的程序集可能有所不同。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If both the &lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt; property and the &lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt; property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the &lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt; property).</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果这两个&lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;属性和&lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt;属性设置，在首次尝试加载程序集使用的显示名称 (包括版本、 区域性和等等，返回为&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;属性)。&lt;/xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt; &lt;/xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt; &lt;/xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>If the file is not found, the &lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt; property is used to search for the assembly.</source>
          <target state="translated">如果未找到该文件，&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;属性用于搜索程序集。&lt;/xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>If the assembly is found using &lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;, the display name is matched against the assembly.</source>
          <target state="translated">如果使用找到的程序集&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;，与程序集匹配的显示名称。&lt;/xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>If the match fails, a &lt;xref:System.IO.FileLoadException&gt; is thrown.</source>
          <target state="translated">如果匹配失败，&lt;xref:System.IO.FileLoadException&gt;引发。&lt;/xref:System.IO.FileLoadException&gt;</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>An object that describes the assembly to load.</source>
          <target state="translated">一个对象，描述要加载的程序集。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">加载的程序集。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its display name.</source>
          <target state="translated">加载&lt;xref:System.Reflection.Assembly&gt;给定其显示名称。&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">应使用此方法只是为了将程序集加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">为方便起见那些不能调用静态的互操作性调用方提供此方法是&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">若要将程序集加载到其他应用程序域中，使用&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;之类的方法</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">普遍适用于此方法的所有重载的信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">加载的程序集。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>Loads the &lt;xref:System.Reflection.Assembly&gt; with a common object file format (COFF) based image containing an emitted &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">加载&lt;xref:System.Reflection.Assembly&gt;与包含发出&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;通用对象文件格式 (COFF) 基于图像&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>The raw bytes representing the symbols for the &lt;xref:System.Reflection.Assembly&gt; are also loaded.</source>
          <target state="translated">表示的符号的原始字节&lt;xref:System.Reflection.Assembly&gt;还有加载。&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>，使用此方法加载程序集的信任级别是应用程序域的信任级别相同。</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">应使用此方法只是为了将程序集加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">为方便起见那些不能调用静态的互操作性调用方提供此方法是&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">若要将程序集加载到其他应用程序域中，使用&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;之类的方法</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">普遍适用于此方法的所有重载的信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，它是基于 COFF 的图像包含已发出程序集。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the raw bytes representing the symbols for the assembly.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含表示程序集符号的原始字节。</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">加载的程序集。</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its &lt;xref:System.Reflection.AssemblyName&gt;.</source>
          <target state="translated">&lt;xref:System.Reflection.Assembly&gt;给定其&lt;xref:System.Reflection.AssemblyName&gt;.&lt;/xref:System.Reflection.AssemblyName&gt;&lt;/xref:System.Reflection.Assembly&gt;加载</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">应使用此方法只是为了将程序集加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">为方便起见那些不能调用静态的互操作性调用方提供此方法是&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">若要将程序集加载到其他应用程序域中，使用&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;之类的方法</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">普遍适用于此方法的所有重载的信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>An object that describes the assembly to load.</source>
          <target state="translated">一个对象，描述要加载的程序集。</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">用于加载程序集的证据。</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">加载的程序集。</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyRef&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>Loads an &lt;xref:System.Reflection.Assembly&gt; given its display name.</source>
          <target state="translated">加载&lt;xref:System.Reflection.Assembly&gt;给定其显示名称。&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">应使用此方法只是为了将程序集加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">为方便起见那些不能调用静态的互操作性调用方提供此方法是&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">若要将程序集加载到其他应用程序域中，使用&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;之类的方法</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">普遍适用于此方法的所有重载的信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>The display name of the assembly.</source>
          <target state="translated">程序集的显示名称。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">请参阅<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">用于加载程序集的证据。</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">加载的程序集。</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept></target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>未找到。</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;assemblyString&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>Loads the &lt;xref:System.Reflection.Assembly&gt; with a common object file format (COFF) based image containing an emitted &lt;xref:System.Reflection.Assembly&gt;.</source>
          <target state="translated">加载&lt;xref:System.Reflection.Assembly&gt;与包含发出&lt;xref:System.Reflection.Assembly&gt;.&lt;/xref:System.Reflection.Assembly&gt;通用对象文件格式 (COFF) 基于图像&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>The raw bytes representing the symbols for the &lt;xref:System.Reflection.Assembly&gt; are also loaded.</source>
          <target state="translated">表示的符号的原始字节&lt;xref:System.Reflection.Assembly&gt;还有加载。&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>，使用此方法加载程序集的信任级别是应用程序域的信任级别相同。</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>This method should be used only to load an assembly into the current application domain.</source>
          <target state="translated">应使用此方法只是为了将程序集加载到当前的应用程序域。</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>This method is provided as a convenience for interoperability callers who cannot call the static &lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">为方便起见那些不能调用静态的互操作性调用方提供此方法是&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;方法。&lt;/xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>To load assemblies into other application domains, use a method such as &lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.</source>
          <target state="translated">若要将程序集加载到其他应用程序域中，使用&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;.&lt;/xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;之类的方法</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>For information that is common to all overloads of this method, see the &lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt; method overload.</source>
          <target state="translated">普遍适用于此方法的所有重载的信息，请参阅&lt;xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;方法重载。&lt;/xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29&gt;</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is a COFF-based image containing an emitted assembly.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，它是基于 COFF 的图像包含已发出程序集。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>An array of type <bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the raw bytes representing the symbols for the assembly.</source>
          <target state="translated">类型的数组<bpt id="p1">&lt;xref uid="langword_csharp_byte" name="byte" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>包含表示程序集符号的原始字节。</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Evidence for loading the assembly.</source>
          <target state="translated">用于加载程序集的证据。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>The loaded assembly.</source>
          <target state="translated">加载的程序集。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>不是有效的程序集。</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>-or-       Version 2.0 or later of the common language runtime is currently loaded and <ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> was compiled with a later version.</source>
          <target state="translated">-或-当前加载版本 2.0 或更高版本的公共语言运行时和<ph id="ph1">&lt;code&gt;rawAssembly&lt;/code&gt;</ph>用更高版本编译。</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>An assembly or module was loaded twice with two different evidences.</source>
          <target state="translated">两次用两个不同的证据加载了一个程序集或模块。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph>is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>When legacy CAS policy is not enabled, <ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> should be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">当未启用旧版 CAS 策略时，<ph id="ph1">&lt;code&gt;securityEvidence&lt;/code&gt;</ph>应<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process.</source>
          <target state="translated">获取或设置一个值，该值指示是否对当前进程启用 CPU 和内存监视的应用程序域。</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>Once monitoring is enabled for a process, it cannot be disabled.</source>
          <target state="translated">一旦进程的情况下，启用监视，则不能禁用。</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`static`</ph> property (<ph id="ph2">`Shared`</ph> property in Visual Basic) controls CPU and memory monitoring of all the application domains in the process.</source>
          <target state="translated">这<ph id="ph1">`static`</ph>属性 (<ph id="ph2">`Shared`</ph>属性在 Visual Basic) 控制 CPU 和内存监视的进程中的所有应用程序域。</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>If you attempt to set this property to <ph id="ph1">`false`</ph>, a &lt;xref:System.ArgumentException&gt; exception is thrown, even if the current value of the property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">如果你尝试将此属性设置为<ph id="ph1">`false`</ph>、&lt;xref:System.ArgumentException&gt;引发异常，即使该属性的当前值是<ph id="ph2">`false`</ph>。&lt;/xref:System.ArgumentException&gt;</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>Once monitoring is enabled, you can use the &lt;xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;, &lt;xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt;, &lt;xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt;, and &lt;xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt; instance properties to monitor CPU and memory use of individual application domains.</source>
          <target state="translated">一旦启用了监视，则可以使用&lt;xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;， &lt;xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt;， &lt;xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt;，和&lt;xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt;实例监视 CPU 和内存使用情况的各个应用程序域的属性。&lt;/xref:System.AppDomain.MonitoringTotalProcessorTime%2A&gt; &lt;/xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A&gt; &lt;/xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A&gt; &lt;/xref:System.AppDomain.MonitoringSurvivedMemorySize%2A&gt;</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if monitoring is enabled; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果启用了监视;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>The current process attempted to assign the value <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to this property.</source>
          <target state="translated">当前进程试图将值分配<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>到此属性。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</source>
          <target state="translated">获取上次回收后保留下来和，已知由当前的应用程序域引用的字节数。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>The statistics are updated with each garbage collection.</source>
          <target state="translated">与每个垃圾回收更新统计信息。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>However, they are guaranteed to be accurate only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs.</source>
          <target state="translated">但是，可确保只有在完整、 阻碍性回收; 后才会准确也就是说，的集合包含所有代并停止应用程序时集合时发生。</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>For example, the &lt;xref:System.GC.Collect?displayProperty=fullName&gt; method overload performs a full, blocking collection.</source>
          <target state="translated">例如，&lt;xref:System.GC.Collect?displayProperty=fullName&gt;方法重载执行的完整、 阻碍性回收。&lt;/xref:System.GC.Collect?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>(Concurrent collection occurs in the background and does not block the application.)</source>
          <target state="translated">（并发回收发生在后台，并且不会阻止应用程序。）</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>The number of surviving bytes.</source>
          <target state="translated">保留下来的字节数。</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>在 Visual Basic 中)&lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;属性设置为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Gets the total bytes that survived from the last collection for all application domains in the process.</source>
          <target state="translated">获取从进程中的所有应用程序域的上次回收后保留下来的总字节数。</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>After a full, blocking collection, this number represents the number of bytes currently held live on managed heaps.</source>
          <target state="translated">完整的阻碍性回收之后，字节数当前实时上保留该数字表示托管堆。</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>It should be close to the number reported by the &lt;xref:System.GC.GetTotalMemory%2A&gt; method.</source>
          <target state="translated">它应接近其报告的使用期限&lt;xref:System.GC.GetTotalMemory%2A&gt;方法。&lt;/xref:System.GC.GetTotalMemory%2A&gt;</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>After an ephemeral collection, this number represents the number of bytes currently held live in ephemeral generations.</source>
          <target state="translated">暂时回收之后，该数字表示的字节数当前中实时保留暂时代。</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>The total number of surviving bytes for the process.</source>
          <target state="translated">保留下来的字节的进程总数。</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>在 Visual Basic 中)&lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;属性设置为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</source>
          <target state="translated">获取用字节表示，已由应用程序域创建以来，不扣除已回收的内存的所有内存分配的总大小。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>The total size of all memory allocations.</source>
          <target state="translated">所有内存分配的总大小。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>在 Visual Basic 中)&lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;属性设置为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</source>
          <target state="translated">获取进程启动后，在当前的应用程序域中，执行时使用的所有线程的总处理器时间。</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>The total time that is reported for an application domain includes the time each thread in the process spent executing in that application domain.</source>
          <target state="translated">应用程序域报告的总时间包括在该应用程序域中执行的过程中的每个线程所用的时间。</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>A thread that calls into unmanaged code is still associated with an application domain, and the processor time spent executing the unmanaged code is reported for the application domain where the call was made.</source>
          <target state="translated">调入非托管代码的线程仍关联与应用程序域，并且执行非托管的代码报告应用程序域调用已花费的处理器时间。</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>When a thread is blocked or sleeping, it does not consume processor time.</source>
          <target state="translated">当线程被阻止或睡眠，它不占用处理器时间。</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>Total processor time for the current application domain.</source>
          <target state="translated">当前的应用程序域的总处理器时间。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in Visual Basic) &lt;xref:System.AppDomain.MonitoringIsEnabled*&gt; property is set to <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_static" name="static" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> (<bpt id="p2">&lt;xref uid="langword_csharp_Shared" name="Shared" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>在 Visual Basic 中)&lt;xref:System.AppDomain.MonitoringIsEnabled*&gt;属性设置为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。&lt;/xref:System.AppDomain.MonitoringIsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>Gets the permission set of a sandboxed application domain.</source>
          <target state="translated">获取沙盒应用程序域的权限集。</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>Sandboxed application domains that were created by using the <bpt id="p1">[</bpt>AppDomain.CreateDomain(String, Evidence, AppDomainSetup, PermissionSet, StrongName<ph id="ph1">\[</ph><ph id="ph2">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept> method overload have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</source>
          <target state="translated">使用创建的沙盒应用程序域<bpt id="p1">[</bpt>AppDomain.CreateDomain (字符串、 证据、 AppDomainSetup、 PermissionSet、 StrongName<ph id="ph1">\[</ph><ph id="ph2">\]</ph>)<ept id="p1">](assetId:///M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])?qualifyHint=True&amp;autoUpgrade=False)</ept>方法重载具有一组同构权限; 也就是说，对所有部分受信任的程序集加载到应用程序域授予相同的权限集。</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</source>
          <target state="translated">沙盒应用程序域 （可选） 有不受此权限集，并改为使用完全信任运行具有强名称程序集的列表。</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>The permission set of the sandboxed application domain.</source>
          <target state="translated">沙盒应用程序域的权限集。</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>Occurs when the default application domain's parent process exits.</source>
          <target state="translated">当默认应用程序域的父进程存在时发生。</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.EventHandler&gt; for this event can perform termination activities, such as closing files, releasing storage and so on, before the process ends.</source>
          <target state="translated">&lt;xref:System.EventHandler&gt;此事件可以执行终止活动，如关闭文件，释放存储空间等，进程结束之前。&lt;/xref:System.EventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>Beginning with the .NET Framework version 2.0, this event is raised in each application domain that registers an event handler.</source>
          <target state="translated">从.NET Framework 2.0 版开始，每个应用程序域中注册事件处理程序中引发此事件。</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The total execution time of all ProcessExit event handlers is limited, just as the total execution time of all finalizers is limited at process shutdown.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 所有 ProcessExit 事件处理程序的总执行时间是有限的正如所有终结器的总执行时间是有限进程关闭时一样。</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>The default is two seconds.</source>
          <target state="translated">默认值为两秒。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>An unmanaged host can change this execution time by calling the <bpt id="p1">[</bpt>ICLRPolicyManager::SetTimeout<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> method with the <bpt id="p2">[</bpt>OPR_ProcessExit<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept> enumeration value.</source>
          <target state="translated">非托管的主机可以通过调用来更改此执行时间<bpt id="p1">[</bpt>iclrpolicymanager:: Settimeout<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>方法替换<bpt id="p2">[</bpt>OPR_ProcessExit<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>枚举值。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, this event is raised only in the default application domain, and only if an event handler is registered in the default application domain.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，此事件是引发仅在默认应用程序域，且仅当在默认应用程序域中注册事件处理程序。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">若要注册的事件处理程序此事件，你必须具有所需的权限，或&lt;xref:System.Security.SecurityException&gt;引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of an assembly fails in the reflection-only context.</source>
          <target state="translated">程序集的解析在仅限反射上下文中失败时发生。</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source>In the reflection-only context, dependencies are not resolved automatically.</source>
          <target state="translated">在仅限反射上下文中，依赖关系将不自动解析。</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source>They must be preloaded or returned by the handler for this event.</source>
          <target state="translated">它们必须预加载或返回的此事件的处理程序。</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>This event is raised when an assembly has a dependency that is not already loaded into the reflection-only context.</source>
          <target state="translated">当程序集具有尚未加载到只反射上下文的依赖项时，引发此事件。</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>The missing dependency is specified by the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">通过指定缺少的依赖关系&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ResolveEventHandler&gt; for this event must return an assembly that satisfies the dependency.</source>
          <target state="translated">&lt;xref:System.ResolveEventHandler&gt;此事件必须返回满足此依赖关系的程序集。&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>The assembly that is returned must be loaded into the reflection-only context.</source>
          <target state="translated">返回程序集必须加载到只反射上下文。</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This event is raised only for missing dependencies of the assembly that you are loading into the reflection-only context (for example, by using the &lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=fullName&gt; method).</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 仅为缺少的依赖关系，若要加载到只反射上下文的程序集将引发此事件 (例如，通过使用&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=fullName&gt;方法)。&lt;/xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>It is not raised if the assembly that you are loading cannot be found.</source>
          <target state="translated">它不被引发如果找不到要加载的程序集。</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property returns the assembly that requested the assembly load that could not be resolved.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>、&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;属性返回的请求无法解析的程序集加载的程序集。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source>Knowing the identity of the requesting assembly might be useful in identifying the correct version of the dependency, if more than one version is available.</source>
          <target state="translated">了解请求的程序集的标识可能很有用中标识正确版本的依赖项，如果多个版本可用。</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>For this event, the &lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt; property returns the assembly name before policy is applied.</source>
          <target state="translated">对于此事件，&lt;xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;属性返回的程序集名称，应用策略之前。&lt;/xref:System.ResolveEventArgs.Name%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>Returns the assemblies that have been loaded into the reflection-only context of the application domain.</source>
          <target state="translated">返回已加载到应用程序域的只反射上下文的程序集。</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>This method returns the assemblies that have been loaded into the reflection-only context.</source>
          <target state="translated">此方法返回已加载到只反射上下文的程序集。</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>To get the assemblies that have been loaded for execution, use the &lt;xref:System.AppDomain.GetAssemblies%2A&gt; method.</source>
          <target state="translated">若要获取有关执行的已加载的程序集，请使用&lt;xref:System.AppDomain.GetAssemblies%2A&gt;方法。&lt;/xref:System.AppDomain.GetAssemblies%2A&gt;</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>An array of &lt;xref:System.Reflection.Assembly&gt; objects that represent the assemblies loaded into the reflection-only context of the application domain.</source>
          <target state="translated">数组&lt;xref:System.Reflection.Assembly&gt;表示程序集的对象加载到应用程序域的只反射上下文。&lt;/xref:System.Reflection.Assembly&gt;</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>An operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试操作。</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>Gets the path under the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">获取专用程序集在此程序集冲突解决程序应探测的基目录下的路径。</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>Private assemblies are deployed in the same directory structure as the application.</source>
          <target state="translated">专用程序集部署在与应用程序相同的目录结构中。</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>If the path specified by the RelativeSearchPath property is not under &lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;, it is ignored.</source>
          <target state="translated">如果 RelativeSearchPath 属性指定的路径不是下&lt;xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;，它将被忽略。&lt;/xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>This property returns the value set using &lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">此属性返回的值使用&lt;xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;.&lt;/xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=fullName&gt;设置</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>The path under the base directory where the assembly resolver should probe for private assemblies.</source>
          <target state="translated">在此程序集冲突解决程序应探测专用程序集的基目录下的路径。</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</source>
          <target state="translated">当资源解析因资源不是程序集中的有效链接或嵌入资源而失败时发生。</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ResolveEventHandler&gt; for this event can attempt to locate the assembly containing the resource and return it.</source>
          <target state="translated">&lt;xref:System.ResolveEventHandler&gt;此事件可以尝试查找包含该资源的程序集并返回它。&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This event is not raised if resolution fails because no file can be found for a valid linked resource.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 如果解析失败，因为没有文件可以找到有效链接资源，则不会引发此事件。</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>It is raised if a manifest resource stream cannot be found, but it is not raised if an individual resource key cannot be found.</source>
          <target state="translated">如果找不到的清单资源流，但它不会引发如果找不到单独的资源键，则将引发此事件。</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property contains the assembly that requested the resource.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>、&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;属性包含请求资源的程序集。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">若要注册的事件处理程序此事件，你必须具有所需的权限，或&lt;xref:System.Security.SecurityException&gt;引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>Establishes the security policy level for this application domain.</source>
          <target state="translated">确定此应用程序域安全策略级别。</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>Call this method before an assembly is loaded into the &lt;xref:System.AppDomain&gt; in order for the security policy to have effect.</source>
          <target state="translated">程序集加载到之前调用此方法&lt;xref:System.AppDomain&gt;顺序安全策略以产生影响。&lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>The security policy level.</source>
          <target state="translated">安全策略级别。</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;domainPolicy&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;domainPolicy&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source>The security policy level has already been set.</source>
          <target state="translated">安全策略级别已设置。</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>Establishes the specified directory path as the location where assemblies are shadow copied.</source>
          <target state="translated">确定指定的目录路径为程序集进行影像复制的位置。</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>The cache path is ignored if the &lt;xref:System.AppDomainSetup.ApplicationName%2A&gt; property is not set.</source>
          <target state="translated">如果缓存路径将被忽略&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;未设置属性。&lt;/xref:System.AppDomainSetup.ApplicationName%2A&gt;</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">请参阅&lt;xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.AppDomainSetup.CachePath%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>For more information on shadow copying see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">卷影复制的详细信息请参阅<bpt id="p1">[</bpt>影像复制程序集<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>The fully qualified path to the shadow copy location.</source>
          <target state="translated">到卷影副本位置的完全限定的路径。</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>Assigns the specified value to the specified application domain property.</source>
          <target state="translated">将指定的值分配给指定的应用程序域属性。</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>Use this method to insert an entry, or modify the value of an entry in an internal cache of name-data pairs that describe properties of this instance of &lt;xref:System.AppDomain&gt;.</source>
          <target state="translated">使用此方法来插入项时，或者修改描述&lt;xref:System.AppDomain&gt;.&lt;/xref:System.AppDomain&gt;此实例的属性的名称数据对内部缓存中的条目的值</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">该缓存自动包含在创建应用程序域后插入的预定义的系统项。</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>You cannot insert or modify system entries with this method.</source>
          <target state="translated">无法插入或修改系统项使用此方法。</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</source>
          <target state="translated">尝试来修改系统条目的方法调用起任何作用;该方法不引发异常。</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>You can inspect the values of system entries with the &lt;xref:System.AppDomain.GetData%2A&gt; method, or the equivalent &lt;xref:System.AppDomainSetup&gt; properties described in &lt;xref:System.AppDomain.GetData%2A&gt;.</source>
          <target state="translated">你可以检查的&lt;xref:System.AppDomain.GetData%2A&gt;方法或&lt;xref:System.AppDomainSetup&gt;属性所述&lt;xref:System.AppDomain.GetData%2A&gt;.&lt;/xref:System.AppDomain.GetData%2A&gt;&lt;/xref:System.AppDomainSetup&gt;等效&lt;/xref:System.AppDomain.GetData%2A&gt;系统条目的值</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source>You can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the <ph id="ph1">`name`</ph> argument and a &lt;xref:System.TimeSpan&gt; value that represents the timeout interval as the value of the <ph id="ph2">`data`</ph> argument.</source>
          <target state="translated">你可以调用此方法以设置由供电"REGEX_DEFAULT_MATCH_TIMEOUT"评估正则表达式模式的默认超时间隔的值的值作为<ph id="ph1">`name`</ph>自变量和一个&lt;xref:System.TimeSpan&gt;值，该值表示超时间隔的值作为<ph id="ph2">`data`</ph>自变量。&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>You can also insert or modify your own user defined name-data pairs with this method and inspect their values with the &lt;xref:System.AppDomain.GetData%2A&gt; method.</source>
          <target state="translated">此外可以插入或修改你自己的用户定义名称数据对使用此方法，并检查它们的值与&lt;xref:System.AppDomain.GetData%2A&gt;方法。&lt;/xref:System.AppDomain.GetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>The name of a user-defined application domain property to create or change.</source>
          <target state="translated">要创建或更改的用户定义的应用程序域属性的名称。</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>The value of the property.</source>
          <target state="translated">属性的值。</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</source>
          <target state="translated">将指定的值分配给指定的应用程序域属性，具有对需求的指定权限的调用方时检索该属性。</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>Use this method to insert or modify your own user-defined entries in an internal cache of name/data pairs that describe properties of the application domain.</source>
          <target state="translated">此方法用于插入或修改你自己描述应用程序域的属性的名称/数据对的内部缓存中的用户定义条目。</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>When you insert an entry, you can specify a permission demand to enforce when the entry is retrieved.In addition, you can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the <ph id="ph1">`name`</ph> argument and a &lt;xref:System.TimeSpan&gt; value that represents the timeout interval as the value of the <ph id="ph2">`data`</ph> argument.</source>
          <target state="translated">当将一个条目时，你可以指定权限请求来强制执行时检索条目。此外，可以调用此方法以设置由供电"REGEX_DEFAULT_MATCH_TIMEOUT"评估正则表达式模式的默认超时间隔的值的值作为<ph id="ph1">`name`</ph>自变量和一个&lt;xref:System.TimeSpan&gt;值，该值表示超时间隔的值作为<ph id="ph2">`data`</ph>自变量。&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>You cannot use this method to assign a security demand to a system-defined property string.</source>
          <target state="translated">此方法不能用于将安全要求分配给系统定义的属性字符串。</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>The cache automatically contains predefined system entries that are inserted when the application domain is created.</source>
          <target state="translated">该缓存自动包含在创建应用程序域后插入的预定义的系统项。</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>You cannot insert or modify system entries with this method.</source>
          <target state="translated">无法插入或修改系统项使用此方法。</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</source>
          <target state="translated">尝试来修改系统条目的方法调用起任何作用;该方法不引发异常。</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>You can inspect the values of system entries with the &lt;xref:System.AppDomain.GetData%2A&gt; method or the equivalent &lt;xref:System.AppDomainSetup&gt; properties described in the Remarks section for the &lt;xref:System.AppDomain.GetData%2A&gt; method.</source>
          <target state="translated">你可以检查与系统项的值&lt;xref:System.AppDomain.GetData%2A&gt;方法或等效&lt;xref:System.AppDomainSetup&gt;属性中的备注部分所述&lt;xref:System.AppDomain.GetData%2A&gt;方法。&lt;/xref:System.AppDomain.GetData%2A&gt; &lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomain.GetData%2A&gt;</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>The name of a user-defined application domain property to create or change.</source>
          <target state="translated">要创建或更改的用户定义的应用程序域属性的名称。</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>The value of the property.</source>
          <target state="translated">属性的值。</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source>The permission to demand of the caller when the property is retrieved.</source>
          <target state="translated">对请求时已检索该属性调用方的权限。</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> specifies a system-defined property string and <ph id="ph2">&lt;code&gt;permission&lt;/code&gt;</ph> is not <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph>指定系统定义的属性字符串和<ph id="ph2">&lt;code&gt;permission&lt;/code&gt;</ph>不<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</source>
          <target state="translated">确定指定的目录路径为的存储和访问动态生成的文件的子目录的基目录。</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>This method sets the &lt;xref:System.AppDomainSetup.DynamicBase%2A&gt; property of the internal &lt;xref:System.AppDomainSetup&gt; associated with this instance.</source>
          <target state="translated">此方法会设置&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;内部属性&lt;xref:System.AppDomainSetup&gt;与此实例关联。&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.DynamicBase%2A&gt;</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</source>
          <target state="translated">是动态程序集的存储位置的子目录的基目录的完全限定的路径。</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</source>
          <target state="translated">指定如何主体和标识对象应附加到线程如果线程尝试在此应用程序域中执行时绑定到主体。</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>Setting this value will only be effective if you set it before using the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">设置此值才有效，如果你在使用前设置&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;属性。&lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>For example, if you set &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; to a given principal (for example, a generic principal) and then use the SetPrincipalPolicy method to set the &lt;xref:System.Security.Principal.PrincipalPolicy&gt; to &lt;xref:System.Security.Principal.PrincipalPolicy&gt;, the current principal will remain the generic principal.</source>
          <target state="translated">例如，如果你设置&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;到给定的主体 （例如，泛型主体），然后使用 SetPrincipalPolicy 方法以设置&lt;xref:System.Security.Principal.PrincipalPolicy&gt;到&lt;xref:System.Security.Principal.PrincipalPolicy&gt;，当前主体将保持泛型主体。&lt;/xref:System.Security.Principal.PrincipalPolicy&gt; &lt;/xref:System.Security.Principal.PrincipalPolicy&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Security.Principal.PrincipalPolicy"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that specifies the type of the principal object to attach to threads.</source>
          <target state="translated">之一<bpt id="p1">&lt;xref href="System.Security.Principal.PrincipalPolicy"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>指定要附加到线程的主体对象的类型的值。</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>Turns on shadow copying.</source>
          <target state="translated">打开影像复制。</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">卷影复制的详细信息，请参阅<bpt id="p1">[</bpt>影像复制程序集<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source>Establishes the specified directory path as the location of assemblies to be shadow copied.</source>
          <target state="translated">确定指定的目录路径为要进行卷影复制的程序集的位置。</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>By default, a shadow copy includes all assemblies found through probing.</source>
          <target state="translated">默认情况下，卷影副本包括通过探测所发现的所有程序集。</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>The SetShadowCopyPath method restricts the shadow copy to the assemblies in the directories specified by <ph id="ph1">`path`</ph>.</source>
          <target state="translated">SetShadowCopyPath 方法将卷影副本限制到指定的目录中的程序集<ph id="ph1">`path`</ph>。</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>The SetShadowCopyPath method does not specify additional directories to be searched for assemblies.</source>
          <target state="translated">SetShadowCopyPath 方法未指定要在其中搜索程序集的其他目录。</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>Assemblies to be shadow-copied must already be located in the search path, for example under &lt;xref:System.AppDomain.BaseDirectory%2A&gt;.</source>
          <target state="translated">要进行影像复制程序集已必须位于的搜索路径，例如在&lt;xref:System.AppDomain.BaseDirectory%2A&gt;.&lt;/xref:System.AppDomain.BaseDirectory%2A&gt;</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>The SetShadowCopyPath method specifies which search paths are eligible to be shadow-copied.</source>
          <target state="translated">SetShadowCopyPath 方法指定的搜索路径有资格卷影复制。</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>This method sets the &lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt; property of the internal &lt;xref:System.AppDomainSetup&gt; associated with this instance.</source>
          <target state="translated">此方法会设置&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;内部属性&lt;xref:System.AppDomainSetup&gt;与此实例关联。&lt;/xref:System.AppDomainSetup&gt; &lt;/xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">卷影复制的详细信息，请参阅<bpt id="p1">[</bpt>影像复制程序集<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>A list of directory names, where each name is separated by a semicolon.</source>
          <target state="translated">目录名称，其中每个名称用分号隔开的列表。</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</source>
          <target state="translated">设置要附加到线程中，如果用户尝试在此应用程序域中执行时绑定到用户的默认主体对象。</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>The principal object to attach to threads.</source>
          <target state="translated">要附加到线程的主体对象。</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;principal&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;principal&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>The thread principal has already been set.</source>
          <target state="translated">已设置线程的主体。</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source>Gets the application domain configuration information for this instance.</source>
          <target state="translated">获取此实例的应用程序域配置信息。</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>The application domain initialization information.</source>
          <target state="translated">应用程序域初始化信息。</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>Gets an indication whether the application domain is configured to shadow copy files.</source>
          <target state="translated">获取应用程序域配置为卷影副本文件的指示。</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt; and <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;和<bpt id="p1">[</bpt>影像复制程序集<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。&lt;/xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the application domain is configured to shadow copy files; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果应用程序域是否配置为卷影副本文件;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>The operation is attempted on an unloaded application domain.</source>
          <target state="translated">卸载的应用程序域上尝试该操作。</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">将一组名称映射到对应的一组调度标识符。</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetIDsOfNames`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
          <target state="translated">保留供将来使用。</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">传递数组要映射的名称。</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>Count of the names to be mapped.</source>
          <target state="translated">要映射的名称的计数。</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">在其中解释名称的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">调用方分配的数组用于接收与名称对应的 Id。</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">使用 COM 的后期绑定访问<ph id="ph1">`IDispatch`</ph>接口不支持。</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">检索一个对象，它用于获取接口的类型信息的类型信息。</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfo`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>The type information to return.</source>
          <target state="translated">要返回的类型信息。</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>The locale identifier for the type information.</source>
          <target state="translated">类型信息的区域设置标识符。</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">接收一个指针，指向请求的类型信息对象。</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">使用 COM 的后期绑定访问<ph id="ph1">`IDispatch`</ph>接口不支持。</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">检索对象提供 （0 或 1） 的类型信息接口的数量。</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">指向接收对象提供的类型信息接口的数量的位置。</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">使用 COM 的后期绑定访问<ph id="ph1">`IDispatch`</ph>接口不支持。</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">提供对由对象公开属性和方法访问。</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">此方法用于访问托管类从非托管代码，不应从托管代码调用。</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">有关详细信息<ph id="ph1">`IDispatch::Invoke`</ph>，请参阅 MSDN 库。</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>Identifies the member.</source>
          <target state="translated">标识成员。</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source>Reserved for future use.</source>
          <target state="translated">保留供将来使用。</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>Must be IID_NULL.</source>
          <target state="translated">必须为 IID_NULL。</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">在其中解释自变量的区域设置上下文。</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>Flags describing the context of the call.</source>
          <target state="translated">描述调用的上下文的标志。</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">包含参数的数组，数组的命名自变量和数组中元素数的计数 dispid 的结构的指针。</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">到其中的结果是要存储的位置的指针。</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">指向包含异常信息的结构的指针。</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">出错的第一个参数的索引。</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>Late-bound access using the COM <ph id="ph1">`IDispatch`</ph> interface is not supported.</source>
          <target state="translated">使用 COM 的后期绑定访问<ph id="ph1">`IDispatch`</ph>接口不支持。</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>Obtains a string representation that includes the friendly name of the application domain and any context policies.</source>
          <target state="translated">获取包含应用程序域和任意上下文策略的友好名称的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies."</source>
          <target state="translated">字符串的格式正确的连接字符串"名称:"，应用程序域以及上下文策略的字符串表示或字符串"There are no context policies。"的友好名称</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>The application domain represented by the current <bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has been unloaded.</source>
          <target state="translated">表示由当前的应用程序域<bpt id="p1">&lt;xref href="System.AppDomain"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>已卸载。</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>Occurs when the resolution of a type fails.</source>
          <target state="translated">一种类型的解析失败时发生。</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source>The TypeResolve event occurs when the common language runtime is unable to determine the assembly that can create the requested type.</source>
          <target state="translated">当公共语言运行时不能确定程序集，可以创建请求的类型时，将发生 TypeResolve 事件。</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>This can occur if the type is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the runtime does not know which assembly the type is defined in.</source>
          <target state="translated">如果在动态程序集，定义的类型或类型未定义动态程序集中，但运行时不知道程序集类型中定义的类型便会出现此问题。</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>The latter situation can occur when &lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt; is called with a type name that is not qualified with the assembly name.</source>
          <target state="translated">后一种情况可能发生时&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;调用时使用程序集名称未限定的类型名称。&lt;/xref:System.Type.GetType%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.ResolveEventHandler&gt; for this event can attempt to locate and create the type.</source>
          <target state="translated">&lt;xref:System.ResolveEventHandler&gt;为此事件可以尝试查找并创建类型。&lt;/xref:System.ResolveEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>However, the TypeResolve event does not occur if the runtime knows it is not possible to find a type in certain assemblies.</source>
          <target state="translated">但是，如果运行时知道不能以查找特定的程序集中的类型，也不会发生 TypeResolve 事件。</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>For example, this event does not occur if the type is not found in a static assembly because the runtime knows types cannot be added dynamically to static assemblies.</source>
          <target state="translated">例如，如果因为运行时知道类型不能动态添加到静态程序集不在静态程序集中找到了类型，也不会发生此事件。</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt; property contains the assembly that requested the type.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>、&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;属性包含请求的类型的程序集。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;。&lt;/xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">若要注册的事件处理程序此事件，你必须具有所需的权限，或&lt;xref:System.Security.SecurityException&gt;引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>Occurs when an exception is not caught.</source>
          <target state="translated">当某个异常未被捕获时发生。</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>This event provides notification of uncaught exceptions.</source>
          <target state="translated">此事件提供通知未捕获的异常。</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application.</source>
          <target state="translated">它允许应用程序来记录有关异常的信息，系统默认处理程序将异常报告给用户和终止应用程序之前。</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>If sufficient information about the state of the application is available, other actions may be undertaken — such as saving program data for later recovery.</source>
          <target state="translated">如果提供了有关状态的应用程序的足够信息，可以采取其他措施-例如保存更高版本的恢复的程序数据。</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source>Caution is advised, because program data can become corrupted when exceptions are not handled.</source>
          <target state="translated">建议小心，因为不处理异常时，可能会损坏程序数据。</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, application termination and debugging options are reported to the user before this event is raised, rather than after.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph> 1&gt; 在.NET framework 1.0 和 1.1 版中，应用程序终止时和调试选项会报告给用户将引发此事件之前，而不是之后。</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>This event can be handled in any application domain.</source>
          <target state="translated">可以在任何应用程序域中处理此事件。</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>However, the event is not necessarily raised in the application domain where the exception occurred.</source>
          <target state="translated">但是，引发该事件是不一定在何处出现异常的应用程序域中。</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>An exception is unhandled only if the entire stack for the thread has been unwound without finding an applicable exception handler, so the first place the event can be raised is in the application domain where the thread originated.</source>
          <target state="translated">仅当没有找到适用的异常处理程序，因此可以引发该事件的第一个位置是在生成该线程的应用程序域已被线程的整个堆栈展开，会处理异常。</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In the .NET Framework versions 1.0 and 1.1, this event occurs only for the default application domain that is created by the system when an application is started.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph> 1&gt; 在.NET Framework 1.0 和 1.1 版中，会发生此事件仅为应用程序启动时由系统创建的默认应用程序域。</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve">
          <source>If an application creates additional application domains, specifying a delegate for this event in those applications domains has no effect.</source>
          <target state="translated">如果应用程序创建其他应用程序域，在这些应用程序域中指定为此事件的委托无效。</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>If the UnhandledException event is handled in the default application domain, it is raised there for any unhandled exception in any thread, no matter what application domain the thread started in.</source>
          <target state="translated">如果 UnhandledException 事件在默认应用程序域中处理，引发该事件那里任何线程，无论该线程启动中哪些应用程序域中任何未处理异常。</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>If the thread started in an application domain that has an event handler for UnhandledException, the event is raised in that application domain.</source>
          <target state="translated">如果线程启动的应用程序域中具有 UnhandledException 事件处理程序，该应用程序域中将引发事件。</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>If that application domain is not the default application domain, and there is also an event handler in the default application domain, the event is raised in both application domains.</source>
          <target state="translated">如果该应用程序域不是默认应用程序域，并且还存在一个事件处理程序在默认应用程序域中，将两个应用程序域中引发事件。</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>For example, suppose a thread starts in application domain "AD1", calls a method in application domain "AD2", and from there calls a method in application domain "AD3", where it throws an exception.</source>
          <target state="translated">例如，假设在线程启动应用程序域"AD1"应用程序域"AD2"中调用的方法，并从那里调用的方法在应用程序域"AD3"，它将引发异常。</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>The first application domain in which the UnhandledException event can be raised is "AD1".</source>
          <target state="translated">可以在其中引发 UnhandledException 事件的第一个应用程序域是"AD1"。</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>If that application domain is not the default application domain, the event can also be raised in the default application domain.</source>
          <target state="translated">如果该应用程序域不是默认应用程序域，那么还可以在默认应用程序域中引发事件。</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The common language runtime suspends thread aborts while event handlers for the UnhandledException event are executing.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; UnhandledException 事件的事件处理程序执行时，公共语言运行时挂起线程中止。</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>If the event handler has a &lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt; attribute with the appropriate flags, the event handler is treated as a constrained execution region.</source>
          <target state="translated">如果事件处理程序具有&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;属性具有相应的标志，事件处理程序被视为受约束的执行区域。&lt;/xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, this event is not raised for exceptions that corrupt the state of the process, such as stack overflows or access violations, unless the event handler is security-critical and has the &lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt; attribute.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>，此事件不会引发的异常的损坏状态的进程，如堆栈溢出或访问冲突，除非事件处理程序是安全关键，并且具有&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;属性。&lt;/xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, an unhandled exception that occurs in a thread other than the main application thread is caught by the runtime and therefore does not cause the application to terminate.</source>
          <target state="translated">在.NET framework 1.0 和 1.1 版中，在主应用程序线程外的线程中出现未经处理的异常将由运行时捕获，并因此不会导致应用程序终止。</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>Thus, it is possible for the UnhandledException event to be raised without the application terminating.</source>
          <target state="translated">因此，很可能在不终止的应用程序的情况下引发 UnhandledException 事件。</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework version 2.0, this backstop for unhandled exceptions in child threads was removed, because the cumulative effect of such silent failures included performance degradation, corrupted data, and lockups, all of which were difficult to debug.</source>
          <target state="translated">从.NET Framework 2.0 版开始，此对子子线程中未经处理的异常已被移除，因为这种无提示故障的累积效应包括性能下降，损坏的数据和锁定，它们都很难进行调试。</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>For more information, including a list of cases in which the runtime does not terminate, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，包括列表的情况下在其中运行时不会终止，请参阅<bpt id="p1">[</bpt>托管线程中的异常<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source>To register an event handler for this event, you must have the required permissions, or a &lt;xref:System.Security.SecurityException&gt; is thrown.</source>
          <target state="translated">若要注册的事件处理程序此事件，你必须具有所需的权限，或&lt;xref:System.Security.SecurityException&gt;引发。&lt;/xref:System.Security.SecurityException&gt;</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Events<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关处理事件的详细信息，请参阅<bpt id="p1">[</bpt>事件<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>Other Events for Unhandled Exceptions    For certain application models, the UnhandledException event can be preempted by other events if the unhandled exception occurs in the main application thread.</source>
          <target state="translated">某些应用程序的未处理异常的其他事件模型时，的 UnhandledException 事件可以由其他事件抢先，如果在主应用程序线程中出现未经处理的异常。</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>In applications that use Windows Forms, unhandled exceptions in the main application thread cause the &lt;xref:System.Windows.Forms.Application.ThreadException?displayProperty=fullName&gt; event to be raised.</source>
          <target state="translated">使用 Windows 窗体的应用程序中未经处理的异常中的主应用程序线程原因&lt;xref:System.Windows.Forms.Application.ThreadException?displayProperty=fullName&gt;引发事件。&lt;/xref:System.Windows.Forms.Application.ThreadException?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>If this event is handled, the default behavior is that the unhandled exception does not terminate the application, although the application is left in an unknown state.</source>
          <target state="translated">如果处理此事件，默认行为是未处理的异常不会终止该应用程序，尽管应用程序处于未知状态。</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>In that case, the UnhandledException event is not raised.</source>
          <target state="translated">在这种情况下，则不会引发 UnhandledException 事件。</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>This behavior can be changed by using the application configuration file, or by using the &lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=fullName&gt; method to change the mode to &lt;xref:System.Windows.Forms.UnhandledExceptionMode?displayProperty=fullName&gt; before the &lt;xref:System.Windows.Forms.Application.ThreadException&gt; event handler is hooked up.</source>
          <target state="translated">可以更改此行为，通过使用应用程序配置文件，或通过&lt;xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=fullName&gt;方法来将模式更改为&lt;xref:System.Windows.Forms.UnhandledExceptionMode?displayProperty=fullName&gt;之前的&lt;xref:System.Windows.Forms.Application.ThreadException&gt;事件处理程序已挂钩相符。&lt;/xref:System.Windows.Forms.Application.ThreadException&gt; &lt;/xref:System.Windows.Forms.UnhandledExceptionMode?displayProperty=fullName&gt; &lt;/xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>This applies only to the main application thread.</source>
          <target state="translated">这仅适用于主应用程序线程。</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>The UnhandledException event is raised for unhandled exceptions thrown in other threads.</source>
          <target state="translated">引发在其他线程的未处理异常的情况下，将引发 UnhandledException 事件。</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>Starting with Microsoft Visual Studio 2005, the Visual Basic application framework provides another event for unhandled exceptions in the main application thread.</source>
          <target state="translated">Visual Basic 应用程序框架从 Microsoft Visual Studio 2005 开始，提供有关在主应用程序线程中未经处理的异常的另一个事件。</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>See the &lt;xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=fullName&gt; event.</source>
          <target state="translated">请参阅&lt;xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=fullName&gt;事件。&lt;/xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source>This event has an event arguments object with the same name as the event arguments object used by UnhandledException, but with different properties.</source>
          <target state="translated">此事件有一个事件自变量对象与 UnhandledException，使用的事件自变量对象同名但具有不同的属性。</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>In particular, this event arguments object has an &lt;xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt; property that allows the application to continue running, ignoring the unhandled exception (and leaving the application in an unknown state).</source>
          <target state="translated">具体而言，此事件自变量对象具有&lt;xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt;属性，它允许应用程序能够继续运行，忽略未经处理的异常 （并会使应用程序处于未知状态）。&lt;/xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A&gt;</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source>In that case, the UnhandledException event is not raised.</source>
          <target state="translated">在这种情况下，则不会引发 UnhandledException 事件。</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>Unloads the specified application domain.</source>
          <target state="translated">卸载指定的应用程序域。</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 2.0 there is a thread dedicated to unloading application domains.</source>
          <target state="translated">.NET Framework 2.0 版中没有一个线程专用于卸载应用程序域。</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>This improves reliability, especially when the .NET Framework is hosted.</source>
          <target state="translated">这将提高可靠性，尤其是在.NET Framework 承载。</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source>When a thread calls Unload, the target domain is marked for unloading.</source>
          <target state="translated">当线程调用卸载时，目标域标记为要卸载。</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>The dedicated thread attempts to unload the domain, and all threads in the domain are aborted.</source>
          <target state="translated">专用的线程尝试卸载的域和域中的所有线程都将立即都中止。</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>If a thread does not abort, for example because it is executing unmanaged code, or because it is executing a <ph id="ph1">`finally`</ph> block, then after a period of time a &lt;xref:System.CannotUnloadAppDomainException&gt; is thrown in the thread that originally called Unload.</source>
          <target state="translated">如果一个线程不会中止，例如因为它执行非托管的代码，或是因为正在执行<ph id="ph1">`finally`</ph>块，然后在一段时间后的&lt;xref:System.CannotUnloadAppDomainException&gt;最初调用卸载线程中引发。&lt;/xref:System.CannotUnloadAppDomainException&gt;</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>If the thread that could not be aborted eventually ends, the target domain is not unloaded.</source>
          <target state="translated">如果不可能最终会中止的线程结束，则目标域不卸载。</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>Thus, in the .NET Framework version 2.0 <ph id="ph1">`domain`</ph> is not guaranteed to unload, because it might not be possible to terminate executing threads.</source>
          <target state="translated">因此，在.NET Framework 2.0 版<ph id="ph1">`domain`</ph>不能保证卸载，因为它可能不能终止正在执行的线程。</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  In some cases, calling Unload causes an immediate &lt;xref:System.CannotUnloadAppDomainException&gt;, for example if it is called in a finalizer.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 在某些情况下，调用卸载会导致立即&lt;xref:System.CannotUnloadAppDomainException&gt;，例如如果就是在终结器。&lt;/xref:System.CannotUnloadAppDomainException&gt;</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>The threads in <ph id="ph1">`domain`</ph> are terminated using the &lt;xref:System.Threading.Thread.Abort%2A&gt; method, which throws a &lt;xref:System.Threading.ThreadAbortException&gt; in the thread.</source>
          <target state="translated">中的线程<ph id="ph1">`domain`</ph>被终止使用&lt;xref:System.Threading.Thread.Abort%2A&gt;方法，将引发&lt;xref:System.Threading.ThreadAbortException&gt;线程中。&lt;/xref:System.Threading.ThreadAbortException&gt; &lt;/xref:System.Threading.Thread.Abort%2A&gt;</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>Although the thread should terminate promptly, it can continue executing for an unpredictable amount of time in a <ph id="ph1">`finally`</ph> clause.</source>
          <target state="translated">尽管线程应立即终止，它可以继续执行可不可预测的时间量中<ph id="ph1">`finally`</ph>子句。</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source>Version Compatibility    In the .NET Framework version 1.0 and 1.1 if the thread that calls Unload is running in <ph id="ph1">`domain`</ph>, another thread is started to perform the unload operation.</source>
          <target state="translated">版本兼容性在.NET Framework 版本 1.0 和 1.1 中，如果运行调用卸载该线程<ph id="ph1">`domain`</ph>，另一个线程开始执行卸载操作。</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`domain`</ph> cannot be unloaded, a &lt;xref:System.CannotUnloadAppDomainException&gt; is thrown in that thread, not in the original thread that called Unload.</source>
          <target state="translated">如果<ph id="ph1">`domain`</ph>无法卸载， &lt;xref:System.CannotUnloadAppDomainException&gt;，不在原始线程调用卸载该线程中引发。&lt;/xref:System.CannotUnloadAppDomainException&gt;</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>However, if the thread that calls Unload is running outside <ph id="ph1">`domain`</ph>, that thread receives the exception.</source>
          <target state="translated">但是，如果调用的线程，则卸载运行外部<ph id="ph1">`domain`</ph>，线程将收到异常。</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>An application domain to unload.</source>
          <target state="translated">卸载应用程序域。</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph> could not be unloaded.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;domain&lt;/code&gt;</ph>无法卸载。</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>An error occurred during the unload process.</source>
          <target state="translated">在卸载过程中出错。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>