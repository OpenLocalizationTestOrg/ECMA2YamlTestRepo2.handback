<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf81347af22dba66a1f1948ec5e4057dd57bb5a0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Serialization.ISerializable.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c75758df96579b824aeef77810a9c4ab667eb036</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec8abb95db674a321b19560dea4f05cddf27e899</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Allows an object to control its own serialization and deserialization.</source>
          <target state="translated">允许对象以控制其自己的序列化和反序列化。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Any class that might be serialized must be marked with the &lt;xref:System.SerializableAttribute&gt;.</source>
          <target state="translated">必须使用&lt;xref:System.SerializableAttribute&gt;。&lt;/xref:System.SerializableAttribute&gt;标记任何可能会进行序列化的类</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If a class needs to control its serialization process, it can implement the ISerializable interface.</source>
          <target state="translated">如果需要控制其序列化过程的一个类，它可以实现 ISerializable 接口。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Serialization.Formatter&gt; calls the &lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt; at serialization time and populates the supplied &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; with all the data required to represent the object.</source>
          <target state="translated">&lt;xref:System.Runtime.Serialization.Formatter&gt;调用&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;在序列化时，填充提供&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;表示该对象所需的所有数据。&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt; &lt;/xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt; &lt;/xref:System.Runtime.Serialization.Formatter&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Runtime.Serialization.Formatter&gt; creates a &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; with the type of the object in the graph.</source>
          <target state="translated">&lt;xref:System.Runtime.Serialization.Formatter&gt;创建&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;与图中的对象的类型。&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt; &lt;/xref:System.Runtime.Serialization.Formatter&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Objects that need to send proxies for themselves can use the &lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt; and &lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt; methods on &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; to change the transmitted information.</source>
          <target state="translated">需要向代理发送本身就可以使用的对象&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;和&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;方法&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;若要更改所传输的信息。&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt; &lt;/xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt; &lt;/xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements ISerializable.</source>
          <target state="translated">对于类继承，则可以序列化从实现 ISerializable 的基类派生的类。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this case, the derived class should call the base class implementation of &lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt; inside its implementation of &lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;.</source>
          <target state="translated">在这种情况下，派生的类应调用基类实现的&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;.&lt;/xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;其实现内部&lt;/xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Otherwise, the data from the base class will not be serialized.</source>
          <target state="translated">否则，从基类数据不会序列化。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The ISerializable interface implies a constructor with the signature constructor (&lt;xref:System.Runtime.Serialization.SerializationInfo&gt; information, &lt;xref:System.Runtime.Serialization.StreamingContext&gt; context).</source>
          <target state="translated">ISerializable 接口隐含签名构造函数的构造函数 (&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;信息，&lt;xref:System.Runtime.Serialization.StreamingContext&gt;上下文)。&lt;/xref:System.Runtime.Serialization.StreamingContext&gt; &lt;/xref:System.Runtime.Serialization.SerializationInfo&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At deserialization time, the current constructor is called only after the data in the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; has been deserialized by the formatter.</source>
          <target state="translated">在反序列化时，当前的构造函数调用中的数据后才&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;消息格式化程序已反序列化。&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In general, this constructor should be protected if the class is not sealed.</source>
          <target state="translated">一般情况下，如果类未密封，则应保护此构造函数。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The order in which objects are deserialized cannot be guaranteed.</source>
          <target state="translated">无法保证对象被反序列化的顺序。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, if one type references a type that has not been deserialized yet, an exception will occur.</source>
          <target state="translated">例如，如果一个类型引用的类型，不反序列化尚未，将发生异常。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you are creating types that have such dependencies, you can work around the problem by implementing the <ph id="ph1">`IDeserializationCallback`</ph> interface and the <ph id="ph2">`OnDeserialization`</ph> method.</source>
          <target state="translated">如果要创建具有此类依赖项的类型，你可以解决此问题通过实现<ph id="ph1">`IDeserializationCallback`</ph>接口和<ph id="ph2">`OnDeserialization`</ph>方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The serialization architecture handles object types that extend &lt;xref:System.MarshalByRefObject&gt; the same as types that extend &lt;xref:System.Object&gt;.</source>
          <target state="translated">序列化体系结构处理扩展&lt;xref:System.MarshalByRefObject&gt;扩展&lt;xref:System.Object&gt;.&lt;/xref:System.Object&gt;的类型相同&lt;/xref:System.MarshalByRefObject&gt;的对象类型</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These types can be marked with the &lt;xref:System.SerializableAttribute&gt; and implement the ISerializable interface as any other object type.</source>
          <target state="translated">这些类型可标记为&lt;xref:System.SerializableAttribute&gt;，并且实现 ISerializable 接口作为任何其他对象类型。&lt;/xref:System.SerializableAttribute&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Their object state will be captured and persisted onto the stream.</source>
          <target state="translated">将捕获其对象状态，并将其保存到流。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When these types are being used through &lt;xref:System.Runtime.Remoting&gt;, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the &lt;xref:System.MarshalByRefObject&gt;.</source>
          <target state="translated">通过&lt;xref:System.Runtime.Remoting&gt;、 远程处理基础结构提供的代理项，它会抢占典型的序列化，并改为序列化到&lt;xref:System.MarshalByRefObject&gt;。&lt;/xref:System.MarshalByRefObject&gt;代理&lt;/xref:System.Runtime.Remoting&gt;正在时使用这些类型</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</source>
          <target state="translated">代理项是一个帮助器，知道如何序列化和反序列化的特定类型的对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The proxy, invisible to the user in most cases, will be of type &lt;xref:System.Runtime.Remoting.ObjRef&gt;.</source>
          <target state="translated">代理，对在大多数情况下，用户不可见的类型&lt;xref:System.Runtime.Remoting.ObjRef&gt;.&lt;/xref:System.Runtime.Remoting.ObjRef&gt;将为</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend &lt;xref:System.MarshalByRefObject&gt;.</source>
          <target state="translated">为常规设计模式中，它将是很少会类可以同时标记为可序列化的属性和扩展&lt;xref:System.MarshalByRefObject&gt;.&lt;/xref:System.MarshalByRefObject&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</source>
          <target state="translated">开发人员应仔细考虑可能的序列化和远程处理方案组合使用这两个特性。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>One example where this might be applicable is with a &lt;xref:System.IO.MemoryStream&gt;.</source>
          <target state="translated">这可能是适用的一个示例是以&lt;xref:System.IO.MemoryStream&gt;.&lt;/xref:System.IO.MemoryStream&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>While the base class of &lt;xref:System.IO.MemoryStream&gt; (&lt;xref:System.IO.Stream&gt;) extends from &lt;xref:System.MarshalByRefObject&gt;, it is possible to capture the state of a &lt;xref:System.IO.MemoryStream&gt; and restore it at will.</source>
          <target state="translated">尽管的基本类&lt;xref:System.IO.MemoryStream&gt;(&lt;xref:System.IO.Stream&gt;) 从&lt;xref:System.MarshalByRefObject&gt;，可以捕获的状态&lt;xref:System.IO.MemoryStream&gt;并将其还原随意。&lt;/xref:System.IO.MemoryStream&gt; &lt;/xref:System.MarshalByRefObject&gt; &lt;/xref:System.IO.Stream&gt; &lt;/xref:System.IO.MemoryStream&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</source>
          <target state="translated">它，因此，可能有意义的此流的状态序列化到数据库并将其在后面某个时间点还原时间。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, when used through remoting, an object of this type would be proxied.</source>
          <target state="translated">但是，当使用通过远程处理，此类型的对象将设置代理。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about serialization of classes that extend &lt;xref:System.MarshalByRefObject&gt;, see &lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;.</source>
          <target state="translated">有关更多信息&lt;xref:System.MarshalByRefObject&gt;，请参阅&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;。&lt;/xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;&lt;/xref:System.MarshalByRefObject&gt;扩展的类的序列化</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about implementing ISerializable, see <bpt id="p1">[</bpt>Custom Serialization<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关实现 ISerializable 的详细信息，请参阅<bpt id="p1">[</bpt>自定义序列化<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Populates a <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> with the data needed to serialize the target object.</source>
          <target state="translated">填充<bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>序列化目标对象所需的数据。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Any objects that are included in the &lt;xref:System.Runtime.Serialization.SerializationInfo&gt; are automatically tracked and serialized by the formatter.</source>
          <target state="translated">中包含的任何对象&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;会自动跟踪和序列化格式化程序。&lt;/xref:System.Runtime.Serialization.SerializationInfo&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Code that calls GetObjectData requires the &lt;xref:System.Security.Permissions.SecurityPermission&gt; for providing serialization services.</source>
          <target state="translated">调用 GetObjectData 的代码需要&lt;xref:System.Security.Permissions.SecurityPermission&gt;提供序列化服务。&lt;/xref:System.Security.Permissions.SecurityPermission&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Associated enumeration: &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;.</source>
          <target state="translated">关联的枚举︰ &lt;xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;.&lt;/xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  It is not guaranteed that this method will be called only once per object instance during serialization.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 不保证，此方法将调用一次每个对象实例在序列化过程。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</source>
          <target state="translated">因此，该方法应实现其行为将无论它调用次数相同的方式。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to populate with data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>要填充数据。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The destination (see &lt;xref:System.Runtime.Serialization.StreamingContext&gt;) for this serialization.</source>
          <target state="translated">目标 (请参阅&lt;xref:System.Runtime.Serialization.StreamingContext&gt;) 此序列化。&lt;/xref:System.Runtime.Serialization.StreamingContext&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">调用方没有所要求的权限。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>