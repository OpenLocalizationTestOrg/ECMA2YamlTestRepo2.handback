<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a0a2350f797e7004899be2ae99afc26fc6c0ed1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xml.IStreamProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4da9f11488b0420f2915de8abc7332e995302a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">553334242ad2dd9aa062f7f1675ed8528d2843c2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an interface that can be implemented by classes providing streams.</source>
          <target state="translated">表示可以由类提供流实现的接口。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>When writing an outgoing message containing a streamed body to an XML writer, the &lt;xref:System.ServiceModel.Channels.Message&gt; will use a sequence of calls similar to the following in its &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; implementation:      -   Write any necessary information preceding the stream (For example, the opening XML tag).</source>
          <target state="translated">包含写入 XML 编写器时，流的正文的传出消息&lt;xref:System.ServiceModel.Channels.Message&gt;将使用的一系列调用类似于在以下其&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;实现:-写入流前面的 （例如 XML 开始标记） 的任何必要信息。&lt;/xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; &lt;/xref:System.ServiceModel.Channels.Message&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>-   Write the stream.</source>
          <target state="translated">-写入流。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Write any information following the stream (For example, the closing XML tag).</source>
          <target state="translated">-写入流 （例如，XML 结束标记） 后面的任何信息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This works well with encodings that are similar to the textual XML encoding.</source>
          <target state="translated">这非常适用于类似于文本 XML 编码的编码。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</source>
          <target state="translated">但是，有一些编码不将 XML infoset 信息 （例如，开始和结束 XML 元素的标记） 一起元素中包含的数据。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, in the MTOM encoding, the message is split into multiple parts.</source>
          <target state="translated">例如，在 MTOM 编码中，消息拆分为多个部分。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One part contains the XML infoset, which may contain references to other parts for actual element contents.</source>
          <target state="translated">一部分包含 XML infoset，其中可能包含对实际元素内容的其他部分的引用。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</source>
          <target state="translated">由于 XML infoset 将通常为小与流处理的内容相比，它使必要缓冲 infoset，将其写出，然后以流处理方式写入内容。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This means that by the time the closing element tag is written, we should not have written out the stream yet.</source>
          <target state="translated">这意味着，按时间结束元素标记编写的我们应当尚未写出流尚未。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For this purpose, the IStreamProvider interface is used.</source>
          <target state="translated">为此，请使用 IStreamProvider 接口。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The interface has a &lt;xref:System.Xml.IStreamProvider.GetStream&gt; method that returns the stream to be written.</source>
          <target state="translated">此接口具有&lt;xref:System.Xml.IStreamProvider.GetStream&gt;方法可返回要写入的流。&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The correct way to write out a streamed message body in &lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt; is as follows:      -   Write any necessary information preceding the stream (For example, the opening XML tag)      -   Call the <ph id="ph1">`WriteValue`</ph> overload on the &lt;xref:System.Xml.XmlDictionaryWriter&gt; that takes an IStreamProvider, with an <ph id="ph2">`IStreamProvider`</ph> implementation that returns the stream to be written.</source>
          <target state="translated">写出经过流处理的消息正文中的正确方法&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;如下:-写入流 （例如 XML 开始标记） 前面所有必要信息-调用<ph id="ph1">`WriteValue`</ph>上重载&lt;xref:System.Xml.XmlDictionaryWriter&gt;与采用 IStreamProvider<ph id="ph2">`IStreamProvider`</ph>实现可返回要写入的流。&lt;/xref:System.Xml.XmlDictionaryWriter&gt; &lt;/xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>-   Write any information following the stream (For example, the closing XML tag)       With this approach, the XML writer has a choice of when to call &lt;xref:System.Xml.IStreamProvider.GetStream&gt; and write out the streamed data.</source>
          <target state="translated">-写入流后面的 （例如，XML 结束标记） 使用此方法的任何信息，XML 编写器可以选择何时调用&lt;xref:System.Xml.IStreamProvider.GetStream&gt;和写出经过流处理的数据。&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</source>
          <target state="translated">例如，文本和二进制 XML 编写器将立即调用，并将写出开始和结束标记之间的经过流处理的内容。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The MTOM writer may decide to call &lt;xref:System.Xml.IStreamProvider.GetStream&gt; later, when it is ready to write the appropriate part of the message.</source>
          <target state="translated">MTOM 编写器可以决定调用&lt;xref:System.Xml.IStreamProvider.GetStream&gt;更高版本，准备写入消息的相应部分时。&lt;/xref:System.Xml.IStreamProvider.GetStream&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a stream.</source>
          <target state="translated">获取流。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This method can be used to return the stream to be written.</source>
          <target state="translated">可以使用此方法以返回要写入流。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.IO.Stream&gt; object.</source>
          <target state="translated">A&lt;xref:System.IO.Stream&gt;对象。&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Releases a stream to output.</source>
          <target state="translated">释放要输出的流。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The stream being released.</source>
          <target state="translated">正在发布的流。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>