<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfd1a485c7cd423bac8fc1edeb446bfc906a0ac4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xml.Schema.XmlSchemaComplexType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">014b46122fe8fd3c452cf63dbb70dd3e9a7be4f2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">702a52072c38fb3df461125f5d44a8c7b43e67e6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents the <bpt id="p1">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> element from XML Schema as specified by the World Wide Web Consortium (W3C).</source>
          <target state="translated">表示<bpt id="p1">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>从 XML 架构由万维网联合会 (W3C) 指定的元素。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class defines a complex type that determines the set of attributes and content of an element.</source>
          <target state="translated">此类定义复杂类型，它确定的一组属性和元素内容。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An element can be declared with a type attribute that refers to a <ph id="ph1">`complexType`</ph> element that defines the structure, content, and attributes of that element.</source>
          <target state="translated">可使用引用的类型属性声明元素<ph id="ph1">`complexType`</ph>定义结构、 内容和属性，该元素的元素。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaComplexType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaComplexType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Gets or sets the value for the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAnyAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component of the complex type.</source>
          <target state="translated">获取或设置的值<bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAnyAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>复杂类型的组件。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If this property is not null, the complex type can contain any attributes from the namespaces specified in the &lt;xref:System.Xml.Schema.XmlSchemaAnyAttribute&gt;.</source>
          <target state="translated">如果此属性不为 null，复杂类型可以包含&lt;xref:System.Xml.Schema.XmlSchemaAnyAttribute&gt;.&lt;/xref:System.Xml.Schema.XmlSchemaAnyAttribute&gt;中指定的命名空间中的任何属性</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAnyAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> component of the complex type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAnyAttribute"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>复杂类型的组件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Gets the collection of attributes for the complex type.</source>
          <target state="translated">获取复杂类型的属性的集合。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Contains <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttributeGroupRef"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> classes.</source>
          <target state="translated">包含<bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaAttribute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和<bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaAttributeGroupRef"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gets the collection of all the complied attributes of this complex type and its base types.</source>
          <target state="translated">获取该复杂类型及其基类型的所有已编译属性的集合。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, a combination of all the attributes from the <ph id="ph1">`Attributes`</ph> property from each type in the hierarchy.</source>
          <target state="translated">例如中的所有属性的组合<ph id="ph1">`Attributes`</ph>从层次结构中的每个类型的属性。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The value of this property is read-only.</source>
          <target state="translated">此属性的值是只读的。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This property has the value after the schema has been successfully compiled to determine the complete attribute set that is allowed in an instance document.</source>
          <target state="translated">已成功编译架构以确定实例文档中允许的完整属性集之后，此属性具有的值。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The collection of all the attributes from this complex type and its base types.</source>
          <target state="translated">来自该复杂类型及其基类型的所有特性的集合。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the <bpt id="p1">&lt;xref uid="langword_csharp_AttributeUses" name="AttributeUses" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property.</source>
          <target state="translated">编译后值的<bpt id="p1">&lt;xref uid="langword_csharp_AttributeUses" name="AttributeUses" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>属性。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the post-compilation value for <bpt id="p1">&lt;xref uid="langword_csharp_anyAttribute" name="anyAttribute" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for this complex type and its base type(s).</source>
          <target state="translated">获取的编译后值<bpt id="p1">&lt;xref uid="langword_csharp_anyAttribute" name="anyAttribute" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>以及该复杂类型及其基类型。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The value of this property is read-only.</source>
          <target state="translated">此属性的值是只读的。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This property has values after the schema has been successfully compiled to determine the complete attribute set of the complex type.</source>
          <target state="translated">已成功编译架构来确定复杂类型的完整属性集之后，此属性具有值。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, it might be the <ph id="ph1">`anyAttribute`</ph> element from one of the base types.</source>
          <target state="translated">例如，它可能是<ph id="ph1">`anyAttribute`</ph>从一种基类型的元素。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the <bpt id="p1">&lt;xref uid="langword_csharp_anyAttribute" name="anyAttribute" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> element.</source>
          <target state="translated">编译后值的<bpt id="p1">&lt;xref uid="langword_csharp_anyAttribute" name="anyAttribute" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>元素。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets or sets the <bpt id="p1">&lt;xref uid="langword_csharp_block" name="block" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> attribute.</source>
          <target state="translated">获取或设置<bpt id="p1">&lt;xref uid="langword_csharp_block" name="block" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>属性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Indicates the type of derivation.</source>
          <target state="translated">指示派生的类型。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This attribute can contain the following values:      |Enum|Description|   |----------|-----------------|   |<ph id="ph1">`None`</ph>|Use the derivation restriction defined by the <ph id="ph2">`BlockDefault`</ph> property of the schema, if it exists.|   |<ph id="ph3">`Extension`</ph>|This element cannot be replaced by a type derived by Extension.|   |<ph id="ph4">`Restriction`</ph>|This element cannot be replaced by a type derived by Restriction.|   |<ph id="ph5">`All`</ph><ph id="ph6">|</ph><ph id="ph7">`#all`</ph>.</source>
          <target state="translated">此属性可以包含以下值: |枚举 |说明 |  |----------|-----------------|  |<ph id="ph1">`None`</ph>|使用通过定义派生限制<ph id="ph2">`BlockDefault`</ph>的架构，如果它存在的属性。 |  |<ph id="ph3">`Extension`</ph>|通过扩展而派生的类型时不能替换此元素。 |  |<ph id="ph4">`Restriction`</ph>|通过限制派生的类型时不能替换此元素。 |  |<ph id="ph5">`All`</ph><ph id="ph6">|</ph><ph id="ph7">`#all`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This element cannot be replaced by any type regardless of derivation method.|       The <ph id="ph1">`Substitution`</ph>, <ph id="ph2">`List`</ph>, and <ph id="ph3">`Union`</ph> derivation methods are not supported by this property.</source>
          <target state="translated">此元素无法替换由无论何种派生方法的任何类型。 |      <ph id="ph1">`Substitution`</ph>， <ph id="ph2">`List`</ph>，和<ph id="ph3">`Union`</ph>派生方法不支持此属性。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref uid="langword_csharp_block" name="block" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> attribute prevents a complex type from being used in the specified type of derivation.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_block" name="block" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>属性阻止复杂类型指定的派生类型中使用。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_XmlSchemaDerivationMethod.None" name="XmlSchemaDerivationMethod.None" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_XmlSchemaDerivationMethod.None" name="XmlSchemaDerivationMethod.None" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">可选。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Gets the value after the type has been compiled to the post-schema-validation information set (infoset).</source>
          <target state="translated">将类型编译为架构验证信息集 (infoset) 之后获取的值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This value indicates how the type is enforced when <bpt id="p1">&lt;xref uid="langword_csharp_xsi:type" name="xsi:type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is used in the instance document.</source>
          <target state="translated">此值指示怎样强制实施类型时<bpt id="p1">&lt;xref uid="langword_csharp_xsi:type" name="xsi:type" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实例文档中使用。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This value is taken either from the type itself or, if not defined at the type level, it is taken from the <ph id="ph1">`schema`</ph> element.</source>
          <target state="translated">此值是来自本身的类型或者，如果未定义类型级别，则来自<ph id="ph1">`schema`</ph>元素。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, if the value is restricted, only the specifically defined type can be used, not types derived from the specifically defined type.</source>
          <target state="translated">例如，如果值为受限制，则可以使用专门定义的类型，不是类型派生自专门定义的类型。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This attribute can contain the following values:      |Enum|Description|   |----------|-----------------|   |<ph id="ph1">`None`</ph>|Use the derivation restriction defined by the <ph id="ph2">`BlockDefault`</ph> property of the schema, if it exists.|   |<ph id="ph3">`Extension`</ph>|This element cannot be replaced by a type derived by Extension.|   |<ph id="ph4">`Restriction`</ph>|This element cannot be replaced by a type derived by Restriction.|   |<ph id="ph5">`All`</ph><ph id="ph6">|</ph><ph id="ph7">`#all`</ph>.</source>
          <target state="translated">此属性可以包含以下值: |枚举 |说明 |  |----------|-----------------|  |<ph id="ph1">`None`</ph>|使用通过定义派生限制<ph id="ph2">`BlockDefault`</ph>的架构，如果它存在的属性。 |  |<ph id="ph3">`Extension`</ph>|通过扩展而派生的类型时不能替换此元素。 |  |<ph id="ph4">`Restriction`</ph>|通过限制派生的类型时不能替换此元素。 |  |<ph id="ph5">`All`</ph><ph id="ph6">|</ph><ph id="ph7">`#all`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This element cannot be replaced by any type regardless of derivation method.|       The <ph id="ph1">`Substitution`</ph>, <ph id="ph2">`List`</ph>, and <ph id="ph3">`Union`</ph> derivation methods are not supported by this property.</source>
          <target state="translated">此元素无法替换由无论何种派生方法的任何类型。 |      <ph id="ph1">`Substitution`</ph>， <ph id="ph2">`List`</ph>，和<ph id="ph3">`Union`</ph>派生方法不支持此属性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The post-schema-validated infoset value.</source>
          <target state="translated">后架构验证信息集值中。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_BlockDefault" name="BlockDefault" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value on the <bpt id="p2">&lt;xref uid="langword_csharp_schema" name="schema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> element.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_BlockDefault" name="BlockDefault" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值上<bpt id="p2">&lt;xref uid="langword_csharp_schema" name="schema" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>元素。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets or sets the post-compilation <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaContentModel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of this complex type.</source>
          <target state="translated">获取或设置编译后<bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaContentModel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此复杂类型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is mutually exclusive with the &lt;xref:System.Xml.Schema.XmlSchemaComplexType.Particle%2A&gt; property.</source>
          <target state="translated">这是与互斥&lt;xref:System.Xml.Schema.XmlSchemaComplexType.Particle%2A&gt;属性。&lt;/xref:System.Xml.Schema.XmlSchemaComplexType.Particle%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The content model type that is one of the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSimpleContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaComplexContent"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> classes.</source>
          <target state="translated">内容模型类型之一的<bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaSimpleContent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>或<bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaComplexContent"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the content model of the complex type which holds the post-compilation value.</source>
          <target state="translated">获取复杂类型，它保存编译后值的内容模型。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is the content in the post-schema-validation infoset.</source>
          <target state="translated">这是中的架构验证信息集的内容。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`IsMixed`</ph> property is set to <ph id="ph2">`true`</ph> on the <ph id="ph3">`ContentModel`</ph> property that has the type <ph id="ph4">`XmlSchemaComplexContent`</ph>, the value returned is <ph id="ph5">`Mixed`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`IsMixed`</ph>属性设置为<ph id="ph2">`true`</ph>上<ph id="ph3">`ContentModel`</ph>具有类型的属性<ph id="ph4">`XmlSchemaComplexContent`</ph>，返回的值为<ph id="ph5">`Mixed`</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`IsMixed`</ph> property is <ph id="ph2">`false`</ph>, the value is either <ph id="ph3">`Empty`</ph> or <ph id="ph4">`ElementOnly`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`IsMixed`</ph>属性是<ph id="ph2">`false`</ph>，则值为<ph id="ph3">`Empty`</ph>或<ph id="ph4">`ElementOnly`</ph>。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the type on the <ph id="ph1">`ContentModel`</ph> property has the type <ph id="ph2">`XmlSchemaSimpleContent`</ph>, then this value is always <ph id="ph3">`TextOnly`</ph>.</source>
          <target state="translated">如果上的类型<ph id="ph1">`ContentModel`</ph>属性具有类型<ph id="ph2">`XmlSchemaSimpleContent`</ph>，则此值始终是<ph id="ph3">`TextOnly`</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ContentType`</ph> property must have one of the values shown in the following table.</source>
          <target state="translated"><ph id="ph1">`ContentType`</ph>属性必须具有下表中显示的值之一。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>|Enum|Description|   |----------|-----------------|   |<ph id="ph1">`TextOnly`</ph>|Text-only content.|   |<ph id="ph2">`Empty`</ph>|Empty content.|   |<ph id="ph3">`ElementOnly`</ph>|Element-only content.|   |<ph id="ph4">`Mixed`</ph>|Mixed content model.|</source>
          <target state="translated">|枚举 |说明 |  |----------|-----------------|  |<ph id="ph1">`TextOnly`</ph>|纯文本内容。 |  |<ph id="ph2">`Empty`</ph>|空内容。 |  |<ph id="ph3">`ElementOnly`</ph>|仅限元素的内容。 |  |<ph id="ph4">`Mixed`</ph>|混合内容模型。 |</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the content model for the complex type.</source>
          <target state="translated">复杂类型的内容模型编译后值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets the particle that holds the post-compilation value of the &lt;xref:System.Xml.Schema.XmlSchemaComplexType.ContentType*&gt; particle.</source>
          <target state="translated">获取保存编译后值的粒子&lt;xref:System.Xml.Schema.XmlSchemaComplexType.ContentType*&gt;粒子。&lt;/xref:System.Xml.Schema.XmlSchemaComplexType.ContentType*&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`ContentTypeParticle`</ph> is determined after the content models of the most derived types and the base complex type have been resolved according to the rules defined in the W3C XML Schema definition language (XSD) specification.</source>
          <target state="translated">这<ph id="ph1">`ContentTypeParticle`</ph>之后的派生程度最高的类型和基的复杂类型的内容模型已得到解决根据 W3C XML 架构定义语言 (XSD) 规范中定义的规则，确定。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The particle for the content type.</source>
          <target state="translated">内容类型的粒子。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The post-compilation value of the &lt;xref:System.Xml.Schema.XmlSchemaComplexType.ContentType*&gt; particle.</source>
          <target state="translated">编译后值的&lt;xref:System.Xml.Schema.XmlSchemaComplexType.ContentType*&gt;粒子。&lt;/xref:System.Xml.Schema.XmlSchemaComplexType.ContentType*&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets the information that determines if the <bpt id="p1">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> element can be used in the instance document.</source>
          <target state="translated">获取或设置确定的信息<bpt id="p1">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>元素可以在实例文档中使用。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, an element cannot use this <bpt id="p2">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> element directly and must use a complex type that is derived from this <bpt id="p3">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> element.</source>
          <target state="translated">如果<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，元素不能使用此<bpt id="p2">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>直接元素，并且必须使用的复杂类型的派生自该<bpt id="p3">&lt;xref uid="langword_csharp_complexType" name="complexType" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>元素。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">可选。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Gets or sets information that determines if the complex type has a mixed content model (markup within the content).</source>
          <target state="translated">获取或设置确定复杂类型是否具有混合内容模型 （内容中的标记） 的信息。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Indicates if character data can appear between the child elements of this <ph id="ph1">`complexType`</ph>.</source>
          <target state="translated">指示是否字符数据可以出现的子元素之间<ph id="ph1">`complexType`</ph>。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`simpleContent`</ph> element is a child element, the <ph id="ph2">`mixed`</ph> attribute is not allowed (<ph id="ph3">`false`</ph>).</source>
          <target state="translated">如果<ph id="ph1">`simpleContent`</ph>元素是一个子元素，<ph id="ph2">`mixed`</ph>不允许使用属性 (<ph id="ph3">`false`</ph>)。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`complexContent`</ph> element is a child element, the <ph id="ph2">`mixed`</ph> attribute can be overridden by the <ph id="ph3">`mixed`</ph> attribute on the <ph id="ph4">`complexContent`</ph> element.</source>
          <target state="translated">如果<ph id="ph1">`complexContent`</ph>元素是一个子元素，<ph id="ph2">`mixed`</ph>属性可以通过重写<ph id="ph3">`mixed`</ph>属性<ph id="ph4">`complexContent`</ph>元素。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if character data can appear between child elements of this complex type; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果字符数据可以显示此复杂类型; 的子元素之间否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">可选。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets or sets the compositor type as one of the <bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaGroupRef"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaChoice"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, <bpt id="p3">&lt;xref href="System.Xml.Schema.XmlSchemaAll"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>, or <bpt id="p4">&lt;xref href="System.Xml.Schema.XmlSchemaSequence"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> classes.</source>
          <target state="translated">获取或设置组合类型作为之一<bpt id="p1">&lt;xref href="System.Xml.Schema.XmlSchemaGroupRef"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>， <bpt id="p2">&lt;xref href="System.Xml.Schema.XmlSchemaChoice"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>， <bpt id="p3">&lt;xref href="System.Xml.Schema.XmlSchemaAll"&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>，或<bpt id="p4">&lt;xref href="System.Xml.Schema.XmlSchemaSequence"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Particles must be one of the following compositors:      |Element|Description|   |-------------|-----------------|   |<ph id="ph1">`group`</ph>|The complex type contains the elements defined in the referenced group.|   |<ph id="ph2">`sequence`</ph>|The complex type contains the elements defined in the specified sequence.|   |<ph id="ph3">`choice`</ph>|The complex type allows one of the elements specified in the <ph id="ph4">`choice`</ph> element.|   |<ph id="ph5">`all`</ph>|The complex type allows all of the elements specified in the <ph id="ph6">`all`</ph> element to appear once or not at all.|       This is mutually exclusive with the &lt;xref:System.Xml.Schema.XmlSchemaComplexType.ContentModel%2A&gt; property.</source>
          <target state="translated">粒子必须是下列排序器之一: |元素 |说明 |  |-------------|-----------------|  |<ph id="ph1">`group`</ph>|复杂类型包含在引用组中定义的元素。 |  |<ph id="ph2">`sequence`</ph>|该复杂类型包含指定序列中定义的元素。 |  |<ph id="ph3">`choice`</ph>|复杂类型，不允许的中指定的元素<ph id="ph4">`choice`</ph>元素。 |  |<ph id="ph5">`all`</ph>|复杂类型所允许的所有元素中指定<ph id="ph6">`all`</ph>元素出现一次或根本不。 |      这是与互斥&lt;xref:System.Xml.Schema.XmlSchemaComplexType.ContentModel%2A&gt;属性。&lt;/xref:System.Xml.Schema.XmlSchemaComplexType.ContentModel%2A&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The compositor type.</source>
          <target state="translated">合成程序类型。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>