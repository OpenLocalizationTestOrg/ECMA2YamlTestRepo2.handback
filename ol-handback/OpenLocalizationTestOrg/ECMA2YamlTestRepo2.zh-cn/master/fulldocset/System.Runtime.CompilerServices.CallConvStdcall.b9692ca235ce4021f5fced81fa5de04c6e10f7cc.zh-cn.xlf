<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be2b0df6fe8e2febaf1601720cdaea4077dd9311</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.CompilerServices.CallConvStdcall.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97f9d0b6f3dcfb70723641710a316893f43124d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a029c60a0c874936f8334288e290bbedce3540f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Indicates that a method should use the <bpt id="p1">&lt;xref uid="langword_csharp_StdCall" name="StdCall" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> calling convention.</source>
          <target state="translated">指示应使用一种方法<bpt id="p1">&lt;xref uid="langword_csharp_StdCall" name="StdCall" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>调用约定。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The callee cleans the stack.</source>
          <target state="translated">被调用方将清理堆栈。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is the default convention for calling unmanaged functions from managed code.</source>
          <target state="translated">这是从托管代码调用非托管的函数的默认约定。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The classes in &lt;xref:System.Runtime.CompilerServices&gt; are for compiler writers' use only.</source>
          <target state="translated">中的类&lt;xref:System.Runtime.CompilerServices&gt;编译器编写器仅供使用。&lt;/xref:System.Runtime.CompilerServices&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</source>
          <target state="translated">编译器发出元数据，以更改默认行为不恰当时，会在实时 (JIT) 编译器处理值的方式中的自定义修饰符。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</source>
          <target state="translated">当 JIT 编译器遇到了一个自定义修饰符时，它将处理修饰符指定的方法中的值。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Compilers can apply custom modifiers to methods, parameters, and return values.</source>
          <target state="translated">编译器可以将自定义修饰符应用于方法、 参数和返回值。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The JIT compiler must respond to required modifiers but can ignore optional modifiers.</source>
          <target state="translated">JIT 编译器必须响应所需修饰符，但可以忽略可选修饰符。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</source>
          <target state="translated">C + + 编译器无法发出一个自定义修饰符来描述一个字节应如何处理在其中 JIT 编译器将字节与 c + + 不兼容的方式的情况下默认情况下。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can emit custom modifiers into metadata using one of the following techniques:      -   Using methods in the &lt;xref:System.Reflection.Emit.TypeBuilder&gt; class such as &lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;, &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;, and &lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;.</source>
          <target state="translated">可以将自定义修饰符发出到元数据中使用以下方法之一:-使用中的方法&lt;xref:System.Reflection.Emit.TypeBuilder&gt;类如&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt;， &lt;xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt;， &lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt;，和&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;。&lt;/xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineField%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A&gt; &lt;/xref:System.Reflection.Emit.TypeBuilder&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>-   Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <ph id="ph1">`modopt`</ph> and <ph id="ph2">`modreq`</ph>, and assembling the file with the <bpt id="p1">[</bpt>Ilasm.exe (IL Assembler)<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件<ph id="ph1">`modopt`</ph>和<ph id="ph2">`modreq`</ph>，再将包含的文件内容组合<bpt id="p1">[</bpt>Ilasm.exe （IL 汇编程序）<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>-   Using the unmanaged reflection API.</source>
          <target state="translated">-使用非托管的反射 API。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.CompilerServices.CallConvStdcall"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Runtime.CompilerServices.CallConvStdcall"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The classes in &lt;xref:System.Runtime.CompilerServices&gt; are for compiler writers' use only.</source>
          <target state="translated">中的类&lt;xref:System.Runtime.CompilerServices&gt;编译器编写器仅供使用。&lt;/xref:System.Runtime.CompilerServices&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>