<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b55420315afeb95c0db4f46e0e0d108b051e98dd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.ComponentResourceKey.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">82905670938212d687b75d51e724b0ec5ffb0008</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc9948f370cf5b64dc9f9991eff2838fac36d5fc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines or references resource keys based on class names in external assemblies, as well as an additional identifier.</source>
          <target state="translated">定义或引用基于在外部程序集，以及其他标识符的类名称的资源键。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>信息，请参阅<bpt id="p1">[</bpt>ComponentResourceKey 标记扩展<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class implements an object type that is useful for creating keys that are based on types in assemblies plus an identifier.</source>
          <target state="translated">此类实现可用于创建基于中程序集以及一个标识符类型的键的对象类型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because you define or reference the type, you do not need to request a specific &lt;xref:System.Windows.ResourceDictionary&gt;, and more than one set of resources can exist in the assembly, each differentiated by the type of their ComponentResourceKey.</source>
          <target state="translated">因为你定义或引用的类型，不需要请求的特定&lt;xref:System.Windows.ResourceDictionary&gt;，和中的程序集，每个不同由其 ComponentResourceKey 类型可以存在多个组的资源。&lt;/xref:System.Windows.ResourceDictionary&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are two ways to define a ComponentResourceKey.</source>
          <target state="translated">有两种方法来定义 ComponentResourceKey。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you want an easily accessible key, you can define a static property on your control class code that returns a ComponentResourceKey, constructed with a &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt; that exists in the external resource assembly, and a &lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;.</source>
          <target state="translated">如果你想易于访问的键，可以在控件类代码返回 ComponentResourceKey，使用的&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;外部资源程序集和一种&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;。&lt;/xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;中&lt;/xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;构造上定义的静态属性</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The key can be used for defining alternate default styles for controls in an assembly, by swapping the original external resource assembly for a custom one.</source>
          <target state="translated">密钥可以用于通过交换原始外部资源程序集的一个自定义的程序集中定义控件的备用默认样式。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can also define a named resource part within a larger control style or template to expose a customization entry point.</source>
          <target state="translated">你还可以定义命名的资源部分中的较大控件样式或模板来公开自定义入口点。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is particularly useful if you are defining a theme resource dictionary for your control.</source>
          <target state="translated">这是特别有用，如果你正在为您的控件定义主题资源字典。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](../Topic/ComponentResourceKey%20Markup%20Extension.md)</ept> in verbose syntax directly to create a loose instance of the key.</source>
          <target state="translated">你还可以使用<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> <bpt id="p1">[</bpt>ComponentResourceKey 标记扩展<ept id="p1">](../Topic/ComponentResourceKey%20Markup%20Extension.md)</ept>in 详细语法直接创建密钥的松散实例。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is useful if you want to declare private resources from other assemblies that are less discoverable to customize.</source>
          <target state="translated">这是你想要声明与得难于发现自定义其他程序集的专用资源的情况下很有用。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    See Remarks</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文本使用情况，请参阅备注</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The default constructor is not generally used, because a &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt; value and &lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt; value are required for proper initialization.</source>
          <target state="translated">默认构造函数通常不使用，因为&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;值和&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;值所需的正确初始化。&lt;/xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt; &lt;/xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The default constructor exists primarily to support <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> XAML usage in named parameter form.</source>
          <target state="translated">默认构造函数存在主要是为了支持<bpt id="p1">[</bpt>ComponentResourceKey 标记扩展<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>命名的参数形式的 XAML 用法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of a <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> , specifying the &lt;xref:System.Type&gt; that defines the key, and an object to use as an additional resource identifier.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，并指定&lt;xref:System.Type&gt;，它定义了密钥，并要使用与其他资源标识符的对象。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This constructor exist for two scenarios, with the first scenario being the most important:      -   Supports creating a &lt;xref:System.Windows.ComponentResourceKey&gt; that is then exposed as a public static field on a custom control class.</source>
          <target state="translated">此构造函数存在两个方案，其中最重要的第一个方案:-创建&lt;xref:System.Windows.ComponentResourceKey&gt;，然后公开作为自定义控件类的公共静态字段&lt;/xref:System.Windows.ComponentResourceKey&gt;的支持</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This simplifies a control's access to its own defined resources in the template through <ph id="ph1">`{x:Static}`</ph> usages for template property values.</source>
          <target state="translated">这简化了对其自己通过模板中定义的资源的控件的访问<ph id="ph1">`{x:Static}`</ph>模板属性值的用法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>-   Supports <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> XAML usage in positional parameter form, which is one technique available for third parties that reference a component resource.</source>
          <target state="translated">-支持<bpt id="p1">[</bpt>ComponentResourceKey 标记扩展<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>位置参数形式，这是一种方法可用于引用组件资源的第三方的 XAML 用法。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type that defines the resource key.</source>
          <target state="translated">定义的资源键的类型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A unique identifier to differentiate this <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from others associated with the <ph id="ph1">`typeInTargetAssembly`</ph> type.</source>
          <target state="translated">唯一标识符来区分这<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>与其他关联<ph id="ph1">`typeInTargetAssembly`</ph>类型。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Gets the assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</source>
          <target state="translated">获取指示哪些程序集的字典查找与此密钥关联的值的程序集对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The retrieved assembly, as a reflection class.</source>
          <target state="translated">检索到的程序集，作为反射类。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Determines whether the provided object is equal to the current <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">确定所提供的对象是否等于当前<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Two keys are equal if they both have the same values for all their immediate settable properties (&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;, &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;).</source>
          <target state="translated">两个键是否相等，如果它们都具有相同的值为所有其立即可设置属性 (&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;， &lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;)。&lt;/xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt; &lt;/xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Object to compare with the current <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">要与当前比较对象<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the objects are equal; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果对象相等，则否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns a hash code for this <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回此哈希代码<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A signed 32-bit integer value.</source>
          <target state="translated">一个 32 位有符号的整数值。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Gets or sets a unique identifier to differentiate this key from others associated with this type.</source>
          <target state="translated">获取或设置要将此密钥与其他人与此类型关联区分开来的唯一标识符。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>信息，请参阅<bpt id="p1">[</bpt>ComponentResourceKey 标记扩展<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Typically, the string used for a ResourceId value conforms to the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">通常情况下，该字符串用于 ResourceId 值符合<bpt id="p1">[</bpt>XamlName 语法<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    See Remarks</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_2"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文本使用情况，请参阅备注</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A unique identifier.</source>
          <target state="translated">唯一的标识符。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Typically this is a string.</source>
          <target state="translated">通常，这是一个字符串。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets the string representation of a <bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取的字符串表示形式<bpt id="p1">&lt;xref href="System.Windows.ComponentResourceKey"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The string representation.</source>
          <target state="translated">字符串表示形式。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Gets or sets the &lt;xref:System.Type&gt; that defines the resource key.</source>
          <target state="translated">获取或设置&lt;xref:System.Type&gt;，它定义的资源键。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph> information, see <bpt id="p1">[</bpt>ComponentResourceKey Markup Extension<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关<ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</ph>信息，请参阅<bpt id="p1">[</bpt>ComponentResourceKey 标记扩展<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ComponentResourceKey&gt; element is used by custom components to define keys for resources that are accessed from external assemblies, based on targeting an assembly that contains the type.</source>
          <target state="translated">&lt;xref:System.Windows.ComponentResourceKey&gt;自定义组件使用元素可以定义从外部程序集，基于目标的程序集中包含的类型的访问的资源键。&lt;/xref:System.Windows.ComponentResourceKey&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Custom components often define new types which must be in the assembly where the resource is located.</source>
          <target state="translated">自定义组件通常定义必须在资源所在的程序集的新类型。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Generally these types have no other implementation, the types only exist in order to satisfy the lookup requirements of a &lt;xref:System.Windows.ComponentResourceKey&gt;.</source>
          <target state="translated">通常这些类型没有其他实现，以满足一种&lt;xref:System.Windows.ComponentResourceKey&gt;。&lt;/xref:System.Windows.ComponentResourceKey&gt;的查找要求仅存在类型</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_3"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage    See Remarks</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_3"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文本使用情况，请参阅备注</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type that defines the resource key.</source>
          <target state="translated">定义的资源键的类型。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>