<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3babf752cda1959b9fe1dc4066dab91e524618cf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.WeakEventManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45b51d56744bdeb27308fc24e1c01c03b015f762</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea2a89fc5ac37f0d3a6ebf9c4b7068aa0c1bba2a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated">提供基本类，事件管理器中使用<bpt id="p1">*</bpt>弱事件模式<ept id="p1">*</ept>。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">管理器添加和移除事件 （或回调） 也使用该模式的侦听器。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">当事件源具有对象生存期无关的事件侦听器时，通常使用弱事件模式。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using the central event dispatching capability of a WeakEventManager allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">使用 WeakEventManager 的中央事件调度功能允许该侦听器的处理程序进行垃圾回收，即使源对象仍然存在。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">与此相反，常规事件挂钩使用<ph id="ph1">`+=`</ph>运算符会导致可能断开连接的源来保存到侦听器的引用。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">这可以防止接收方进行垃圾回收及时。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">一种常见情况之间源和侦听器的生存期关系应使用其中的弱事件模式是来自数据绑定的更新事件的处理。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">弱事件模式还可以用于回调事件和常规事件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">初始化基类值，当派生的类的构造函数通过使用作为初始值设定项。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">托管代码流向每个侦听器的事件传送。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Call the DeliverEvent method from within the event handlers that are added or removed by the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; and &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; implementations of subclasses.</source>
          <target state="translated">调用中的事件处理程序添加或移除从 DeliverEvent 方法&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;和&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;子类的实现。&lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt; &lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you call the &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; method in your <ph id="ph1">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">如果调用&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;方法在你<ph id="ph1">`AddListener`</ph>实现你的类中，侦听器接收事件的列表就会保留在基础集合。&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph>不是类或接口协定的一部分。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; and adds weak event pattern listeners for the event.)       &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>是管理器中调用&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;并加弱事件模式侦听器为事件的方法的建议的名称。）      &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;将侦听器添加到一个列表。&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt; &lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use DeliverEvent or &lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;.</source>
          <target state="translated">如果您管理器的实现维护多个列表的每个事件侦听器，不要使用 DeliverEvent 或&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;.&lt;/xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;.</source>
          <target state="translated">相反，你实现应创建其自己&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;情况下，<ph id="ph1">`AddListener`</ph>应将侦听器添加到相应的列表中，并且事件应通过调用&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;.&lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;传递给相应的侦听器列表&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object on which the event is being handled.</source>
          <target state="translated">在其处理该事件的对象。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.EventArgs&gt; that contains the event data for the event to deliver.</source>
          <target state="translated">&lt;xref:System.EventArgs&gt;，其中包含要传递的事件的事件数据。&lt;/xref:System.EventArgs&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is used for the provided type.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>适用于所提供的类型的实现。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt; implementations call this method using their passed <ph id="ph1">`managerType`</ph>.</source>
          <target state="translated">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;实现调用此方法使用其传递<ph id="ph1">`managerType`</ph>。&lt;/xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The returned &lt;xref:System.Windows.WeakEventManager&gt; is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">返回&lt;xref:System.Windows.WeakEventManager&gt;然后用作区分符，以确定已收到的事件，以及要调用的私有类处理程序。&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The type to obtain the <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">要获取的类型<bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>有关。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The matching <bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">匹配<bpt id="p1">&lt;xref href="System.Windows.WeakEventManager"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实现。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">获取或设置为指定的源存储的数据。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">派生的类可以选择数据和将存储在此索引器的类型。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Typically this is implemented as a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;, which is a list of weak references to listeners.</source>
          <target state="translated">通常这作为实现&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;，这是一份到侦听器的弱引用。&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You would only have to change this type if the &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; type cannot contain your required information.</source>
          <target state="translated">你只需更改此类型，如果&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;类型不能包含你所需的信息。&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If so, you will have to override the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">如果这样，你将需要重写&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;方法，以便正确执行的基础类型的所有清理。&lt;/xref:System.Windows.WeakEventManager.Purge%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">请求的源的从零开始的索引。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">正在存储由此源的管理器的数据。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">返回要包含的事件侦听器的新对象。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">要包含的事件侦听器的新对象。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">将指定的委托添加为指定的源的事件处理程序。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">处理程序委托订阅源对象。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The delegate that handles the event that is raised by <ph id="ph1">`source`</ph>.</source>
          <target state="translated">处理引发的事件的委托<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">将提供的侦听器添加到被管理的事件提供的源。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.</source>
          <target state="translated">调用此方法内管理器类<ph id="ph1">`AddListener`</ph>方法&lt;xref:System.Windows.WeakEventManager&gt;实现。&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>是建议的名称的静态方法在上定义的管理器类，允许其他类来添加侦听器为弱事件模式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph>应采用两个参数︰<ph id="ph2">`source`</ph>附加侦听器，其中和<ph id="ph3">`listener`</ph>实例。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the ProtectedAddListener method on the current manager and pass the same two parameters.</source>
          <target state="translated">为你<ph id="ph1">`AddListener`</ph>实现，在当前管理器上调用 ProtectedAddListener 方法并传递的相同的两个参数。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the list of listeners was previously empty, ProtectedAddListener calls the &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt; override through polymorphism.</source>
          <target state="translated">如果侦听器的列表是先前为空，ProtectedAddListener 调用&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;方法内部，这将调用您的特定&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;多态性通过重写。&lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt; &lt;/xref:System.Windows.WeakEventManager.StartListening%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ProtectedAddListener adds listeners to a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id="ph1">`source`</ph>.</source>
          <target state="translated">ProtectedAddListener 将侦听器添加到单个内部&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;每<ph id="ph1">`source`</ph>。&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedAddListener.</source>
          <target state="translated">如果您管理器的实现维护的侦听器的每个事件源组合的多个列表，则不要使用 ProtectedAddListener。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; event instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.</source>
          <target state="translated">相反，你实现应创建其自己&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;情况下，<ph id="ph1">`AddListener`</ph>应将侦听器添加到相应的列表中，并且事件应通过调用传递到相应的侦听器列表&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;事件而不是&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;方法。&lt;/xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; &lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; &lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The source to attach listeners to.</source>
          <target state="translated">要附加到侦听器的源。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The listening class (which must implement <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">侦听类 (这必须实现<bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">从指定的源中删除以前添加的处理程序。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The source to remove the handler from.</source>
          <target state="translated">要移除处理程序的源。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to remove from <ph id="ph1">`source`</ph>.</source>
          <target state="translated">要移除的委托<ph id="ph1">`source`</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">从提供的源中删除以前添加的侦听器。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on &lt;xref:System.Windows.WeakEventManager&gt; implementations.</source>
          <target state="translated">调用此方法内管理器类<ph id="ph1">`RemoveListener`</ph>方法&lt;xref:System.Windows.WeakEventManager&gt;实现。&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>是建议的名称的静态方法在上定义的管理器类，允许其他类以删除侦听器为弱事件模式。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph>应采用两个参数︰<ph id="ph2">`source`</ph>其中删除侦听器，则与<ph id="ph3">`listener`</ph>类。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the ProtectedRemoveListener method on the current manager and pass the same two parameters.</source>
          <target state="translated">为你<ph id="ph1">`RemoveListener`</ph>实现，在当前管理器上调用 ProtectedRemoveListener 方法并传递的相同的两个参数。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If a call to ProtectedRemoveListener removes the last listener in the list, ProtectedRemoveListener calls the &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; method internally, which will call your specific &lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt; override through polymorphism.</source>
          <target state="translated">如果对 ProtectedRemoveListener 的调用列表中删除最后一个侦听器，ProtectedRemoveListener 调用&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;方法内部，这将调用您的特定&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;多态性通过重写。&lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt; &lt;/xref:System.Windows.WeakEventManager.StopListening%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>ProtectedRemoveListener removes listeners from a single internal &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; per <ph id="ph1">`source`</ph>.</source>
          <target state="translated">从单个内部 ProtectedRemoveListener 中删除侦听器&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;每<ph id="ph1">`source`</ph>。&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use ProtectedRemoveListener.</source>
          <target state="translated">如果您管理器的实现维护的侦听器的每个事件源组合的多个列表，则不要使用 ProtectedRemoveListener。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead, your implementation should create its own &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; instances, <ph id="ph1">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the &lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; method instead of the &lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; method.</source>
          <target state="translated">相反，你实现应创建其自己&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;情况下，<ph id="ph1">`RemoveListener`</ph>应从相应的列表中删除侦听器和事件应通过调用传递到相应的侦听器列表&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;方法而不是&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;方法。&lt;/xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt; &lt;/xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt; &lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The source to remove listeners from.</source>
          <target state="translated">要从中移除侦听器的源。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The listening class (which must implement <bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>).</source>
          <target state="translated">侦听类 (这必须实现<bpt id="p1">&lt;xref href="System.Windows.IWeakEventListener"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>)。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">从提供的源的数据列表中删除不活动的侦听器条目。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if some entries were actually removed from the list.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果某些条目已实际从列表中删除。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The Purge method has a default implementation that will remove all entries when data is a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt;.</source>
          <target state="translated">清除方法具有一个默认实现，数据是一种&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;。&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;时，将移除所有项</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The source for events being listened to.</source>
          <target state="translated">正在侦听的事件源。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The data to check.</source>
          <target state="translated">要检查的数据。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This object is expected to be a &lt;xref:System.Windows.WeakEventManager.ListenerList&gt; implementation.</source>
          <target state="translated">此对象应为&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;实现。&lt;/xref:System.Windows.WeakEventManager.ListenerList&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to stop listening to <ph id="ph1">`source`</ph>, and completely remove all entries from <ph id="ph2">`data`</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要停止侦听<ph id="ph1">`source`</ph>，和完全移除所有项<ph id="ph2">`data`</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if some entries were actually removed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果某些条目实际上已经移除;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Establishes a read-lock on the underlying data table, and returns an &lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">建立与基础数据表上的读取锁，并返回&lt;xref:System.IDisposable&gt;.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In derived classes, queries to the table contained in &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; should always occur within a <ph id="ph1">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">在派生类中，查询中包含的表&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;应总是出现在<ph id="ph1">`using (ReadLock) { ... }`</ph>子句，除非已内的写入锁的查询。&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.</source>
          <target state="translated">这些查询可能有必要，如果你的类支持更复杂<ph id="ph1">`AddListener`</ph>实施，需要更多的数据超出<ph id="ph2">`source`</ph>和<ph id="ph3">`listener`</ph>，并使用&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;用于存储的额外信息集合。&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> construct.</source>
          <target state="translated">用于建立数据表成员上的锁，然后相应地释放与对象<bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>构造。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">移除指定的源的所有侦听器。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The source to remove listener information for.</source>
          <target state="translated">要删除侦听器信息的源。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">未使用的项基础侦听器列表中清除在较低的优先级线程上执行的请求。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Calling the ScheduleCleanup method is similar to calling the &lt;xref:System.Windows.WeakEventManager.Purge%2A&gt; method on the current manager's list, at lower thread priority, with the <ph id="ph1">`purgeAll`</ph> parameter set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">调用 ScheduleCleanup 方法都类似于调用&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;当前管理器的列表，以较低的线程优先级，方法与<ph id="ph1">`purgeAll`</ph>参数设置为<ph id="ph2">`false`</ph>。&lt;/xref:System.Windows.WeakEventManager.Purge%2A&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">设置指定的管理器类型的当前管理器。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Call the SetCurrentManager method to initialize a manager, if that is required by a call to your <ph id="ph1">`CurrentManager`</ph> property on a &lt;xref:System.Windows.WeakEventManager&gt; implementation.</source>
          <target state="translated">调用 SetCurrentManager 方法以初始化管理器中，如果所需的调用你<ph id="ph1">`CurrentManager`</ph>属性&lt;xref:System.Windows.WeakEventManager&gt;实现。&lt;/xref:System.Windows.WeakEventManager&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The type to set the new event manager.</source>
          <target state="translated">要设置新的事件管理器的类型。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The new event manager.</source>
          <target state="translated">新的事件管理器。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">当在派生类中重写，开始侦听被托管的事件。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After the StartListening method is first called, the manager should be in the state of calling &lt;xref:System.Windows.WeakEventManager.DeliverEvent<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.WeakEventManager.DeliverEventToList<ept id="p1">*</ept>&gt; whenever the relevant event from the provided source is handled.</source>
          <target state="translated">首次调用 StartListening 方法后，管理器应该在调用的状态中&lt;&gt; <bpt id="p1">*</bpt>1&gt; 或&lt;&gt; <ept id="p1">*</ept>1&gt; 每当处理所提供的源中的相关事件。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The source to begin listening on.</source>
          <target state="translated">要开始侦听的源。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">当在派生类中重写，停止在所提供的源上侦听被托管的事件。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The source to stop listening on.</source>
          <target state="translated">要停止侦听的源。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Establishes a write-lock on the underlying data table, and returns an&lt;xref:System.IDisposable&gt;.</source>
          <target state="translated">建立与基础数据表上的写入锁，并返回&lt;xref:System.IDisposable&gt;.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">在派生类中，对与基础数据表的所有修改应都发生在<ph id="ph1">`using (WriteLock) { ... }`</ph>子句。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the &lt;xref:System.Windows.WeakEventManager.Item%2A&gt; collection to store the extra information.</source>
          <target state="translated">这些修改可能有必要，如果你的类支持更复杂<ph id="ph1">`AddListener`</ph>实施，需要更多的数据超出<ph id="ph2">`source`</ph>和<ph id="ph3">`listener`</ph>，并使用&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;用于存储的额外信息集合。&lt;/xref:System.Windows.WeakEventManager.Item%2A&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> construct.</source>
          <target state="translated">用于建立数据表成员上的锁，然后相应地释放与对象<bpt id="p1">&lt;xref uid="langword_csharp_using" name="using" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>构造。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>