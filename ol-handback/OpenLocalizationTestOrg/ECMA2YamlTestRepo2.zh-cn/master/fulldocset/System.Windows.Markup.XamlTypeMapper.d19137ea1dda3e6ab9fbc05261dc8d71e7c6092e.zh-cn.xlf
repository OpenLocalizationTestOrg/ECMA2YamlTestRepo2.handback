<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1245680de30d058b656087aa3abd774676cc28ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Markup.XamlTypeMapper.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff8d2625fc7213493048ccee2b999f195af91124</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa32ef088b74b44fc3aed6338e08adabd7c22ca9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Maps a XAML element name to the appropriate CLR &lt;xref:System.Type&gt; in assemblies.</source>
          <target state="translated">将 XAML 元素名称映射到相应的 CLR&lt;xref:System.Type&gt;的程序集中。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XamlTypeMapper is part of an advanced WPF scenario that supplies alternate context for &lt;xref:System.Windows.Markup.XamlReader&gt; and &lt;xref:System.Windows.Markup.XamlWriter&gt;.</source>
          <target state="translated">XamlTypeMapper 是提供备用上下文&lt;xref:System.Windows.Markup.XamlReader&gt;和&lt;xref:System.Windows.Markup.XamlWriter&gt;。&lt;/xref:System.Windows.Markup.XamlWriter&gt;&lt;/xref:System.Windows.Markup.XamlReader&gt;高级 WPF 方案的一部分</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> WPF applications, you should consider overriding &lt;xref:System.Xaml.XamlSchemaContext&gt; for this scenario, rather than attempting to use XamlTypeMapper.</source>
          <target state="translated">有关<ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>WPF 应用程序，你应考虑重写&lt;xref:System.Xaml.XamlSchemaContext&gt;此方案中，而不尝试使用 XamlTypeMapper。&lt;/xref:System.Xaml.XamlSchemaContext&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XamlTypeMapper can be used to provide the XAML parser with custom mapping information through a more direct technique than the application of &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt; values on the assembly code.</source>
          <target state="translated">XamlTypeMapper 可以用于通过比的应用程序的更直接技术的自定义映射信息与提供 XAML 分析器&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;上的程序集代码的值。&lt;/xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This might be useful for consolidation of all CLR namespaces in an assembly, or for referencing types that are XAML-ready in an existing assembly without having to recompile it just to add &lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt; attributing.</source>
          <target state="translated">这可能很有用︰ 合并的程序集中的所有 CLR 命名空间; 二是引用类型包含 XAML 准备就绪，可以在现有程序集而无需重新编译它只是为了增加&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;归。&lt;/xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You typically create a XamlTypeMapper instance in order to specify the &lt;xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt; property value for a &lt;xref:System.Windows.Markup.ParserContext&gt;.</source>
          <target state="translated">你通常创建 XamlTypeMapper 实例，以便指定&lt;xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt;一种&lt;xref:System.Windows.Markup.ParserContext&gt;。&lt;/xref:System.Windows.Markup.ParserContext&gt;的属性值&lt;/xref:System.Windows.Markup.ParserContext.XamlTypeMapper%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.Markup.ParserContext&gt; in turn can be used as the context for a &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt;call.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.ParserContext&gt;反过来可用作的上下文&lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt;调用。&lt;/xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29?displayProperty=fullName&gt; &lt;/xref:System.Windows.Markup.ParserContext&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Default Mapper    You can obtain a default mapper using the &lt;xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt; static property.</source>
          <target state="translated">默认映射器你可以获取默认映射程序使用&lt;xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt;静态属性。&lt;/xref:System.Windows.Markup.XamlTypeMapper.DefaultMapper%2A&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The default mapper only works on a default assembly list.</source>
          <target state="translated">默认映射器仅适用于默认程序集列表。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>No specific information about assemblies (as is specified in XamlTypeMapper constructors) is used.</source>
          <target state="translated">使用有关程序集 （如在 XamlTypeMapper 构造函数中指定） 没有特定信息。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 文本用法</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class by specifying an array of assembly names that the <bpt id="p2">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>通过指定一个程序集的字符串数组的类名<bpt id="p2">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>应使用。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The array of assembly names the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">程序集名称的数组<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>应使用。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, using the specified array of assembly names and the specified namespace maps.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类，使用指定的程序集名称数组，并将指定的命名空间映射。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The array of assembly names the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">程序集名称的数组<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>应使用。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The array of namespace maps the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should use.</source>
          <target state="translated">命名空间映射数组<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>应使用。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyNames&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Defines a mapping between an XML namespace and CLR namespaces in assemblies, and adds these to the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information.</source>
          <target state="translated">在程序集中，定义 XML 命名空间和 CLR 命名空间之间的映射，并将它们添加到<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>信息。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>AddMappingProcessingInstruction is a programmatic way to add a mapping.</source>
          <target state="translated">AddMappingProcessingInstruction 是以编程方式添加映射。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the different parts of the following XAML mapping instruction correspond to the parameters of the AddMappingProcessingInstruction:      <ph id="ph1">```   &lt;Window xmlns:SDK="clr-namespace:Samples;assembly=SDKSamples"&gt;   ...   ```</ph>       The <ph id="ph2">`xmlNamespace`</ph> is <ph id="ph3">`SDK`</ph>, the <ph id="ph4">`clrNamespace`</ph> is <ph id="ph5">`Samples`</ph>, and the <ph id="ph6">`assemblyName`</ph> is <ph id="ph7">`SDKSamples`</ph>.</source>
          <target state="translated">例如，下面的 XAML 映射指令的不同部分对应于 AddMappingProcessingInstruction 的参数︰ <ph id="ph1">```   &lt;Window xmlns:SDK="clr-namespace:Samples;assembly=SDKSamples"&gt;   ...   ```</ph> <ph id="ph2">`xmlNamespace`</ph>是<ph id="ph3">`SDK`</ph>、<ph id="ph4">`clrNamespace`</ph>是<ph id="ph5">`Samples`</ph>，和<ph id="ph6">`assemblyName`</ph>是<ph id="ph7">`SDKSamples`</ph>。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The prefix for the XML namespace..</source>
          <target state="translated">XML 命名空间的前缀...</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The CLR  namespace that contains the types to map.</source>
          <target state="translated">包含要映射的类型的 CLR 命名空间。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The assembly that contains the CLR  namespace.</source>
          <target state="translated">包含的 CLR 命名空间的程序集。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;clrNamespace&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>       -or-       <ph id="ph3">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;clrNamespace&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>       -or-       <ph id="ph3">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Requests permission for a <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> derived type that is called under full trust to access a specific internal type.</source>
          <target state="translated">请求权限<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>派生在完全信任以访问特定的内部类型下调用的类型。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If not overridden by a subclass, AllowInternalType always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果没有重写子类，始终返回 AllowInternalType <ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When overridden by a subclass, the behavior should be that AllowInternalType should return <ph id="ph1">`true`</ph> if the internal type can be accessed; otherwise, <ph id="ph2">`false`</ph>.</source>
          <target state="translated">行为由子类中重写时, 应不应返回 AllowInternalType<ph id="ph1">`true`</ph>如果内部类型可以访问; 否则为<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The type to access.</source>
          <target state="translated">要访问的类型。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the internal type can be accessed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果可以访问的内部类型;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets an instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use if one has not been specified.</source>
          <target state="translated">获取实例<bpt id="p1">&lt;xref href="System.Windows.Markup.XamlTypeMapper"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用如果尚未指定。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The default mapper only works on a default assembly list.</source>
          <target state="translated">默认映射器仅适用于默认程序集列表。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>No specific information about assemblies (as is specified in &lt;xref:System.Windows.Markup.XamlTypeMapper&gt; constructors) is used.</source>
          <target state="translated">有关程序集没有特定信息 (如中指定&lt;xref:System.Windows.Markup.XamlTypeMapper&gt;构造函数) 使用。&lt;/xref:System.Windows.Markup.XamlTypeMapper&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the current implementation the default assembly list is: <ph id="ph1">`WindowsBase`</ph>, <ph id="ph2">`PresentationCore`</ph>, <ph id="ph3">`PresentationFramework`</ph>.</source>
          <target state="translated">在当前实现中的默认程序集列表是︰ <ph id="ph1">`WindowsBase`</ph>， <ph id="ph2">`PresentationCore`</ph>， <ph id="ph3">`PresentationFramework`</ph>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Using the default mapper does not mean that you cannot use custom assemblies/types in XAML at all.</source>
          <target state="translated">使用默认映射器并不意味着，你根本无法使用自定义的程序集类型在 XAML 中使用。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It only means that if you do use custom types/assemblies, you must then use the conventional XAML technique of creating the mappings as <ph id="ph1">`xmlns`</ph> attributes in each XAML page where the types/assemblies are referenced, as opposed to a type mapper API.</source>
          <target state="translated">它仅意味着如果你使用自定义类型/程序集，你必须再使用作为映射创建传统的 XAML 技术<ph id="ph1">`xmlns`</ph>每个 XAML 页面，其中引用类型/程序集，而不是类型映射器 API 中的属性。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>XAML 命名空间和 Namespace 映射为 WPF XAML<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default type mapper.</source>
          <target state="translated">默认类型映射器。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets the CLR &lt;xref:System.Type&gt; that a given XAML element is mapped to, using the specified XML namespace prefix and element name.</source>
          <target state="translated">获取 CLR&lt;xref:System.Type&gt;给定的 XAML 元素映射到，使用指定的 XML 命名空间前缀和元素名称。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a type cannot be found that maps to the provided information, <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">如果无法找到一种类型，映射到提供的信息，<ph id="ph1">`null`</ph>返回。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Do not include the prefix as part of <ph id="ph1">`localName`</ph>.</source>
          <target state="translated">不作为的一部分包括前缀<ph id="ph1">`localName`</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For any prefixed XAML element information, separate it into <ph id="ph1">`xmlNamespace`</ph> and <ph id="ph2">`localName`</ph> components for this API call.</source>
          <target state="translated">对于任何前缀 XAML 元素的信息，将其分隔成<ph id="ph1">`xmlNamespace`</ph>和<ph id="ph2">`localName`</ph>此 API 调用的组件。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The specified XML namespace prefix.</source>
          <target state="translated">指定的 XML 命名空间前缀。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The "local" name of the XAML element to obtain the mapped &lt;xref:System.Type&gt; for.</source>
          <target state="translated">若要获取映射的&lt;xref:System.Type&gt;为&lt;/xref:System.Type&gt;XAML 元素的"本地"名称</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Local in this context means as mapped versus the provided <ph id="ph1">`xmlNamespace`</ph>.</source>
          <target state="translated">在此上下文中的本地意味着映射而非提供<ph id="ph1">`xmlNamespace`</ph>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; for the object, or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no mapping could be resolved.</source>
          <target state="translated">&lt;xref:System.Type&gt;对象，或<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果没有映射无法解析。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;localName&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xmlNamespace&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;localName&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Specifies the path to use when loading an assembly.</source>
          <target state="translated">指定要使用时加载的程序集的路径。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The short name of the assembly without an extension or path specified (equivalent to <ph id="ph1">&amp;lt;</ph>xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>).</source>
          <target state="translated">没有使用扩展或指定路径的程序集的短名称 (等效于<ph id="ph1">&amp;lt;</ph>xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The file path of the assembly.</source>
          <target state="translated">程序集的文件路径。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The assembly path must be a full file path containing a file extension.</source>
          <target state="translated">程序集路径必须是包含文件扩展名的文件的完整文件路径。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <ph id="ph2">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph> is <ph id="ph2">&lt;xref:System.String&gt;</ph>       -or-       <ph id="ph3">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is <ph id="ph4">&lt;xref:System.String&gt;</ph>       -or-       <ph id="ph5">&lt;code&gt;assemblyPath&lt;/code&gt;</ph> is not a full file path containing a file extension.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;assemblyName&lt;/code&gt;</ph>是<ph id="ph2">&lt;xref:System.String&gt;</ph>-<ph id="ph3">&lt;code&gt;assemblyPath&lt;/code&gt;</ph>是<ph id="ph4">&lt;xref:System.String&gt;</ph>-或-<ph id="ph5">&lt;code&gt;assemblyPath&lt;/code&gt;</ph>不是包含文件扩展名的文件的完整文件路径。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>