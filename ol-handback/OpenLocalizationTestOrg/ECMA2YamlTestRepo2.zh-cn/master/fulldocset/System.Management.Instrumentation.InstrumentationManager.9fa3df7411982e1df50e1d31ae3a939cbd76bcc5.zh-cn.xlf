<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">374eb1b43b33ea113bf7babe1da894a751bf1790</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Management.Instrumentation.InstrumentationManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc0836d753334b76864c2b17b9a3e338784c728e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f26e0b3e4d6fd2b6ba5058255556ca645075297b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides methods that manage the lifetime and the model used for decoupled providers.</source>
          <target state="translated">提供管理的生存期和用于分离的提供程序的模型的方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</source>
          <target state="translated">注意︰ WMI.NET 库都被视为在最终状态，不进一步开发、 增强功能，或更新将可供影响这些库的非安全相关问题。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>MI APIs<ept id="p1">](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx)</ept> should be used for all new development.</source>
          <target state="translated"><bpt id="p1">[</bpt>MI Api<ept id="p1">](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx)</ept>应将用于所有新的开发。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Decoupled providers are hosted by an application.</source>
          <target state="translated">分离的提供程序托管的应用程序。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</source>
          <target state="translated">两种方法可以由应用程序提供的 WMI 类的实例︰ 发布/撤消或回调方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The callback method uses the &lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt; and &lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt; methods.</source>
          <target state="translated">回调方法使用&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;和&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;方法。&lt;/xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt; &lt;/xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</source>
          <target state="translated">在发布/撤消模型中，WMI 基础结构为很多您需要在回调方法中自行编写方法提供默认行为。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These include the enumeration and bind methods.</source>
          <target state="translated">其中包括在枚举和绑定方法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this model, the application creates instances and publishes them.</source>
          <target state="translated">在此模型中，应用程序创建实例，并将其发布。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The application is responsible for ensuring that the key properties of the classes are respected.</source>
          <target state="translated">应用程序负责确保遵循类键属性。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The application is also responsible for deleting instances.</source>
          <target state="translated">此外，应用程序负责删除实例。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</source>
          <target state="translated">在回调模型中，WMI 基础结构需要应用程序具有处理枚举、 绑定和实现的提供程序的功能所需的任何其他方法的方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</source>
          <target state="translated">调入此功能的应用程序，并且如果它不存在或未正确实施将失败。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The application registers the type of its WMI classes with the infrastructure by calling &lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt; and indicates that it no longer wants the WMI classes exposed by calling &lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;.</source>
          <target state="translated">应用程序中注册其 WMI 类的类型与基础结构，通过调用&lt;xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;，并指示它不再需要通过调用&lt;xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;.&lt;/xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A&gt;公开的 WMI 类&lt;/xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Makes an instance of a provider available within the WMI infrastructure.</source>
          <target state="translated">设置提供程序实例的 WMI 基础结构中可用。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An instance of the class that implements the provider to publish.</source>
          <target state="translated">实现要发布的提供程序的类的实例。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Registers an assembly with the WMI infrastructure.</source>
          <target state="translated">WMI 基础结构中注册程序集。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The assembly to register.</source>
          <target state="translated">要注册的程序集。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Registers a class with the WMI infrastructure.</source>
          <target state="translated">WMI 基础结构中注册一个类。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type of the class.</source>
          <target state="translated">类的类型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</source>
          <target state="translated">获取当前可用的提供程序的实例并将其与 WMI 基础结构内不可用。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An instance of the class that implements the provider to revoke.</source>
          <target state="translated">实现要撤消的提供程序的类的实例。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Unregisters an assembly currently registered with the WMI infrastructure.</source>
          <target state="translated">注销当前注册有 WMI 架构的程序集。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The registered assembly to unregister.</source>
          <target state="translated">要注销的已注册程序集。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Unregisters a class registered with the WMI infrastructure.</source>
          <target state="translated">注销 WMI 基础结构中注册的类。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The registered type to unregister.</source>
          <target state="translated">要注销的已注册的类型。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>