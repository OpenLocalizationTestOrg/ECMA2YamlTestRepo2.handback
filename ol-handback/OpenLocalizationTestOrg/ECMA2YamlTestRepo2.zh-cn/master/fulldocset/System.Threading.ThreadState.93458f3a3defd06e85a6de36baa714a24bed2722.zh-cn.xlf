<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">743b00cae26b2222671c6733ec6673f60a6aa7b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.ThreadState.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10f2e2991f5027d1a3f75652074c942e1152b47a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b58d0f8f571e866a50256a8fec82b65b3451b6b2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies the execution states of a <bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">指定的执行状态<bpt id="p1">&lt;xref href="System.Threading.Thread"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The ThreadState enumeration is of interest only in a few debugging scenarios.</source>
          <target state="translated">线程枚举属于仅涉及几个调试方案。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Your code should never use the thread state to synchronize the activities of threads.</source>
          <target state="translated">永远不应在代码中使用线程状态来同步线程活动。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ThreadState defines a set of all possible execution states for threads.</source>
          <target state="translated">线程定义一组所有可能的执行状态的线程。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Once a thread is created, it is in at least one of the states until it terminates.</source>
          <target state="translated">线程创建后，它是状态中的至少一个直到其终止时为止。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Threads created within the common language runtime are initially in the <ph id="ph1">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id="ph2">`Running`</ph> state.</source>
          <target state="translated">在公共语言运行时内创建的线程都最初处于<ph id="ph1">`Unstarted`</ph>状态，而进入运行时的外部线程中已存在的<ph id="ph2">`Running`</ph>状态。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Unstarted`</ph> thread is transitioned into the <ph id="ph2">`Running`</ph> state by calling &lt;xref:System.Threading.Thread.Start%2A&gt;.</source>
          <target state="translated"><ph id="ph1">`Unstarted`</ph>线程转换到<ph id="ph2">`Running`</ph>通过调用&lt;xref:System.Threading.Thread.Start%2A&gt;.&lt;/xref:System.Threading.Thread.Start%2A&gt;状态</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Not all combinations of <ph id="ph1">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id="ph2">`Aborted`</ph> and <ph id="ph3">`Unstarted`</ph> states.</source>
          <target state="translated">并非所有组合<ph id="ph1">`ThreadState`</ph>值是有效的; 例如，线程不能在同时<ph id="ph2">`Aborted`</ph>和<ph id="ph3">`Unstarted`</ph>状态。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  There are two thread state enumerations,ThreadState and &lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 有两个线程状态枚举，线程和&lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;.&lt;/xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following table shows the actions that cause a change of state.</source>
          <target state="translated">下表显示导致状态更改的操作。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>|Action|ThreadState|   |------------|-----------------|   |A thread is created within the common language runtime.|Unstarted|   |Another thread calls the &lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt; method on the new thread, and the call returns.</source>
          <target state="translated">|操作 |线程 |  |------------|-----------------|  |在公共语言运行时内创建线程。 |尚未启动 |  |另一个线程调用&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;上新线程，并且调用的方法返回。&lt;/xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Thread.Start%2A&gt; method does not return until the new thread has started running.</source>
          <target state="translated">&lt;xref:System.Threading.Thread.Start%2A&gt;方法不返回直到新线程已开始运行。&lt;/xref:System.Threading.Thread.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There is no way to know at what point the new thread will start running, during the call to &lt;xref:System.Threading.Thread.Start%2A&gt;.|Running|   |The thread calls &lt;xref:System.Threading.Thread.Sleep%2A&gt;|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Monitor.Wait%2A&gt; on another object.|WaitSleepJoin|   |The thread calls &lt;xref:System.Threading.Thread.Join%2A&gt; on another thread.|WaitSleepJoin|   |Another thread calls &lt;xref:System.Threading.Thread.Interrupt%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Suspend%2A&gt;|SuspendRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Suspend%2A&gt; request.|Suspended|   |Another thread calls &lt;xref:System.Threading.Thread.Resume%2A&gt;|Running|   |Another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt;|AbortRequested|   |The thread responds to a &lt;xref:System.Threading.Thread.Abort%2A&gt; request.|Stopped|   |A thread is terminated.|Stopped|       In addition to the states noted above, there is also the <ph id="ph1">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.</source>
          <target state="translated">没有无法知道在哪个点新线程将开始运行，到&lt;xref:System.Threading.Thread.Start%2A&gt;在呼叫期间。 |运行 |  |线程调用&lt;xref:System.Threading.Thread.Sleep%2A&gt;|WaitSleepJoin |  |另一个对象的线程调用&lt;xref:System.Threading.Monitor.Wait%2A&gt;。 |WaitSleepJoin |  |另一个线程的线程调用&lt;xref:System.Threading.Thread.Join%2A&gt;。 |WaitSleepJoin |  |另一个线程调用&lt;xref:System.Threading.Thread.Interrupt%2A&gt;|运行 |  |另一个线程调用&lt;xref:System.Threading.Thread.Suspend%2A&gt;|SuspendRequested |  |线程响应&lt;xref:System.Threading.Thread.Suspend%2A&gt;请求。 |挂起 |  |另一个线程调用&lt;xref:System.Threading.Thread.Resume%2A&gt;|运行 |  |另一个线程调用&lt;xref:System.Threading.Thread.Abort%2A&gt;|AbortRequested |  |线程响应&lt;xref:System.Threading.Thread.Abort%2A&gt;请求。 |停止 |  |终止线程。 |停止 |      除了上文中记下的状态，此外还有<ph id="ph1">`Background`</ph>状态，这指示线程是否正在运行中的背景或前景。&lt;/xref:System.Threading.Thread.Abort%2A&gt; &lt;/xref:System.Threading.Thread.Abort%2A&gt; &lt;/xref:System.Threading.Thread.Resume%2A&gt; &lt;/xref:System.Threading.Thread.Suspend%2A&gt; &lt;/xref:System.Threading.Thread.Suspend%2A&gt; &lt;/xref:System.Threading.Thread.Interrupt%2A&gt; &lt;/xref:System.Threading.Thread.Join%2A&gt; &lt;/xref:System.Threading.Monitor.Wait%2A&gt; &lt;/xref:System.Threading.Thread.Sleep%2A&gt; &lt;/xref:System.Threading.Thread.Start%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A thread can be in more than one state at a given time.</source>
          <target state="translated">在多个状态可以是一个线程，而且在给定时间。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if a thread is blocked on a call to &lt;xref:System.Threading.Monitor.Wait%2A&gt;, and another thread calls &lt;xref:System.Threading.Thread.Abort%2A&gt; on the blocked thread, the blocked thread will be in both the <ph id="ph1">`WaitSleepJoin`</ph> and the <ph id="ph2">`AbortRequested`</ph> states at the same time.</source>
          <target state="translated">例如，如果一个线程被阻止在调用&lt;xref:System.Threading.Monitor.Wait%2A&gt;，和另一个线程调用&lt;xref:System.Threading.Thread.Abort%2A&gt;被阻止的线程上被阻塞的线程将同时处于<ph id="ph1">`WaitSleepJoin`</ph>和<ph id="ph2">`AbortRequested`</ph>在同一时间的状态。&lt;/xref:System.Threading.Thread.Abort%2A&gt; &lt;/xref:System.Threading.Monitor.Wait%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case, as soon as the thread returns from the call to &lt;xref:System.Threading.Monitor.Wait%2A&gt; or is interrupted, it will receive the &lt;xref:System.Threading.ThreadAbortException&gt; to begin aborting.</source>
          <target state="translated">在此情况下，线程从调用返回时，就会立即&lt;xref:System.Threading.Monitor.Wait%2A&gt;或中断，它将接收&lt;xref:System.Threading.ThreadAbortException&gt;开始中止。&lt;/xref:System.Threading.ThreadAbortException&gt; &lt;/xref:System.Threading.Monitor.Wait%2A&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt; property of a thread provides the current state of a thread.</source>
          <target state="translated">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;线程的属性提供一个线程的当前状态。&lt;/xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Applications must use a bitmask to determine whether a thread is running.</source>
          <target state="translated">应用程序必须使用一个位掩码确定线程是否正在运行。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Since the value for <ph id="ph1">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.</source>
          <target state="translated">由于值<ph id="ph1">`Running`</ph>零 (0)，测试是否通过使用 C# 代码，如运行线程<ph id="ph2">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph>或 Visual Basic 代码，如<ph id="ph3">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped.</source>
          <target state="translated">线程状态包括 AbortRequested 和线程现在出现故障，但其状态不尚未更改为已停止。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Abort%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that will attempt to terminate it.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Threading.Thread.Abort%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>的线程上调用方法，但该线程尚未收到挂起<bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，将尝试终止它。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The thread is being executed as a background thread, as opposed to a foreground thread.</source>
          <target state="translated">将作为后台线程，而不是前台线程正在执行线程。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This state is controlled by setting the <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> property.</source>
          <target state="translated">通过设置控制此状态<ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The thread has been started, it is not blocked, and there is no pending <bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">线程已启动，它不会被阻止，并且没有未挂起的<bpt id="p1">&lt;xref href="System.Threading.ThreadAbortException"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The thread has stopped.</source>
          <target state="translated">线程已停止。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The thread is being requested to stop.</source>
          <target state="translated">正在请求线程停止。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This is for internal use only.</source>
          <target state="translated">这是仅供内部使用。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The thread has been suspended.</source>
          <target state="translated">线程已挂起。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The thread is being requested to suspend.</source>
          <target state="translated">线程正在请求挂起。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Start%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> method has not been invoked on the thread.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Threading.Thread.Start%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>不在线程上调用方法。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The thread is blocked.</source>
          <target state="translated">线程将受阻。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This could be the result of calling <ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> or <ph id="ph3">&amp;lt;</ph>xref:System.Threading.Thread.Join%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>, of requesting a lock — for example, by calling <ph id="ph5">&amp;lt;</ph>xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName<ph id="ph6">&amp;gt;</ph> or <ph id="ph7">&amp;lt;</ph>xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName<ph id="ph8">&amp;gt;</ph> — or of waiting on a thread synchronization object such as &lt;xref:System.Threading.ManualResetEvent&gt;.</source>
          <target state="translated">这可能是调用<ph id="ph1">&amp;lt;</ph>xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>或<ph id="ph3">&amp;lt;</ph>xref:System.Threading.Thread.Join%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>，请求锁的 — 例如，通过调用<ph id="ph5">&amp;lt;</ph>xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName<ph id="ph6">&amp;gt;</ph>或<ph id="ph7">&amp;lt;</ph>xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName<ph id="ph8">&amp;gt;</ph> — 或处于等待状态的上一个线程同步对象，如&lt;xref:System.Threading.ManualResetEvent&gt;.&lt;/xref:System.Threading.ManualResetEvent&gt;</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>