<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">feaf2e9bc010ccda11a135d0aa3e621b5a7c5cdf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.XamlType.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4615dde9254fa44aeb6924c9eeffb89e6d0881d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12c1164f8af654693804ae92fafcabbf97d05a43</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</source>
          <target state="translated">报告有关 XAML 类型作为整体的 XAML 系统在.NET Framework XAML 服务中实现的一部分的信息。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Many APIs in the XamlType class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</source>
          <target state="translated">XamlType 类中的许多 Api 提供有关 XAML 类型，它们报告的概念是类似于特定的 XAML 规范 [MS-XAML] 节的信息。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XamlType is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</source>
          <target state="translated">XamlType 是广泛使用.NET Framework XAML 服务 API 中有关 XAML 类型的报表信息。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XamlType reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</source>
          <target state="translated">XamlType 报告可能需要了解的有关 XAML 类型才能使用实例或从 XAML 节点流中或类似的 XAML 表示形式访问其成员的信息。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Its reporting is similar to how the &lt;xref:System.Type&gt; in the CLR type system, together with reflection classes such as &lt;xref:System.Reflection.MemberInfo&gt;, provide information about a CLR type and its usage.</source>
          <target state="translated">其 reporting 是类似于如何&lt;xref:System.Type&gt;CLR 类型系统中，以及反射类如&lt;xref:System.Reflection.MemberInfo&gt;，提供有关 CLR 类型和其用法的信息。&lt;/xref:System.Reflection.MemberInfo&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To extend the XAML type system, you can derive from XamlType.</source>
          <target state="translated">若要扩展的 XAML 类型系统，可以从 XamlType 派生。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To do so effectively, you might also need to implement a &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.</source>
          <target state="translated">若要有效执行此操作，你可能还需要实现一种&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;。&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</source>
          <target state="translated">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;启用通用的 XAML 类型系统，若要使用的类型系统支持你指定的调用行为的一部分。&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The specific custom &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; provides a way to reduce the dependencies on the CLR type system, which are used by the default XamlType behavior.</source>
          <target state="translated">特定的自定义&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;提供一种方法，以减少在 CLR 类型系统中，所使用的默认 XamlType 行为的依赖关系。&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on the underlying CLR type information.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类基于基础的 CLR 类型信息。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The underlying CLR &lt;xref:System.Type&gt; for the XAML type to construct.</source>
          <target state="translated">基础的 CLR &lt;xref:System.Type&gt;XAML 类型构造。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on a string name for the type.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类基于类型的字符串名称。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is a protected constructor.</source>
          <target state="translated">这是受保护的构造函数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>No current public derived classes exist that use this particular path for construction.</source>
          <target state="translated">没有当前的公共派生的类存在用于构造此特定的路径。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a consumer of the existing &lt;xref:System.Xaml.XamlType&gt;, you must use the other constructor signatures (&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;, &lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;, or &lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;) to initialize a &lt;xref:System.Xaml.XamlType&gt; object.</source>
          <target state="translated">为现有的使用者&lt;xref:System.Xaml.XamlType&gt;，必须使用其他构造函数签名 (&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;， &lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;，或&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;) 初始化&lt;xref:System.Xaml.XamlType&gt;对象。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the type to create.</source>
          <target state="translated">要创建的类型名称。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type arguments for a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents a generic type.</source>
          <target state="translated">类型参数<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示泛型类型。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Can be (and often is) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">可以 （并且通常为） <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，指示所表示的类型不是泛型类型。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers and XAML writers.</source>
          <target state="translated">XAML 读取器和 XAML 编写器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">typeName</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on underlying type information and a <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类根据基础类型信息和<bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>实现。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The underlying type for the XAML type to construct.</source>
          <target state="translated">要构造的 XAML 类型基础类型。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>XAML schema context for the XAML reader.</source>
          <target state="translated">XAML 读取器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that handles run-time reflection calls against the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>处理运行时反射的实现调用针对<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">underlyingType</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">schemaContext</ph><ept id="p2">&lt;/code&gt;</ept> are <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class based on the XAML namespace and a string name for the type.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类基于 XAML 命名空间和类型的字符串名称。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</source>
          <target state="translated">此构造函数的又是专门供分析和已知支持的类型系统和 XAML 架构上下文中没有支持的类型用法的 XAML 节点录制。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</source>
          <target state="translated">使用此构造函数仅针对"未知"的类型映射到基础类型系统的 XAML 类型是不可用。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This constructor might not produce a result where &lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt; is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">此构造函数可能会产生结果其中&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt;是<ph id="ph1">`true`</ph>。&lt;/xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Instead, the default reflector logic reports the underlying type as &lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">相反，默认反射器逻辑所报告的&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName&gt;基础类型</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, this behavior can change because of the &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; override.</source>
          <target state="translated">但是，此行为可以更改由于&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;重写。&lt;/xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The XAML namespace for the type, as a string.</source>
          <target state="translated">字符串形式的类型的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The name of the type in the provided <ph id="ph1">`unknownTypeNamespace`</ph> XAML namespace.</source>
          <target state="translated">在提供的类型的名称<ph id="ph1">`unknownTypeNamespace`</ph>XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The type arguments for a <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents a generic type.</source>
          <target state="translated">类型参数<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示泛型类型。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Can be (and often is) <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">可以 （并且通常为） <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，指示所表示的类型不是泛型类型。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">unknownTypeNamespace</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">unknownTypeName</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">schemaContext</ph><ept id="p3">&lt;/code&gt;</ept> are <bpt id="p4">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated">One or more of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">unknownTypeNamespace</ph><ept id="p1">&lt;/code&gt;</ept>, <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">unknownTypeName</ph><ept id="p2">&lt;/code&gt;</ept>, or <bpt id="p3">&lt;code&gt;</bpt><ph id="ph3">schemaContext</ph><ept id="p3">&lt;/code&gt;</ept> are <bpt id="p4">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets a read-only collection of the types that are usable as the &lt;xref:System.Xaml.XamlType.ContentProperty*&gt; value for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取的类型都能够用作只读集合&lt;xref:System.Xaml.XamlType.ContentProperty*&gt;值为<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Xaml.XamlType.ContentProperty*&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of AllowedContentTypes.</source>
          <target state="translated">可分配的类型 （例如，分配给是允许的内容类型的基类型） 特定的内容类型不考虑多个类型 AllowedContentTypes 目的。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A read-only collection of possible content types.</source>
          <target state="translated">可能的内容类型的只读集合。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated">获取<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对于此 XAML 类型的即时基类型。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Determination of this value is based on the underlying type of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and schema context.</source>
          <target state="translated">此值决定基于的基础类型<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和架构上下文。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>By default, BaseType returns an internal constant that represents an &lt;xref:System.Object&gt; if &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">默认情况下，BaseType 返回内部常数，用于表示&lt;xref:System.Object&gt;如果&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;是<ph id="ph1">`null`</ph>。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt;&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;是虚拟的并且因此，可以重写。&lt;/xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改有关 XAML 类型的报告的类型信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统信息一致。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对于此 XAML 类型的即时基类型。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether an instance of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has the specified <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> in its list of assignable types.</source>
          <target state="translated">返回一个值，该值指示此实例是否<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>具有指定<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>在其列表中可赋值的类型。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</source>
          <target state="translated">尽管可分配的类型不具有的引用类型的所有功能，你可以对分配来使用它。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, you can use assignment to make type matches for the values of a property.</source>
          <target state="translated">例如，可以使用分配以使属性的值的类型匹配。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</source>
          <target state="translated">在 XAML 中的分配类型的概念是 CLR 类型系统中的向上转换的概念类似。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, under a CLR type system, every type has an &lt;xref:System.Object&gt; in its assignable type list.</source>
          <target state="translated">例如下的 CLR 类型系统，每个类型具有&lt;xref:System.Object&gt;其可分配的类型列表中。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If one of the two &lt;xref:System.Xaml.XamlType&gt; instances that are used for comparison has &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt; equal to <ph id="ph1">`true`</ph>, this method has a special Unknown mode that returns <ph id="ph2">`true`</ph> if the two &lt;xref:System.Xaml.XamlType&gt; instances are equivalent.</source>
          <target state="translated">如果两种状态之一&lt;xref:System.Xaml.XamlType&gt;使用实例比较具有&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;等于<ph id="ph1">`true`</ph>，此方法已返回特殊未知的模式<ph id="ph2">`true`</ph>如果两个&lt;xref:System.Xaml.XamlType&gt;实例是否相等。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The default implementation uses the CLR &lt;xref:System.Type&gt; from &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; for this &lt;xref:System.Xaml.XamlType&gt; and the input &lt;xref:System.Xaml.XamlType&gt;, and calls &lt;xref:System.Type.IsAssignableFrom%2A&gt;.</source>
          <target state="translated">默认实现使用 CLR&lt;xref:System.Type&gt;从&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;此&lt;xref:System.Xaml.XamlType&gt;和输入&lt;xref:System.Xaml.XamlType&gt;，并调用&lt;xref:System.Type.IsAssignableFrom%2A&gt;.&lt;/xref:System.Type.IsAssignableFrom%2A&gt; &lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Override this method if you want a different determination of assignable types.</source>
          <target state="translated">如果你想分配类型的一种方式确定，重写此方法。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Passing a null <ph id="ph1">`xamlType`</ph> does not throw an exception and always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">传递 null<ph id="ph1">`xamlType`</ph>不会引发异常，并始终返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  CanAssignTo is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; CanAssignTo 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改的 XAML 类型可分配性，以便它不再按预期的方式其基础的 CLR 类型的类型转换行为一致。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type to check against the current <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> .</source>
          <target state="translated">要检查针对当前的类型<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType</ph><ept id="p2">&lt;/code&gt;</ept> is in the assignable types list; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType</ph> <ept id="p2">&lt;/code&gt;</ept>处于可分配的类型列表中; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> must have arguments (generic constraints through <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>必须具有参数 (通过泛型约束<bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，初始化文本或其他 XAML 技术) 以构造类型的有效实例。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if construction of an instance requires some argument value; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果构造实例需要某些参数值，则为否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>的内容的属性的信息<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt; to the type definition.</source>
          <target state="translated">当使用绑定或支持的 CLR 类型系统，可以通过应用指定的类型的 XAML 内容属性&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;到类型定义。&lt;/xref:System.Windows.Markup.ContentPropertyAttribute&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[content property]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[content property]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此内容的属性的信息<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no content property exists.</source>
          <target state="translated">可能是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果不存在任何内容的属性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <bpt id="p1">&lt;xref uid="langword_csharp_Collection&amp;lt;T&amp;gt;" name="Collection&amp;lt;T&amp;gt;" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取用于包装不严格的类型匹配项，如在强类型化的字符串时其内容的内容属性的类型<bpt id="p1">&lt;xref uid="langword_csharp_Collection&amp;lt;T&amp;gt;" name="Collection&amp;lt;T&amp;gt;" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If there are no wrappers to account for type match loosening, this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果不没有为类型匹配放宽考虑任何包装，此属性是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Types that evaluate as &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; for a specific content type are not considered multiple types for purposes of ContentWrappers.</source>
          <target state="translated">在计算中值的类型&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;对于特定的内容类型，可以不考虑多个类型目的 ContentWrappers。&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the CLR binding for &lt;xref:System.Xaml&gt; and &lt;xref:System.Xaml.XamlType&gt;, the XAML content wrapper type can be specified on a type as a &lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml&gt;并且&lt;xref:System.Xaml.XamlType&gt;，则可以作为一种&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;。&lt;/xref:System.Windows.Markup.ContentWrapperAttribute&gt;类型上指定的 XAML 内容包装类型&lt;/xref:System.Xaml.XamlType&gt;&lt;/xref:System.Xaml&gt;的 CLR 绑定中</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A read-only collection of possible content wrapper types; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">可能的内容包装类型; 的只读集合否则为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">请参阅备注。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that represents the deferred loading conversion behavior for this type.</source>
          <target state="translated">获取<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>表示延迟加载此类型转换行为。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>XAML template behavior in WPF is an example of deferred loading behavior.</source>
          <target state="translated">在 WPF 中的 XAML 模板行为是延迟的加载行为的一个示例。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents the deferred loading behavior for this type.</source>
          <target state="translated"><ph id="ph1">&amp;lt;</ph>Xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>与<bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示此类型的延迟的加载行为的约束。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">指示当前对象是否等于另一个对象。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to compare with this object.</source>
          <target state="translated">要与此对象进行比较的对象。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果当前对象是否等于<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">obj</ph> <ept id="p2">&lt;/code&gt;</ept>参数; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">指示当前对象是否等于同一类型的另一个对象。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An object to compare with this object.</source>
          <target state="translated">要与此对象进行比较的对象。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the current object is equal to the <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">other</ph><ept id="p2">&lt;/code&gt;</ept> parameter; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果当前对象是否等于<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">other</ph> <ept id="p2">&lt;/code&gt;</ept>参数; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns the XAML member that is aliased to a XAML directive by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回所化名为此 XAML 指令 XAML 成员<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，调用此方法可以调用&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">为其查找别名成员指令。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The aliased member, if found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">使用别名成员中，如果找到了;否则为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns a collection that contains all the attachable properties that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回包含此公开的所有可附加属性的集合<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Each &lt;xref:System.Xaml.XamlMember&gt; in the returned collection should contain values that support the concept that the &lt;xref:System.Xaml.XamlMember&gt; is an attachable member.</source>
          <target state="translated">每个&lt;xref:System.Xaml.XamlMember&gt;返回的集合中应包含的值的支持概念，&lt;xref:System.Xaml.XamlMember&gt;是可附加成员。&lt;/xref:System.Xaml.XamlMember&gt; &lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, members should return <ph id="ph1">`true`</ph> for &lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;, a type for &lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;, and so on.</source>
          <target state="translated">例如，成员应返回<ph id="ph1">`true`</ph>为&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;，类型&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;，依次类推。&lt;/xref:System.Xaml.XamlMember.TargetType%2A&gt; &lt;/xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，调用此方法可以调用&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A collection that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">一个集合，包含零个或多<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns a collection that contains all the members that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回包含此公开的所有成员的集合<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">调用此方法可以调用&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A collection that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">一个集合，包含零个或多<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing a specific named attachable member of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示特定名为此可附加成员<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">调用此方法可以调用&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt;&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;是虚拟的并且因此，可以重写。&lt;/xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>有关基础 CLR 类型的信息。&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The name of the attachable member to get, in <ph id="ph1">`ownerTypeName.MemberName`</ph> form.</source>
          <target state="translated">若要获取，在可附加成员的名称<ph id="ph1">`ownerTypeName.MemberName`</ph>窗体。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the requested attachable member; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if no attachable member by that name exists.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象的请求的可附加成员; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果该名称的任何可附加成员不存在。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this object.</source>
          <target state="translated">返回此对象的哈希代码。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An integer hash code.</source>
          <target state="translated">整数哈希代码。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named member from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>为特定的命名成员从此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The value for <ph id="ph1">`name`</ph> is expected to be unqualified.</source>
          <target state="translated">值<ph id="ph1">`name`</ph>应为非限定。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Type-qualified names that indicate an attached member should be submitted to &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt; instead.</source>
          <target state="translated">指明附加的成员的类型限定名称应提交到&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;相反。&lt;/xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</source>
          <target state="translated">前缀的成员名称不应使用;前缀是态势到一种用法，XAML 类型系统无法知道这类用法的上下文，以及如何映射前缀。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">调用此方法可以调用&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupMember%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt;&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;是虚拟的并且因此，可以重写。&lt;/xref:System.Xaml.XamlType.LookupMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>有关基础 CLR 类型的信息。&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">要获取 （作为字符串） 的成员的名称。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the member, if such a member was found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>信息的成员，此类成员是否找到; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">对于标记扩展类型，返回此特定的标记扩展用法支持位置参数的类型<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This API is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">此 API 才是相关，如果此&lt;xref:System.Xaml.XamlType&gt;表示标记扩展 (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;是<ph id="ph1">`true`</ph>)。&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">输入<ph id="ph1">`parameterCount`</ph>不适用于请求特定的位置参数的类型。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">它可用于指定 arity 的标记扩展用法。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">通常，标记扩展用法有多个"签名"，并使用不同的参数 arity （计数） 的位置参数来区分。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">但是，你可以配置架构上下文，以允许重复 arities 和使用差异的类型的位置参数。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;。&lt;/xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>For a specific arity (count), the parameter positions and types can vary.</source>
          <target state="translated">对于特定 arity （计数），可以改变的参数位置和类型。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To get the positional type of a specific arity's markup extension usage, you first call GetPositionalParameters specifying the arity count.</source>
          <target state="translated">若要获取的位置的一种特定 arity 的标记扩展用法，请先调用 GetPositionalParameters 指定 arity 计数。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">然后从返回的集合，该位置获取项。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Calls to this method can invoke &lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">调用此方法可以调用&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">你要获取其信息的特定语法或构造函数模式计数 (arity)。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values, where each <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is the type for that position in the syntax.</source>
          <target state="translated">一份<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值，其中每个<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>是语法中的此位置的类型。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You must specify the types in the same order when you supply markup input for the markup extension.</source>
          <target state="translated">提供为标记扩展的标记输入时，必须以相同的顺序指定的类型。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Returns a list of string identifiers for XAML namespaces that the type is included in.</source>
          <target state="translated">返回字符串中包括类型的 XAML 命名空间标识符的列表。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Typical XAML namespace identifiers are strings in URI form.</source>
          <target state="translated">典型 XAML 命名空间标识符是 URI 形式的字符串。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The default implementation checks the following, in order: the XAML namespace that is supplied in construction (&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt; signature only); and the namespaces that are available from the schema context.</source>
          <target state="translated">默认实现将检查以下内容，按顺序︰ 在构造中提供的 XAML 命名空间 (&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;签名仅); 和命名空间的架构上下文可用。&lt;/xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If these are each <ph id="ph1">`null`</ph>, a new list is generated that contains a single empty string.</source>
          <target state="translated">如果这些是每个<ph id="ph1">`null`</ph>，包含一个空字符串，则生成的新列表。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You can override this method to change the lookup methodology.</source>
          <target state="translated">你可以重写此方法可以更改的查找方法。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A list of string values, where each string is the URI identifier for a XAML namespace.</source>
          <target state="translated">字符串值，其中每个字符串是 XAML 命名空间的 URI 标识符列表。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>与此相关联的实现<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calling Invoker can invoke either &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; or a specific override of that method.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，调用调用程序可以调用&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;或该方法的特定重写。&lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt; override returns <ph id="ph1">`null`</ph>, or if the default implementation returns <ph id="ph2">`null`</ph> because of lack of &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; for this &lt;xref:System.Xaml.XamlType&gt;, then Invoker returns &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">如果&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;重写返回<ph id="ph1">`null`</ph>，或如果默认实现返回<ph id="ph2">`null`</ph>由于缺乏&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;为此&lt;xref:System.Xaml.XamlType&gt;，然后调用程序返回&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>与此相关联的实现<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示环境类型，按照 XAML 定义。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an ambient type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示环境的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an array.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示的数组。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an array; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示的数组; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a collection.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示的集合。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示的集合; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示构造的类型，按照 XAML 定义。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is default constructible]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is default constructible]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a constructible type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示构造的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a dictionary, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示的字典，根据 XAML 定义的信息。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is dictionary]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is dictionary]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示的字典; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a generic type.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示泛型类型。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This property is a helper property that checks for a null value of &lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.</source>
          <target state="translated">此属性是一个帮助器属性，检查&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.&lt;/xref:System.Xaml.XamlType.TypeArguments%2A&gt;的 null 值</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>There is no specific <ph id="ph1">`Lookup`</ph> method related to IsGeneric.</source>
          <target state="translated">没有任何特定<ph id="ph1">`Lookup`</ph>与 IsGeneric 相关方法。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a generic type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示泛型类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a markup extension.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示标记扩展。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for IsMarkupExtension.</source>
          <target state="translated">在 XAML 规范术语中，此类型必须可赋给<ph id="ph1">`x:MarkupExtension`</ph>为了返回<ph id="ph2">`true`</ph>IsMarkupExtension 有关。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a markup extension; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示标记扩展; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示 XAML 名称范围，根据 XAML 定义的信息。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A XAML namescope enforces the name uniqueness of the property or properties used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名称范围强制实施的或多个属性用于名称的唯一性<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>If IsNameScope is <ph id="ph1">`true`</ph>, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">如果 IsNameScope <ph id="ph1">`true`</ph>，强制唯一性的某种机制都应存在，并且应从拥有 XAML 名称范围的此类型角度进行评估。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</source>
          <target state="translated">在遇到另一个 XAML 名称范围所属类型之前，XAML 名称范围随后扩展到类型的内容。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is name scope]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is name scope]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a XAML namescope; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示 XAML 名称范围; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is initialized by using a valid <bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> string as its &lt;xref:System.Xaml.XamlType.Name*&gt;.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>通过使用一个有效初始化<bpt id="p2">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>字符串作为其&lt;xref:System.Xaml.XamlType.Name*&gt;.&lt;/xref:System.Xaml.XamlType.Name*&gt;</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is initialized by using a valid <bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> string; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>通过使用一个有效初始化<bpt id="p3">&lt;xref uid="langword_csharp_xamlName" name="xamlName" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>字符串; 否则为<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示可以为 null 的类型，按照 XAML 定义。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is nullable]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is nullable]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>If you are not using the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果你未使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsNullable%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nullable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示可以为 null 的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a public type in the relevant type system.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相关类型系统中表示的公共类型。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  &lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt; is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt;&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;是虚拟的并且因此，可以重写。&lt;/xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改报告的访问有关 XAML 类型的信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统和访问信息一致。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a public type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示公共类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示在基础类型系统中无法解析的类型。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt;derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For a load path that involves &lt;xref:System.Xaml.XamlObjectWriter&gt;, a &lt;xref:System.Xaml.XamlType&gt; that has <ph id="ph1">`true`</ph> for IsUnknown cannot be written into an object graph.</source>
          <target state="translated">涉及了加载路径&lt;xref:System.Xaml.XamlObjectWriter&gt;、&lt;xref:System.Xaml.XamlType&gt;具有<ph id="ph1">`true`</ph>为 IsUnknown 无法写入到对象图。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlObjectWriter&gt;</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Under the default implementations in &lt;xref:System.Xaml&gt; , the &lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt; call throws a &lt;xref:System.Xaml.XamlObjectWriterException&gt; when the relevant &lt;xref:System.Xaml.XamlType&gt; reports <ph id="ph1">`true`</ph> for IsUnknown.</source>
          <target state="translated">在中的默认实现&lt;xref:System.Xaml&gt;、&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt;调用会引发&lt;xref:System.Xaml.XamlObjectWriterException&gt;时相关&lt;xref:System.Xaml.XamlType&gt;报表<ph id="ph1">`true`</ph>为 IsUnknown。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlObjectWriterException&gt; &lt;/xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml&gt;</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>You should not pass a &lt;xref:System.Xaml.XamlType&gt; that has IsUnknown as <ph id="ph1">`true`</ph> unless you are prepared to handle the exceptions from &lt;xref:System.Xaml.XamlObjectWriter&gt;, or you have other ways to adjust the &lt;xref:System.Xaml.XamlObjectWriter&gt; behavior or the XAML node stream prior to writing the object graph.</source>
          <target state="translated">您不应传递&lt;xref:System.Xaml.XamlType&gt;，其作为 IsUnknown<ph id="ph1">`true`</ph>除非你已准备好处理的异常从&lt;xref:System.Xaml.XamlObjectWriter&gt;，或通过其他方式来调整&lt;xref:System.Xaml.XamlObjectWriter&gt;行为或 XAML 节点流，然后再写入对象图。&lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlObjectWriter&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an unresolvable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示无法解析的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is built top-down during XAML initialization.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>自上而下生成 XAML 初始化期间。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</source>
          <target state="translated">自上而下的是在创建对象图时对与 XAML 处理器行为相近的比喻。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</source>
          <target state="translated">自上而下生成，当一个类型实例化时，附加到父级，并且然后设置其属性。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">自上而下构造可避免调用多次的属性更改处理程序。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">这种处理波及对象图因此，消除了多个处理程序调用并提供为启动一个性能优化选项的对象图。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is built top-down during XAML initialization; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>自上而下的 XAML 初始化过程中; 否则为生成<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示空格的有意义集合，根据 XML 定义。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a whitespace significant collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示空格有意义集合; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, as per the XAML definition.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示 XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，每个 XAML 定义。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This property aligns to the <ph id="ph1">`[is xdata]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">此属性对齐到<ph id="ph1">`[is xdata]`</ph>[MS-XAML] 规范中的信息项。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsXData%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取一个值，提供的类型信息<bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此属性<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a collection (&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">此属性才是相关，如果此&lt;xref:System.Xaml.XamlType&gt;表示的集合 (&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;是<ph id="ph1">`true`</ph>)。&lt;/xref:System.Xaml.XamlType.IsCollection%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Items`</ph> property is whatever property holds items in that type of collection or array.</source>
          <target state="translated"><ph id="ph1">`Items`</ph>属性是任何属性存储该类型的集合或数组中的项。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupItemType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupItemType%2A&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the items in the collection; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a collection.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象的集合中的项的类型否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果此<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>不表示集合。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the key property of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary.</source>
          <target state="translated">获取一个值，提供的键的属性的类型信息<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，如果<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示的字典。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a dictionary (&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">此属性才是相关，如果此&lt;xref:System.Xaml.XamlType&gt;表示的字典 (&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;是<ph id="ph1">`true`</ph>)。&lt;/xref:System.Xaml.XamlType.IsDictionary%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupKeyType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the key for dictionary usage, otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a dictionary.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对于字典用法，否则为键的类型的对象<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果此<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>不表示一个字典。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Returns the XAML member that is aliased to a XAML directive by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回所化名为此 XAML 指令 XAML 成员<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The default implementation can return results for the following XAML directives: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</source>
          <target state="translated">默认实现可以返回结果为以下 XAML 指令︰ <ph id="ph1">`Key`</ph>;<ph id="ph2">`Name`</ph>;<ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Values for these depend on underlying reflection and might still return <ph id="ph1">`null`</ph> if no aliased property is found.</source>
          <target state="translated">这些依赖于基础反射和仍可能会返回值<ph id="ph1">`null`</ph>如果不找到任何别名属性。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">为其查找别名成员指令。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The aliased member, if found; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">使用别名成员中，如果找到了;否则为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set that contains all attachable properties that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回包含此公开的所有可附加属性的可枚举集<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Although &lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt; returns a generic collection, this <ph id="ph1">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">尽管&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;返回泛型集合而言，这<ph id="ph1">`Lookup`</ph>方法返回的通用的可枚举集合。&lt;/xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">当&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;是<ph id="ph1">`null`</ph>，默认实现可以使用&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;、 是否可用。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This behavior calls LookupAllAttachableMembers recursively to attempt to find a valid base type and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">此行为调用 LookupAllAttachableMembers 以递归方式来尝试找到有效的基类型，并返回<ph id="ph1">`null`</ph>如果不存在任何有效的基类型。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">为信息不能确定由于缺乏类型系统或反射支持的情况下，应保留 null 返回值。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty &lt;xref:System.Collections.Generic.IEnumerable%601&gt; set.</source>
          <target state="translated">如果类型是有效并且反射或其他技术都可用，但是类型不具有可附加成员，则应改为返回一个空&lt;xref:System.Collections.Generic.IEnumerable%601&gt;设置。&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>An enumerable set that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">包含零个或更多的可枚举集<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set that contains all the members that are exposed by this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回包含此公开的所有成员的可枚举集<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAllMembers%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Although &lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt; returns a generic collection, this <ph id="ph1">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">尽管&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;返回泛型集合而言，这<ph id="ph1">`Lookup`</ph>方法返回的通用的可枚举集合。&lt;/xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For cases where &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">用例其中&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;是<ph id="ph1">`null`</ph>，默认实现可以使用&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;、 是否可用。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>This behavior calls LookupAllMembers recursively to attempt to find a valid base type, and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">此行为调用 LookupAllMembers 以递归方式来尝试找到有效的基类型，并返回<ph id="ph1">`null`</ph>如果不存在任何有效的基类型。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">为信息不能确定由于缺乏类型系统或反射支持的情况下，应保留 null 返回值。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty &lt;xref:System.Collections.Generic.IEnumerable%601&gt; set.</source>
          <target state="translated">如果类型为有效，反射或其他技术才会有效。如果类型没有成员，则应改为返回一个空&lt;xref:System.Collections.Generic.IEnumerable%601&gt;设置。&lt;/xref:System.Collections.Generic.IEnumerable%601&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Return values for LookupAllMembers and &lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt; should be mutually exclusive.</source>
          <target state="translated">为 LookupAllMembers 返回值和&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;应该是互相排斥。&lt;/xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different &lt;xref:System.Xaml.XamlMember&gt; values, with one value appearing in the attachable list and another in the standard members list.</source>
          <target state="translated">如果你有其中后备类型系统的属性可以支持标准实例用法，以及可附加的使用情况的情况下，该成员应报告为两个不同&lt;xref:System.Xaml.XamlMember&gt;值，其中一个的值出现在可附加的列表，在标准的成员列表中的另一个。&lt;/xref:System.Xaml.XamlMember&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>An enumerable set that contains zero or more <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">包含零个或更多的可枚举集<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Returns a list of the types that are usable as the &lt;xref:System.Xaml.XamlType.ContentProperty*&gt; value for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回的类型都可用作列表&lt;xref:System.Xaml.XamlType.ContentProperty*&gt;值为<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Xaml.XamlType.ContentProperty*&gt;</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;。&lt;/xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Types that evaluate as &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; for a specific content type are not considered multiple types for purposes of &lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.</source>
          <target state="translated">评估为&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;对于特定的内容类型，可以不考虑为了&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;.&lt;/xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;的多个类型&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;的类型</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The default implementation can use other properties of &lt;xref:System.Xaml.XamlType&gt; (&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;, &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;, or &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;) to obtain a result.</source>
          <target state="translated">默认实现可以使用的其他属性&lt;xref:System.Xaml.XamlType&gt;(&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;， &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;，或&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;) 以获取结果。&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt; &lt;/xref:System.Xaml.XamlType.ContentProperty%2A&gt; &lt;/xref:System.Xaml.XamlType.ContentWrappers%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Lookup`</ph> overrides for the preceding property list can also be invoked in this determination.</source>
          <target state="translated"><ph id="ph1">`Lookup`</ph>重写也可以在此判断中调用上面的属性列表。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A list of possible content types.</source>
          <target state="translated">可能的内容类型的列表。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named attachable from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>特定名为可根据此附加<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;。&lt;/xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>When &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">当&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;是<ph id="ph1">`null`</ph>，默认实现可以使用&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;、 是否可用。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>This behavior calls LookupAttachableMember recursively to attempt to find a valid base type and returns <ph id="ph1">`null`</ph> if no valid base type exists.</source>
          <target state="translated">此行为调用 LookupAttachableMember 以递归方式来尝试找到有效的基类型，并返回<ph id="ph1">`null`</ph>如果不存在任何有效的基类型。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupAttachableMember is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; LookupAttachableMember 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>有关基础 CLR 类型的信息。&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The name of the attachable member to get, in <ph id="ph1">`ownerTypeName.MemberName`</ph> form.</source>
          <target state="translated">若要获取，在可附加成员的名称<ph id="ph1">`ownerTypeName.MemberName`</ph>窗体。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the requested attachable member; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if no attachable member by that name exists.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象的请求的可附加成员; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果该名称的任何可附加成员不存在。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对于此 XAML 类型的即时基类型。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Determination of this value is based on the underlying type of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and schema context.</source>
          <target state="translated">此值决定基于的基础类型<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>和架构上下文。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The default implementation might return an internal constant that represents the &lt;xref:System.Object&gt; if &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">默认实现可能会返回一个内部常量，用于表示&lt;xref:System.Object&gt;如果&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;是<ph id="ph1">`null`</ph>。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; &lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupBaseType is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; LookupBaseType 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改有关 XAML 类型的报告的类型信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统信息一致。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the immediate base type of this XAML type.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对于此 XAML 类型的即时基类型。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Returns a value of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration that declares which specific collection type this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> uses.</source>
          <target state="translated">返回的值<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>声明哪种特定集合的枚举类型这<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>使用。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>This method is invoked by an internal private method (no public <ph id="ph1">`CollectionKind`</ph> or <ph id="ph2">`GetCollectionKind`</ph> API exists on &lt;xref:System.Xaml.XamlType&gt;).</source>
          <target state="translated">调用此方法，一个内部私有方法 (没有公共<ph id="ph1">`CollectionKind`</ph>或<ph id="ph2">`GetCollectionKind`</ph>API 上是否存在&lt;xref:System.Xaml.XamlType&gt;)。&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">默认实现使用内部的 CLR 反射。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>For cases where &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; is <ph id="ph1">`null`</ph>, the default implementation can use &lt;xref:System.Xaml.XamlType.BaseType%2A&gt;, if it is available.</source>
          <target state="translated">用例其中&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;是<ph id="ph1">`null`</ph>，默认实现可以使用&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;、 是否可用。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This behavior indirectly calls LookupCollectionKind recursively to attempt to find a valid base type; it returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; if no valid base type exists.</source>
          <target state="translated">此行为间接调用 LookupCollectionKind 以递归方式来尝试找到有效的基类型;它将返回&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;如果不存在任何有效的基类型。&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>In general, the default implementation attempts to find the <ph id="ph1">`Add`</ph> method of the underlying type by reflection.</source>
          <target state="translated">一般情况下，默认实现将尝试查找<ph id="ph1">`Add`</ph>通过反射的基础类型的方法。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>If found, the &lt;xref:System.Reflection.MethodInfo&gt; of the <ph id="ph1">`Add`</ph> method is enough information to determine which &lt;xref:System.Xaml.Schema.XamlCollectionKind&gt; value should be returned.</source>
          <target state="translated">如果找到，&lt;xref:System.Reflection.MethodInfo&gt;的<ph id="ph1">`Add`</ph>方法是足够的信息来确定哪些&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;应返回值。&lt;/xref:System.Xaml.Schema.XamlCollectionKind&gt; &lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;.</source>
          <target state="translated">否则，它将返回&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A value of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> enumeration.</source>
          <target state="translated">值为<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlCollectionKind"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>枚举。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> must have arguments (generic constraints through <bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>必须具有参数 (通过泛型约束<bpt id="p2">&lt;xref uid="langword_csharp_x:TypeArguments" name="x:TypeArguments" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，初始化文本或其他 XAML 技术) 以构造类型的有效实例。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;。&lt;/xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`false`</ph> for types considered value types in the CLR type system.</source>
          <target state="translated">默认实现返回<ph id="ph1">`false`</ph>被认为是在 CLR 中的值类型的类型的类型系统。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>For other than value types, CLR reflection &lt;xref:System.Reflection.ConstructorInfo&gt; is used to determine whether a default constructor exists.</source>
          <target state="translated">对于以外的值类型，CLR 反射&lt;xref:System.Reflection.ConstructorInfo&gt;用于确定是否存在默认构造函数。&lt;/xref:System.Reflection.ConstructorInfo&gt;</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if construction of an instance requires some argument value; otherwise, false.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果构造实例需要某些参数值，则为否则为 false。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>的内容的属性的信息<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;。&lt;/xref:System.Xaml.XamlType.ContentProperty%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The default implementation checks for &lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt; on the type definition.</source>
          <target state="translated">默认实现可检查&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;的类型定义。&lt;/xref:System.Windows.Markup.ContentPropertyAttribute&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>If these checks do not discover a content type, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果这些检查未发现的内容类型，默认实现返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the content property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此内容的属性的信息<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">May be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Gets a list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that represent the content wrappers for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取一份<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>这些值表示的内容包装此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</source>
          <target state="translated">内容包装是一个类，表示内容的集合类型时使用该集合中的类型不是连续类型系统。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The types of collection items for the content wrapper are expected to be limited in some manner beyond &lt;xref:System.Object&gt; or a neutral object equivalent.</source>
          <target state="translated">预期的内容包装的集合项类型进行限制以外的某种方式&lt;xref:System.Object&gt;或非特定对象等效。&lt;/xref:System.Object&gt;</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</source>
          <target state="translated">但是，由设计或使用该类型的属性的目的而不是类型系统，只被实施此限制。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>More than one content wrapper can exist on a type.</source>
          <target state="translated">类型可以存在多个内容包装。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>For an example class and scenario from the WPF XAML implementation, see &lt;xref:System.Windows.Documents.InlineCollection&gt;.</source>
          <target state="translated">有关示例类，以及从 WPF XAML 实现的方案，请参阅&lt;xref:System.Windows.Documents.InlineCollection&gt;。&lt;/xref:System.Windows.Documents.InlineCollection&gt;</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values that represent the content wrappers for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">一份<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>这些值表示的内容包装此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, returns an <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">派生类中实现时，返回<bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实现。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">重写该方法以提供内部反射提供一种替代方式，若要获取 CLR 属性值。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>In absence of an override, the internal reflector uses typical CLR reflection logic.</source>
          <target state="translated">在没有重写时，内部反射器使用典型的 CLR 反射逻辑。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">默认实现返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Reflection.ICustomAttributeProvider"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>实现。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> object, which is used for deferred loading of XAML-declared objects.</source>
          <target state="translated">返回<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>对象，用于延迟加载的 XAML 声明对象。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>This method can be invoked when a caller gets a value from &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;.</source>
          <target state="translated">当调用方&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;。&lt;/xref:System.Xaml.XamlType.DeferringLoader%2A&gt;获取一个值，则可以调用此方法</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt; to return a different value than is enabled by default internal reflection and are also providing custom &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; information.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;返回不同的值比通过默认内部反射，并且还提供自定义&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;信息。&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt; &lt;/xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The default implementation returns an object on the basis of reading &lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;.</source>
          <target state="translated">默认实现返回根据读取&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;.&lt;/xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;对象</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>It can also  check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，此方法返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a <bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint on the generic.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>具有<bpt id="p1">&lt;xref href="System.Xaml.XamlDeferringLoader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>泛型约束。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that is associated with this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>与此关联<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.Invoker%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;.&lt;/xref:System.Xaml.XamlType.Invoker%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The default implementation does not require that a &lt;xref:System.Xaml.XamlType&gt; be constructed by using one of the constructors that pass an initial &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.</source>
          <target state="translated">默认实现不要求&lt;xref:System.Xaml.XamlType&gt;通过使用构造函数传递一个初始&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;.&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;之一构造&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>However, an &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; value must exist for the &lt;xref:System.Xaml.XamlType&gt;; otherwise, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">但是，&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;值必须存在&lt;xref:System.Xaml.XamlType&gt;; 否则为默认实现返回<ph id="ph1">`null`</ph>。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Override this method if you also create a derived class from &lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt; and intend to return the derived class.</source>
          <target state="translated">如果从&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;想要返回派生的类和&lt;/xref:System.Xaml.Schema.XamlTypeInvoker&gt;还创建派生的类重写此方法</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>If you return <ph id="ph1">`null`</ph>, &lt;xref:System.Xaml.XamlType.Invoker%2A&gt; returns &lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; to callers.</source>
          <target state="translated">如果返回<ph id="ph1">`null`</ph>，&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;返回&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt;向调用方。&lt;/xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType.Invoker%2A&gt;</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeInvoker"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>此信息<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示环境类型，按照 XAML 定义。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsAmbient%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>The default implementation uses CLR reflection on the &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; and can check the base types.</source>
          <target state="translated">默认实现上使用 CLR 反射&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;可以检查基类型。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>This implementation checks for the &lt;xref:System.Windows.Markup.AmbientAttribute&gt; that is applied to the relevant type's definition at the class level and returns <ph id="ph1">`true`</ph> in this case.</source>
          <target state="translated">此实现可检查&lt;xref:System.Windows.Markup.AmbientAttribute&gt;用于应用于在类级别的相关类型的定义，并返回<ph id="ph1">`true`</ph>在这种情况下。&lt;/xref:System.Windows.Markup.AmbientAttribute&gt;</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>All other cases return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">所有其他情况下返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt; to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;返回不同的值比通过默认内部反射。&lt;/xref:System.Xaml.XamlType.IsAmbient%2A&gt;</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents an ambient type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示环境的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示构造的类型，按照 XAML 定义。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsConstructible%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The default implementation uses CLR reflection on the &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">默认实现使用 CLR 反射&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The type must be concrete, non-nested, and closed.</source>
          <target state="translated">类型必须是具体的、 非嵌套和已关闭。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The default implementation checks whether the type is a value type and the return of &lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.</source>
          <target state="translated">默认实现将检查类型是否是值类型和返回的&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;.&lt;/xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, this method returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">对于空&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;，此方法返回<ph id="ph1">`true`</ph>。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt; to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;返回不同的值比通过默认内部反射。&lt;/xref:System.Xaml.XamlType.IsConstructible%2A&gt;</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a constructible type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示构造的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a markup extension.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示标记扩展。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The default implementation consists only of this call:       <ph id="ph1">`return CanAssignTo(XamlLanguage.MarkupExtension);`</ph>       Override this method if you want &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; to use different logic.</source>
          <target state="translated">默认实现仅包含此调用︰<ph id="ph1">`return CanAssignTo(XamlLanguage.MarkupExtension);`</ph>重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;.</source>
          <target state="translated">在 XAML 规范术语中，此类型必须可赋给<ph id="ph1">`x:MarkupExtension`</ph>为了返回<ph id="ph2">`true`</ph> &lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;。&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a markup extension; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示标记扩展; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示 XAML 名称范围，根据 XAML 定义的信息。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The default implementation makes a &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; call indirectly against the type &lt;xref:System.Windows.Markup.INameScope&gt;.</source>
          <target state="translated">默认实现使&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;间接对类型&lt;xref:System.Windows.Markup.INameScope&gt;.&lt;/xref:System.Windows.Markup.INameScope&gt;调用&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Markup.INameScope&gt; is an interface that is defined in the assembly WindowsBase.</source>
          <target state="translated">&lt;xref:System.Windows.Markup.INameScope&gt;是 WindowsBase 程序集中定义一个接口。&lt;/xref:System.Windows.Markup.INameScope&gt;</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>This technique for XAML namescope identification is used both by WPF and <ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)]</ph> implementations of XAML.</source>
          <target state="translated">使用这一用于 XAML 名称范围标识方法的 WPF 和<ph id="ph1">[!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)]</ph>的 XAML 实现。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>A XAML namescope enforces the name uniqueness of the property or properties that are used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">XAML 名称范围强制实施的或多个适用于的属性名称的唯一性<ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>If &lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt; is <ph id="ph1">`true`</ph>, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">如果&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;是<ph id="ph1">`true`</ph>，然后强制唯一性的某种机制都应存在，并且应从拥有 XAML 名称范围的此类型角度进行评估。&lt;/xref:System.Xaml.XamlType.IsNameScope%2A&gt;</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</source>
          <target state="translated">遇到另一个 XAML 名称范围所属类型之前，XAML 名称范围然后扩展到类型的内容。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a XAML namescope; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示 XAML 名称范围; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示可以为 null 的类型，按照 XAML 定义。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsNullable%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The default implementation makes a determination based on the CLR core library nullable concept, checked against &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">默认实现作出决定基于 CLR 核心库可以为 null 的概念， &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;进行比照</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">对于空&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;，它将返回<ph id="ph1">`true`</ph>。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsNullable%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsNullable%2A&gt;</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nullable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示可以为 null 的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a public type in the relevant type system.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>相关类型系统中表示的公共类型。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsPublic%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The default implementation uses CLR reflection against a non-null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">默认实现使用针对非 null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt; CLR 反射</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">对于空&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;，它将返回<ph id="ph1">`true`</ph>。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsPublic%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsPublic%2A&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupIsPublic is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; LookupIsPublic 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改报告的访问有关 XAML 类型的信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统或访问信息一致。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a public type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示公共类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示在基础类型系统中无法解析的类型。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The default implementation can use CLR reflection.</source>
          <target state="translated">默认实现可以使用 CLR 反射。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>For a null &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;, it returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">对于空&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;，它将返回<ph id="ph1">`true`</ph>。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsUnknown%2A&gt;</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a nonresolvable type; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示不可解析的类型; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示空格的有意义集合，根据 XML 定义。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;.</source>
          <target state="translated">默认实现返回基于读取&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;.&lt;/xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;的值</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>It can also check the &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>If a value is not available, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果值不是可用的它将返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a white-space significant collection; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示空白有意义集合; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, as per the XAML definition.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示 XML <bpt id="p2">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，每个 XAML 定义。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsXData%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsXData%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The default implementation makes a &lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt; call indirectly against the type &lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.</source>
          <target state="translated">默认实现使&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;间接对类型&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;.&lt;/xref:System.Xml.Serialization.IXmlSerializable&gt;调用&lt;/xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsXData%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsXData%2A&gt;</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents <bpt id="p3">&lt;xref uid="langword_csharp_XDATA" name="XDATA" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the <bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> property of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回一个值，提供的类型信息<bpt id="p1">&lt;xref uid="langword_csharp_Items" name="Items" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此属性<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.ItemType%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;.&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by &lt;xref:System.Reflection.MethodInfo&gt; and using the &lt;xref:System.Reflection.ParameterInfo&gt;; checking &lt;xref:System.Xaml.XamlType.IsArray%2A&gt;; and checking &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; and trying the same logic there.</source>
          <target state="translated">默认实现可以使用 CLR 反射概念，例如检查<ph id="ph1">`Add`</ph>方法&lt;xref:System.Reflection.MethodInfo&gt;和使用&lt;xref:System.Reflection.ParameterInfo&gt;; 检查&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;; 并检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;和尝试的相同逻辑。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Xaml.XamlType.IsArray%2A&gt; &lt;/xref:System.Reflection.ParameterInfo&gt; &lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.ItemType%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.ItemType%2A&gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Cases where &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; returns &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; should return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">情况&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;返回&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;应返回<ph id="ph1">`null`</ph>。&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the items in the collection; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a collection.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象的集合中的项的类型否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果此<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>不表示集合。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the key property of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if the <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a dictionary.</source>
          <target state="translated">返回一个值，提供的键的属性的类型信息<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，如果<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示的字典。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.KeyType%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;.&lt;/xref:System.Xaml.XamlType.KeyType%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by &lt;xref:System.Reflection.MethodInfo&gt; and using the &lt;xref:System.Reflection.ParameterInfo&gt;; and checking &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; and trying the same logic there.</source>
          <target state="translated">默认实现可以使用 CLR 反射概念，例如检查<ph id="ph1">`Add`</ph>方法&lt;xref:System.Reflection.MethodInfo&gt;和使用&lt;xref:System.Reflection.ParameterInfo&gt;; 并检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;和尝试的相同逻辑。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt; &lt;/xref:System.Reflection.ParameterInfo&gt; &lt;/xref:System.Reflection.MethodInfo&gt;</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.KeyType%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.KeyType%2A&gt;</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Cases where &lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt; does not return &lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; should return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">情况&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;不返回&lt;xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt;应返回<ph id="ph1">`null`</ph>。&lt;/xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the type of the key for dictionary usage, or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a dictionary,</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>字典用法键的类型的对象或<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>如果此<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>不表示一个字典，</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Returns a value that provides the type information for the returned <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if it represents a markup extension.</source>
          <target state="translated">返回一个值，提供针对返回了类型信息<bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果它表示标记扩展。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;.&lt;/xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The default implementation returns a &lt;xref:System.Xaml.XamlType&gt; on the basis of reading &lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;.</source>
          <target state="translated">默认实现返回&lt;xref:System.Xaml.XamlType&gt;根据读取&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;.&lt;/xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>If a value is not available, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果值不是可用的它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the return type for markup extension usage; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a markup extension.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象的返回类型的标记扩展用法; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果此<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>不表示标记扩展。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Returns the <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for a specific named member from this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>为特定的命名成员从此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.GetMember%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetMember%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>The default implementation returns a &lt;xref:System.Xaml.XamlType&gt; based on internal CLR reflection and evaluation against the schema context.</source>
          <target state="translated">默认实现返回&lt;xref:System.Xaml.XamlType&gt;基于内部 CLR 反射和评估针对架构上下文。&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.GetMember%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.GetMember%2A&gt;</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  LookupMember is virtual, and therefore, can be overridden.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; LookupMember 是虚拟的并且因此，可以重写。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the &lt;xref:System.ComponentModel.TypeDescriptor&gt; <ph id="ph1">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐&lt;xref:System.ComponentModel.TypeDescriptor&gt;<ph id="ph1">`Get*`</ph>有关基础 CLR 类型的信息。&lt;/xref:System.ComponentModel.TypeDescriptor&gt;</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">要获取 （作为字符串） 的成员的名称。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to return a member even if that member has a <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> value for <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to not return a <ph id="ph3">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph> member.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要返回的成员，即使该成员具有<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>值<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>;<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>不能返回<ph id="ph3">&amp;lt;</ph>xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName<ph id="ph4">&amp;gt;</ph>成员。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> information for the member, if a member was found; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Xaml.XamlMember"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>信息的成员，如果成员已找到; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">对于标记扩展类型，返回此特定的标记扩展用法支持位置参数的类型<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;.&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The default implementation uses internal reflection information based on finding constructors and checking the arity.</source>
          <target state="translated">默认实现使用基于查找构造函数和检查 arity 内部反射信息。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>This API is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; is <ph id="ph1">`true`</ph>).</source>
          <target state="translated">此 API 才是相关，如果此&lt;xref:System.Xaml.XamlType&gt;表示标记扩展 (&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;是<ph id="ph1">`true`</ph>)。&lt;/xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">输入<ph id="ph1">`parameterCount`</ph>不适用于请求特定的位置参数的类型。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">它可用于指定 arity 的标记扩展用法。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">通常，标记扩展用法有多个签名，并使用不同的参数 arity （计数） 的位置参数来区分。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">但是，你可以配置架构上下文，以允许重复 arities 和使用差异的类型的位置参数。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;。&lt;/xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>For a specific arity count, the parameter positions and types can vary.</source>
          <target state="translated">特定 arity count 的参数位置和类型而异。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>To get the positional type of a specific arity's markup extension usage, you first call &lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt; with the arity count.</source>
          <target state="translated">若要获取的位置的一种特定 arity 的标记扩展用法，请先调用&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;arity 计数。&lt;/xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">然后从返回的集合，该位置获取项。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">你要获取其信息的特定语法或构造函数模式计数 (arity)。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values where each such <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is the type for that position in the syntax.</source>
          <target state="translated">一份<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值每个此类<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>是语法中的此位置的类型。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>You must specify those types in the same order when supplying markup input for the markup extension.</source>
          <target state="translated">提供为标记扩展的标记输入时，必须以相同的顺序指定这些类型。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Returns a handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">返回要用于标记扩展的 set 操作的处理程序回调。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;.</source>
          <target state="translated">默认实现返回基于读取&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;.&lt;/xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;的值</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>A handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">要用于标记扩展的 set 操作处理程序回调。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Returns a handler to use for type converter setting cases.</source>
          <target state="translated">返回要用于类型转换器设置情况的处理程序。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;.</source>
          <target state="translated">默认实现返回基于读取&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;.&lt;/xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;的值</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>A handler to use for type converter setting cases.</source>
          <target state="translated">要用于类型转换器设置情况的处理程序。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> should be serialized using a mode that  trims surrounding whitespace.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>应使用一种模式，修整周围的空白序列化。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;.&lt;/xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;.</source>
          <target state="translated">默认实现返回基于读取&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;.&lt;/xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;的值</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> should be serialized in a mode that trims surrounding whitespace; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>修整周围的空白的模式下序列化; 否则为应为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint, which represents type-conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>具有<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>约束，用于表示此值的类型转换行为<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;.&lt;/xref:System.Xaml.XamlType.TypeConverter%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.ComponentModel.TypeConverterAttribute&gt;.</source>
          <target state="translated">默认实现返回基于读取&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;.&lt;/xref:System.ComponentModel.TypeConverterAttribute&gt;的值</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The default implementation can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">默认实现还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>It also includes special logic for default conversion of enumerations, common value types, and generics.</source>
          <target state="translated">它还包括了特殊逻辑，默认转换的枚举，常用的值类型和泛型。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.TypeConverter%2A&gt;</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type-conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>与<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示此值的类型转换行为的约束<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Returns the CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回 CLR&lt;xref:System.Type&gt;为这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;.&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>The default implementation returns an internal field.</source>
          <target state="translated">默认实现返回一个内部字段。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</source>
          <target state="translated">该字段通常已初始化在构造过程中，并且其值基于已调用的构造函数和你提供的信息。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>The CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR&lt;xref:System.Type&gt;为这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is built top-down during XAML initialization.</source>
          <target state="translated">返回一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>自上而下生成 XAML 初始化期间。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</source>
          <target state="translated">自上而下的是在创建对象图时对与 XAML 处理器行为相近的比喻。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>When built top-down, a type is instantiated, attached to the parent, and has its properties set.</source>
          <target state="translated">生成时的上下的类型实例化，附加到父级，并设置其属性。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">自上而下构造可避免调用多次的属性更改处理程序。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">这种处理波及对象图因此，消除了多个处理程序调用并提供为启动一个性能优化选项的对象图。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;.&lt;/xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;.</source>
          <target state="translated">默认实现返回基于读取&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;.&lt;/xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;的值</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is built top-down during XAML initialization; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>自上而下的 XAML 初始化过程中; 否则为生成<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> that has a &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint, which represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>具有&lt;xref:System.Windows.Markup.ValueSerializer&gt;约束，用于表示此值的值序列化行为<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>This method can be invoked by calls to &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;.</source>
          <target state="translated">可以通过调用&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;.&lt;/xref:System.Xaml.XamlType.ValueSerializer%2A&gt;调用此方法</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The default implementation returns a value based on reading &lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;.</source>
          <target state="translated">默认实现返回基于读取&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;.&lt;/xref:System.Windows.Markup.ValueSerializerAttribute&gt;的值</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>It can also check &lt;xref:System.Xaml.XamlType.BaseType%2A&gt; for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">它还可以检查&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;如果无特性包含在紧挨的基础类型的属性。&lt;/xref:System.Xaml.XamlType.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>It also includes special logic for default serialization of enumerations, common value types, or generics.</source>
          <target state="translated">它还包括了特殊逻辑，默认序列化的枚举、 常用的值类型或泛型。</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">如果没有可用的值，它将返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Override this method if you want &lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt; to use different logic.</source>
          <target state="translated">重写此方法，如果你想&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;若要使用不同的逻辑。&lt;/xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>与&lt;xref:System.Windows.Markup.ValueSerializer&gt;表示此值的值序列化行为的约束<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Gets a value that provides the type information for the returned <bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if it represents a markup extension.</source>
          <target state="translated">获取一个值，提供针对返回了类型信息<bpt id="p1">&lt;xref uid="langword_csharp_ProvideValue" name="ProvideValue" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果它表示标记扩展。</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>This property is only relevant if this &lt;xref:System.Xaml.XamlType&gt; represents a markup extension (<ph id="ph1">`x:MarkupExtension`</ph> is in the assignable types list).</source>
          <target state="translated">此属性才是相关，如果此&lt;xref:System.Xaml.XamlType&gt;表示标记扩展 (<ph id="ph1">`x:MarkupExtension`</ph>是可赋值的类型列表中)。&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object for the return type for markup extension usage; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>, if this <bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> does not represent a markup extension.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象的返回类型的标记扩展用法; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>，如果此<bpt id="p3">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>不表示标记扩展。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>Gets the string name of the type that this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents.</source>
          <target state="translated">获取类型的字符串名称，这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>This property typically gets the schema-constructed name (per the &lt;xref:System.Xaml.XamlType.%23ctor%2A&gt; signature), or the name of the &lt;xref:System.Type&gt;, if it is constructed by using the pertinent constructor of the CLR type system.</source>
          <target state="translated">此属性通常获取的架构构造的名称 (每个&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;签名)，或名称&lt;xref:System.Type&gt;，如果它通过使用 CLR 类型系统的相关构造函数构造。&lt;/xref:System.Type&gt; &lt;/xref:System.Xaml.XamlType.%23ctor%2A&gt;</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The string name of this XAML type.</source>
          <target state="translated">此 XAML 类型的字符串名称。</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have the same value.</source>
          <target state="translated">确定是否两个指定<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象具有相同的值。</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType1</ph><ept id="p2">&lt;/code&gt;</ept> is the same as the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlType2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果值<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType1</ph> <ept id="p2">&lt;/code&gt;</ept>的值相同<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlType2</ph> <ept id="p3">&lt;/code&gt;</ept>; 否则为<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Determines whether two specified <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects have different values.</source>
          <target state="translated">确定是否两个指定<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象具有不同的值。</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the value of <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">xamlType1</ph><ept id="p2">&lt;/code&gt;</ept> is different from the value of <bpt id="p3">&lt;code&gt;</bpt><ph id="ph2">xamlType2</ph><ept id="p3">&lt;/code&gt;</ept>; otherwise, <bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果值<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">xamlType1</ph> <ept id="p2">&lt;/code&gt;</ept>的值不同<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph2">xamlType2</ph> <ept id="p3">&lt;/code&gt;</ept>; 否则为<bpt id="p4">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Gets the single XAML namespace that is the primary XAML namespace for this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取为此主的 XAML 命名空间的单个 XAML 命名空间<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>This implementation provides the same value as calling &lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt; and then getting the first value string from the returned enumerable set.</source>
          <target state="translated">这种实现提供相同的值调用&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;，然后从返回的可枚举集合中获取的第一个值字符串。&lt;/xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The identifier, as a string, of the primary XAML namespace for this XAML type.</source>
          <target state="translated">为字符串，此 XAML 类型的主 XAML 命名空间标识符。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Gets the active <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for processing this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取活动<bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>用于处理此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.XamlSchemaContext&gt; is a required parameter entry when constructing a &lt;xref:System.Xaml.XamlType&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlSchemaContext&gt;构造一种&lt;xref:System.Xaml.XamlType&gt;。&lt;/xref:System.Xaml.XamlType&gt;时是必需的参数项&lt;/xref:System.Xaml.XamlSchemaContext&gt;</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>The active <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for processing this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">活动<bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>用于处理此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Returns a string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">返回的字符串表示形式这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xaml.XamlType&gt; implementation of &lt;xref:System.Object.ToString%2A&gt; returns the &lt;xref:System.Xaml.XamlType.Name%2A&gt; property of the &lt;xref:System.Xaml.XamlType&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt;&lt;xref:System.Object.ToString%2A&gt;返回&lt;xref:System.Xaml.XamlType.Name%2A&gt;的&lt;xref:System.Xaml.XamlType&gt;。&lt;/xref:System.Xaml.XamlType&gt;属性&lt;/xref:System.Xaml.XamlType.Name%2A&gt;&lt;/xref:System.Object.ToString%2A&gt;实现&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>A string representation of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">字符串表示形式这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</source>
          <target state="translated">获取一个值，该值指示是否这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>已处理的修剪中其内容周围的空格的序列化的行为空白。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> represents a type that uses whitespace trimming; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>表示使用空格的类型在修剪; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Gets a list of type arguments for cases where this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> represents a generic.</source>
          <target state="translated">获取类型参数的情况下列表其中这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>表示泛型。</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>There are certain scenarios for a &lt;xref:System.Xaml.XamlType&gt; where calling the TypeArguments parameter returns a list where the types are still open.</source>
          <target state="translated">有的某些方案&lt;xref:System.Xaml.XamlType&gt;其中调用 TypeArguments 参数返回列表的类型是仍处于打开状态。&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>In this case, one or more of the returned &lt;xref:System.Xaml.XamlType&gt; values will have placeholder values for &lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;, such as <ph id="ph1">`T`</ph>, to represent that the generic is still open.</source>
          <target state="translated">在这种情况下，一个或多个返回&lt;xref:System.Xaml.XamlType&gt;值将具有占位符值&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;，如<ph id="ph1">`T`</ph>，用于表示泛型是否仍处于打开状态。&lt;/xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>This scenario can occur if you get a &lt;xref:System.Xaml.XamlType&gt; from a call to &lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;, instead of from a XAML reader implementation.</source>
          <target state="translated">如果你获取，则会发生这种情况下&lt;xref:System.Xaml.XamlType&gt;调用&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;，而不是从 XAML 读取器实现。&lt;/xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>A list of type argument types; otherwise, <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, if this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> does not represent a generic.</source>
          <target state="translated">类型自变量类型; 的列表否则为<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，如果此<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>不表示泛型。</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>与<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>约束表示类型转换行为，此值<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with <bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> constraint that represents type conversion behavior for values of this <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>与<bpt id="p1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>约束表示类型转换行为，此值<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Gets the CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取 CLR&lt;xref:System.Type&gt;为这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>The CLR &lt;xref:System.Type&gt; that underlies this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">CLR&lt;xref:System.Type&gt;为这<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取<ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>与&lt;xref:System.Windows.Markup.ValueSerializer&gt;表示此值的值序列化行为的约束<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>If you do not use the default internal CLR reflection technique for a &lt;xref:System.Xaml.XamlType&gt;, calls to this property can invoke &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; overrides on &lt;xref:System.Xaml.XamlType&gt; derived classes.</source>
          <target state="translated">如果不使用的默认内部 CLR 反射技术&lt;xref:System.Xaml.XamlType&gt;，此属性的调用会&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;上重写&lt;xref:System.Xaml.XamlType&gt;派生类。&lt;/xref:System.Xaml.XamlType&gt; &lt;/xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>For more information about return values and other behavior, see the documentation for &lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt; on this type.</source>
          <target state="translated">有关返回值和其他行为的详细信息，请参阅的文档&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;在此类型上。&lt;/xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph> with &lt;xref:System.Windows.Markup.ValueSerializer&gt; constraint that represents value serialization behavior for values of this <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">A <ph id="ph1">&amp;lt;</ph>xref:System.Xaml.Schema.XamlValueConverter%601<ph id="ph2">&amp;gt;</ph>与&lt;xref:System.Windows.Markup.ValueSerializer&gt;表示此值的值序列化行为的约束<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.Markup.ValueSerializer&gt;</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>