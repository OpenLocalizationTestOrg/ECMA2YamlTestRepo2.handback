<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f4685f089157d7cffa96a0c899b97e49c87d376</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Xaml.Schema.XamlTypeName.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4ac6f011e782bca7e054d3acebee6cf673a1df1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c588978310d9d321c775bd1f6709cfc6a965c308</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a means to specify a XAML type in terms of name and namespace.</source>
          <target state="translated">提供指定根据名称和命名空间的 XAML 类型的方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.XamlType&gt; is the type information class in the XAML type system, whereas XamlTypeName is more of a data structure that provides different ways of specifying that type.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt;在 XAML 类型系统中，是类型信息类，而 XamlTypeName 是多个提供指定该类型的不同方法的数据结构。&lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XamlTypeName also provides static helper methods for generating a XamlTypeName by resolving an existing type identifier in a XAML namespace.</source>
          <target state="translated">XamlTypeName 还提供了用于生成 XamlTypeName 通过解决 XAML 命名空间中的现有类型标识符的静态帮助器方法。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on an existing <bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类，基于现有<bpt id="p2">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An existing <bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">现有<bpt id="p1">&lt;xref href="System.Xaml.XamlType"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;xamlType&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;xamlType&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on name and namespace strings.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类，基于名称和命名空间的字符串。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The XAML namespace that contains name.</source>
          <target state="translated">包含名称的 XAML 命名空间。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The name of the type to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">要创建的类型的名称<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>有关。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, based on name and namespace strings as well as an array of type arguments.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类，基于名称和命名空间字符串，以及类型参数的数组。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is the signature to use if you are specifying a generic type and type arguments for that type.</source>
          <target state="translated">这是要使用如果在指定泛型类型和该类型的类型自变量的签名。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The XAML namespace that contains <ph id="ph1">`name`</ph>.</source>
          <target state="translated">包含的 XAML 命名空间<ph id="ph1">`name`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The name of the type to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for.</source>
          <target state="translated">要创建的类型的名称<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>有关。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An array of type arguments, each of which must be a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">数组的类型自变量，其中每个必须<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Gets the name used to construct this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取用于构造此名称<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Xaml.XamlType&gt; was used to construct this &lt;xref:System.Xaml.Schema.XamlTypeName&gt;, the value of Name is &lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt;用于构造此&lt;xref:System.Xaml.Schema.XamlTypeName&gt;名称的值越&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;.&lt;/xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt; &lt;/xref:System.Xaml.Schema.XamlTypeName&gt; &lt;/xref:System.Xaml.XamlType&gt; ，如果</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the type.</source>
          <target state="translated">类型的名称。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Gets the XAML namespace identifier used to construct this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取用于构造此的 XAML 命名空间标识符<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Xaml.XamlType&gt; was used to construct this &lt;xref:System.Xaml.Schema.XamlTypeName&gt;, the value of Namespace is <ph id="ph1">`xamlType.GetXamlNamespaces()[0]`</ph>.</source>
          <target state="translated">如果&lt;xref:System.Xaml.XamlType&gt;用于构造此&lt;xref:System.Xaml.Schema.XamlTypeName&gt;，Namespace 的值是<ph id="ph1">`xamlType.GetXamlNamespaces()[0]`</ph>。&lt;/xref:System.Xaml.Schema.XamlTypeName&gt; &lt;/xref:System.Xaml.XamlType&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The XAML namespace identifier.</source>
          <target state="translated">XAML 命名空间标识符。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">提供<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值基于类型名称和一个对象，可以将标记前缀解析到命名空间。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type name to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value for.</source>
          <target state="translated">要创建的类型名称<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">对象或服务提供程序实现<bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">创建<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>String cannot be parsed.</source>
          <target state="translated">无法分析字符串。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">提供<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值基于一个字符串，可以指定多个类型名称，并可以将标记前缀解析到命名空间的对象。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following is quasi-BNF for the nested type name or multiple type name parsing enabled by this method:      <ph id="ph1">```   NestedTypeName = Name | Name '+' NestedTypeName   TypeName = NestedTypeName | NestedTypeName ‘[]’   XamlTypeName = Prefix ‘:’ TypeName TypeArgs  | TypeName TypeArgs   TypeArgs = empty | ‘(‘ XamlTypeNameList ‘)’   XamlTypeNameList = XamlTypeName XamlTypeNameList1   XamlTypeNameList1 = empty | ‘,’ XamlTypeNameList   ```</ph></source>
          <target state="translated">下面是近似 BNF 嵌套的类型名称或多个类型名称分析通过此方法︰<ph id="ph1">```   NestedTypeName = Name | Name '+' NestedTypeName   TypeName = NestedTypeName | NestedTypeName ‘[]’   XamlTypeName = Prefix ‘:’ TypeName TypeArgs  | TypeName TypeArgs   TypeArgs = empty | ‘(‘ XamlTypeNameList ‘)’   XamlTypeNameList = XamlTypeName XamlTypeNameList1   XamlTypeNameList1 = empty | ‘,’ XamlTypeNameList   ```</ph></target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A string that contains multiple types.</source>
          <target state="translated">一个字符串，包含多个类型。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">请参阅备注。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">对象或服务提供程序实现<bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">创建<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>String cannot be parsed.</source>
          <target state="translated">无法分析字符串。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Converts the value of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its equivalent string representation.</source>
          <target state="translated">将此值转换<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>为其等效的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This signature is equivalent to calling &lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;, passing <ph id="ph1">`null`</ph> for <ph id="ph2">`prefixLookup`</ph>.</source>
          <target state="translated">此签名是等效于调用&lt;xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;，并传递<ph id="ph1">`null`</ph>为<ph id="ph2">`prefixLookup`</ph>。&lt;/xref:System.Xaml.Schema.XamlTypeName.ToString%28System.Xaml.INamespacePrefixLookup%29&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>s</source>
          <target state="translated">s</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The equivalent string representation of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> .</source>
          <target state="translated">等效字符串表示形式这<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> 。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Converts the value of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.</source>
          <target state="translated">将此值转换<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>为其等效的字符串表示形式，这可以用于标记语法中的一种类型的对象元素用法。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">前缀查找服务引用。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A prefixed usage string.</source>
          <target state="translated">一个带前缀的使用情况的字符串。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Xaml.Schema.XamlTypeName.Namespace<bpt id="p1">*</bpt>&gt; for this <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.       -or-       &lt;xref:System.Xaml.Schema.XamlTypeName.Name<ept id="p1">*</ept>&gt; is not valid.</source>
          <target state="translated">&lt;&gt;<bpt id="p1">*</bpt>&gt; for this <bpt id="p2">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> is <bpt id="p3">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.      - &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>1&gt; 无效。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>-or-       Could not look up the prefix.</source>
          <target state="translated">-或-无法查找前缀。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Converts the value of this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.</source>
          <target state="translated">将此值转换<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>为其等效的字符串表示形式，这可以用于标记语法中的多个类型的对象元素用法。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A list of types.</source>
          <target state="translated">类型列表。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A service reference for prefix lookup.</source>
          <target state="translated">前缀查找服务引用。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A concatenated string of all type results.</source>
          <target state="translated">所有类型的串联的字符串结果。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;prefixLookup&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeNameList&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;prefixLookup&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeNameList&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a type name and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">提供<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值基于类型名称和一个对象，可以将标记前缀解析到命名空间。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The type name to create a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value for.</source>
          <target state="translated">要创建的类型名称<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">对象或服务提供程序实现<bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Out parameter that contains the created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the return value is <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Out 参数，其中包含创建<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果返回值为<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the parse was successful and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p2">&lt;/code&gt;</ept> contains a useful value; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果分析成功和<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">result</ph> <ept id="p2">&lt;/code&gt;</ept>包含有用的值; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeName&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Provides a <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</source>
          <target state="translated">提供<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>值基于一个字符串，可以指定多个类型名称，并可以将标记前缀解析到命名空间的对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A string that contains multiple types.</source>
          <target state="translated">一个字符串，包含多个类型。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
          <target state="translated">请参阅备注。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An object or service provider that implements <bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">对象或服务提供程序实现<bpt id="p1">&lt;xref href="System.Xaml.IXamlNamespaceResolver"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Out parameter that contains the created <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the return value is <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Out 参数，其中包含创建<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果返回值为<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the parse was successful and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">result</ph><ept id="p2">&lt;/code&gt;</ept> contains a useful value; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果分析成功和<bpt id="p2">&lt;code&gt;</bpt> <ph id="ph1">result</ph> <ept id="p2">&lt;/code&gt;</ept>包含有用的值; 否则为<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;typeNameList&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;namespaceResolver&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Gets the type arguments used to construct this <bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">获取用于构造此的类型自变量<bpt id="p1">&lt;xref href="System.Xaml.Schema.XamlTypeName"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If a &lt;xref:System.Xaml.XamlType&gt; was used to construct this &lt;xref:System.Xaml.Schema.XamlTypeName&gt;, the value of TypeArguments is formed from &lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.</source>
          <target state="translated">&lt;xref:System.Xaml.XamlType&gt;用于构造此&lt;xref:System.Xaml.Schema.XamlTypeName&gt;、 TypeArguments 的值构成的&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;.&lt;/xref:System.Xaml.XamlType.TypeArguments%2A&gt; &lt;/xref:System.Xaml.Schema.XamlTypeName&gt; &lt;/xref:System.Xaml.XamlType&gt; ，如果</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The type arguments, if any.</source>
          <target state="translated">如果任何类型参数。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>May be null.</source>
          <target state="translated">可能为 null。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>