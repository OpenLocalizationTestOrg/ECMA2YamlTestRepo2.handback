<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9cbb4b710f26bb7a24ffb0931bd220410b02f08</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Security.Cryptography.HMACSHA1.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3632710513c90145481ab070f3466433f208ca2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdbc8d1cb5b64dee109ed6282f40fb8f40368020</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Computes a Hash-based Message Authentication Code (HMAC) using the <bpt id="p1">&lt;xref href="System.Security.Cryptography.SHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> hash function.</source>
          <target state="translated">计算基于哈希的消息身份验证代码 (HMAC) 使用<bpt id="p1">&lt;xref href="System.Security.Cryptography.SHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>哈希函数。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>HMACSHA1 is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated">HMACSHA1 是一种是从 SHA1 哈希函数构造，用作的 HMAC 或基于哈希的消息验证代码的加密哈希算法。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The output hash is 160 bits in length.</source>
          <target state="translated">输出哈希值为 160 位长度。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC 可以用于确定是否通过不安全通道发送的消息已被篡改，前提是发送方和接收方共享机密密钥。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">发件人计算原始数据的哈希值，并将原始数据和哈希值作为一条消息发送。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">接收方将收到的消息哈希值重新计算，并检查计算的 HMAC 与传输的 HMAC 相匹配。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">对数据或哈希值的任何更改产生不匹配，因为更改消息和重新生成正确的哈希值需要的机密密钥。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Therefore, if the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">因此，如果原始与计算所得的哈希值匹配，消息进行身份验证。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government.</source>
          <target state="translated">Sha-1 （安全哈希算法，也称为 SHS、 安全哈希标准） 是发布的美国政府的加密哈希算法。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It produces a 160-bit hash value from an arbitrary length string.</source>
          <target state="translated">它将生成一个任意长度字符串从 160 位哈希值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>HMACSHA1 accepts keys of any size, and produces a hash sequence that is 160 bits in length.</source>
          <target state="translated">HMACSHA1 接受任何大小的密钥，并生成哈希序列，其中为 160 位长度。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with a randomly generated key.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类随机生成的密钥。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Security.Cryptography.HMACSHA1&gt; is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;是一种是从 SHA1 哈希函数构造，用作的 HMAC 或基于哈希的消息验证代码的加密哈希算法。&lt;/xref:System.Security.Cryptography.HMACSHA1&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The output hash is 160 bits (20 bytes) in length.</source>
          <target state="translated">输出哈希值为 160 位 （20 字节为单位） 的长度。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This constructor uses a 64-byte, randomly generated key.</source>
          <target state="translated">此构造函数使用 64 字节的随机生成密钥。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified key data.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>与指定的密钥数据的类。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Security.Cryptography.HMACSHA1&gt; is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;是一种是从 SHA1 哈希函数构造，用作的 HMAC 或基于哈希的消息验证代码的加密哈希算法。&lt;/xref:System.Security.Cryptography.HMACSHA1&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC 过程将与消息数据的机密密钥、 哈希结果与哈希函数，同样，与该密钥组合该哈希值，然后将哈希函数应用第二次。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The output hash is 160 bits (20 bytes) in length.</source>
          <target state="translated">输出哈希值为 160 位 （20 字节为单位） 的长度。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This constructor creates an unmanaged instance of the algorithm by using the &lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt; class.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 此构造函数创建算法的非托管的实例通过使用&lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;类。&lt;/xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The secret key for <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> encryption.</source>
          <target state="translated">机密密钥<bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>加密。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">键可以是任意长度，但如果它是多于 64 个字节它进行哈希处理 （使用 sha-1） 派生一个 64 字节的密钥。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">因此，机密密钥的建议的大小是 64 字节。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">key</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用指定的密钥数据和一个值，指定是否使用 SHA1 算法的托管的版本的类。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The secret key for <bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> encryption.</source>
          <target state="translated">机密密钥<bpt id="p1">&lt;xref href="System.Security.Cryptography.HMACSHA1"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>加密。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">键可以是任意长度，但如果它是多于 64 个字节，它哈希 （使用 sha-1） 派生一个 64 字节的密钥。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">因此，机密密钥的建议的大小是 64 字节。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to use the managed implementation of the SHA1 algorithm (the <bpt id="p2">&lt;xref href="System.Security.Cryptography.SHA1Managed"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> class); <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to use the unmanaged implementation (the <bpt id="p4">&lt;xref href="System.Security.Cryptography.SHA1CryptoServiceProvider"&gt;</bpt><ept id="p4">&lt;/xref&gt;</ept> class).</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要使用 SHA1 算法的托管的实现 ( <bpt id="p2">&lt;xref href="System.Security.Cryptography.SHA1Managed"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>类);<bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>以使用非托管的实现 ( <bpt id="p4">&lt;xref href="System.Security.Cryptography.SHA1CryptoServiceProvider"&gt;</bpt> <ept id="p4">&lt;/xref&gt;</ept>类)。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>