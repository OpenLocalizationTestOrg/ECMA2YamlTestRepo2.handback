<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48866610ef8d80da05371b0b6ef7e6d9609661bd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Messaging.MessageEnumerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b4c6c1155c89c62ac6abe030dee87cf9fc8d618</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">033622fbc69b34a2532b7f1b35be969738c8cd13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a forward-only cursor to enumerate through messages in a message queue.</source>
          <target state="translated">提供一个只进游标，用于枚举消息队列。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Use MessageEnumerator for dynamic interaction with messages in a queue.</source>
          <target state="translated">与队列中的消息进行动态交互使用 MessageEnumerator。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Methods available through the &lt;xref:System.Messaging.MessageQueue&gt; class can return either a MessageEnumerator pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</source>
          <target state="translated">方法可通过&lt;xref:System.Messaging.MessageQueue&gt;该类可以返回指向动态列表中的消息队列或在给定时刻的快照的队列时包含副本的数组的指定的方法调用的任一 MessageEnumerator。&lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unlike a static snapshot, an enumerator allows you to modify the collection.</source>
          <target state="translated">与不同的是静态的快照，枚举数可以修改该集合。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using a MessageEnumerator, you can remove messages from the queue, and the change is immediately reflected in the queue.</source>
          <target state="translated">使用 MessageEnumerator，你可以从队列中删除消息，并更改会立即反映在队列中。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An enumerator does not remove the messages from the queue when it queries the queue.</source>
          <target state="translated">一个枚举器不会从队列删除消息，当它查询队列时。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It returns information about the message at the current cursor position, but it leaves the message in the queue.</source>
          <target state="translated">它将返回有关在当前光标位置，消息的信息，但它消息仍会保留在队列中。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A MessageEnumerator is a cursor, initialized to the head of a dynamic list.</source>
          <target state="translated">MessageEnumerator 是光标，初始化为动态列表的开头。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The list order is the same as the order of the messages in the queue, according to message priority.</source>
          <target state="translated">列表顺序操作在队列中，消息的顺序相同根据消息优先级。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can move the cursor to the first message in the queue by calling &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;.</source>
          <target state="translated">你可以通过调用&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;.&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;光标移动到队列中的第一个消息</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>After the enumerator has been initialized, you can use &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; to step forward through the remaining messages.</source>
          <target state="translated">枚举数已初始化后，你可以使用&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;转发逐步执行其余的消息。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can specify whether to wait for a message to become available by passing a timeout into the &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; method.</source>
          <target state="translated">你可以指定是否要等待的消息变得可用，通过将传递到超时&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;方法。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</source>
          <target state="translated">枚举数是动态的因为可以通过枚举器访问光标的当前位置 （例如，由于低优先级），之后追加一条消息。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A message that is inserted before the cursor's current position cannot be accessed.</source>
          <target state="translated">无法访问光标的当前位置之前插入一条消息。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is not possible to step backward with a MessageEnumerator.</source>
          <target state="translated">不能与 MessageEnumerator 逐步向后。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A cursor allows forward-only movement.</source>
          <target state="translated">游标允许仅向前移动。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt; method enables you to place the cursor back at the beginning of the queue.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;方法使你能够将光标放回队列的开头。&lt;/xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Instances of MessageEnumerator for a given queue work independently.</source>
          <target state="translated">独立处理的 MessageEnumerator 为给定队列的实例。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can create two MessageEnumerator instances that apply to the same queue.</source>
          <target state="translated">你可以创建两个 MessageEnumerator 实例应用于同一个队列。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The changes that one MessageEnumerator makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</source>
          <target state="translated">一个 MessageEnumerator 对队列中消息所做的更改将会立即反映在第二个枚举器中如果第二个枚举数定位早于第一个。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the &lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt; property on the now-deleted message.</source>
          <target state="translated">但是，如果两个枚举器具有相同的位置，并且其中之一中删除该位置的消息，将引发异常如果其他枚举器尝试获取的值&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;属性，现已删除消息。&lt;/xref:System.Messaging.MessageEnumerator.Current%2A&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  If you create an instance of &lt;xref:System.Messaging.MessageQueue&gt; with &lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName&gt; set to <ph id="ph2">`true`</ph>, no other application can modify the messages in your enumerator while you have the connection to the queue.</source>
          <target state="translated">1&gt; <ph id="ph1">[!NOTE]</ph>&amp;1;&gt; 如果创建的实例&lt;xref:System.Messaging.MessageQueue&gt;与&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName&gt;设置为<ph id="ph2">`true`</ph>，没有其他应用程序可以修改你的枚举器中的消息，虽然有与队列连接。&lt;/xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName&gt; &lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Frees the resources associated with the enumerator.</source>
          <target state="translated">释放与枚举器关联的资源。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The operating system retains an open handle to the queue during the lifetime of the cursor.</source>
          <target state="translated">光标的生命周期内，操作系统会保留到队列的打开句柄。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you have finished working with the enumerator, call Close to release the resources associated with the handle.</source>
          <target state="translated">当你完成有关使用枚举器时，调用接近释放与句柄关联的资源。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Gets the current <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that this enumerator points to.</source>
          <target state="translated">获取当前<bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>该枚举数指向。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When the enumerator is created, it points to the head of the queue, at a location before the first message.</source>
          <target state="translated">创建枚举器时，它指向上第一条消息之前的位置的队列的开头。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this case, Current is not valid and will throw an exception if it is accessed.</source>
          <target state="translated">在这种情况下，当前无效，将引发异常，如果访问它。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You must call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; to position the cursor at the first message in the queue.</source>
          <target state="translated">必须调用&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;将光标定位在队列中的第一个消息。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The current message.</source>
          <target state="translated">当前的消息。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You called Current before the first call to &lt;xref:System.Messaging.MessageEnumerator.MoveNext<bpt id="p1">*</bpt>&gt;. The cursor is located before the first element of the message enumeration.       -or-       You called Current after a call to &lt;xref:System.Messaging.MessageEnumerator.MoveNext<ept id="p1">*</ept>&gt; had returned <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> (indicating the cursor is located after the last element of the message enumeration.)</source>
          <target state="translated">在首次调用之前调用当前&lt;&gt; <bpt id="p1">*</bpt>1&gt;。光标位于消息枚举第一个元素之前。      -或-在调用之后调用当前&lt;&gt; <ept id="p1">*</ept>1&gt; 返回<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> （指示光标位于消息枚举的最后一个元素之后。）</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The message the enumerator is currently pointing to no longer exists.</source>
          <target state="translated">存在枚举数当前不再指向消息。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It might have been deleted.</source>
          <target state="translated">它可能已被删除。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Gets the native Message Queuing cursor handle used to browse messages in the queue.</source>
          <target state="translated">获取消息队列游标用于本机句柄浏览队列中的消息。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This property contains the native handle to the enumeration.</source>
          <target state="translated">此属性包含在枚举的本机句柄。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you have finished working with the enumerator, call &lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt; to release this resource.</source>
          <target state="translated">当你完成有关使用枚举器时，调用&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;以释放此资源。&lt;/xref:System.Messaging.MessageEnumerator.Close%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The native cursor handle.</source>
          <target state="translated">本机光标句柄。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The handle does not exist.</source>
          <target state="translated">句柄不存在。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">释放使用的所有资源<bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Calling Dispose allows the resources used by the &lt;xref:System.Messaging.MessageEnumerator&gt; to be reallocated for other purposes.</source>
          <target state="translated">调用 Dispose 允许使用的资源&lt;xref:System.Messaging.MessageEnumerator&gt;可以重新分配用于其他目的。&lt;/xref:System.Messaging.MessageEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about Dispose, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关释放的详细信息，请参阅<bpt id="p1">[</bpt>清洗向上非托管资源<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and optionally releases the managed resources.</source>
          <target state="translated">释放由非托管的资源<bpt id="p1">&lt;xref href="System.Messaging.MessageEnumerator"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，还可以释放托管的资源。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This method is called by the public &lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt; method and the &lt;xref:System.Object.Finalize%2A&gt; method.</source>
          <target state="translated">此方法称为由公共&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;方法和&lt;xref:System.Object.Finalize%2A&gt;方法。&lt;/xref:System.Object.Finalize%2A&gt; &lt;/xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph>调用受保护<ph id="ph2">`Dispose(Boolean)`</ph>方法替换<ph id="ph3">`disposing`</ph>参数设置为<ph id="ph4">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Object.Finalize%2A&gt; invokes <ph id="ph1">`Dispose`</ph> with <ph id="ph2">`disposing`</ph> set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">&lt;xref:System.Object.Finalize%2A&gt;调用<ph id="ph1">`Dispose`</ph>与<ph id="ph2">`disposing`</ph>设置为<ph id="ph3">`false`</ph>。&lt;/xref:System.Object.Finalize%2A&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this &lt;xref:System.Messaging.MessageEnumerator&gt; references.</source>
          <target state="translated">当<ph id="ph1">`disposing`</ph>参数是<ph id="ph2">`true`</ph>，此方法释放由任何托管对象持有的全部资源此&lt;xref:System.Messaging.MessageEnumerator&gt;引用。&lt;/xref:System.Messaging.MessageEnumerator&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">此方法调用<ph id="ph1">`Dispose()`</ph>每个引用对象的方法。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release both managed and unmanaged resources; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要释放托管和非托管资源;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>若要仅释放非托管的资源。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next message in the queue, if one is currently available.</source>
          <target state="translated">将枚举数推进到下一条消息在队列中，如果当前可用。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This overload returns immediately if there is no message in the queue.</source>
          <target state="translated">此重载立即返回队列中是否存在任何消息。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>There is another overload that waits a specified &lt;xref:System.TimeSpan&gt; for a message to arrive.</source>
          <target state="translated">没有等待指定的另一个重载&lt;xref:System.TimeSpan&gt;到达的消息。&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, MoveNext returns <ph id="ph1">`false`</ph> to the calling method.</source>
          <target state="translated">如果消息不是当前可用因为队列为空，或者已经移动到集合中的最后一个元素以外，MoveNext 返回<ph id="ph1">`false`</ph>到调用方法。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to MoveNext brings the first message of the queue into view.</source>
          <target state="translated">创建后，在队列中，第一条消息之前从概念上讲定位一个枚举器和 MoveNext 首次调用将队列的第一条带入视图。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator was succesfully advanced to the next message; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has reached the end of the queue.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果枚举数已成功前进到下一条消息;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>如果枚举数已达到队列的末尾。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">引发了异常特定于消息队列。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">将枚举数推进到下一条消息在队列中。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the enumerator is positioned at the end of the queue, &lt;xref:System.Messaging.MessageEnumerator.MoveNext*&gt; waits until a message is available or the given timeout expires.</source>
          <target state="translated">如果枚举数定位在的队列结尾&lt;xref:System.Messaging.MessageEnumerator.MoveNext*&gt;会一直等到有可用消息或在给定的超时到期。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext*&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</source>
          <target state="translated">此重载等待队列中没有消息时或如果游标到达队列的末尾。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; waits the specified timeout.</source>
          <target state="translated">如果因为队列为空，或者已经移动到集合中的最后一个元素以外，一条消息不是当前可用&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;等待指定的超时。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the cursor is already at the end of the queue, &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; only returns <ph id="ph1">`true`</ph> if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</source>
          <target state="translated">如果游标已在队列末尾&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;仅返回<ph id="ph1">`true`</ph>新消息到达时指定的时间间隔内，如果队列中当前的所有消息比优先级较低且位于队列的末尾。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An overload with no parameter returns immediately if no further messages are in the queue.</source>
          <target state="translated">在队列中是否有其他消息，不带参数的重载将立即返回。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; brings the first message of the enumeration into view.</source>
          <target state="translated">创建后，枚举数从概念上讲定位枚举，以及首次调用的第一个消息之前&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;使到视图枚举第一条消息。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.TimeSpan&gt; to wait for a message to be available if the enumerator is positioned at the end of the queue.</source>
          <target state="translated">&lt;xref:System.TimeSpan&gt;时要等待的消息变得可用，如果枚举数定位在队列的末尾。&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the enumerator successfully advanced to the next message; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <bpt id="p3">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p3">&lt;/code&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果枚举数成功地推进到下一条消息;，<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>如果枚举数已达到了队列的末尾，并且一条消息不会成为可通过指定的时间内<bpt id="p3">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p3">&lt;/code&gt;</ept>参数。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The value specified for the timeout parameter is invalid.</source>
          <target state="translated">指定的超时参数的值无效。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It might represent a negative number.</source>
          <target state="translated">它也可以表示为负数。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">引发了异常特定于消息队列。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>-or-       The timeout has expired.</source>
          <target state="translated">-或者-已超时。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</source>
          <target state="translated">从事务性或非事务性队列中删除该当前消息和将消息返回到调用应用程序。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">没有为消息到达队列中指定无超时。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>RemoveCurrent removes and returns the message at the cursor's current location.</source>
          <target state="translated">RemoveCurrent 移除并返回消息在光标的当前位置。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像&lt;xref:System.Messaging.MessageQueue&gt;类的&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;方法执行。&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt; &lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">当删除当前消息时，光标将移到下一条消息。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling RemoveCurrent.</source>
          <target state="translated">无需调用&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用 RemoveCurrent 后。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">如果你对事务性队列中调用此重载，消息队列将创建单个内部事务。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引用可用队列中的第一条消息。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">从事务性队列中删除该当前消息和将消息返回到调用应用程序。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">没有为消息到达队列中指定无超时。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location, using the internal transaction context defined by the <ph id="ph1">`transaction`</ph> parameter.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;移除并返回位于光标的当前位置，使用由定义的内部事务上下文的消息<ph id="ph1">`transaction`</ph>参数。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像&lt;xref:System.Messaging.MessageQueue&gt;类的&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;方法执行。&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt; &lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;要返回到队列。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">删除不是不可逆的直到提交事务。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">当删除当前消息时，光标将移到下一条消息。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">无需&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;后&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the transaction in which the message will be removed.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，它指定将在其中删除消息的事务。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引用可用队列中的第一条消息。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">从队列中删除该当前消息和将消息返回到调用应用程序。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">没有为消息到达队列中指定无超时。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph1">`transactionType`</ph> parameter.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;移除并返回位于光标的当前位置，使用定义的事务上下文的消息<ph id="ph1">`transactionType`</ph>参数。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">指定<ph id="ph1">`Automatic`</ph>为<ph id="ph2">`transactionType`</ph>参数，如果已存在外部事务上下文附加到你想要用于接收消息的线程。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">指定<ph id="ph1">`Single`</ph>如果你想要接收的消息作为单个内部事务。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">你可以指定<ph id="ph1">`None`</ph>如果你想要接收来自外部事务上下文事务性队列的消息。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像&lt;xref:System.Messaging.MessageQueue&gt;类的&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;方法执行。&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt; &lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;要返回到队列。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">删除不是不可逆的直到提交事务。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">当删除当前消息时，光标将移到下一条消息。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">无需&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;后&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">之一<bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>描述事务上下文来与消息关联的类型的值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引用可用队列中的第一条消息。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transactionType</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not one of the <bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> members.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">transactionType</ph> <ept id="p1">&lt;/code&gt;</ept>参数不是一个<bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>成员。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">从队列中删除该当前消息和将消息返回到调用应用程序。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">如果没有要删除的消息，该方法返回它立即。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">否则，该方法将等待新消息到达的指定超时值。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;移除并返回消息在光标的当前位置。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">如果光标位于队列的末尾，该方法的此重载会一直等到有可用消息或指定的间隔<ph id="ph1">`timeout`</ph>参数已过期。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像&lt;xref:System.Messaging.MessageQueue&gt;类的&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;方法执行。&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt; &lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">当删除当前消息时，光标将移到下一条消息。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">无需&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;后&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">如果你对事务性队列中调用此重载，消息队列将创建单个内部事务。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The interval of time to wait for a message to arrive in the queue.</source>
          <target state="translated">要等待消息到达队列中的时间间隔。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引用可用队列中的第一条消息。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The value specified for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is invalid.</source>
          <target state="translated">为指定的值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>参数无效。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The timeout has expired.</source>
          <target state="translated">已超时。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">从事务性队列中删除该当前消息和将消息返回到调用应用程序。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">如果没有要删除的消息，该方法返回它立即。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">否则，该方法将等待新消息到达的指定超时值。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;移除并返回消息在光标的当前位置。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">如果光标位于队列的末尾，该方法的此重载会一直等到有可用消息或指定的间隔<ph id="ph1">`timeout`</ph>参数已过期。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;要返回到队列。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">删除不是不可逆的直到提交事务。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像&lt;xref:System.Messaging.MessageQueue&gt;类的&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;方法执行。&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt; &lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">当删除当前消息时，光标将移到下一条消息。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">无需&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;后&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">等待要删除的消息的时间间隔。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that specifies the transaction context for the message.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransaction"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>对象，它指定消息的事务上下文。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引用可用队列中的第一条消息。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The value specified for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is invalid.</source>
          <target state="translated">为指定的值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>参数无效。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transaction</ph><ept id="p1">&lt;/code&gt;</ept> parameter is <bpt id="p2">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The timeout has expired.</source>
          <target state="translated">已超时。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">从队列中删除该当前消息和将消息返回到调用应用程序。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">如果没有要删除的消息，该方法返回它立即。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">否则，该方法将等待新消息到达的指定超时值。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph1">`transactionType`</ph> parameter.</source>
          <target state="translated">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;移除并返回位于光标的当前位置，使用定义的事务上下文的消息<ph id="ph1">`transactionType`</ph>参数。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">如果光标位于队列的末尾，该方法的此重载会一直等到有可用消息或指定的间隔<ph id="ph1">`timeout`</ph>参数已过期。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">指定<ph id="ph1">`Automatic`</ph>为<ph id="ph2">`transactionType`</ph>参数，如果已存在外部事务上下文附加到你想要用于接收消息的线程。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">指定<ph id="ph1">`Single`</ph>如果你想要接收的消息作为单个内部事务。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">你可以指定<ph id="ph1">`None`</ph>如果你想要接收来自外部事务上下文事务性队列的消息。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the &lt;xref:System.Messaging.MessageQueue&gt; class's &lt;xref:System.Messaging.MessageQueue.Receive%2A&gt; method does.</source>
          <target state="translated">如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像&lt;xref:System.Messaging.MessageQueue&gt;类的&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;方法执行。&lt;/xref:System.Messaging.MessageQueue.Receive%2A&gt; &lt;/xref:System.Messaging.MessageQueue&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt; to be returned to the queue.</source>
          <target state="translated">当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;要返回到队列。&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">删除不是不可逆的直到提交事务。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">当删除当前消息时，光标将移到下一条消息。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You do not have to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling &lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.</source>
          <target state="translated">无需&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;.&lt;/xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;后&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">等待要删除的消息的时间间隔。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>One of the <bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">之一<bpt id="p1">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>描述事务上下文来与消息关联的类型的值。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the first message available in the queue.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引用可用队列中的第一条消息。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The value specified for the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is invalid.</source>
          <target state="translated">为指定的值<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept>参数无效。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The timeout has expired.</source>
          <target state="translated">已超时。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">transactionType</ph><ept id="p1">&lt;/code&gt;</ept> parameter is not one of the <bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> members.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">transactionType</ph> <ept id="p1">&lt;/code&gt;</ept>参数不是一个<bpt id="p2">&lt;xref href="System.Messaging.MessageQueueTransactionType"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>成员。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Resets the current enumerator so it points to the head of the queue.</source>
          <target state="translated">将当前的枚举器重置使其指向队列的开头。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>An enumerator can only move in a forward direction.</source>
          <target state="translated">一个枚举器只能在一个向前方向移动。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Use this method to start over at the beginning of the queue.</source>
          <target state="translated">使用此方法重新开始在队列的开头。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>After calling Reset, the cursor points to the first message.</source>
          <target state="translated">在调用之后重置，游标将指向第一条消息。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You do not need to call &lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt; after calling Reset to move the cursor forward to the first message in the queue.</source>
          <target state="translated">不需要调用&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;调用重置移动光标后转发到队列中的第一个消息。&lt;/xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the message at the current cursor position.</source>
          <target state="translated">返回<bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>引用当前光标位置处的消息。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that references the message at the current cursor position.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Messaging.Message"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引用当前光标位置处的消息。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>