<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f13e69064959243b4e4adbb0137e5643f9d1be9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.ContentElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78e382f0bf2f649d5cf44bfe3e587c06932b9fa1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73ba89bff98f5e57a86d8c7dbc1fceb0e3a3ebc3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a WPF core-level base class for content elements.</source>
          <target state="translated">为内容元素提供 WPF 核心级基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.</source>
          <target state="translated">内容元素设计用于流样式显示，它们使用面向标记的直观布局模型和精心设计的简单对象模型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ContentElement defines the following common content characteristics:      -   Input: All ContentElement derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.</source>
          <target state="translated">ContentElement 定义以下常见内容的特征:-输入︰ 所有 ContentElement 派生类都提供用于从键盘、 鼠标、 拖放操作、 触笔控件和快捷键的基本输入捕获的支持。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>-   Focus: All ContentElement derived classes are potentially focusable.</source>
          <target state="translated">焦点︰ 所有 ContentElement 派生类都是潜在可获得焦点的。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>(However, the default focusable state for the ContentElement base class is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">(但是，ContentElement 基类的默认可获得焦点状态是<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For details on how to make a ContentElement focusable, see &lt;xref:System.Windows.ContentElement.Focusable%2A&gt;.) In addition, this class contains <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> that you can use for traversing the focus across related elements.</source>
          <target state="translated">有关如何使 ContentElement 可获得焦点的详细信息，请参阅&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;。)&lt;/xref:System.Windows.ContentElement.Focusable%2A&gt;此外，此类包含<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>，你可将用于在相关元素中遍历焦点。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>-   Events: ContentElement includes events that are related to input and focus; it also includes events for changes in state.</source>
          <target state="translated">-事件︰ ContentElement 包括与输入和焦点，则相关的事件它还包括状态中的更改的事件。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In many cases, the ContentElement events are routed events.</source>
          <target state="translated">在许多情况下，ContentElement 事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition.</source>
          <target state="translated">在某些情况下，路由的事件都具有隧道和冒泡路由策略，为同一个状态或条件的响应中不同的事件引发。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Also, ContentElement defines <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> that can raise routed events and that can add or remove handlers to events.</source>
          <target state="translated">此外，ContentElement 定义<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>可引发路由事件以及可以添加或移除事件处理程序。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ContentElement shares many common <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> with &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">ContentElement 共享许多公共<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> &lt;xref:System.Windows.UIElement&gt;。&lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These common <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> do not come from a shared class inheritance.</source>
          <target state="translated">这些公共<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>并非来自共享的类继承。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>But they do share common naming, similar behavior, and similar internal implementation of <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph> in each class.</source>
          <target state="translated">但它们共享公共命名、 类似的行为和类似内部实现<ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]</ph>在每个类。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The similarity is because ContentElement and &lt;xref:System.Windows.UIElement&gt; are each classes that are an element base, although each has different intentions for its markup object model behavior.</source>
          <target state="translated">相似性是因为 ContentElement 和&lt;xref:System.Windows.UIElement&gt;是基，元素的每个类，尽管每个具有不同目的对其标记对象模型的行为。&lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In particular, &lt;xref:System.Windows.UIElement&gt; descends from &lt;xref:System.Windows.Media.Visual&gt;, which provides the lower-level graphics support for rendering a ContentElement to a rectangular region within a composited window, whereas ContentElement defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported.</source>
          <target state="translated">具体而言，&lt;xref:System.Windows.UIElement&gt;递减自&lt;xref:System.Windows.Media.Visual&gt;，该属性提供较低级别图形支持，以呈现到的矩形区域中为在复合窗口，ContentElement 而 ContentElement 延迟呈现，以便更轻松地支持更常用的文档的方案，例如流和自动换行，概念。&lt;/xref:System.Windows.Media.Visual&gt; &lt;/xref:System.Windows.UIElement&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These two related classes also implement the common interfaces &lt;xref:System.Windows.IInputElement&gt; and &lt;xref:System.Windows.Media.Animation.IAnimatable&gt;.</source>
          <target state="translated">这两个相关的类还实现的公共接口&lt;xref:System.Windows.IInputElement&gt;和&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;。&lt;/xref:System.Windows.Media.Animation.IAnimatable&gt; &lt;/xref:System.Windows.IInputElement&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.ContentElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.Windows.ContentElement"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">添加路由的事件处理程序为指定的路由事件，将该处理程序添加到当前元素的处理程序集合。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">可以将同一事件的同一处理程序添加多次而不会引发异常。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">但是，该处理程序实际调用的多次处理该事件时。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">因此，请考虑如何此行为可能会产生的负面影响，应考虑在处理程序实现。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">通常使用此方法来提供的"添加"访问器实现<ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph>事件的自定义的路由事件的访问模式。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An identifier for the routed event to be handled.</source>
          <target state="translated">要处理的路由事件标识符。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A reference to the handler implementation.</source>
          <target state="translated">对处理程序实现的引用。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</source>
          <target state="translated">添加路由的事件处理程序为指定的路由事件，将该处理程序添加到当前元素的处理程序集合。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Specify <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">handledEventsToo</ph><ept id="p1">&lt;/code&gt;</ept> as <bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</source>
          <target state="translated">指定<bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">handledEventsToo</ph> <ept id="p1">&lt;/code&gt;</ept>作为<bpt id="p2">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>为已标记为由事件路由的另一个元素处理的路由事件调用所提供的处理程序。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Processing low-level input events in a practical way is a complex task.</source>
          <target state="translated">处理低级别的输入的事件中切实可行的方法是一个复杂的任务。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</source>
          <target state="translated">许多控件实现的行为其中特定事件被标记为已处理，而替换为另一个更直观的事件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</source>
          <target state="translated">通常情况下，控制为已处理某个设计意图要求这样做是否只是标注平台输入的事件。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</source>
          <target state="translated">在某些情况下，这些设计意图可能不是你的输入事件的特定处理的要求。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It is for these scenarios that registering handlers with <ph id="ph1">`handledEventsToo`</ph> as <ph id="ph2">`true`</ph> is appropriate.</source>
          <target state="translated">它为这些方案是该注册处理程序替换<ph id="ph1">`handledEventsToo`</ph>作为<ph id="ph2">`true`</ph>适合。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>But you should not do this routinely.</source>
          <target state="translated">但你不应该这样做例行。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</source>
          <target state="translated">调用以响应所有事件处理程序，即使处理将使你自己的应用程序事件处理逻辑。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You may see a decrease in performance if the handler logic is substantial.</source>
          <target state="translated">如果处理程序逻辑是庞大，可能会看到导致性能降低。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</source>
          <target state="translated">你应保留使用附加的已处理事件的情况下，你已检测到在开发过程中，某些控件正在处理你仍想要使用应用程序逻辑处理的事件的处理程序。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</source>
          <target state="translated">避免处理的某些事件控件组合的行为的类的另一种方法是使用该事件的预览版的替代项。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, if &lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt; is marked handled by class handling, you might be able to add handlers for &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; instead.</source>
          <target state="translated">例如，如果&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;标记为已处理类处理，你可能能够为添加处理程序&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;相反。&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; &lt;/xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can add the same handler for the same event multiple times without raising an exception.</source>
          <target state="translated">可以将同一事件的同一处理程序添加多次而不会引发异常。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, the handler is actually invoked multiple times when the event is handled.</source>
          <target state="translated">但是，该处理程序实际调用的多次处理该事件时。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</source>
          <target state="translated">因此，请考虑如何此行为可能会产生的负面影响，应考虑在处理程序实现。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You typically use this method to provide the implementation of the "add" accessor for the <ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.</source>
          <target state="translated">通常使用此方法来提供的"添加"访问器实现<ph id="ph1">[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]</ph>事件的自定义的路由事件的访问模式。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An identifier for the.routed event to be handled.</source>
          <target state="translated">要处理的路由事件的标识符。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A reference to the handler implementation.</source>
          <target state="translated">对处理程序实现的引用。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>若要注册处理程序，以便即使路由的事件被标记为调用它处理其事件数据; 中<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>使用但不会默认条件注册处理程序调用如果路由的事件已标记为已处理。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Do not routinely ask to rehandle a routed event.</source>
          <target state="translated">请勿定期请求重新处理路由的事件。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see Remarks.</source>
          <target state="translated">有关详细信息，请参阅备注。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Adds handlers to the specified <bpt id="p1">&lt;xref href="System.Windows.EventRoute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the current <bpt id="p2">&lt;xref href="System.Windows.ContentElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> event handler collection.</source>
          <target state="translated">将处理程序添加到指定<bpt id="p1">&lt;xref href="System.Windows.EventRoute"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>当前<bpt id="p2">&lt;xref href="System.Windows.ContentElement"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>事件处理程序集合。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use this method for content host elements (regardless whether they implement &lt;xref:System.Windows.IContentHost&gt;) in order to add handlers for the content host child elements to the host &lt;xref:System.Windows.EventRoute&gt;.</source>
          <target state="translated">此方法用于内容主机元素 (无论它们是否实现&lt;xref:System.Windows.IContentHost&gt;) 才能将内容主机子元素的处理程序添加到主机&lt;xref:System.Windows.EventRoute&gt;.&lt;/xref:System.Windows.EventRoute&gt; &lt;/xref:System.Windows.IContentHost&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The event route that handlers are added to.</source>
          <target state="translated">处理程序添加到事件路由。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The event data that is used to add the handlers.</source>
          <target state="translated">用于添加处理程序事件数据。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This method uses the &lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt; property of the arguments to create the handlers.</source>
          <target state="translated">此方法使用&lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;要创建的处理程序的自变量的属性。&lt;/xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.</source>
          <target state="translated">获取或设置一个值，该值指示此元素是否可以用作拖放操作的目标。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting AllowDrop to  <ph id="ph1">`true`</ph>.</source>
          <target state="translated">拖放操作默认情况下，不启用和必须通过设置为 AllowDrop 有意启用<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by &lt;xref:System.Windows.ContentElement&gt; or any other base element class.</source>
          <target state="translated">除了此基本设置，拖放行为完全是特定的实现，并且未定义的&lt;xref:System.Windows.ContentElement&gt;或其他基元素的类。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Certain controls, for example, &lt;xref:System.Windows.Controls.RichTextBox&gt;, do have a default behavior, but no &lt;xref:System.Windows.ContentElement&gt; derived classes have such a behavior.</source>
          <target state="translated">例如，某些控件&lt;xref:System.Windows.Controls.RichTextBox&gt;，默认行为，但不是具有&lt;xref:System.Windows.ContentElement&gt;派生的类具有此类行为。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Controls.RichTextBox&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information on drag and drop, see <bpt id="p1">[</bpt>Drag and Drop Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">拖放的详细信息，请参阅<bpt id="p1">[</bpt>拖放概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkContentElement&gt; overrides the metadata for this dependency property in its implementation.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkContentElement&gt;重写在其实现此依赖项属性的元数据。&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifically, &lt;xref:System.Windows.FrameworkContentElement&gt; designates that this property allows property value inheritance (&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; is <ph id="ph1">`true`</ph> in metadata).</source>
          <target state="translated">具体而言，&lt;xref:System.Windows.FrameworkContentElement&gt;指定此属性允许属性值继承 (&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;是<ph id="ph1">`true`</ph>元数据中)。&lt;/xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt; &lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Property value inheritance in this context means that if there are child elements with no other value for AllowDrop assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system.</source>
          <target state="translated">在此上下文中的属性值继承意味着，如果有与 AllowDrop 通过本地值或样式分配任何其他值的子元素，最接近的父元素的值与此分配的值 （也是通过样式、 默认值或本地值），然后从该父元素的值将分配给所有未分配的子元素的属性系统。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This means that you can specify whether to allow drop operations at the root element and then propagate the value to all &lt;xref:System.Windows.FrameworkContentElement&gt; child elements that have not specifically assigned it a value of <ph id="ph1">`false`</ph>.</source>
          <target state="translated">这意味着你可以指定是否允许拖放操作的根元素处，然后传播到所有的值&lt;xref:System.Windows.FrameworkContentElement&gt;具有不专门为其分配的值的子元素<ph id="ph1">`false`</ph>。&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_AllowDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.AllowDropProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_AllowDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.AllowDropProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.AllowDropProperty&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element can be used as the target of a drag-and-drop operation; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此元素可用作拖放操作; 目标否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.AllowDrop*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.AllowDrop*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.AllowDrop*&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Applies an animation to a specified dependency property on this element.</source>
          <target state="translated">将动画应用到此元素的指定的依赖属性。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Any existing animations are stopped and replaced with the new animation.</source>
          <target state="translated">任何现有动画被停止，并替换为新动画。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">若要从属性中移除动画，指定为该属性的标识符<ph id="ph1">`dp`</ph>并指定<ph id="ph2">`clock`</ph>作为<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">这将删除动画和动画的属性设置为其基值。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">但是，不会停止最初关联的动画时钟。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">分配给该时钟的任何其他动画将继续运行。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The identifier for the property to animate.</source>
          <target state="translated">要进行动画处理的属性标识符。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">控制和声明动画的动画时钟。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.</source>
          <target state="translated">将动画应用到此元素的指定的依赖属性，使用指定的内容的功能的过程如果该属性已有正在运行的动画。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To remove an animation from a property, specify the identifier for that property as <ph id="ph1">`dp`</ph> and specify <ph id="ph2">`clock`</ph> as <ph id="ph3">`null`</ph>.</source>
          <target state="translated">若要从属性中移除动画，指定为该属性的标识符<ph id="ph1">`dp`</ph>并指定<ph id="ph2">`clock`</ph>作为<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This removes the animation and the animated property is set to its base value.</source>
          <target state="translated">这将删除动画和动画的属性设置为其基值。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation clock is not stopped.</source>
          <target state="translated">但是，不会停止最初关联的动画时钟。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that clock will continue to run.</source>
          <target state="translated">分配给该时钟的任何其他动画将继续运行。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The property to animate.</source>
          <target state="translated">要进行动画处理的属性。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The animation clock that controls and declares the animation.</source>
          <target state="translated">控制和声明动画的动画时钟。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A value of the enumeration.</source>
          <target state="translated">枚举的值。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref href="System.Windows.Media.Animation.HandoffBehavior"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>, which will stop any existing animation and replace with the new one.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref href="System.Windows.Media.Animation.HandoffBehavior"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>，这将会停止任何现有动画并将替换为新。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is captured to this element.</source>
          <target state="translated">获取一个值，该值指示是否将至少一次触摸设备捕获到此元素。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is captured to this element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果在至少一次触摸，捕获到此元素;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.AreAnyTouchesCaptured*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.AreAnyTouchesCaptured*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.AreAnyTouchesCaptured*&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</source>
          <target state="translated">获取一个值，该值指示是否在至少一次触摸设备捕获到此元素或其可视化树中任何子元素。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果在至少一次触摸，捕获到此元素或其可视化树中的任何子元素否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*&gt;</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is pressed over this element.</source>
          <target state="translated">获取一个值，该值指示是否在至少一次触摸设备按下了此元素。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is pressed over this element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此元素; 按至少一次触摸设备否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</source>
          <target state="translated">获取一个值，该值指示是否在至少一次触摸设备按下了此元素或其可视化树中的任何子元素上方。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此元素或其可视化树中的任何子元素上方按至少一次触摸设备否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.AreAnyTouchesOver*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.AreAnyTouchesOver*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.AreAnyTouchesOver*&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Starts an animation for a specified animated property on this element.</source>
          <target state="translated">在此元素上启动指定的动态属性动画。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">当你检查属性是否动画处理时，请注意动画将开始，并被视为非动画的起始点以外的第一帧呈现时进行动画处理。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt; for <ph id="ph1">`animation`</ph> is <ph id="ph2">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">如果&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;为<ph id="ph1">`animation`</ph>是<ph id="ph2">`null`</ph>，然后将删除当前的任何动画，并且保持的属性的当前值。&lt;/xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">如果整个<ph id="ph1">`animation`</ph>值是<ph id="ph2">`null`</ph>、 从属性中移除所有动画和属性值将恢复为其基值。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">但是，不会停止最初关联的动画时间线。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">分配给该时间线中的任何其他动画将继续运行。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The property to animate, which is specified as a dependency property identifier.</source>
          <target state="translated">属性进行动画处理，它指定为一个依赖属性标识符。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The timeline of the animation to start.</source>
          <target state="translated">在动画开始播放的时间线。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.</source>
          <target state="translated">如果该属性已有正在运行的动画，会发生情况特定的动画此元素，使用指定的内容的选项的指定动画属性的启动。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.</source>
          <target state="translated">当你检查属性是否动画处理时，请注意动画将开始，并被视为非动画的起始点以外的第一帧呈现时进行动画处理。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If the &lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt; for <ph id="ph1">`animation`</ph> is <ph id="ph2">`null`</ph>, then any current animations are removed and the current value of the property is held.</source>
          <target state="translated">如果&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;为<ph id="ph1">`animation`</ph>是<ph id="ph2">`null`</ph>，然后将删除当前的任何动画，并且保持的属性的当前值。&lt;/xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If the entire <ph id="ph1">`animation`</ph> value is <ph id="ph2">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.</source>
          <target state="translated">如果整个<ph id="ph1">`animation`</ph>值是<ph id="ph2">`null`</ph>、 从属性中移除所有动画和属性值将恢复为其基值。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>However, the originally associated animation timeline is not stopped.</source>
          <target state="translated">但是，不会停止最初关联的动画时间线。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Any other animations assigned to that timeline will continue to run.</source>
          <target state="translated">分配给该时间线中的任何其他动画将继续运行。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The property to animate, which is specified as the dependency property identifier.</source>
          <target state="translated">属性进行动画处理，它指定为依赖属性标识符。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The timeline of the animation to be applied.</source>
          <target state="translated">要应用的动画时间线。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.</source>
          <target state="translated">指定新动画如何与已在影响的属性值的任何当前 （正在运行） 动画进行交互的枚举值。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of the mouse to this element.</source>
          <target state="translated">尝试强制鼠标捕获到此元素。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">若要捕获，必须启用一个元素。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Check whether &lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt; is <ph id="ph1">`true`</ph> before you call CaptureMouse.</source>
          <target state="translated">检查是否&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;是<ph id="ph1">`true`</ph>之前调用 CaptureMouse。&lt;/xref:System.Windows.ContentElement.IsEnabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If calling CaptureMouse returns <ph id="ph1">`true`</ph>, then &lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt; is also <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果调用 CaptureMouse 返回<ph id="ph1">`true`</ph>，然后&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;也<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If calling CaptureMouse returns <ph id="ph1">`true`</ph>, then the &lt;xref:System.Windows.ContentElement.GotMouseCapture&gt; and &lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt; events are raised, with &lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt; in the event data reported as the element where the CaptureMouse method is called.</source>
          <target state="translated">如果调用 CaptureMouse 返回<ph id="ph1">`true`</ph>，则&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;和&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;引发的事件，与&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt;在事件数据报告为称为 CaptureMouse 方法的元素。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt; &lt;/xref:System.Windows.ContentElement.GotMouseCapture&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</source>
          <target state="translated">如果强制捕获时，你可能干扰现有捕获-尤其是在具有与拖放与鼠标相关的捕获。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>To clear mouse capture from all elements, call &lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt; with the <ph id="ph1">`element`</ph> parameter provided as <ph id="ph2">`null`</ph>.</source>
          <target state="translated">若要清除从所有元素的鼠标捕获，请调用&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt;与<ph id="ph1">`element`</ph>参数作为提供<ph id="ph2">`null`</ph>。&lt;/xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the mouse is successfully captured; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果已成功捕获了鼠标;，否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of the stylus to this element.</source>
          <target state="translated">尝试强制触笔捕获到此元素。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The default implementation based on the underlying default stylus device always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">始终根据基础默认触笔设备的默认实现返回<ph id="ph1">`true`</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</source>
          <target state="translated">但是，如果你要扩展提供在输入系统的设备实现的输入的设备，则可能与一个备用的触笔设备实现，可能会返回不同的结果中创建系统。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</source>
          <target state="translated">当元素捕获触笔时，它会接收触笔输入，即使触笔超出界限。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">通常，将触笔捕获仅在拖放操作过程。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Calling this method calls an underlying static &lt;xref:System.Windows.Input.Stylus&gt; method &lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;.</source>
          <target state="translated">调用此方法调用基础的静态&lt;xref:System.Windows.Input.Stylus&gt;方法&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;.&lt;/xref:System.Windows.Input.Stylus.Capture%2A&gt; &lt;/xref:System.Windows.Input.Stylus&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The actual capture behavior is implemented by the active stylus device implementation.</source>
          <target state="translated">由活动的触笔设备实现实现实际捕获行为。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To be captured, an element must be enabled.</source>
          <target state="translated">若要捕获，必须启用一个元素。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Check whether &lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt; is <ph id="ph1">`true`</ph> return before you call CaptureStylus.</source>
          <target state="translated">检查是否&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;是<ph id="ph1">`true`</ph>返回之前调用 CaptureStylus。&lt;/xref:System.Windows.ContentElement.IsEnabled%2A&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If calling CaptureStylus returns <ph id="ph1">`true`</ph>, &lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt; is also <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果调用 CaptureStylus 返回<ph id="ph1">`true`</ph>，&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;也<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stylus is successfully captured; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果已成功捕获了触笔;，否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Attempts to force capture of a touch to this element.</source>
          <target state="translated">尝试强制将触摸屏输入捕获到此元素。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CaptureTouch will return <ph id="ph1">`false`</ph> if the &lt;xref:System.Windows.Input.TouchDevice&gt; is currently captured to another element.</source>
          <target state="translated">将返回 CaptureTouch<ph id="ph1">`false`</ph>如果&lt;xref:System.Windows.Input.TouchDevice&gt;当前捕获到另一个元素。&lt;/xref:System.Windows.Input.TouchDevice&gt;</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If CaptureTouch returns <ph id="ph1">`true`</ph>, then the &lt;xref:System.Windows.ContentElement.GotTouchCapture&gt; event is raised.</source>
          <target state="translated">如果 CaptureTouch 返回<ph id="ph1">`true`</ph>，则&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;引发事件。&lt;/xref:System.Windows.ContentElement.GotTouchCapture&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To release capture of a single touch from this element, use the &lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt; method and specify the touch device to release.</source>
          <target state="translated">若要释放的单个触摸从此元素的捕获，请使用&lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;方法并指定要释放的触摸设备。&lt;/xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>To release all touches from this element, use the &lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt; method.</source>
          <target state="translated">若要释放所有触摸从此元素，请使用&lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;方法。&lt;/xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The device to capture.</source>
          <target state="translated">要捕获的设备。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the specified touch is captured to this element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果指定的触摸屏输入捕获到此元素;，否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Gets a collection of <bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are associated with this element.</source>
          <target state="translated">获取的集合<bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>与此元素关联的对象。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Windows.Input.CommandBinding&gt; enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.</source>
          <target state="translated">A&lt;xref:System.Windows.Input.CommandBinding&gt;启用此元素的特定命令的命令处理并声明命令、 其事件，以及此元素附加的处理程序之间的链接。&lt;/xref:System.Windows.Input.CommandBinding&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Another typical way to populate the CommandBindings collection is to use &lt;xref:System.Windows.Input.CommandManager&gt; methods programmatically.</source>
          <target state="translated">另一个 CommandBindings 集合中填入的典型方法是使用&lt;xref:System.Windows.Input.CommandManager&gt;方法以编程方式。&lt;/xref:System.Windows.Input.CommandManager&gt;</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_CommandBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.CommandBindings&gt;       oneOrMoreCommandBindings  &lt;/object.CommandBindings&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_CommandBindings"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreCommandBindings<ept id="p3">*</ept>    One or more &lt;xref:System.Windows.Input.CommandBinding&gt; elements.</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_CommandBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 属性元素用法<ph id="ph1">```   &lt;object&gt;     &lt;object.CommandBindings&gt;       oneOrMoreCommandBindings  &lt;/object.CommandBindings&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_CommandBindings"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 值<bpt id="p3">*</bpt>oneOrMoreCommandBindings<ept id="p3">*</ept>一个或多个&lt;xref:System.Windows.Input.CommandBinding&gt;元素。&lt;/xref:System.Windows.Input.CommandBinding&gt;      </target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Each of these should have a &lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt; attribute set to a known command, and attributes set for the &lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt; and &lt;xref:System.Windows.Input.CommandBinding.Executed&gt; handler implementations.</source>
          <target state="translated">每个都应当有&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;属性设置为所知的命令，并且属性设置为&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;和&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;处理程序实现。&lt;/xref:System.Windows.Input.CommandBinding.Executed&gt; &lt;/xref:System.Windows.Input.CommandBinding.CanExecute&gt; &lt;/xref:System.Windows.Input.CommandBinding.Command%2A&gt;</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For more information see &lt;xref:System.Windows.Input.CommandBinding&gt;.</source>
          <target state="translated">有关详细信息，请参阅&lt;xref:System.Windows.Input.CommandBinding&gt;。&lt;/xref:System.Windows.Input.CommandBinding&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The collection of all <bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects.</source>
          <target state="translated">所有的集合<bpt id="p1">&lt;xref href="System.Windows.Input.CommandBinding"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>对象。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">在输入的系统报告出现以此元素为拖动目标的基础拖动事件时发生。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event for this class, so that DragEnter is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;附加此类事件，以便 DragEnter 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the DragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 DragEnter 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_DragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.DragEnterEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_DragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.DragEnterEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;.&lt;/xref:System.Windows.ContentElement.PreviewDragEnter&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.DragEnterEvent&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnDragEnter%2A&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.DragEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.DragEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">在输入的系统报告出现以此元素为拖动起点的基础拖动事件时发生。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event for this class so that DragLeave is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;附加此类事件，以便 DragLeave 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the DragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 DragLeave 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_DragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.DragLeaveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_DragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.DragLeaveEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;.&lt;/xref:System.Windows.DragDrop.PreviewDragLeave&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.DragLeaveEvent&gt;</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnDragLeave%2A&gt;</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.DragLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.DragLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">在输入的系统报告出现以此元素为可能放置目标的基础拖动事件时发生。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This event occurs even if the drag originates in the element bounds.</source>
          <target state="translated">如果即使拖动源自于元素边界，则会发生此事件。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If the drag starts outside the bounds and then moves inside, this event is also raised, as well as &lt;xref:System.Windows.ContentElement.DragEnter&gt; and related preview events.</source>
          <target state="translated">如果拖动的范围之外启动，然后将移动内，也会引发此事件，以及&lt;xref:System.Windows.ContentElement.DragEnter&gt;和相关预览事件。&lt;/xref:System.Windows.ContentElement.DragEnter&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event for this class so that DragOver is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;附加此类事件，以便拖动摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the DragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的拖动事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_DragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.DragOverEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_DragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.DragOverEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;.&lt;/xref:System.Windows.DragDrop.PreviewDragOver&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.DragOverEvent&gt;</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnDragOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.DragOver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.DragOver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">在输入的系统报告出现以此元素为放置目标的基础放置事件时发生。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event for this class so that Drop is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;此类，因此该 Drop 是一部分的附加的事件的类成员列表时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the Drop event are attached to the underlying &lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的拖放事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_Drop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.DropEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewDrop&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_Drop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.DropEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;.&lt;/xref:System.Windows.ContentElement.PreviewDrop&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.DropEvent&gt;</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnDrop%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnDrop%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnDrop%2A&gt;</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.Drop"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.Drop"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Attempts to set focus to this element.</source>
          <target state="translated">尝试将焦点设置到此元素。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>To be focusable, &lt;xref:System.Windows.ContentElement.Focusable%2A&gt; and &lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt; must both be <ph id="ph1">`true`</ph>.</source>
          <target state="translated">可获得焦点，&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;和&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;必须都是<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.ContentElement.IsEnabled%2A&gt; &lt;/xref:System.Windows.ContentElement.Focusable%2A&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Note that nearly all &lt;xref:System.Windows.ContentElement&gt; derived classes are not &lt;xref:System.Windows.ContentElement.Focusable%2A&gt; by default.</source>
          <target state="translated">请注意，几乎所有&lt;xref:System.Windows.ContentElement&gt;派生的类不是&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;默认情况下。&lt;/xref:System.Windows.ContentElement.Focusable%2A&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">即使元素是特定的树中的焦点并已启用，事件处理，（例如，用于复合控件） 可能会响应预览焦点事件通过不允许焦点，因此此方法将返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</source>
          <target state="translated">焦点通常由两个不同的概念︰ 键盘焦点和逻辑焦点，并不总是相同。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This method sets the logical focus.</source>
          <target state="translated">此方法设置逻辑焦点。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input.</source>
          <target state="translated">没有专门; 设置键盘焦点的编程方法由用户输入确定键盘焦点。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Focus Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Input Overview<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>焦点概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和<bpt id="p2">[</bpt>输入概述<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If calling Focus returns <ph id="ph1">`true`</ph>, &lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt; and &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt; are also <ph id="ph2">`true`</ph>.</source>
          <target state="translated">如果调用焦点返回<ph id="ph1">`true`</ph>，&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;和&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;也<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt; &lt;/xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If the related properties are not already <ph id="ph1">`true`</ph>, when you call Focus, one or more of the following events are raised in the following order: &lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;, &lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt; (source is the new focus target), &lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;, &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;, &lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;, &lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt; (source is the new focus target).</source>
          <target state="translated">如果相关的属性不是已<ph id="ph1">`true`</ph>，当调用焦点，一个或多个以下事件将按照以下顺序引发︰ &lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;， &lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;（来源为新的焦点目标）， &lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;， &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;， &lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;， &lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;（来源为新的焦点目标）。&lt;/xref:System.Windows.ContentElement.GotKeyboardFocus&gt; &lt;/xref:System.Windows.ContentElement.LostKeyboardFocus&gt; &lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt; &lt;/xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt; &lt;/xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt; &lt;/xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if keyboard focus could be set to this element; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if this method call did not force focus.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果无法将键盘焦点设置到此元素;<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>如果焦点不强制此方法调用。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the element can receive focus.</source>
          <target state="translated">获取或设置一个值，指示元素是否可以接收焦点。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Only the focused element receives keyboard input.</source>
          <target state="translated">具有焦点的元素收到键盘输入。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.</source>
          <target state="translated">某些派生的类可能会重写此依赖项属性的元数据，以便派生的类是默认情况下可获得焦点。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>When inherited by &lt;xref:System.Windows.Documents.Hyperlink&gt; or its derived classes, &lt;xref:System.Windows.Documents.Hyperlink&gt; overrides the metadata for this dependency property and redefines the default value of this property to be <ph id="ph1">`true`</ph>.</source>
          <target state="translated">当通过继承&lt;xref:System.Windows.Documents.Hyperlink&gt;或其派生的类，&lt;xref:System.Windows.Documents.Hyperlink&gt;重写此依赖项属性的元数据，并重新定义为此属性的默认值<ph id="ph1">`true`</ph>。&lt;/xref:System.Windows.Documents.Hyperlink&gt; &lt;/xref:System.Windows.Documents.Hyperlink&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_Focusable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.FocusableProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_Focusable"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.FocusableProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.FocusableProperty&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is focusable; otherwise <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果该元素是可获得焦点;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; however, see Remarks.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 但是，请参阅备注。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.Focusable*&gt; property changes.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.Focusable*&gt;属性更改。&lt;/xref:System.Windows.ContentElement.Focusable*&gt;</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.Focusable*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.Focusable*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.Focusable*&gt;</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.</source>
          <target state="translated">返回此元素，忽略任何可能的指定属性的基属性值进行动画处理来自正在运行的值或已停止的动画。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>If no animations are attached to the property, then the GetAnimationBaseValue return value is always identical to the &lt;xref:System.Windows.DependencyObject.GetValue%2A&gt; return value.</source>
          <target state="translated">如果没有动画被附加到属性，则 GetAnimationBaseValue 返回值也始终等于&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;返回值。&lt;/xref:System.Windows.DependencyObject.GetValue%2A&gt;</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.</source>
          <target state="translated">如果没有附加的动画，然后所有可能的动画派生值包括开始和停止值将被忽略，并确定基于所有其他可能的输入属性值。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>依赖项属性值优先级<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The.dependency property to check.</source>
          <target state="translated">若要检查的依赖属性。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The property value as if no animations are attached to the specified dependency property.</source>
          <target state="translated">属性值就像没有动画被附加到指定的依赖属性。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns an alternative <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.</source>
          <target state="translated">当在派生类中重写时将返回备用<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>父此元素，如果不存在可视父级。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The default virtual implementation of this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">此方法的默认虚拟实现返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.FrameworkContentElement&gt; provides a practical implementation.</source>
          <target state="translated">&lt;xref:System.Windows.FrameworkContentElement&gt;提供实际实现。&lt;/xref:System.Windows.FrameworkContentElement&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</source>
          <target state="translated">实现事件路由，在其中元素创建备用父级结构，以便其事件是路由偏离到标准的父级的可视化树向上路由的标准模式的方式或向下预览路由策略的情况下将使用备用父级。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>An object, if implementation of a derived class has an alternate parent connection to report.</source>
          <target state="translated">一个对象，如果派生类实现具有备用父连接到报表。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag-and-drop event that involves this element.</source>
          <target state="translated">在输入的系统报告涉及此元素的基础拖放事件时发生。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The GiveFeedback event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated">GiveFeedback 事件允许拖动事件，以便为用户可视反馈提供拖放操作期间修改鼠标指针的外观的源。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The visual feedback reinforces that a drag-and-drop operation is in process.</source>
          <target state="translated">视觉反馈用于强调拖放操作正在进行。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event for this class so that GiveFeedback is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;附加此类事件，以便 GiveFeedback 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 GiveFeedback 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.GiveFeedbackEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.GiveFeedbackEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;.&lt;/xref:System.Windows.ContentElement.PreviewGiveFeedback&gt; &lt;/xref:System.Windows.GiveFeedbackEventHandler&gt; &lt;/xref:System.Windows.ContentElement.GiveFeedbackEvent&gt;</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GiveFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GiveFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets logical focus.</source>
          <target state="translated">此元素获得逻辑焦点时发生。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">如果有意通过某个方法调用强制焦点，而前一个键盘焦点位于不同的范围内，则逻辑焦点将与键盘焦点不同。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>In this scenario, keyboard focus remains where it is and the element where a &lt;xref:System.Windows.ContentElement.Focus%2A&gt; method is called still gets logical focus.</source>
          <target state="translated">在这种情况下，键盘焦点将保持其所在的元素的和其中&lt;xref:System.Windows.ContentElement.Focus%2A&gt;调用方法仍获取逻辑焦点。&lt;/xref:System.Windows.ContentElement.Focus%2A&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A more precise interpretation of this event is that it is raised when the value of the &lt;xref:System.Windows.ContentElement.IsFocused%2A&gt; property of an element in the route is changed from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">此事件的更精确地解释是它时引发的值&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;路线中的元素的属性更改从<ph id="ph1">`false`</ph>到<ph id="ph2">`true`</ph>。&lt;/xref:System.Windows.ContentElement.IsFocused%2A&gt;</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，接收到焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that gained focus.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定实际获得焦点的元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.GotFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|      -   There is no corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.GotFocusEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.RoutedEventHandler&gt;|     -没有相应隧道事件。&lt;/xref:System.Windows.RoutedEventHandler&gt; &lt;/xref:System.Windows.ContentElement.GotFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">当针对此元素聚焦于键盘时发生。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt; is a similar event that tracks status changes in a property that maintains the focus state for an element; the GotKeyboardFocus event is raised in many of the same circumstances.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;是一个类似事件，跟踪中维护的一个元素; 的焦点状态的属性的状态更改在很多相同的情况下引发 GotKeyboardFocus 事件。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has focus.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定实际具有焦点的元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event for this class so that GotKeyboardFocus is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;附加此类事件，以便 GotKeyboardFocus 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 GotKeyboardFocus 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.GotKeyboardFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.GotKeyboardFocusEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;.&lt;/xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.ContentElement.GotKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Occurs when this element captures the mouse.</source>
          <target state="translated">此元素捕获到鼠标时发生。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</source>
          <target state="translated">在元素捕获鼠标，它会接收鼠标输入，即使在鼠标指针位于超出界限。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">鼠标通常仅在拖放操作期间捕获，并且将保持捕获，直到发生拖放操作。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has mouse capture.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;在事件数据以确定实际的元素具有鼠标捕获。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event for  this class so that GotMouseCapture is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;附加此类事件，以便 GotMouseCapture 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GotMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 GotMouseCapture 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.GotMouseCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.GotMouseCaptureEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -没有定义相应隧道事件。&lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.ContentElement.GotMouseCaptureEvent&gt;</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotMouseCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotMouseCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Occurs when this element captures the stylus.</source>
          <target state="translated">此元素捕获触笔时发生。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">当元素捕获触笔时，它会接收触笔输入，即使在指针位于超出界限。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</source>
          <target state="translated">触笔通常仅在拖放操作期间捕获和捕获之前发生拖放操作的状态将保持。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has capture.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定已捕获的实际元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the  attached event for this class so that GotStylusCapture is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建此类的附加事件的别名，以便 GotStylusCapture 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the GotStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 GotStylusCapture 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.GotStylusCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.GotStylusCaptureEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -没有定义相应隧道事件。&lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.GotStylusCaptureEvent&gt;</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotStylusCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotStylusCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Occurs when a touch is captured to this element.</source>
          <target state="translated">触摸屏输入捕获到此元素时发生。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.GotTouchCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.GotTouchCaptureEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -重写&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.GotTouchCaptureEvent&gt;</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has any animated properties.</source>
          <target state="translated">获取一个值，该值指示此元素是否具有任何动画的属性。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>This property returns <ph id="ph1">`true`</ph> either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.</source>
          <target state="translated">此属性返回<ph id="ph1">`true`</ph>为永久性 （无时间限制，始终运行） 动画或具有特定的时间线的动画。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element has animations attached to any of its properties; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此元素具有附加到任何其属性; 动画否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Gets the collection of input bindings that are associated with this element.</source>
          <target state="translated">获取与此元素关联的输入绑定的集合。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Input bindings support the binding of commands to input devices.</source>
          <target state="translated">输入的绑定支持命令来输入设备的绑定。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>For example, &lt;xref:System.Windows.Input.MouseBinding&gt; implements input bindings that include properties that are specific to mouse devices.</source>
          <target state="translated">例如，&lt;xref:System.Windows.Input.MouseBinding&gt;实现的输入包括特定于鼠标设备的属性的绑定。&lt;/xref:System.Windows.Input.MouseBinding&gt;</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.</source>
          <target state="translated">输入绑定的集合包括同时适用于类型的输入的绑定和输入声明的实例的绑定。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>A related property, &lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;, maintains a collection of command bindings.</source>
          <target state="translated">相关的属性， &lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;，保持命令绑定的集合。&lt;/xref:System.Windows.ContentElement.CommandBindings%2A&gt;</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.</source>
          <target state="translated">这些绑定从输入绑定不同，因为它们表示下一个级别的命令处理的操作为它们依赖于已知的命令和特定于类的处理程序。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="xamlPropertyElementUsage_InputBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Property Element Usage      <ph id="ph1">```   &lt;object&gt;     &lt;object.InputBindings&gt;       oneOrMoreInputBindings  &lt;/object.InputBindings&gt;   &lt;/object&gt;   ```</ph>      <bpt id="p2">&lt;a name="xamlValues_InputBindings"&gt;</bpt><ept id="p2">&lt;/a&gt;</ept>    ## XAML Values    <bpt id="p3">*</bpt>oneOrMoreInputBindings<ept id="p3">*</ept>    One or more &lt;xref:System.Windows.Input.InputBinding&gt; elements (typically the &lt;xref:System.Windows.Input.KeyBinding&gt; or &lt;xref:System.Windows.Input.MouseBinding&gt; derived classes).</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlPropertyElementUsage_InputBindings"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # XAML 属性元素用法<ph id="ph1">```   &lt;object&gt;     &lt;object.InputBindings&gt;       oneOrMoreInputBindings  &lt;/object.InputBindings&gt;   &lt;/object&gt;   ```</ph> <bpt id="p2">&lt;a name="xamlValues_InputBindings"&gt;</bpt> <ept id="p2">&lt;/a&gt;</ept> # # XAML 值<bpt id="p3">*</bpt>oneOrMoreInputBindings<ept id="p3">*</ept>一个或多个&lt;xref:System.Windows.Input.InputBinding&gt;元素 (通常&lt;xref:System.Windows.Input.KeyBinding&gt;或&lt;xref:System.Windows.Input.MouseBinding&gt;派生类)。&lt;/xref:System.Windows.Input.MouseBinding&gt; &lt;/xref:System.Windows.Input.KeyBinding&gt; &lt;/xref:System.Windows.Input.InputBinding&gt;      </target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Each of these is expected to have a &lt;xref:System.Windows.Input.InputBinding.Command%2A&gt; and &lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt; attribute set.</source>
          <target state="translated">其中每个都应&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;和&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;属性设置。&lt;/xref:System.Windows.Input.InputBinding.Gesture%2A&gt; &lt;/xref:System.Windows.Input.InputBinding.Command%2A&gt;</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The collection of input bindings.</source>
          <target state="translated">输入绑定的集合。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether this element is enabled in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>.</source>
          <target state="translated">获取或设置一个值，该值指示是否在启用此元素<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]</ph>。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsEnabled"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsEnabledProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsEnabled"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsEnabledProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsEnabledProperty&gt;</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is enabled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果该元素已启用;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.IsEnabled*&gt; property on this element changes.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.IsEnabled*&gt;此元素的更改的属性。&lt;/xref:System.Windows.ContentElement.IsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Gets a value that becomes the return value of &lt;xref:System.Windows.ContentElement.IsEnabled*&gt; in derived classes.</source>
          <target state="translated">获取一个值，将成为的返回值&lt;xref:System.Windows.ContentElement.IsEnabled*&gt;在派生类中。&lt;/xref:System.Windows.ContentElement.IsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element is enabled; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果该元素已启用;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsEnabled*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsEnabled*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsEnabled*&gt;</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether this element has logical focus.</source>
          <target state="translated">获取一个值，确定此元素是否具有逻辑焦点。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</source>
          <target state="translated">如果应用程序中有多个焦点分支，例如，菜单的内容和应用程序的其余部分之间，逻辑焦点将与键盘焦点可能会与不同。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</source>
          <target state="translated">在此方案中，键盘焦点仅可在应用程序 UI 的一个元素，但是，其他焦点分支中的某些元素仍可能保留逻辑焦点。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>For more information on logical focus, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关逻辑焦点的详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>和<bpt id="p2">[</bpt>焦点概述<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsFocusedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsFocusedProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsFocusedProperty&gt;</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element has logical focus; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此元素具有逻辑焦点，则否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsFocused*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsFocused*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsFocused*&gt;</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether an input method system, such as an <ph id="ph1">[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]</ph>, is enabled for processing the input to this element.</source>
          <target state="translated">获取一个值，该值指示是否输入的法系统，如<ph id="ph1">[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]</ph>，可用于处理此元素的输入。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>This property returns the value that is returned by the attached property &lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt; for the currently enabled input methods (keyboard, speech, and other input devices).</source>
          <target state="translated">此属性返回的附加属性返回的值&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt;的当前已启用输入法 （键盘、 语音和其他输入的设备）。&lt;/xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if an input method is active; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果输入的法处于活动状态，则否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The default value of the underlying attached property is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>; however, this value is influenced by the state of input methods at runtime.</source>
          <target state="translated">基础附加属性的默认值是<bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>; 但是，此值会影响在运行时的输入法状态。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether this element has keyboard focus.</source>
          <target state="translated">获取一个值，该值指示此元素是否具有键盘焦点。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocused"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusedProperty&gt;</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element has keyboard focus; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此元素具有键盘焦点，则否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.IsKeyboardFocused*&gt; property changes on this element.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.IsKeyboardFocused*&gt;针对此元素的属性更改。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocused*&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsKeyboardFocused*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsKeyboardFocused*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocused*&gt;</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.</source>
          <target state="translated">获取一个值，该值指示键盘焦点任意位置是否位于元素或子元素内。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Changes to the value of this property typically raise the &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt; event, unless a derived class has overridden &lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt; to suppress the event.</source>
          <target state="translated">更改此属性的值通常引发&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;事件，除非派生的类已重写&lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt;以禁止此事件。&lt;/xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt; &lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>You do not set this property directly, but you can set the focus to the element by calling &lt;xref:System.Windows.ContentElement.Focus%2A&gt;, or by making a &lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt; request.</source>
          <target state="translated">不能直接，设置此属性，但你可以通过调用将焦点设置到元素&lt;xref:System.Windows.ContentElement.Focus%2A&gt;，或通过使&lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt;请求。&lt;/xref:System.Windows.ContentElement.MoveFocus%2A&gt; &lt;/xref:System.Windows.ContentElement.Focus%2A&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Either of these method calls might change this property value.</source>
          <target state="translated">这些方法调用任一可能会更改此属性的值。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocusWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsKeyboardFocusWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty&gt;</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if keyboard focus is on the element or its child elements; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果键盘焦点在元素或其子元素;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the IsKeyboardFocusWithinChanged property changes on this element.</source>
          <target state="translated">当针对此元素 IsKeyboardFocusWithinChanged 属性的值更改时发生。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithin*&gt;</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the mouse is captured by this element.</source>
          <target state="translated">获取一个值，该值指示此元素是否捕获鼠标。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Mouse capture state is related to in-process drag-and-drop operations.</source>
          <target state="translated">鼠标捕获状态与相关进程内拖放操作。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsMouseCapturedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsMouseCapturedProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsMouseCapturedProperty&gt;</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element has mouse capture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果元素具有鼠标捕获，则为否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.IsMouseCaptured*&gt; property changes on this element.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.IsMouseCaptured*&gt;针对此元素的属性更改。&lt;/xref:System.Windows.ContentElement.IsMouseCaptured*&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsMouseCaptured*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsMouseCaptured*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsMouseCaptured*&gt;</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.</source>
          <target state="translated">获取一个值，确定鼠标捕获由此元素还是其元素树中的子元素持有。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty&gt;</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if this element or a contained element has mouse capture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果此元素或包含的元素具有鼠标捕获，则为否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptureWithinProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> changes on this element.</source>
          <target state="translated">发生时的值<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptureWithinProperty"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此元素上的更改。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsMouseCaptureWithin*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsMouseCaptureWithin*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsMouseCaptureWithin*&gt;</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">获取一个值，该值指示是否将鼠标指针的位置对应于命中测试结果，考虑元素组合。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Unlike &lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;, this property is only <ph id="ph1">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.</source>
          <target state="translated">与不同&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;，此属性才<ph id="ph1">`true`</ph>如果鼠标指针位于 literal 元素-与命中测试。 对&lt;/xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">而如果鼠标指针悬停在子元素上，具体而言，鼠标指针所包含的元素的更深层的模板和合成，元素，此属性将为<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">除非你知道如何控件的组合 （例如，你使用此属性在自定义控件模板中的控件，你定义），此属性可能会返回意外的结果。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>For most scenarios where you are not authoring controls, use &lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt; instead.</source>
          <target state="translated">对于大多数情况下不创作控件的情况，使用&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;相反。&lt;/xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>If the mouse is captured by this element, and this property is <ph id="ph1">`true`</ph> at time of capture, this property will continue to return <ph id="ph2">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.</source>
          <target state="translated">如果此元素是否捕获了鼠标，并且此属性是<ph id="ph1">`true`</ph>在捕获时，此属性将继续返回<ph id="ph2">`true`</ph>丢失鼠标捕获并且鼠标指针不位于其边界之前。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the mouse pointer is over the same element result as a hit test; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果鼠标指针位于与命中测试; 相同的元素结果否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver*&gt; property changes on this element.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver*&gt;针对此元素的属性更改。&lt;/xref:System.Windows.ContentElement.IsMouseDirectlyOver*&gt;</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsMouseDirectlyOver*&gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).</source>
          <target state="translated">获取一个值，该值指示鼠标指针是否位于此元素 （包括可视化子元素或其控件组合）。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</source>
          <target state="translated">尽管类似"等效于"事件不存在，将执行多个类似事件。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For example, you can use &lt;xref:System.Windows.ContentElement.MouseEnter&gt;, &lt;xref:System.Windows.ContentElement.MouseMove&gt;, and &lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;.</source>
          <target state="translated">例如，你可以使用&lt;xref:System.Windows.ContentElement.MouseEnter&gt;， &lt;xref:System.Windows.ContentElement.MouseMove&gt;，和&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;。&lt;/xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt; &lt;/xref:System.Windows.ContentElement.MouseMove&gt; &lt;/xref:System.Windows.ContentElement.MouseEnter&gt;</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>If this element captures the mouse, this property remains <ph id="ph1">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.</source>
          <target state="translated">如果此元素捕获鼠标，则此属性保持<ph id="ph1">`true`</ph>丢失鼠标捕获并且鼠标指针离开元素边界之前。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsMouseOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsMouseOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsMouseOverProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsMouseOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if mouse pointer is over the element or its child elements; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果鼠标指针位于元素或其子元素;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsMouseOver*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsMouseOver*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsMouseOver*&gt;</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the stylus is captured to this element.</source>
          <target state="translated">获取一个值，该值指示是否将触笔捕获到此元素。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsStylusCapturedProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptured"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsStylusCapturedProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsStylusCapturedProperty&gt;</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the element has stylus capture; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果元素具有触笔捕获，则为否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.IsStylusCaptured*&gt; property changes on this element.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.IsStylusCaptured*&gt;针对此元素的属性更改。&lt;/xref:System.Windows.ContentElement.IsStylusCaptured*&gt;</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsStylusCaptured*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsStylusCaptured*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsStylusCaptured*&gt;</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.</source>
          <target state="translated">获取一个值，确定是否包括子元素和控件组合此元素具有触笔捕获。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusCaptureWithin"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty&gt;</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if stylus capture is held within this element; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果触笔捕获保留在此元素;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin*&gt; property changes on this element.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin*&gt;针对此元素的属性更改。&lt;/xref:System.Windows.ContentElement.IsStylusCaptureWithin*&gt;</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsStylusCaptureWithin*&gt;</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</source>
          <target state="translated">获取一个值，该值指示是否触笔的位置对应于命中测试结果，考虑元素组合。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Unlike &lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;, this property is only <ph id="ph1">`true`</ph> if the stylus is over the element.</source>
          <target state="translated">与不同&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;，此属性才<ph id="ph1">`true`</ph>如果触笔位于元素上。&lt;/xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be <ph id="ph1">`false`</ph>.</source>
          <target state="translated">如果触笔改为通过子元素或属于某个元素的更深入地组合的元素，此属性将<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</source>
          <target state="translated">除非你知道如何控件的组合 （例如，你使用此属性在自定义控件模板中的控件，你定义），此属性可能会返回意外的结果。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For most scenarios where you are not authoring controls, use &lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt; instead.</source>
          <target state="translated">对于大多数情况下不创作控件的情况，使用&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;相反。&lt;/xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>If this element has stylus capture and this property is <ph id="ph1">`true`</ph> at the time of capture, this property remains <ph id="ph2">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.</source>
          <target state="translated">如果此元素具有触笔捕获，并且此属性为<ph id="ph1">`true`</ph>捕获时，此属性将保持<ph id="ph2">`true`</ph>丢失触笔捕获并且触笔不到其边界之前。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusDirectlyOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stylus is over the same element as a hit test; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果触笔与命中测试; 位于同一元素否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Occurs when the value of the &lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver*&gt; property changes on this element.</source>
          <target state="translated">发生时的值&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver*&gt;针对此元素的属性更改。&lt;/xref:System.Windows.ContentElement.IsStylusDirectlyOver*&gt;</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>This member is a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.</source>
          <target state="translated">此成员是<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>事件中，不是路由的事件。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsStylusDirectlyOver*&gt;</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the stylus is located over this element (including visual child elements).</source>
          <target state="translated">获取一个值，该值指示触笔是否位于此元素 （包括可视化子元素）。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>If this element has stylus capture, this property remains <ph id="ph1">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.</source>
          <target state="translated">如果此元素具有触笔捕获，则此属性保持<ph id="ph1">`true`</ph>直到触笔捕获为丢失，指针超出界限。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Dependency Property Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.IsStylusOverProperty&gt;|   |Metadata properties set to <ph id="ph1">`true`</ph>|None|</source>
          <target state="translated"><bpt id="p1">&lt;a name="dependencyPropertyInfo_IsStylusOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.IsStylusOverProperty&gt;|  |元数据属性设置为<ph id="ph1">`true`</ph>|None |&lt;/xref:System.Windows.ContentElement.IsStylusOverProperty&gt;</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the stylus is over the element or its child elements; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果触笔位于元素或其子元素;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">默认值是<bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Identifies the &lt;xref:System.Windows.ContentElement.IsStylusOver*&gt; dependency property.</source>
          <target state="translated">标识&lt;xref:System.Windows.ContentElement.IsStylusOver*&gt;依赖项属性。&lt;/xref:System.Windows.ContentElement.IsStylusOver*&gt;</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed while focus is on this element.</source>
          <target state="translated">当焦点位于此元素上时按下某个键时发生。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">密钥处理与其他平台功能，例如发出命令和文本组合进行交互。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The KeyDown event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">KeyDown 事件是可能无法如期出现在某些控件上的较低级别文本输入的事件。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">这是文本的因为某些控件有控件组合或提供的更高级别的版本的类处理输入处理和相关事件。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event for this class so that KeyDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;附加此类事件，以便 KeyDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the KeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 KeyDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_KeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.KeyDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_KeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.KeyDownEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;.&lt;/xref:System.Windows.ContentElement.PreviewKeyDown&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.ContentElement.KeyDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.KeyDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.KeyDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released while focus is on this element.</source>
          <target state="translated">当焦点位于此元素上时松开某个键时发生。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event for this class so that  KeyUp is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;附加此类事件，以便 KeyUp 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the KeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">附加到的 KeyUp 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_KeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.KeyUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_KeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.KeyUpEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;.&lt;/xref:System.Windows.ContentElement.PreviewKeyUp&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.ContentElement.KeyUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.KeyUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.KeyUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses logical focus.</source>
          <target state="translated">此元素丢失逻辑焦点时发生。</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</source>
          <target state="translated">如果有意通过某个方法调用时强制焦点，而前一个键盘焦点位于不同的范围内，则逻辑焦点将与键盘焦点不同。</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>In this scenario, keyboard focus remains where it is, and the element where a &lt;xref:System.Windows.ContentElement.Focus%2A&gt; method is called still gets logical focus.</source>
          <target state="translated">在这种情况下、 其所在的键盘焦点保持和元素其中&lt;xref:System.Windows.ContentElement.Focus%2A&gt;调用方法仍获取逻辑焦点。&lt;/xref:System.Windows.ContentElement.Focus%2A&gt;</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>A more precise interpretation of this event is that it is raised when the value of the &lt;xref:System.Windows.ContentElement.IsFocused%2A&gt; property of an element in the route changes from <ph id="ph1">`true`</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">此事件的更精确地解释是它时引发的值&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;路线中的元素的属性更改从<ph id="ph1">`true`</ph>到<ph id="ph2">`false`</ph>。&lt;/xref:System.Windows.ContentElement.IsFocused%2A&gt;</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that gained focus.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定实际获得焦点的元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.LostFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.RoutedEventHandler&gt;|      -   There is no corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.LostFocusEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.RoutedEventHandler&gt;|     -没有相应隧道事件。&lt;/xref:System.Windows.RoutedEventHandler&gt; &lt;/xref:System.Windows.ContentElement.LostFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnLostFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">在此元素不再聚焦于键盘时发生。</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost focus.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定实际失去焦点的元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that LostKeyboardFocus is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;附加此类事件，以便 LostKeyboardFocus 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the LostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 LostKeyboardFocus 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.LostKeyboardFocusEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.LostKeyboardFocusEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;.&lt;/xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.ContentElement.LostKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses mouse capture.</source>
          <target state="translated">此元素丢失鼠标捕获时发生。</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</source>
          <target state="translated">在元素捕获鼠标，它会接收鼠标输入，即使在指针位于超出界限。</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>The mouse is typically captured only during drag-and-drop operations.</source>
          <target state="translated">通常仅在拖放操作期间捕获了鼠标。</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，丢失捕获的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost capture.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定丢失捕获的实际元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event for this class, so that LostMouseCapture is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;附加此类事件，以便 LostMouseCapture 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the LostMouseCapture event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 LostMouseCapture 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.LostMouseCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostMouseCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.LostMouseCaptureEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -没有定义相应隧道事件。&lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.ContentElement.LostMouseCaptureEvent&gt;</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostMouseCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostMouseCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses stylus capture.</source>
          <target state="translated">此元素丢失触笔捕获时发生。</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</source>
          <target state="translated">当元素捕获触笔时，它会接收触笔输入，即使在指针位于超出界限。</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>The stylus is typically captured only during drag-and-drop operations.</source>
          <target state="translated">通常，将触笔捕获仅在拖放操作过程。</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost focus.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定实际失去焦点的元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event for this class, so that LostStylusCapture is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;附加此类事件，以便 LostStylusCapture 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the LostStylusCapture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 LostStylusCapture 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.LostStylusCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostStylusCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.LostStylusCaptureEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -没有定义相应隧道事件。&lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.LostStylusCaptureEvent&gt;</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostStylusCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostStylusCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Occurs when this element loses a touch capture.</source>
          <target state="translated">此元素丢失触摸屏输入捕获时发生。</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.LostTouchCaptureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.LostTouchCaptureEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -重写&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.LostTouchCaptureEvent&gt;</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">指针位于此元素上并且按下任何鼠标按钮时发生。</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event for this class, so that MouseDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;附加此类事件，以便 MouseDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 MouseDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>The MouseDown event is often raised together with either &lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt; or &lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">MouseDown 事件通常一起引发&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;或&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;，这对应于按下的某个之一的两个标准鼠标按钮。&lt;/xref:System.Windows.ContentElement.MouseRightButtonDown&gt; &lt;/xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt; and &lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;和&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;事件到达事件路由中的此元素。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.MouseRightButtonDown&gt;&lt;/xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt; or &lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;.</source>
          <target state="translated">有关&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;或&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;。&lt;/xref:System.Windows.ContentElement.MouseRightButtonDown&gt; &lt;/xref:System.Windows.ContentElement.MouseLeftButtonDown&gt; ，请参见备注</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  A few &lt;xref:System.Windows.ContentElement&gt; derived classes that have control-like behavior, for example, &lt;xref:System.Windows.Documents.Hyperlink&gt;, might have inherent class handling for mouse button events.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 几&lt;xref:System.Windows.ContentElement&gt;派生类具有类似于控件的行为，例如， &lt;xref:System.Windows.Documents.Hyperlink&gt;，可能必须固有类鼠标按钮事件处理。&lt;/xref:System.Windows.Documents.Hyperlink&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">按下事件鼠标左键是最可能的事件，能够在控件中处理的类。</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>The class handling often marks the underlying &lt;xref:System.Windows.Input.Mouse&gt; class event as handled.</source>
          <target state="translated">类通常处理标记基础&lt;xref:System.Windows.Input.Mouse&gt;类事件为已处理。&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">一旦事件被标记为已处理，其他实例处理程序附加到该元素通常不会引发。</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">通常也不会引发的任何其他类或实例处理程序附加到冒泡方向向 UI 树的根节点中的元素。</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive MouseDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:      -   Attach handlers for the &lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt; event, which is not marked as handled by the controls.</source>
          <target state="translated">你可以解决的问题，中前面的重要说明所述，服务仍然收到按下事件具有类处理通过使用这些解决方案的派生类上的鼠标左键的 MouseDown 事件:-附加处理程序&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;未标记为已由控件处理的事件。&lt;/xref:System.Windows.ContentElement.PreviewMouseDown&gt;</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">请注意，由于这是预览事件，则路由从根开始并挖掘到控件。</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>-   Register a handler on the control procedurally by calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt; and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">-注册处理程序在控件上的按程序通过调用&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;并选择使处理程序能够侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseDownEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;.&lt;/xref:System.Windows.ContentElement.PreviewMouseDown&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer enters the bounds of this element.</source>
          <target state="translated">当鼠标指针进入此元素的边界时发生。</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>MouseEnter is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated">MouseEnter 是<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>使用直接的事件处理路由策略。</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Although MouseEnter tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the &lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt; property value has changed from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph> on this element.</source>
          <target state="translated">尽管 MouseEnter 跟踪当鼠标指针进入元素的边界内，此事件更确切地报告&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;属性值已更改，不再<ph id="ph1">`false`</ph>到<ph id="ph2">`true`</ph>针对此元素。&lt;/xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event for this class, so that MouseEnter is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;附加此类事件，以便 MouseEnter 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseEnter event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 MouseEnter 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseEnterEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseEnterEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseEnter%2A&gt; &lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseEnterEvent&gt;</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer leaves the bounds of this element.</source>
          <target state="translated">当鼠标指针离开此元素的边界时发生。</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>MouseLeave is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated">MouseLeave 是<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>使用直接的事件处理路由策略。</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Although MouseLeave tracks when the mouse leaves an element, this event more literally reports that the &lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt; property value has changed from <ph id="ph1">`true`</ph> to <ph id="ph2">`false`</ph> on this element.</source>
          <target state="translated">尽管 MouseLeave 跟踪鼠标离开某个元素时，此事件更确切地报告&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;属性值已更改，不再<ph id="ph1">`true`</ph>到<ph id="ph2">`false`</ph>针对此元素。&lt;/xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event for this class, so that MouseLeave is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;附加此类事件，以便 MouseLeave 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseLeave event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 MouseLeave 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseLeaveEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseLeaveEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseLeave%2A&gt; &lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseLeaveEvent&gt;</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">鼠标指针位于此元素上并且按下鼠标左键时发生。</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  A few &lt;xref:System.Windows.ContentElement&gt; derived classes that have control-like behavior, for example, &lt;xref:System.Windows.Documents.Hyperlink&gt;, might have inherent class handling for mouse button events.</source>
          <target state="translated">1&gt; <ph id="ph1">[!IMPORTANT]</ph>&amp;1;&gt; 几&lt;xref:System.Windows.ContentElement&gt;派生类具有类似于控件的行为，例如， &lt;xref:System.Windows.Documents.Hyperlink&gt;，可能必须固有类鼠标按钮事件处理。&lt;/xref:System.Windows.Documents.Hyperlink&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>The left mouse button down event is the most likely event to have class handling in a control.</source>
          <target state="translated">按下事件鼠标左键是最可能的事件，能够在控件中处理的类。</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>The class handling often marks the underlying &lt;xref:System.Windows.Input.Mouse&gt; class event as handled.</source>
          <target state="translated">类通常处理标记基础&lt;xref:System.Windows.Input.Mouse&gt;类事件为已处理。&lt;/xref:System.Windows.Input.Mouse&gt;</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</source>
          <target state="translated">一旦事件被标记为已处理，其他实例处理程序附加到该元素通常不会引发。</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</source>
          <target state="translated">通常也不会引发的任何其他类或实例处理程序附加到冒泡方向向 UI 树的根节点中的元素。</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>You can resolve the issue that is outlined in the preceding Important and still receive MouseLeftButtonDown events for left mouse button down events on a derived class that has class handling by using either of these solutions:      -   Attach handlers for the &lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt; event, which is not marked as handled by the controls.</source>
          <target state="translated">你可以解决的问题，中前面的重要说明所述，服务仍然收到 MouseLeftButtonDown 鼠标左键按下具有类处理通过使用这些解决方案的派生类上的事件的事件:-附加处理程序&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;未标记为已由控件处理的事件。&lt;/xref:System.Windows.ContentElement.PreviewMouseDown&gt;</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</source>
          <target state="translated">请注意，由于这是预览事件，则路由从根开始并挖掘到控件。</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>-   Register a handler on the control procedurally by calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt; and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</source>
          <target state="translated">-注册处理程序在控件上的按程序通过调用&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;并选择使处理程序能够侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseLeftButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseLeftButtonDownEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseLeftButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针位于此元素上并释放鼠标左键时发生。</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseLeftButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseLeftButtonUpEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseLeftButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer moves while over this element.</source>
          <target state="translated">当鼠标指针移到此元素时发生。</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event for this class, so that MouseMove is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;附加此类事件，以便 MouseMove 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 MouseMove 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseMoveEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;.&lt;/xref:System.Windows.ContentElement.PreviewMouseMove&gt; &lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">鼠标指针位于此元素上并且按下鼠标右键时发生。</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Right button mouse events frequently have native handling in application scenarios.</source>
          <target state="translated">右侧的按钮的鼠标事件，通常在应用程序方案具有本机处理。</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>For instance, a right mouse button down might display a context menu.</source>
          <target state="translated">例如，向下的鼠标右键按钮可能显示上下文菜单。</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">请参阅<bpt id="p1">[</bpt>ContextMenu 概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseRightButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseRightButtonDownEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseRightButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针位于此元素上并释放鼠标右键时发生。</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseRightButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseRightButtonUpEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseRightButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is released over this element.</source>
          <target state="translated">在此元素上释放任何鼠标按钮时发生。</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event for this class, so that MouseUp is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;附加此类事件，以便 MouseUp 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 MouseUp 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>The MouseUp event is often raised together with either &lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt; or &lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;, which correspond to a release of one of the two standard mouse buttons.</source>
          <target state="translated">MouseUp 事件通常一起引发&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;或&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;，这对应于两个标准鼠标按钮之一的版本。&lt;/xref:System.Windows.ContentElement.MouseRightButtonUp&gt; &lt;/xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt; and &lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;和&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;事件到达事件路由中的此元素。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.MouseRightButtonUp&gt;&lt;/xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt; or &lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;.</source>
          <target state="translated">有关&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;或&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;。&lt;/xref:System.Windows.ContentElement.MouseRightButtonUp&gt; &lt;/xref:System.Windows.ContentElement.MouseLeftButtonUp&gt; ，请参见备注</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseUpEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;.&lt;/xref:System.Windows.ContentElement.PreviewMouseUp&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the MouseWheel event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">焦点或鼠标捕获优先于其中鼠标指针位于;因此，如果你将鼠标滚轮事件收到的已设定焦点或捕获元素时，鼠标指针实际上可能通过另一个元素。</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event for this class, so that MouseWheel is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;附加此类事件，以便鼠标滚轮摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the MouseWheel event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的鼠标滚轮事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_MouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.MouseWheelEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_MouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.MouseWheelEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;.&lt;/xref:System.Windows.ContentElement.PreviewMouseWheel&gt; &lt;/xref:System.Windows.Input.MouseWheelEventHandler&gt; &lt;/xref:System.Windows.ContentElement.MouseWheelEvent&gt;</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseWheel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseWheel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>Attempts to move focus from this element to another element.</source>
          <target state="translated">尝试将从此元素的焦点移到另一个元素。</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</source>
          <target state="translated">若要将焦点移动的方向由指南方向，将被解释为此元素的可视父级的组织结构中指定。</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Make sure you check the return value of this method.</source>
          <target state="translated">请确保检查此方法的返回值。</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>A return value of <ph id="ph1">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</source>
          <target state="translated">返回值<ph id="ph1">`false`</ph>如果遇到控件的组合所定义的制表位遍历并且遍历请求未请求包装可能会返回。</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</source>
          <target state="translated">遍历请求，它包含一个属性，该值指示是一种模式中现有的 tab 键顺序或一个方向移动直观地遍历。</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the requested traversal was performed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果执行了请求的遍历;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Returns class-specific <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementations for the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph> infrastructure.</source>
          <target state="translated">返回特定于类的<bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实现<ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]</ph>基础结构。</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>The type-specific <bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> implementation.</source>
          <target state="translated">特定于类型的<bpt id="p1">&lt;xref href="System.Windows.Automation.Peers.AutomationPeer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>实现。</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event by using the event data provided.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>通过使用提供的事件数据的路由的事件。</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>This event data must contain the identifier for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">此事件数据必须包含的标识符<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch is captured to this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.GotTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>触摸屏输入捕获到此元素时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>The OnGotTouchCapture method has no default implementation.</source>
          <target state="translated">OnGotTouchCapture 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Override OnGotTouchCapture in a derived class to handle the &lt;xref:System.Windows.ContentElement.GotTouchCapture&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnGotTouchCapture&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;事件。&lt;/xref:System.Windows.ContentElement.GotTouchCapture&gt;</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnGotTouchCapture method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnGotTouchCapture 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发事件。</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt; dependency property changes.</source>
          <target state="translated">此虚方法引发时的值&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;依赖项属性更改。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虚方法首先引发，并可以处理所需的事件数据。</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">则&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;与该相同的事件数据实例引发事件。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Notice that the  &lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt; event is not a routed event.</source>
          <target state="translated">请注意，&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;事件不是路由的事件。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，你不能将其标记为已处理的类处理程序中。</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Invoked just before the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised by this element.</source>
          <target state="translated">前调用<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsKeyboardFocusWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此元素即将引发事件。</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt; dependency property changes its value.</source>
          <target state="translated">此虚方法引发时的值&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;依赖项属性更改其值。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虚方法首先引发，并可以处理所需的事件数据。</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">则&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;与该相同的事件数据实例引发事件。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt; event is not a routed event.</source>
          <target state="translated">请注意，&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;事件不是路由的事件。&lt;/xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，你不能将其标记为已处理的类处理程序中。</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发事件。</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt; dependency property changes its value.</source>
          <target state="translated">此虚方法引发时的值&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;依赖项属性更改其值。&lt;/xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虚方法首先引发，并可以处理所需的事件数据。</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">则&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;与该相同的事件数据实例引发事件。&lt;/xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt; event is not a routed event.</source>
          <target state="translated">请注意，&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;事件不是路由的事件。&lt;/xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，你不能将其标记为已处理的类处理程序中。</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发事件。</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsMouseDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发事件。</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt; dependency property changes its value.</source>
          <target state="translated">此虚方法引发时的值&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;依赖项属性更改其值。&lt;/xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虚方法首先引发，并可以处理所需的事件数据。</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">则&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;与该相同的事件数据实例引发事件。&lt;/xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt; event is not a routed event.</source>
          <target state="translated">请注意，&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;事件不是路由的事件。&lt;/xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，你不能将其标记为已处理的类处理程序中。</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsStylusCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsStylusCapturedChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发事件。</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt; dependency property changes its value.</source>
          <target state="translated">此虚方法引发时的值&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;依赖项属性更改其值。&lt;/xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虚方法首先引发，并可以处理所需的事件数据。</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">则&lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;与该相同的事件数据实例引发事件。&lt;/xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">请注意，事件不路由的事件。</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，你不能将其标记为已处理的类处理程序中。</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsStylusCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsStylusCaptureWithinChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发事件。</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt; dependency property changes its value.</source>
          <target state="translated">此虚方法引发时的值&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;依赖项属性更改其值。&lt;/xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虚方法首先引发，并可以处理所需的事件数据。</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">则&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;与该相同的事件数据实例引发事件。&lt;/xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">请注意，事件不路由的事件。</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Therefore, you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此，你不能将其标记为已处理的类处理程序中。</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsStylusDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.IsStylusDirectlyOverChanged"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发事件。</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>This virtual method is raised when the value of the &lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt; dependency property changes its value.</source>
          <target state="translated">此虚方法引发时的值&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;依赖项属性更改其值。&lt;/xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>The virtual method is raised first and can manipulate the event data as necessary.</source>
          <target state="translated">虚方法首先引发，并可以处理所需的事件数据。</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Then the &lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt; event is raised with that same event data instance.</source>
          <target state="translated">则&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;与该相同的事件数据实例引发事件。&lt;/xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>Notice that the event is not a routed event.</source>
          <target state="translated">请注意，事件不路由的事件。</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>Therefore you cannot mark it as handled in the class handler.</source>
          <target state="translated">因此你无法将其标记为已处理的类处理程序中。</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DependencyPropertyChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Raises the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event by using the event data that is provided.</source>
          <target state="translated">引发<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>使用提供的事件数据的路由的事件。</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>This event data must contain the identifier for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event.</source>
          <target state="translated">此事件数据必须包含的标识符<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>事件。</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when this element loses a touch capture.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.LostTouchCapture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>此元素丢失触摸屏输入捕获时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>The OnLostTouchCapture method has no default implementation.</source>
          <target state="translated">OnLostTouchCapture 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Override OnLostTouchCapture in a derived class to handle the &lt;xref:System.Windows.ContentElement.LostTouchCapture&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnLostTouchCapture&lt;xref:System.Windows.ContentElement.LostTouchCapture&gt;事件。&lt;/xref:System.Windows.ContentElement.LostTouchCapture&gt;</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnLostTouchCapture method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnLostTouchCapture 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>This event data reports details about the mouse button that was pressed and the handled state.</source>
          <target state="translated">此事件数据报告有关按下鼠标按钮和已处理的状态的详细信息。</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised on this element.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>针对此元素引发附加的事件。</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">此方法的目的是类似于<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">在这种情况下匹配的事件是具有直接路由策略的路由的事件。</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised on this element.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>针对此元素引发附加的事件。</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to the <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">此方法的目的是类似于<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event, with a direct routing strategy.</source>
          <target state="translated">在这种情况下匹配的事件是具有直接路由策略的路由的事件。</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event is raised on this element.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>针对此元素引发路由的事件。</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;事件看起来进行冒泡路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;是基础是气泡，路由的事件，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;.&lt;/xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnMouseLeftButtonDown.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnMouseLeftButtonDown。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">你是否选择调用基实现取决于你的方案。</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseLeftButtonDown.</source>
          <target state="translated">无法调用基禁用基实现，也应调用 OnMouseLeftButtonDown 该鼠标事件的默认输入的处理。</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Button&gt; and override OnMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event.</source>
          <target state="translated">例如，你可以从派生&lt;xref:System.Windows.Controls.Button&gt;和而不会调用基实现派生类中替代 OnMouseLeftButtonDown; 但是，重写禁用&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;事件。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">事件数据报告称已按下鼠标左键。</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;事件看起来进行冒泡路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;是基础是气泡，路由的事件，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;.&lt;/xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnMouseLeftButtonUp.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnMouseLeftButtonUp。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">事件数据报告已松开鼠标左键。</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;事件看起来进行冒泡路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;是基础是气泡，路由的事件，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;.&lt;/xref:System.Windows.ContentElement.MouseRightButtonDown&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnMouseRightButtonDown.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnMouseRightButtonDown。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">你是否选择调用基实现取决于你的方案。</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnMouseRightButtonDown.</source>
          <target state="translated">无法调用基禁用基实现，也应调用 OnMouseRightButtonDown 该鼠标事件的默认输入的处理。</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Control&gt; and override OnMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the &lt;xref:System.Windows.Controls.Control&gt; default behavior.</source>
          <target state="translated">例如，你可以从派生&lt;xref:System.Windows.Controls.Control&gt;和在而无需调用基实现派生类中重写 OnMouseRightButtonDown; 但是，此替代禁用上下文菜单上的服务控件，都是一部分的&lt;xref:System.Windows.Controls.Control&gt;默认行为。&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">事件数据报告称已按下鼠标右键按钮。</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.MouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt; event appears to travel a bubbling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;事件看起来进行冒泡路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; is the underlying event that is bubble routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;是基础是气泡，路由的事件，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;.&lt;/xref:System.Windows.ContentElement.MouseRightButtonUp&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnMouseRightButtonUp.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnMouseRightButtonUp。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">事件数据报告已松开了鼠标右键按钮。</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>The event data reports that the mouse button was released.</source>
          <target state="translated">事件数据报告已松开鼠标按钮。</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.DragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.GiveFeedbackEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.KeyboardFocusChangedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>The event data reports that one or more mouse buttons were pressed.</source>
          <target state="translated">事件数据报告称已按下一个或多个鼠标按钮。</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;事件看起来进行隧道路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;是基础事件即隧道路由，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;.&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnPreviewMouseLeftButtonDown.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnPreviewMouseLeftButtonDown。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">你是否选择调用基实现取决于你的方案。</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseLeftButtonDown.</source>
          <target state="translated">无法调用基禁用基实现，也应调用 OnPreviewMouseLeftButtonDown 该鼠标事件的默认输入的处理。</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Button&gt; and override OnPreviewMouseLeftButtonDown in your derived class without calling the base implementation; however, this override disables the &lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; event.</source>
          <target state="translated">例如，你可以从派生&lt;xref:System.Windows.Controls.Button&gt;和而不会调用基实现派生类中替代 OnPreviewMouseLeftButtonDown; 但是，重写禁用&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;事件。&lt;/xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was pressed.</source>
          <target state="translated">事件数据报告称已按下鼠标左键。</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;事件看起来进行隧道路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;是基础事件即隧道路由，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;.&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnPreviewMouseLeftButtonUp.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnPreviewMouseLeftButtonUp。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>The event data reports that the left mouse button was released.</source>
          <target state="translated">事件数据报告已松开鼠标左键。</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;事件看起来进行隧道路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;是基础事件即隧道路由，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;.&lt;/xref:System.Windows.ContentElement.MouseRightButtonDown&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnPreviewMouseRightButtonDown.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnPreviewMouseRightButtonDown。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>Alternatively, you can override this method in order to change event handling for a specific mouse state.</source>
          <target state="translated">或者，可以以更改处理特定鼠标状态的事件来重写此方法。</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Whether you choose to call the base implementation depends on your scenario.</source>
          <target state="translated">你是否选择调用基实现取决于你的方案。</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke OnPreviewMouseRightButtonDown.</source>
          <target state="translated">无法调用基禁用基实现，也应调用 OnPreviewMouseRightButtonDown 该鼠标事件的默认输入的处理。</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>For example, you can derive from &lt;xref:System.Windows.Controls.Control&gt; and override OnPreviewMouseRightButtonDown in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the &lt;xref:System.Windows.Controls.Control&gt; default behavior.</source>
          <target state="translated">例如，你可以从派生&lt;xref:System.Windows.Controls.Control&gt;和在而无需调用基实现派生类中重写 OnPreviewMouseRightButtonDown; 但是，此替代禁用上下文菜单上的服务控件，都是一部分的&lt;xref:System.Windows.Controls.Control&gt;默认行为。&lt;/xref:System.Windows.Controls.Control&gt; &lt;/xref:System.Windows.Controls.Control&gt;</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was pressed.</source>
          <target state="translated">事件数据报告称已按下鼠标右键按钮。</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt; event appears to travel a tunneling route but actually travels in an indirect way.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;事件看起来进行隧道路由，但实际上是以的间接方法。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; is the underlying event that is tunnel routed, and each &lt;xref:System.Windows.ContentElement&gt; along the event route uses identical handling to raise the direct routed event &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;是基础事件即隧道路由，并&lt;xref:System.Windows.ContentElement&gt;沿着事件路由使用相同处理，以引发直接路由的事件&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;.&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;处理&lt;/xref:System.Windows.ContentElement&gt;每个&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>Although you can mark the &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt; event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</source>
          <target state="translated">尽管您可以将标记&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>The default implementation for general mouse event handling in &lt;xref:System.Windows.ContentElement&gt; listens for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; and converts it to an appropriate local event.</source>
          <target state="translated">常规鼠标事件处理中的默认实现&lt;xref:System.Windows.ContentElement&gt;侦听&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;和将其转换为相应的本地事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>If you want to override this logic, you must create a derived class.</source>
          <target state="translated">如果你想要重写此逻辑，必须创建一个派生的类。</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>In the static constructor of your derived class, register an alternative class handler for &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;.</source>
          <target state="translated">在派生类的静态构造函数中注册的替代类处理程序&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>You cannot change the mouse handling behavior of &lt;xref:System.Windows.ContentElement&gt; by overriding OnPreviewMouseRightButtonUp.</source>
          <target state="translated">无法更改鼠标处理行为&lt;xref:System.Windows.ContentElement&gt;通过重写 OnPreviewMouseRightButtonUp。&lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>The event data reports that the right mouse button was released.</source>
          <target state="translated">事件数据报告已松开了鼠标右键按钮。</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>The event data reports that one or more mouse buttons were released.</source>
          <target state="translated">事件数据报告已释放了一个或多个鼠标按钮。</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.MouseWheelEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch presses this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>当触摸屏输入按下此元素时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>The OnPreviewTouchDown method has no default implementation.</source>
          <target state="translated">OnPreviewTouchDown 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>Override OnPreviewTouchDown in a derived class to handle the &lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnPreviewTouchDown&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;事件。&lt;/xref:System.Windows.ContentElement.PreviewTouchDown&gt;</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnPreviewTouchDown method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnPreviewTouchDown 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>触摸屏输入到此元素内移动时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>The OnPreviewTouchMove method has no default implementation.</source>
          <target state="translated">OnPreviewTouchMove 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>Override OnPreviewTouchMove in a derived class to handle the &lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnPreviewTouchMove&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;事件。&lt;/xref:System.Windows.ContentElement.PreviewTouchMove&gt;</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnPreviewTouchMove method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnPreviewTouchMove 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>触摸屏输入发布到此元素内时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>The OnPreviewTouchUp method has no default implementation.</source>
          <target state="translated">OnPreviewTouchUp 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Override OnPreviewTouchUp in a derived class to handle the &lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnPreviewTouchUp&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;事件。&lt;/xref:System.Windows.ContentElement.PreviewTouchUp&gt;</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnPreviewTouchUp method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnPreviewTouchUp 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.QueryContinueDragEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.QueryCursorEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.QueryCursorEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusButtonEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusDownEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised by this element.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>此元素即将引发附加的事件。</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">此方法的目的是类似于<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在这种情况下匹配的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event is raised by this element.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>此元素即将引发附加的事件。</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>This method has no default implementation.</source>
          <target state="translated">此方法不具有默认实现。</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</source>
          <target state="translated">由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>You may call base either before or after your special handling, depending on your requirements.</source>
          <target state="translated">你可以调用基之前或之后你特殊的处理，具体取决于你的要求。</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>The purpose of this method is similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</source>
          <target state="translated">此方法的目的是类似于<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>In this case the matching event is a routed event.</source>
          <target state="translated">在这种情况下匹配的事件是路由的事件。</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id="ph1">`handledEventsToo`</ph>) from being invoked.</source>
          <target state="translated">将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些<ph id="ph1">`handledEventsToo`</ph>) 调用。</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusSystemGestureEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.StylusEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>Invoked when an unhandled <ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph> attached event reaches an element in its route that is derived from this class.</source>
          <target state="translated">当某个未处理<ph id="ph1">&amp;lt;</ph>xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName<ph id="ph2">&amp;gt;</ph>附加的事件到达派生自此类的其路由中的某个元素。</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
          <target state="translated">实现此方法可为此事件添加类处理。</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Input.TextCompositionEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch presses inside this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>当触摸屏输入按下在此元素时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>The OnTouchDown method has no default implementation.</source>
          <target state="translated">OnTouchDown 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>Override OnTouchDown in a derived class to handle the &lt;xref:System.Windows.ContentElement.TouchDown&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnTouchDown&lt;xref:System.Windows.ContentElement.TouchDown&gt;事件。&lt;/xref:System.Windows.ContentElement.TouchDown&gt;</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchDown method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnTouchDown 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>触摸屏输入将从移动时发生的路由的事件外部到此元素的边界内。</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>The OnTouchEnter method has no default implementation.</source>
          <target state="translated">OnTouchEnter 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>Override OnTouchEnter in a derived class to handle the &lt;xref:System.Windows.ContentElement.TouchEnter&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnTouchEnter&lt;xref:System.Windows.ContentElement.TouchEnter&gt;事件。&lt;/xref:System.Windows.ContentElement.TouchEnter&gt;</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchEnter method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnTouchEnter 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>触摸屏输入将从移动时发生的路由的事件到此元素的边界之外的内部。</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source>The OnTouchLeave method has no default implementation.</source>
          <target state="translated">OnTouchLeave 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>Override OnTouchLeave in a derived class to handle the &lt;xref:System.Windows.ContentElement.TouchLeave&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnTouchLeave&lt;xref:System.Windows.ContentElement.TouchLeave&gt;事件。&lt;/xref:System.Windows.ContentElement.TouchLeave&gt;</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchLeave method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnTouchLeave 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch moves while inside this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>触摸屏输入到此元素内移动时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>The OnTouchMove method has no default implementation.</source>
          <target state="translated">OnTouchMove 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>Override OnTouchMove in a derived class to handle the &lt;xref:System.Windows.ContentElement.TouchMove&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnTouchMove&lt;xref:System.Windows.ContentElement.TouchMove&gt;事件。&lt;/xref:System.Windows.ContentElement.TouchMove&gt;</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchMove method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnTouchMove 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>Provides class handling for the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event that occurs when a touch is released inside this element.</source>
          <target state="translated">提供类处理<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>触摸屏输入发布到此元素内时发生的路由的事件。</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>The OnTouchUp method has no default implementation.</source>
          <target state="translated">OnTouchUp 方法有没有默认实现。</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Override OnTouchUp in a derived class to handle the &lt;xref:System.Windows.ContentElement.TouchUp&gt; event.</source>
          <target state="translated">在派生类来处理中重写 OnTouchUp&lt;xref:System.Windows.ContentElement.TouchUp&gt;事件。&lt;/xref:System.Windows.ContentElement.TouchUp&gt;</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>Be sure to call the base class’s OnTouchUp method so that base classes receive the event.</source>
          <target state="translated">一定要调用基类的 OnTouchUp 方法，以便基类，这些类对事件进行接收。</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.Input.TouchEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>包含事件数据。</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</source>
          <target state="translated">当在派生类中重写，则返回将收到指定的焦点遍历方向的焦点，而实际将焦点移到该元素的元素。</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>The default implementation of this method in this class is incomplete and always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">此方法在此类的默认实现是不完整且始终返回<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>The direction of the requested focus traversal.</source>
          <target state="translated">请求的焦点遍历的方向。</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>The element that would have received focus if &lt;xref:System.Windows.ContentElement.MoveFocus*&gt; were actually invoked.</source>
          <target state="translated">将已收到焦点，如果元素&lt;xref:System.Windows.ContentElement.MoveFocus*&gt;实际调用。&lt;/xref:System.Windows.ContentElement.MoveFocus*&gt;</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag target.</source>
          <target state="translated">在输入的系统报告出现以此元素为拖动目标的基础拖动事件时发生。</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event for this class, so that PreviewDragEnter is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;附加此类事件，以便 PreviewDragEnter 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDragEnter event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewDragEnter 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewDragEnterEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.DragEnter&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewDragEnterEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.DragEnter&gt;.&lt;/xref:System.Windows.ContentElement.DragEnter&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewDragEnterEvent&gt;</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDragEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDragEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the drag origin.</source>
          <target state="translated">在输入的系统报告出现以此元素为拖动起点的基础拖动事件时发生。</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event for this class, so that PreviewDragLeave is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;附加此类事件，以便 PreviewDragLeave 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDragLeave event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewDragLeave 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewDragLeaveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.DragLeave&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewDragLeaveEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.DragLeave&gt;.&lt;/xref:System.Windows.ContentElement.DragLeave&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewDragLeaveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDragLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDragLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drag event with this element as the potential drop target.</source>
          <target state="translated">在输入的系统报告出现以此元素为可能放置目标的基础拖动事件时发生。</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event for this class, so that PreviewDragOver is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;附加此类事件，以便 PreviewDragOver 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDragOver event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewDragOver 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewDragOverEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.DragOver&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDragOver"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewDragOverEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.DragOver&gt;.&lt;/xref:System.Windows.ContentElement.DragOver&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewDragOverEvent&gt;</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDragOver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDragOver"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>Occurs when the input system reports an underlying drop event with this element as the drop target.</source>
          <target state="translated">在输入的系统报告出现以此元素为放置目标的基础放置事件时发生。</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event for this class, so that PreviewDrop is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;附加此类事件，以便 PreviewDrop 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewDrop event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewDrop 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewDropEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.DragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.Drop&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewDrop"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewDropEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.DragEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.Drop&gt;.&lt;/xref:System.Windows.ContentElement.Drop&gt; &lt;/xref:System.Windows.DragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewDropEvent&gt;</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDrop"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewDrop"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>Occurs when a drag-and-drop operation is started.</source>
          <target state="translated">在开始拖放操作时发生。</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>The PreviewGiveFeedback event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated">PreviewGiveFeedback 事件允许拖动事件，以修改鼠标指针的外观，以便为用户可视反馈提供拖放操作期间的源。</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event for this class, so that PreviewGiveFeedback is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;附加此类事件，以便 PreviewGiveFeedback 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewGiveFeedback event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewGiveFeedback 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewGiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.GiveFeedback&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewGiveFeedback"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.GiveFeedbackEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;.&lt;/xref:System.Windows.ContentElement.GiveFeedback&gt; &lt;/xref:System.Windows.GiveFeedbackEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent&gt;</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewGiveFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewGiveFeedback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is focused on this element.</source>
          <target state="translated">当针对此元素聚焦于键盘时发生。</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用隧道路由，具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that has focus.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定实际具有焦点的元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewGotKeyboardFocus is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;附加此类事件，以便 PreviewGotKeyboardFocus 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewGotKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewGotKeyboardFocus 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewGotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewGotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;.&lt;/xref:System.Windows.ContentElement.GotKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewGotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewGotKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed while the keyboard is focused on this element.</source>
          <target state="translated">在此元素聚焦于键盘并且按下某个键时发生。</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">密钥处理与其他平台功能，例如发出命令和文本组合进行交互。</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.KeyDown&gt; event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.KeyDown&gt;事件是一个较低级别文本输入的事件，可能无法如期出现在某些控件上。&lt;/xref:System.Windows.ContentElement.KeyDown&gt;</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">这是文本的因为某些控件有控件组合或提供的更高级别的版本的类处理输入处理和相关事件。</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;附加此类事件，以便 PreviewKeyDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewKeyDown event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewKeyDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewKeyDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.KeyDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewKeyDownEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.KeyDown&gt;.&lt;/xref:System.Windows.ContentElement.KeyDown&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewKeyDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewKeyDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewKeyDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released while the keyboard is focused on this element.</source>
          <target state="translated">在此元素聚焦于键盘并且松开某个键时发生。</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>Key handling interacts with other platform features such as commanding and text composition.</source>
          <target state="translated">密钥处理与其他平台功能，例如发出命令和文本组合进行交互。</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Windows.ContentElement.KeyUp&gt; event is a lower-level text input event that might not behave as expected on certain controls.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.KeyUp&gt;事件是一个较低级别文本输入的事件，可能无法如期出现在某些控件上。&lt;/xref:System.Windows.ContentElement.KeyUp&gt;</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.</source>
          <target state="translated">这是文本的因为某些控件有控件组合或提供的更高级别的版本的类处理输入处理和相关事件。</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>For details, check the documentation for individual controls.</source>
          <target state="translated">有关详细信息，请检查单个控件的文档。</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event for this class, so that PreviewKeyUp is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;附加此类事件，以便 PreviewKeyUp 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewKeyUp event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewKeyUp 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewKeyUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.KeyUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewKeyUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewKeyUpEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.KeyEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.KeyUp&gt;.&lt;/xref:System.Windows.ContentElement.KeyUp&gt; &lt;/xref:System.Windows.Input.KeyEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewKeyUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewKeyUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewKeyUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>Occurs when the keyboard is no longer focused on this element.</source>
          <target state="translated">在此元素不再聚焦于键盘时发生。</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</source>
          <target state="translated">由于此事件使用隧道路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>Check the &lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt; in the event data to determine the actual element that lost focus.</source>
          <target state="translated">检查&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;事件数据以确定实际失去焦点的元素中。&lt;/xref:System.Windows.RoutedEventArgs.Source%2A&gt;</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event for this class, so that PreviewLostKeyboardFocus is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;附加此类事件，以便 PreviewLostKeyboardFocus 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewLostKeyboardFocus event are attached to the underlying &lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewLostKeyboardFocus 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewLostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewLostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;.&lt;/xref:System.Windows.ContentElement.LostKeyboardFocus&gt; &lt;/xref:System.Windows.Input.KeyboardFocusChangedEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent&gt;</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewLostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewLostKeyboardFocus"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is pressed while the pointer is over this element.</source>
          <target state="translated">指针位于此元素上并且按下任何鼠标按钮时发生。</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;附加此类事件，以便 PreviewMouseDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewMouseDown event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewMouseDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>The PreviewMouseDown event is often raised together with either &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; or &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">PreviewMouseDown 事件通常一起引发&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;或&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;，这对应于按下的某个之一的两个标准鼠标按钮。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; and &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;和&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;事件到达事件路由中的此元素。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; or &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;.</source>
          <target state="translated">有关&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;或&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt; ，请参见备注</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.MouseDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseDownEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.MouseDown&gt;.&lt;/xref:System.Windows.ContentElement.MouseDown&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">鼠标指针位于此元素上并且按下鼠标左键时发生。</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>Occurs when the left mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针位于此元素上并释放鼠标左键时发生。</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseLeftButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse pointer moves while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针移动鼠标指针位于此元素上时发生。</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</source>
          <target state="translated">都会发生此事件当鼠标指针首次进入入元素边界，并还鼠标指针移动时仍剩余元素的边界内。</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseMove is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;附加此类事件，以便 PreviewMouseMove 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewMouseMove event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewMouseMove 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.MouseMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseMoveEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.MouseEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.MouseMove&gt;.&lt;/xref:System.Windows.ContentElement.MouseMove&gt; &lt;/xref:System.Windows.Input.MouseEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is pressed while the mouse pointer is over this element.</source>
          <target state="translated">鼠标指针位于此元素上并且按下鼠标右键时发生。</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve">
          <source>Occurs when the right mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针位于此元素上并释放鼠标右键时发生。</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve">
          <source>Although this <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">尽管这<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;遵循沿元素树</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve">
          <source>This event is one of several related events that report the mouse-button specifics of an underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event, which is an attached event that is processed by each element along an event route.</source>
          <target state="translated">此事件是报告鼠标按钮特定信息的基础的几个相关事件之一&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;事件，即处理为由事件路由每个元素的附加的事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve">
          <source>The arguments of this event expose the arguments of the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event.</source>
          <target state="translated">此事件的自变量公开基础的自变量&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;事件。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve">
          <source>If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling &lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;, with the option to handle events that are already marked as handled, in order to be listeners to the event.</source>
          <target state="translated">如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;，使用选项来处理已标记为已处理的事件，以便将事件侦听器。&lt;/xref:System.Windows.ContentElement.AddHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve">
          <source>Conceptually, think of this event (and other mouse-button events on &lt;xref:System.Windows.ContentElement&gt;) to be a mouse "service" (with the service definition provided by the &lt;xref:System.Windows.Input.Mouse&gt; class).</source>
          <target state="translated">从概念上讲，将此事件 (和其他鼠标按钮事件上的&lt;xref:System.Windows.ContentElement&gt;) 视为鼠标"服务"(使用提供的服务定义&lt;xref:System.Windows.Input.Mouse&gt;类)。&lt;/xref:System.Windows.Input.Mouse&gt; &lt;/xref:System.Windows.ContentElement&gt;</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve">
          <source>The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</source>
          <target state="translated">事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph> on the &lt;xref:System.Windows.Input.Mouse&gt; class rather than those on &lt;xref:System.Windows.ContentElement&gt;.</source>
          <target state="translated">对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用<ph id="ph1">[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]</ph>在&lt;xref:System.Windows.Input.Mouse&gt;类，而不是那些&lt;xref:System.Windows.ContentElement&gt;。&lt;/xref:System.Windows.ContentElement&gt;&lt;/xref:System.Windows.Input.Mouse&gt;上</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseRightButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve">
          <source>Occurs when any mouse button is released while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针位于此元素上时松开任意鼠标按钮时发生。</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event for this class, so that PreviewMouseUp is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;附加此类事件，以便 PreviewMouseUp 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewMouseUp event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewMouseUp 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve">
          <source>The PreviewMouseUp event is often raised together with either &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt; or &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;, which correspond to a press of one of the two standard mouse buttons.</source>
          <target state="translated">PreviewMouseUp 事件通常一起引发&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;或&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;，这对应于按下的某个之一的两个标准鼠标按钮。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt; and &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt; are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; event reaches this element along the event route.</source>
          <target state="translated">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;和&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;事件到达事件路由中的此元素。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;&lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve">
          <source>See Remarks for &lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt; or &lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;.</source>
          <target state="translated">有关&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;或&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;。&lt;/xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt; ，请参见备注</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.MouseUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseUpEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.MouseButtonEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.MouseUp&gt;.&lt;/xref:System.Windows.ContentElement.MouseUp&gt; &lt;/xref:System.Windows.Input.MouseButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve">
          <source>Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</source>
          <target state="translated">当鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve">
          <source>Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</source>
          <target state="translated">焦点或鼠标捕获优先于其中鼠标指针位于;因此，如果您收到此事件来自的已设定焦点或捕获元素，鼠标指针实际上可能通过另一个元素。</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event for this class, so that &lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt; is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;附加事件对于此类，以便&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseMove&gt; &lt;/xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the &lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt; event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">事件处理程序附加到&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;事件附加到基础&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseMove&gt;</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewMouseWheelEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.MouseWheel&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewMouseWheel"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewMouseWheelEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.MouseWheelEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.MouseWheel&gt;.&lt;/xref:System.Windows.ContentElement.MouseWheel&gt; &lt;/xref:System.Windows.Input.MouseWheelEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewMouseWheelEvent&gt;</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseWheel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewMouseWheel"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">当在拖放操作期间键盘或鼠标按钮状态的更改时发生。</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve">
          <source>The PreviewQueryContinueDrag event enables the drag source to declare whether the drag-and-drop operation should be canceled.</source>
          <target state="translated">PreviewQueryContinueDrag 事件允许拖动源来声明是否应取消拖放操作。</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that PreviewQueryContinueDrag is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;附加此类事件，以便 PreviewQueryContinueDrag 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewQueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewQueryContinueDrag 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewQueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewQueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;.&lt;/xref:System.Windows.ContentElement.QueryContinueDrag&gt; &lt;/xref:System.Windows.QueryContinueDragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent&gt;</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewQueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewQueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">指针位于此元素上并且按下触笔按钮时发生。</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusButtonDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusButtonDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;.&lt;/xref:System.Windows.ContentElement.StylusButtonDown&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">在指针位于此元素松开触笔按钮时发生。</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusButtonUp is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusButtonUp 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusButtonUp 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;.&lt;/xref:System.Windows.ContentElement.StylusButtonUp&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus touches the digitizer while it is over this element.</source>
          <target state="translated">当触笔位于此元素触及数字化器时发生。</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusDownEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusDown&gt;.&lt;/xref:System.Windows.ContentElement.StylusDown&gt; &lt;/xref:System.Windows.Input.StylusDownEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">当触笔掠过元素但并未实际接触数字化器时发生。</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInAirMove is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusInAirMove 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusInAirMove 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;.&lt;/xref:System.Windows.ContentElement.StylusInAirMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">当触笔与数字化仪以致无法检测到，在此元素近到足以时发生。</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusInRange is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusInRange 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusInRange 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusInRangeEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusInRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusInRangeEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusInRange&gt;.&lt;/xref:System.Windows.ContentElement.StylusInRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusInRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves while over the element.</source>
          <target state="translated">在触笔掠过元素时发生。</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve">
          <source>The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is raised instead.</source>
          <target state="translated">触笔必须移动时在检测触数字化器才会引发此事件，否则为<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>改为引发。</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusMove is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusMove 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusMove 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusMoveEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusMove&gt;.&lt;/xref:System.Windows.ContentElement.StylusMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is too far from the digitizer to be detected.</source>
          <target state="translated">当触笔悬停于数字化器检测到时发生。</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusOutOfRange is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusOutOfRange 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusOutOfRange 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;.&lt;/xref:System.Windows.ContentElement.StylusOutOfRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">用户采用某一种触笔笔势时发生。</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve">
          <source>For information about stylus gestures, see &lt;xref:System.Windows.Input.SystemGesture&gt;.</source>
          <target state="translated">有关触笔笔势的信息，请参阅&lt;xref:System.Windows.Input.SystemGesture&gt;。&lt;/xref:System.Windows.Input.SystemGesture&gt;</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that PreviewStylusSystemGesture is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;附加此类事件，以便 PreviewStylusSystemGesture 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewStylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewStylusSystemGesture 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;.&lt;/xref:System.Windows.ContentElement.StylusSystemGesture&gt; &lt;/xref:System.Windows.Input.StylusSystemGestureEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent&gt;</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve">
          <source>Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</source>
          <target state="translated">当触笔位于此元素上并且用户将触笔抬离数字化器时发生。</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event for this class, so that &lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt; is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;附加事件对于此类，以便&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusDown&gt; &lt;/xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the &lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt; event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">事件处理程序附加到&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;事件附加到基础&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusDown&gt;</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewStylusUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.StylusUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewStylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewStylusUpEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.StylusUp&gt;.&lt;/xref:System.Windows.ContentElement.StylusUp&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewStylusUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewStylusUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">此元素以设备无关模式获取文本时发生。</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve">
          <source>The PreviewTextInput event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated">PreviewTextInput 事件允许组件或应用程序侦听的文本输入以独立于设备的方式。</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve">
          <source>The keyboard is the primary means of PreviewTextInput; but speech, handwriting, and other input devices can also generate PreviewTextInput.</source>
          <target state="translated">键盘是 PreviewTextInput; 的主要方式但语音、 手写和其他输入的设备还可以生成 PreviewTextInput。</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</source>
          <target state="translated">由于键组合 — 默认键盘或输入的法编辑器-多个键事件可能会引发一个文本输入的事件。</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event for this class, so that PreviewTextInput is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;附加此类事件，以便 PreviewTextInput 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the PreviewTextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 PreviewTextInput 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewTextInputEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.TextInput&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewTextInputEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.TextInput&gt;.&lt;/xref:System.Windows.ContentElement.TextInput&gt; &lt;/xref:System.Windows.Input.TextCompositionEventHandler&gt; &lt;/xref:System.Windows.ContentElement.PreviewTextInputEvent&gt;</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTextInput"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTextInput"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">手指触摸屏幕上方的手指位于此元素时发生。</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve">
          <source>By default, the PreviewTouchDown and &lt;xref:System.Windows.ContentElement.TouchDown&gt; events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">默认情况下，PreviewTouchDown 和&lt;xref:System.Windows.ContentElement.TouchDown&gt;事件手指触摸屏幕并移动之前不会发生。&lt;/xref:System.Windows.ContentElement.TouchDown&gt;</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a &lt;xref:System.Windows.Input.Stylus&gt;.</source>
          <target state="translated">手指在屏幕上按住它而无需移动它会导致按和保存的一种&lt;xref:System.Windows.Input.Stylus&gt;。&lt;/xref:System.Windows.Input.Stylus&gt;行为</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">按下并保持行为相当于鼠标右键单击。</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve">
          <source>To cause the PreviewTouchDown and &lt;xref:System.Windows.ContentElement.TouchDown&gt; events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <ph id="ph1">`false`</ph> for this element.</source>
          <target state="translated">若要使 PreviewTouchDown 和&lt;xref:System.Windows.ContentElement.TouchDown&gt;事件发生只要的手指触摸屏幕上，设置&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;附加到属性<ph id="ph1">`false`</ph>此元素。&lt;/xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.TouchDown&gt;</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewTouchDownEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.TouchDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewTouchDownEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.TouchDown&gt;.&lt;/xref:System.Windows.ContentElement.TouchDown&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.PreviewTouchDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">为指位于此元素的上方的手指在屏幕上移动时发生。</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewTouchMoveEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.TouchMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewTouchMoveEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.TouchMove&gt;.&lt;/xref:System.Windows.ContentElement.TouchMove&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.PreviewTouchMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">手指显示在屏幕上方的手指位于此元素时发生。</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.PreviewTouchUpEvent&gt;|   |Routing strategy|Tunneling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding bubbling event is &lt;xref:System.Windows.ContentElement.TouchUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.PreviewTouchUpEvent&gt;|  |路由策略 |隧道 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -相应冒泡事件是&lt;xref:System.Windows.ContentElement.TouchUp&gt;.&lt;/xref:System.Windows.ContentElement.TouchUp&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.PreviewTouchUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.PreviewTouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve">
          <source>Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated">当在拖放操作期间键盘或鼠标按钮状态的更改时发生。</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve">
          <source>The QueryContinueDrag event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated">QueryContinueDrag 事件允许拖动源确定是否应取消拖放操作。</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event for this class, so that QueryContinueDrag is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;附加此类事件，以便 QueryContinueDrag 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the QueryContinueDrag event are attached to the underlying &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 QueryContinueDrag 事件的事件处理程序附加到基础&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_QueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.QueryContinueDragEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_QueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.QueryContinueDragEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.QueryContinueDragEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;.&lt;/xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt; &lt;/xref:System.Windows.QueryContinueDragEventHandler&gt; &lt;/xref:System.Windows.ContentElement.QueryContinueDragEvent&gt;</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.QueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.QueryContinueDrag"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve">
          <source>Occurs when the cursor is requested to display.</source>
          <target state="translated">当请求显示光标时发生。</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve">
          <source>This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</source>
          <target state="translated">引发此事件是在元素上每个时间，鼠标指针移动到新位置，这意味着光标对象可能需要更改根据其新位置。</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event for this class, so that QueryCursor is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;附加此类事件，以便 QueryCursor 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the QueryCursor event are attached to the underlying &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 QueryCursor 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve">
          <source>The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</source>
          <target state="translated">此事件名称引用光标不一定是文本光标 （有时称为插入点）。</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve">
          <source>Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in <ph id="ph1">[!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)]</ph> programming.</source>
          <target state="translated">相反，此上下文中的光标是声明的屏幕的图形显示与多个可能的输入相关的设备或中的概念相关的对象<ph id="ph1">[!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)]</ph>编程。</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve">
          <source>That object is represented by the &lt;xref:System.Windows.Input.Cursor&gt; class in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated">该对象表示由&lt;xref:System.Windows.Input.Cursor&gt;类<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>。&lt;/xref:System.Windows.Input.Cursor&gt;</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>在输入的系统使你能够更改此光标时它表示鼠标指针的屏幕位置。</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve">
          <source>You can use predefined values from the &lt;xref:System.Windows.Input.Cursors&gt; enumeration, or you can declare a custom cursor as an image file.</source>
          <target state="translated">你可以使用从的预定义的值&lt;xref:System.Windows.Input.Cursors&gt;枚举，也可以声明为图像文件自定义光标。&lt;/xref:System.Windows.Input.Cursors&gt;</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve">
          <source>Listening for the QueryCursor event is not an efficient technique for cursor management.</source>
          <target state="translated">侦听 QueryCursor 事件不是游标管理的有效技术。</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve">
          <source>Instead, each element should define its own cursor behavior with &lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt; and &lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;.</source>
          <target state="translated">相反，每个元素应定义&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;和&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;。&lt;/xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;&lt;/xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;自己游标行为</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve">
          <source>You should only rely on QueryCursor if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</source>
          <target state="translated">你应仅依赖于 QueryCursor，如果你不使用 WPF 框架级别基元素，或中的特殊情况下，基于每个元素中定义的游标行为不满足你的需求。</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve">
          <source>For more information on implementing cursor behavior in response to QueryCursor, see &lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;.</source>
          <target state="translated">在响应 QueryCursor 中实现的游标行为的详细信息，请参阅&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;。&lt;/xref:System.Windows.Input.QueryCursorEventHandler&gt;</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_QueryCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.QueryCursorEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;|      -   There is no defined corresponding tunneling event.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_QueryCursor"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.QueryCursorEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;|     -没有定义相应隧道事件。&lt;/xref:System.Windows.Input.QueryCursorEventHandler&gt; &lt;/xref:System.Windows.ContentElement.QueryCursorEvent&gt;</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.QueryCursor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.QueryCursor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve">
          <source>Raises a specific routed event.</source>
          <target state="translated">引发特定路由的事件。</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to be raised is identified within the <bpt id="p2">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance that is provided (as the &lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt; property of that event data).</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.RoutedEvent"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>引发内标识<bpt id="p2">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>提供的实例 (作为&lt;xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;该事件数据的属性)。&lt;/xref:System.Windows.RoutedEventArgs.RoutedEvent*&gt;</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because &lt;xref:System.Windows.RoutedEventArgs&gt; derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</source>
          <target state="translated"><ph id="ph1">`e`</ph>参数被类型化为所有路由的事件数据的公共基类型; 但是，应作为最特定的事件数据类型，则使用有关要引发事件，因为给定的事件数据&lt;xref:System.Windows.RoutedEventArgs&gt;派生的类包含实际的特定数据属性中，适用于特定事件时将引发此事件。&lt;/xref:System.Windows.RoutedEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.RoutedEventArgs&gt; is not just the state properties for the event; it also identifies which routed event to raise.</source>
          <target state="translated">&lt;xref:System.Windows.RoutedEventArgs&gt;不只是事件; 的状态属性它还标识要引发的路由的事件。&lt;/xref:System.Windows.RoutedEventArgs&gt;</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve">
          <source>This event-raising pattern and the routed event data both differ from <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.</source>
          <target state="translated">此事件引发模式和路由的事件数据均不同于<ph id="ph1">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>事件和数据类，该类通常只包含与事件相关的属性。</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that contains the event data and also identifies the event to raise.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Windows.RoutedEventArgs"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> ，其中包含事件数据，还标识要引发的事件。</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve">
          <source>Releases all captured touch devices from this element.</source>
          <target state="translated">释放此元素中的所有捕获的触摸设备。</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve">
          <source>Releases the mouse capture, if this element held the capture.</source>
          <target state="translated">如果此元素捕获，则释放鼠标捕获。</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">如果此元素未持有捕获，调用此方法无效。</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve">
          <source>Consider checking the value of &lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt; before you call this method.</source>
          <target state="translated">请考虑在检查的值&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;之前调用此方法。&lt;/xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve">
          <source>Releases the stylus device capture, if this element held the capture.</source>
          <target state="translated">如果此元素保留捕获触笔设备捕获，则释放。</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve">
          <source>If this element did not hold the capture, calling this method has no effect.</source>
          <target state="translated">如果此元素未持有捕获，调用此方法无效。</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve">
          <source>Consider checking the value of &lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt; before you call this method.</source>
          <target state="translated">请考虑在检查的值&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;之前调用此方法。&lt;/xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve">
          <source>Attempts to release the specified touch device from this element.</source>
          <target state="translated">尝试释放此元素的指定的触摸设备。</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve">
          <source>The device to release.</source>
          <target state="translated">要释放的设备。</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the touch device is released; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果已发布的触摸设备;否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;touchDevice&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve">
          <source>Removes the specified routed event handler from this element.</source>
          <target state="translated">从此元素中移除指定的路由的事件处理程序。</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve">
          <source>The most common scenario for using this <ph id="ph1">[!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph> "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> level.</source>
          <target state="translated">最常见的方案使用此<ph id="ph1">[!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)]</ph>，在实现<ph id="ph2">[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]</ph>"包装器"自定义的路由事件，特别是，当你实现处理程序的"删除"逻辑与关联的事件<ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>级别。</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve">
          <source>The example that follows this remarks section illustrates this scenario.</source>
          <target state="translated">下面的示例中这部分阐释了这种情况下的备注。</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve">
          <source>Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</source>
          <target state="translated">如果没有注册的使用匹配方法调用的输入的参数的条件没有处理程序，则调用此方法起任何作用。</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve">
          <source>If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</source>
          <target state="translated">如果多个处理程序附加条件相匹配，仅第一个处理程序事件删除处理程序存储区中。</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve">
          <source>This behavior is consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id="ph2">`-=`</ph> operator.</source>
          <target state="translated">此行为是与一致<ph id="ph1">[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]</ph>行为<ph id="ph2">`-=`</ph>运算符。</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve">
          <source>Neither <ph id="ph1">`routedEvent`</ph> nor <ph id="ph2">`handler`</ph> may be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">既不<ph id="ph1">`routedEvent`</ph>也不<ph id="ph2">`handler`</ph>可能<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve">
          <source>Attempting to provide either value as <ph id="ph1">`null`</ph> will raise an exception.</source>
          <target state="translated">尝试提供上述任意值作为<ph id="ph1">`null`</ph>将引发的异常。</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve">
          <source>This method ignores the <ph id="ph1">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the &lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt; signature that enables handling of already-handled events.</source>
          <target state="translated">此方法将忽略<ph id="ph1">`handledEventsToo`</ph>参数信息，如果处理程序最初提供添加与&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;启用的已处理事件的处理的签名。&lt;/xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve">
          <source>Either type of handler is removed.</source>
          <target state="translated">删除任一类型的处理程序。</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve">
          <source>The identifier of the.routed event for which the handler is attached.</source>
          <target state="translated">附加处理程序的路由事件的标识符。</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve">
          <source>The specific handler implementation to remove from the event handler collection on this element.</source>
          <target state="translated">要移除此元素的事件处理程序集合的特定处理程序实现。</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.ContentElement.CommandBindings*&gt; property on instances of this class.</source>
          <target state="translated">返回序列化进程是否应序列化&lt;xref:System.Windows.ContentElement.CommandBindings*&gt;此类的实例上的属性&lt;/xref:System.Windows.ContentElement.CommandBindings*&gt;的内容</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve">
          <source>This will return <ph id="ph1">`true`</ph> if &lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt; is locally set.</source>
          <target state="translated">这将返回<ph id="ph1">`true`</ph>如果&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;本地设置。&lt;/xref:System.Windows.ContentElement.CommandBindings%2A&gt;</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the &lt;xref:System.Windows.UIElement.CommandBindings%2A&gt; property does not have a simple default value.</source>
          <target state="translated">这<ph id="ph1">`ShouldSerialize`</ph>提供方法，因为&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;属性不具有简单的默认值。&lt;/xref:System.Windows.UIElement.CommandBindings%2A&gt;</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">此方法指示属性是否已从其默认值。</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">如果你正在开发的设计器，或可以开发您自己的控件合并&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;通常调用此方法</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>使用 ShouldSerialize 和重置方法定义默认值<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.ContentElement.CommandBindings*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Windows.ContentElement.CommandBindings*&gt;属性值应序列化; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.ContentElement.CommandBindings*&gt;</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve">
          <source>Returns whether serialization processes should serialize the contents of the &lt;xref:System.Windows.ContentElement.InputBindings*&gt; property on instances of this class.</source>
          <target state="translated">返回序列化进程是否应序列化&lt;xref:System.Windows.ContentElement.InputBindings*&gt;此类的实例上的属性&lt;/xref:System.Windows.ContentElement.InputBindings*&gt;的内容</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve">
          <source>This will return <ph id="ph1">`true`</ph> if &lt;xref:System.Windows.ContentElement.InputBindings%2A&gt; is locally set.</source>
          <target state="translated">这将返回<ph id="ph1">`true`</ph>如果&lt;xref:System.Windows.ContentElement.InputBindings%2A&gt;本地设置。&lt;/xref:System.Windows.ContentElement.InputBindings%2A&gt;</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`ShouldSerialize`</ph> method is provided because the &lt;xref:System.Windows.UIElement.InputBindings%2A&gt; property does not have a simple default value.</source>
          <target state="translated">这<ph id="ph1">`ShouldSerialize`</ph>提供方法，因为&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;属性不具有简单的默认值。&lt;/xref:System.Windows.UIElement.InputBindings%2A&gt;</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve">
          <source>This method indicates whether the property has changed from its default value.</source>
          <target state="translated">此方法指示属性是否已从其默认值。</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve">
          <source>You typically invoke this method if you are either developing a designer or developing your own control incorporating a &lt;xref:System.Windows.UIElement&gt;.</source>
          <target state="translated">如果你正在开发的设计器，或可以开发您自己的控件合并&lt;xref:System.Windows.UIElement&gt;.&lt;/xref:System.Windows.UIElement&gt;通常调用此方法</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>使用 ShouldSerialize 和重置方法定义默认值<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the &lt;xref:System.Windows.ContentElement.InputBindings*&gt; property value should be serialized; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>如果&lt;xref:System.Windows.ContentElement.InputBindings*&gt;属性值应序列化; 否则为<bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>。&lt;/xref:System.Windows.ContentElement.InputBindings*&gt;</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is pressed while the pointer is over this element.</source>
          <target state="translated">指针位于此元素上并且按下触笔按钮时发生。</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event for this class, so that StylusButtonDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;附加此类事件，以便 StylusButtonDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusButtonDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusButtonDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusButtonDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusButtonDownEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusButtonDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusButtonDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus button is released while the pointer is over this element.</source>
          <target state="translated">在指针位于此元素松开触笔按钮时发生。</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event for this class, so that StylusButtonUp is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;附加此类事件，以便 StylusButtonUp 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusButtonUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusButtonUp 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusButtonUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusButtonUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusButtonUpEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusButtonEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt; &lt;/xref:System.Windows.Input.StylusButtonEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusButtonUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusButtonUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus touches the digitizer while the stylus is over this element.</source>
          <target state="translated">当触笔位于此元素时，触笔触及数字化器时发生。</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event for this class, so that StylusDown is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;附加此类事件，以便 StylusDown 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusDown event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusDown 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusDownEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusDownEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusDown&gt; &lt;/xref:System.Windows.Input.StylusDownEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus enters the bounds of this element.</source>
          <target state="translated">当触笔进入此元素的边界时发生。</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve">
          <source>StylusEnter is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated">StylusEnter 是<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>使用直接的事件处理路由策略。</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve">
          <source>Although StylusEnter tracks when the stylus enters the bounds of an element, this event more literally reports that the &lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt; property value has changed from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph> on this element.</source>
          <target state="translated">尽管 StylusEnter 跟踪触笔进入元素的边界时，此事件更确切地报告&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;属性值已更改，不再<ph id="ph1">`false`</ph>到<ph id="ph2">`true`</ph>针对此元素。&lt;/xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event for this class, so that StylusEnter is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;附加此类事件，以便 StylusEnter 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusEnter event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusEnter 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusEnterEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusEnterEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusEnter%2A&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusEnterEvent&gt;</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over an element without actually touching the digitizer.</source>
          <target state="translated">当触笔掠过元素但并未实际接触数字化器时发生。</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event for this class, so that StylusInAirMove is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;附加此类事件，以便 StylusInAirMove 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusInAirMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusInAirMove 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusInAirMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusInAirMoveEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusInAirMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</source>
          <target state="translated">当触笔与数字化仪以致无法检测到，在此元素近到足以时发生。</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event for this class, so that StylusInRange is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;附加此类事件，以便 StylusInRange 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusInRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusInRange 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusInRangeEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusInRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusInRangeEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusInRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusInRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusInRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusInRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus leaves the bounds of the element.</source>
          <target state="translated">当触笔离开元素边界时发生。</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve">
          <source>StylusLeave is a <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> that uses the direct event handling routing strategy.</source>
          <target state="translated">StylusLeave 是<bpt id="p1">[</bpt>路由事件概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>使用直接的事件处理路由策略。</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve">
          <source>Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</source>
          <target state="translated">在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve">
          <source>However, they do enable other aspects of routed event behavior, such as event triggers in styles.</source>
          <target state="translated">但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve">
          <source>Although StylusLeave tracks when the stylus leaves the bounds of an element, this event more literally reports that the &lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt; property value has changed from <ph id="ph1">`true`</ph> to <ph id="ph2">`false`</ph> on this element.</source>
          <target state="translated">尽管 StylusLeave 跟踪触笔离开元素边界时，此事件更确切地报告&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;属性值已更改，不再<ph id="ph1">`true`</ph>到<ph id="ph2">`false`</ph>针对此元素。&lt;/xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event for this class, so that StylusLeave is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;附加此类事件，以便 StylusLeave 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusLeave event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusLeave 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusLeaveEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   Override &lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusLeaveEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -重写&lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusLeave%2A&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusLeaveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus moves over this element.</source>
          <target state="translated">此元素上并且移动触笔时发生。</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve">
          <source>The stylus must move while on the digitizer to raise this event.</source>
          <target state="translated">触笔必须在引发此事件在数字化仪上移动。</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is raised instead.</source>
          <target state="translated">否则为<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusInAirMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>改为引发。</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event for this class, so that StylusMove is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;附加此类事件，以便 StylusMove 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusMove event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusMove 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusMoveEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusMove&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve">
          <source>Occurs when the stylus is too far from the digitizer to be detected, while over this element.</source>
          <target state="translated">当触笔悬停于数字化仪以致无法检测到，在此元素上时发生。</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event for this class, so that StylusOutOfRange is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;附加此类事件，以便 StylusOutOfRange 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusOutOfRange event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusOutOfRange 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusOutOfRangeEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusOutOfRangeEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusOutOfRangeEvent&gt;</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusOutOfRange"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve">
          <source>Occurs when a user performs one of several stylus gestures.</source>
          <target state="translated">用户采用某一种触笔笔势时发生。</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve">
          <source>For more information about stylus gestures, see &lt;xref:System.Windows.Input.SystemGesture&gt;.</source>
          <target state="translated">有关触笔笔势的详细信息，请参阅&lt;xref:System.Windows.Input.SystemGesture&gt;。&lt;/xref:System.Windows.Input.SystemGesture&gt;</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event for this class, so that StylusSystemGesture is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;附加此类事件，以便 StylusSystemGesture 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusSystemGesture event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusSystemGesture 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusSystemGestureEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusSystemGestureEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusSystemGestureEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt; &lt;/xref:System.Windows.Input.StylusSystemGestureEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusSystemGestureEvent&gt;</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusSystemGesture"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve">
          <source>Occurs when the user raises the stylus off the digitizer while it is over this element.</source>
          <target state="translated">它位于此元素上并且用户将触笔抬离数字化器时发生。</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event for this class, so that StylusUp is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;附加此类事件，以便 StylusUp 摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the StylusUp event are attached to the underlying &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的 StylusUp 事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve">
          <source>Touch, mouse, and stylus input exist in a particular relationship.</source>
          <target state="translated">触摸、 鼠标和触笔输入存在特定的关系。</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>输入概述<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>。</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_StylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.StylusUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.StylusEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_StylusUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.StylusUpEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.StylusEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;.&lt;/xref:System.Windows.ContentElement.PreviewStylusUp&gt; &lt;/xref:System.Windows.Input.StylusEventHandler&gt; &lt;/xref:System.Windows.ContentElement.StylusUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnStylusUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.StylusUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve">
          <source>Occurs when this element gets text in a device-independent manner.</source>
          <target state="translated">此元素以设备无关模式获取文本时发生。</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; [!IMPORTANT]</ph> &gt;  This event might already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated"><ph id="ph1">&gt; [!IMPORTANT]</ph>1&gt; 处理的复合控件的内部实现，可能已标记此事件。</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve">
          <source>See Remark below.</source>
          <target state="translated">请参阅下面的备注。</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve">
          <source>The TextInput event may already be marked as handled by the internal implementations of composited controls.</source>
          <target state="translated">处理的复合控件的内部实现，可能已标记的文本输入事件。</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve">
          <source>For example, a &lt;xref:System.Windows.Controls.TextBox&gt; is a composited control where the TextInput event is already marked as handled; within its compositing.</source>
          <target state="translated">例如，&lt;xref:System.Windows.Controls.TextBox&gt;是一个复合控件，其中文本输入事件已被标记为已处理; 中其组合。&lt;/xref:System.Windows.Controls.TextBox&gt;</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve">
          <source>Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.</source>
          <target state="translated">这么做是因为在控件需要解释某些类型的输入，如箭头键，为具有对该控件的特殊含义。</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve">
          <source>If you use &lt;xref:System.Windows.ContentElement.PreviewTextInput&gt; as the event where you attach handlers for text input, you may receive better results.</source>
          <target state="translated">如果你使用&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;附加处理程序文本输入的位置的事件，你可能会收到更好的结果。&lt;/xref:System.Windows.ContentElement.PreviewTextInput&gt;</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve">
          <source>This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.</source>
          <target state="translated">该技术可以应对大多数情况下，其中控件组合已经此事件标记为已处理和防止接收为由事件路由事件处理程序。</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve">
          <source>The TextInput event allows a component or application to listen for text input in a device-independent manner.</source>
          <target state="translated">文本输入事件允许组件或应用程序侦听的文本输入以独立于设备的方式。</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve">
          <source>The keyboard is the primary means of TextInput, but speech, handwriting, and other input devices can also raise TextInput.</source>
          <target state="translated">键盘是文本输入，但语音，手写的主要方式和其他输入的设备也可以引发文本输入。</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve">
          <source>Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</source>
          <target state="translated">由于键组合 — 默认键盘或输入的法编辑器-多个键事件可能会引发一个文本输入的事件。</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve">
          <source>This event creates an alias for the &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event for this class, so that TextInput is part of the class members list when &lt;xref:System.Windows.ContentElement&gt; is inherited as a base element.</source>
          <target state="translated">此事件创建一个别名&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;附加此类事件，以便文本输入摘自类的成员列出时&lt;xref:System.Windows.ContentElement&gt;为该类继承。&lt;/xref:System.Windows.ContentElement&gt; &lt;/xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to the TextInput event are attached to the underlying &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; attached event and receive the same event data instance.</source>
          <target state="translated">连接到的文本输入事件的事件处理程序附加到基础&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;附加事件，并接收相同的事件数据实例。&lt;/xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.TextInputEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TextInput"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.TextInputEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.Windows.Input.TextCompositionEventHandler&gt;|     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;.&lt;/xref:System.Windows.ContentElement.PreviewTextInput&gt; &lt;/xref:System.Windows.Input.TextCompositionEventHandler&gt; &lt;/xref:System.Windows.ContentElement.TextInputEvent&gt;</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnTextInput%2A&gt;</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TextInput"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TextInput"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve">
          <source>Routed event identifiers are created when routed events are registered.</source>
          <target state="translated">路由的事件标识符是在注册路由的事件时创建的。</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</source>
          <target state="translated">这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve">
          <source>You can use these identifiers to add class handlers.</source>
          <target state="translated">可以使用这些标识符添加类处理程序。</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve">
          <source>For more information about registering routed events, see &lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;.</source>
          <target state="translated">有关注册路由的事件的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve">
          <source>For more information about using routed event identifiers to add class handlers, see &lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;.</source>
          <target state="translated">有关使用路由的事件标识符添加类处理程序的详细信息，请参阅&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;。&lt;/xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve">
          <source>Occurs when a finger touches the screen while the finger is over this element.</source>
          <target state="translated">手指触摸屏幕上方的手指位于此元素时发生。</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve">
          <source>By default, the &lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt; and TouchDown events do not occur until a finger touches the screen and moves.</source>
          <target state="translated">默认情况下，&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;和 TouchDown 事件手指触摸屏幕并移动之前不会发生。&lt;/xref:System.Windows.ContentElement.PreviewTouchDown&gt;</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve">
          <source>Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a &lt;xref:System.Windows.Input.Stylus&gt;.</source>
          <target state="translated">手指在屏幕上按住它而无需移动它会导致按和保存的一种&lt;xref:System.Windows.Input.Stylus&gt;。&lt;/xref:System.Windows.Input.Stylus&gt;行为</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve">
          <source>The press and hold behavior is equivalent to a mouse right-click.</source>
          <target state="translated">按下并保持行为相当于鼠标右键单击。</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve">
          <source>To cause the &lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt; and TouchDown events to occur as soon as a finger touches the screen, set the &lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; attached property to <ph id="ph1">`false`</ph> for this element.</source>
          <target state="translated">若要使&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;和 TouchDown 事件发生只要的手指触摸屏幕上，设置&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;附加到属性<ph id="ph1">`false`</ph>此元素。&lt;/xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt; &lt;/xref:System.Windows.ContentElement.PreviewTouchDown&gt;</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.TouchDownEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchDown"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.TouchDownEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;.&lt;/xref:System.Windows.ContentElement.PreviewTouchDown&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.TouchDownEvent&gt;</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchDown"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve">
          <source>Occurs when a touch moves from outside to inside the bounds of this element.</source>
          <target state="translated">从移动触摸屏输入时发生外部到此元素的边界内。</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve">
          <source>This event is always raised, whether or not the touch device is captured to this UI element.</source>
          <target state="translated">始终引发此事件，指示为此 UI 元素捕获了触摸设备。</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.TouchEnterEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchEnter"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.TouchEnterEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -重写&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnTouchEnter%2A&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.TouchEnterEvent&gt;</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchEnter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are captured to this element.</source>
          <target state="translated">获取捕获到此元素的所有触摸设备。</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are captured to this element.</source>
          <target state="translated">枚举<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>捕获到此元素的对象。</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">获取其可视化树中捕获到此元素的所有触摸设备或任何子元素。</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are captured to this element or any child elements in its visual tree.</source>
          <target state="translated">枚举<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>捕获到此元素或其可视化树中的任何子元素的对象。</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are over this element.</source>
          <target state="translated">获取位于此元素上的所有触摸设备。</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are over this element.</source>
          <target state="translated">枚举<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>位于此元素上的对象。</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve">
          <source>Gets all touch devices that are over this element or any child elements in its visual tree.</source>
          <target state="translated">获取位于此元素上的所有触摸设备或任何子元素及其可视化树中。</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve">
          <source>An enumeration of <bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> objects that are over this element or any child elements in its visual tree.</source>
          <target state="translated">枚举<bpt id="p1">&lt;xref href="System.Windows.Input.TouchDevice"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>通过此元素或其可视化树中的任何子元素的对象。</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve">
          <source>Occurs when a touch moves from inside to outside the bounds of this element.</source>
          <target state="translated">从移动触摸屏输入时发生内部到此元素的边界之外。</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.TouchLeaveEvent&gt;|   |Routing strategy|Direct|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   Override &lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchLeave"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.TouchLeaveEvent&gt;|  |路由策略 |直接 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -重写&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnTouchLeave%2A&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.TouchLeaveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchLeave"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve">
          <source>Occurs when a finger moves on the screen while the finger is over this element.</source>
          <target state="translated">为指位于此元素的上方的手指在屏幕上移动时发生。</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.TouchMoveEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchMove"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.TouchMoveEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;.&lt;/xref:System.Windows.ContentElement.PreviewTouchMove&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.TouchMoveEvent&gt;</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchMove"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve">
          <source>Occurs when a finger is raised off of the screen while the finger is over this element.</source>
          <target state="translated">手指显示在屏幕上方的手指位于此元素时发生。</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="routedEventInfo_TouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## Routed Event Information      |||   |-|-|   |Identifier field|&lt;xref:System.Windows.ContentElement.TouchUpEvent&gt;|   |Routing strategy|Bubbling|   |Delegate|&lt;xref:System.EventHandler%601&gt; of type &lt;xref:System.Windows.Input.TouchEventArgs&gt;.|      -   The corresponding tunneling event is &lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;.</source>
          <target state="translated"><bpt id="p1">&lt;a name="routedEventInfo_TouchUp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept># # 路由事件信息 | | |  |-|-|  |标识符字段 |&lt;xref:System.Windows.ContentElement.TouchUpEvent&gt;|  |路由策略 |冒泡 |  |委托 |&lt;xref:System.EventHandler%601&gt;的类型&lt;xref:System.Windows.Input.TouchEventArgs&gt;。 |     -相应的隧道事件是&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;.&lt;/xref:System.Windows.ContentElement.PreviewTouchUp&gt; &lt;/xref:System.Windows.Input.TouchEventArgs&gt; &lt;/xref:System.EventHandler%601&gt; &lt;/xref:System.Windows.ContentElement.TouchUpEvent&gt;</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve">
          <source>-   Override &lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt; to implement class handling for this event in derived classes.</source>
          <target state="translated">-重写&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;实现处理此事件在派生类中的类。&lt;/xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve">
          <source>Identifies the <bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> routed event.</source>
          <target state="translated">标识<bpt id="p1">&lt;xref href="System.Windows.ContentElement.TouchUp"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>路由的事件。</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">要添加。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>