<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51a0d5ce91f2a5965601d5393328e3271f62cda2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7911838c5f9d0db57319abc7d6f89a14bf5ebb20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6316eb7a14139e3850c25c65a9b2cfcf556f0720</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serializes an object to a new type.</source>
          <target state="translated">将序列化为新类型的对象。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The TypeCodeDomSerializer class performs the same tasks as a &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;, but serializing an object through this class defines a new type.</source>
          <target state="translated">TypeCodeDomSerializer 类执行与相同的任务&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;，但通过此类将对象序列化为定义新类型。&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">初始化的新实例<bpt id="p1">&lt;xref href="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>类。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Deserializes the given type declaration.</source>
          <target state="translated">反序列化给定的类型声明。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Deserialize method deserializes a previously serialized code type declaration.</source>
          <target state="translated">反序列化方法反序列化之前序列化的代码类型声明。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table shows the tasks default implementation performs.</source>
          <target state="translated">下表显示任务的默认实现将执行。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>|Task|Description|   |----------|-----------------|   |Case Sensitivity Checks|The implementation searches for a &lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt; service to decide if it should treat members as case sensitive or case insensitive.|   |Statement Sorting|All member variables and local variables from init methods are stored in a table.</source>
          <target state="translated">|任务 |说明 |  |----------|-----------------|  |案例敏感度检查 |实现搜索&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;服务决定如果它应将成员视为区分大小写或区分大小写。 |  |语句排序 |在表中存储的所有成员变量和 init 方法中的本地变量。&lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</source>
          <target state="translated">然后，init 方法中的每个语句添加到组合根据其左侧，因此，分配或操作的特定变量上的所有语句都分组在该变量下语句集合。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Variables that have no statements are discarded.|   |Deserialization|The statement collections for each variable are deserialized according to the variable.|       The following table shows the services the Deserialize method requires.</source>
          <target state="translated">没有语句的变量将被丢弃。 |  |反序列化 |每个变量的语句集合将反序列化变量根据。 |      下表显示了反序列化方法需要的服务。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>|Service|Description|   |-------------|-----------------|   |&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;|While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.|   |&lt;xref:System.ComponentModel.IContainer&gt;|If an object does not exist in the name table during deserialization, a query for &lt;xref:System.ComponentModel.IContainer&gt; is made.</source>
          <target state="translated">|服务 |说明 |  |-------------|-----------------|  |&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;|虽然并非绝对必需的该服务，如果可用，用于确定序列化应区分大小写或区分大小写。 |  |&lt;xref:System.ComponentModel.IContainer&gt;|如果对象不存在名称表中的查询反序列化期间&lt;xref:System.ComponentModel.IContainer&gt;进行。&lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.ComponentModel.IContainer&gt; &lt;/xref:System.CodeDom.Compiler.CodeDomProvider&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If this query succeeds, the container is checked for the object.</source>
          <target state="translated">如果成功执行此查询，容器是针对的对象检查。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The container is also used as a stand-in for any container argument needed by components.|</source>
          <target state="translated">容器还可作为一种替代物的组件需要的任何容器自变量。 |</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Type declaration to use for serialization.</source>
          <target state="translated">类型声明用于序列化。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The root object.</source>
          <target state="translated">根对象。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns the method where statements used to serialize a member are stored.</source>
          <target state="translated">返回存储用于序列化成员的语句的方法。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The GetInitializeMethod method returns the method to emit all of the initialization code for the given member.</source>
          <target state="translated">GetInitializeMethod 方法返回为给定成员发出所有初始化代码的方法。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default implementation returns an empty constructor.</source>
          <target state="translated">默认实现返回一个空构造函数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the same method is to be returned for multiple values, the same instance of the method should be returned.</source>
          <target state="translated">如果相同的方法是为多个值返回，则将返回该方法的同一个实例。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can use the &lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt; dictionary to remember methods you have created.</source>
          <target state="translated">你可以使用&lt;xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;字典记住所创建的方法。&lt;/xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeDecl`</ph> parameter can also be used to add infrastructure methods.</source>
          <target state="translated"><ph id="ph1">`typeDecl`</ph>还可以使用参数来添加基础结构方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</source>
          <target state="translated">例如，如果你想要发出的每个对象单独的方法，你将需要反过来调用所有这些方法的单个方法。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This method can be added to the code type declaration as needed.</source>
          <target state="translated">此方法可以添加到根据需要的代码类型声明。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">用于序列化类型声明。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The value to use for serialization.</source>
          <target state="translated">要用于序列化的值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The method used to emit all of the initialization code for the given member.</source>
          <target state="translated">用于为给定成员发出所有初始化代码的方法。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>, <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph>, or <ph id="ph3">&lt;code&gt;value&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns an array of methods to be interpreted during deserialization.</source>
          <target state="translated">返回要在反序列化期间解释的方法数组。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default implementation returns a single-element array with the constructor in it.</source>
          <target state="translated">默认实现返回在其中使用构造函数的单个元素数组。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The type declaration to use for serialization.</source>
          <target state="translated">用于序列化类型声明。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> array of methods to be interpreted during deserialization.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeMemberMethod"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>要在反序列化期间解释的方法的数组。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;typeDecl&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Serializes the object root by creating a new type declaration that defines root.</source>
          <target state="translated">通过创建新的类型声明，用于定义根序列化对象根。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Serialize method serializes the given root object and optional collection of members to create a new type definition.</source>
          <target state="translated">序列化方法序列化的给定的根对象和可选的成员，以创建新的类型定义的集合。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`members`</ph> collection contains values, these values are serialized.</source>
          <target state="translated">如果<ph id="ph1">`members`</ph>集合包含值，这些值进行序列化。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Values themselves may serialize as either member variables or local variables.</source>
          <target state="translated">值本身可能序列化作为成员变量或局部变量。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This determination is done by searching for an extender property on the object called <ph id="ph1">`GenerateMember`</ph>.</source>
          <target state="translated">此决定由调用的对象的扩展程序属性搜索<ph id="ph1">`GenerateMember`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, a member is generated.</source>
          <target state="translated">如果<ph id="ph1">`true`</ph>，则生成成员。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Otherwise, a local variable is generated.</source>
          <target state="translated">否则，将生成的本地变量。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For convenience, the <ph id="ph1">`members`</ph> collection can contain the root object.</source>
          <target state="translated">为方便起见，<ph id="ph1">`members`</ph>集合可以包含的根对象。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In this case, the root object is not also added as a member or local variable.</source>
          <target state="translated">在这种情况下，根对象是不还添加为成员或本地变量中。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The name of the returned type is taken from the root object’s name, if it was a named object.</source>
          <target state="translated">返回类型的名称取自根对象的名称，如果它是已命名的对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If not, a name is fabricated from the simple type name of the root class.</source>
          <target state="translated">如果没有，则名称会生成根类的简单类型名称。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following table shows the tasks performed by the default implementation of the Serialize method.</source>
          <target state="translated">下表显示执行序列化方法的默认实现的任务。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>|Task|Description|   |----------|-----------------|   |Context Seeding|The serialization context is initialized with data including the &lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt; and &lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|   |Member Serialization|Next, Serialize walks all of the members and calls &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.</source>
          <target state="translated">|任务 |说明 |  |----------|-----------------|  |上下文种子设定 |使用数据包括&lt;xref:System.ComponentModel.Design.Serialization.RootContext&gt;初始化序列化上下文和&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|  |成员序列化 |接下来，序列化指导的所有成员和调用&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt; &lt;/xref:System.CodeDom.CodeTypeDeclaration&gt; &lt;/xref:System.ComponentModel.Design.Serialization.RootContext&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because serialization is done opportunistically in &lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;, this ensures that serialization is not done twice.|   |Root Serialization|Next, the root object is serialized and its statements are added to the statement collection.|   |Statement Integration|After all objects are serialized, the Serialize method orders the statements and adds them to a method returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.</source>
          <target state="translated">因为&lt;xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;中才有机会执行序列化，这可确保不两次执行序列化。 |  |根序列化 |接下来，根对象进行序列化和它的语句添加到语句集合。 |  |语句集成 |所有对象都序列后，序列化方法为语句排序，并将它们添加到方法从&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;返回&lt;/xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Finally, a constructor is fabricated that calls all of the methods returned from &lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;.|      -       The following table shows the objects the Serialize method places on the context stack.</source>
          <target state="translated">最后，构造函数会生成调用所有方法返回从&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;。 |     -下表显示了对象的序列化方法位置上下文堆栈上。&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>|Instance|Description|   |--------------|-----------------|   |&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;|This serializer.</source>
          <target state="translated">|实例 |说明 |  |--------------|-----------------|  |&lt;xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;|此序列化程序。&lt;/xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Deriving classes may find it useful to add public properties to this class.|   |&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|The type being created.</source>
          <target state="translated">派生类可能会发现有用将公共属性添加到此类。 |  |&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;|正在创建的类型。&lt;/xref:System.CodeDom.CodeTypeDeclaration&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Most objects do not need direct access to this.|</source>
          <target state="translated">大多数对象不需要直接访问该。 |</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The serialization manager to use for serialization.</source>
          <target state="translated">要用于序列化的序列化管理器。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The object to serialize.</source>
          <target state="translated">要序列化的对象。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Optional collection of members.</source>
          <target state="translated">可选的成员的集合。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> or empty.</source>
          <target state="translated">可以是<bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>或为空。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that defines the root object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>定义根对象。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph> or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;manager&lt;/code&gt;</ph>or <ph id="ph2">&lt;code&gt;root&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>