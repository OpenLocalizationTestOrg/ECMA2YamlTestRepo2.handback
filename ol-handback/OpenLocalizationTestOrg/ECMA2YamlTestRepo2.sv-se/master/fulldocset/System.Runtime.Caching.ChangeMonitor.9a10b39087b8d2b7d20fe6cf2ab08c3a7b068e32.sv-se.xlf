<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="sv-se">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0cf131e010d5d49e2bf8a7f3eac77accfefa8aaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.Caching.ChangeMonitor.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94cfc43b061383f99108538f95cf073a12ce7bd4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a427994c22dd079ee60db294bf1b29ea20205c13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</source>
          <target state="translated">Ger en basklass för en härledd anpassad typ som övervakar ändringar i tillståndet vilka data som ett cacheobjekt är beroende av.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</source>
          <target state="translated">Klassen ChangeMonitor används som basklass för Övervakare för härledda klasser som är särskilt avsedda för särskilda cache-implementeringar.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A ChangeMonitor instance monitors changes in the state of data which a cache item depends on.</source>
          <target state="translated">En instans av ChangeMonitor övervakar ändringar i tillståndet för data som ett cacheobjekt är beroende av.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the item can be a file or data entity whose contents are cached.</source>
          <target state="translated">Objektet kan till exempel vara en fil eller entitet vars innehåll cachelagras.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the file or data entity is updated, the associated cache entry must be changed also.</source>
          <target state="translated">Om filen eller entiteten uppdateras, ändras associerade cacheposten också.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</source>
          <target state="translated">Vanliga objekt som kan övervakas är data enheter (till exempel databasfält värden, rader eller tabeller), en annan cacheposten och filer och filattribut.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>A dependency change is a change in the state of a dependency.</source>
          <target state="translated">En ändring av beroende är en förändring i tillståndet för ett beroende.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In a typical cache implementation, after a ChangeMonitor instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</source>
          <target state="translated">I en typisk cache-implementering när en instans av ChangeMonitor meddelar cache som ett beroende har ändrats utför cachen åtgärd, till exempel ogiltigförklara infogade cacheposten.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived ChangeMonitor classes can be customized to monitor dependency changes for specific different data stores.</source>
          <target state="translated">Härledda klasser för ChangeMonitor kan anpassas för att övervaka ändringar av beroende för specifika annat datalager.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, there are cache implementations for a file system, physical memory, or a database.</source>
          <target state="translated">Det finns till exempel cache-implementeringar för ett filsystem, fysiskt minne eller en databas.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ChangeMonitor class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</source>
          <target state="translated">Klassen ChangeMonitor undersöks ändringar som sker utanför cacheminnet och aviseringar cachen förändringar.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> includes the following classes that derive from ChangeMonitor class:      -   &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;      -   &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;       Each of these classes works with different types of dependencies.</source>
          <target state="translated">Den <ph id="ph1">[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</ph> innehåller följande klasser som härleds från klassen ChangeMonitor:- &lt;xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.HostFileChangeMonitor&gt;- &lt;xref:System.Runtime.Caching.SqlChangeMonitor&gt;dessa klasser fungerar med olika typer av beroenden.&lt;/xref:System.Runtime.Caching.SqlChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.HostFileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.CacheEntryChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the derived &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt; class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</source>
          <target state="translated">Till exempel härledda &lt;xref:System.Runtime.Caching.FileChangeMonitor&gt;klassen övervakar ändringar i en cache för system fildata (filer och mappar) som cacheobjekt är beroende.&lt;/xref:System.Runtime.Caching.FileChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Initierar en ny instans av den <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klass.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This constructor is called from constructors in derived classes to initialize the base class.</source>
          <target state="translated">Den här konstruktorn anropas från konstruktorer i härledda klasser för att initiera basklassen.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class has a default constructor.</source>
          <target state="translated">Den &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;klass har en standardkonstruktor.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, classes that inherit from the base &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class and define custom change-monitoring behavior must perform initialization in the constructor.</source>
          <target state="translated">Dock klasser som ärver från basen &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;klassen och definiera anpassade ändringen för övervakning beteende initiering måste utföras i konstruktorn.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the Notes for Inheritors section.</source>
          <target state="translated">Mer information finns i anteckningar för arvtagare avsnitt.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases all resources that are used by the current instance of the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Frigör alla resurser som används av den aktuella instansen av den <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klass.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method invokes the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method of derived classes only one time, the first time it is called.</source>
          <target state="translated">Metoden Dispose anropar den &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;-metoden i härledda klasser bara en gång, första gången den anropas.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subsequent calls to the Dispose method have no effect.</source>
          <target state="translated">Efterföljande anrop till metoden Dispose har ingen effekt.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the method has been called, the &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">När metoden har anropats, den &lt;xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;egenskap är inställd på <ph id="ph1">`true`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A&gt;</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; overload must be called to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Den &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;överlagring måste anropas för att ta bort en &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instans.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following are the rules for calling the dispose method:      -   Before an item is inserted into the cache, it is the caller's responsibility to dispose of a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Följande är regler för att anropa metoden dispose:-innan ett objekt har infogats i cachen är anroparens ansvar att avyttra en &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instans.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Once cache item and the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances that are associated with it are passed to a cache, the cache implementer that must make sure that &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; is called, even if the insert fails.</source>
          <target state="translated">-En gång cacheobjektet och &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instanser som är associerade med den skickas till en cache cache-implementerare som måste se till att &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;kallas även om Infoga misslyckas.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   After an item and its associated &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instances are passed to a cache, the caller must not dispose the dependency because when the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method is called, the call is treated as if the dependency has changed.</source>
          <target state="translated">-När ett objekt och dess associerade &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instanser skickas till en cache, anroparen måste inte bort beroendet eftersom när den &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metoden anropas, behandlas anropet som om beroendet har ändrats.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is automatically invoked.</source>
          <target state="translated">Därför kan den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metoden anropas automatiskt.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Taking these rules into consideration, the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method must be called in one of the following ways:          -   Users must call the Dispose method overload if they decide not to insert the derived change-monitor instance into a cache.</source>
          <target state="translated">-Hänsyn reglerna, den &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metoden måste anropas på något av följande sätt:-användare måste anropa metodöverlagringen Dispose om de inte infoga härledda ändra bildskärmar instans i en cache.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The cache implementation is responsible for calling the Dispose overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</source>
          <target state="translated">-Cache-implementeringen är ansvarig för att anropa överlagringen Dispose om genomförandet försöker infoga instansen ändra Övervakare i ett objekt i cache infogningen misslyckas.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</source>
          <target state="translated">När infogning försök orsakar ett undantag, cache-implementering måste ta bort alla associerade beroenden.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If the cache entry is removed, the cache implementation must also dispose the dependency.</source>
          <target state="translated">-Om cacheposten tas bort måste cache-implementeringen också ta bort beroendet.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The internal implementation of the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method after it calls a callback that is registered through the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">Den interna implementeringen av den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metodanrop automatiskt den &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metoden när du anropar ett återanrop som har registrerats via den &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metoden.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This automatic dispose during the event firing only occurs if the initialization of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance previously completed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Den här automatiska dispose under den händelse att inträffar bara om initieringen av den &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instans som tidigare har slutförts.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a derived change monitor's constructor calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; method will automatically dispose the change monitor.</source>
          <target state="translated">När en härledd ändra Övervakare konstruktorn anropar den &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;metoden, om tillståndet för övervakaren ändras redan har ändrats (det vill säga tillståndet som övervakas har redan ändrats när konstruktorn fortfarande var aktiv) sedan &lt;xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;metoden kommer automatiskt att ta bort ändra Övervakare.&lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Users should not call the Dispose method.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Användare bör inte anropa metoden Dispose.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you cannot prevent users from calling the method.</source>
          <target state="translated">Du kan dock hindra användare från att anropa metoden.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if they do, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked.</source>
          <target state="translated">Därför, om de gör det &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;-metoden har anropats.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>In that case, the cache entry is notified as if the dependency has changed.</source>
          <target state="translated">I så fall meddelas cacheposten som om beroendet har ändrats.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent derived classes from overriding Dispose method, the method is not an explicit interface implementation.</source>
          <target state="translated">Metoden är inte en implementering av explicit gränssnitt för att förhindra att härledda klasser åsidosätter Dispose metod.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Initialization is not complete in the derived change-monitor class that called the base Dispose method.</source>
          <target state="translated">Har inte initierats i klassen härledda ändra Övervakare som kallas basmetoden Dispose.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Releases all managed and unmanaged resources and any references to the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance.</source>
          <target state="translated">Frigör alla hanterade och ohanterade resurser och alla referenser till den <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> instans.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This overload must be implemented by derived change-monitor classes.</source>
          <target state="translated">Den här överlagring måste implementeras av klasser härledda ändra Övervakare.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the value of <ph id="ph1">`disposing`</ph> value is <ph id="ph2">`true`</ph>, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</source>
          <target state="translated">När värdet för <ph id="ph1">`disposing`</ph> värdet är <ph id="ph2">`true`</ph>, alla hanterade och ohanterade resurser har tagits bort och alla referenser till det här objektet släpps så att härledda ändra bildskärmar instansen kan vara skräpinsamlats.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is guaranteed that the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method will invoke the implemented Dispose method only one time.</source>
          <target state="translated">Det är fastställt som bas &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metod ska anropa metoden implementerade Dispose bara en gång.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to release managed and unmanaged resources and any references to a <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept> to release only unmanaged resources.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>att släppa hanterade och ohanterade resurser och alla referenser till en <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> instansen; <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept> att släppa endast resurser som inte hanteras.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is passed, the Dispose method is called by a <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> thread and any external managed references are likely no longer valid because they have already been garbage collected.</source>
          <target state="translated">När <bpt id="p1">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> skickas Dispose metoden anropas av en <bpt id="p2">&lt;xref uid="langword_csharp_finalizer" name="finalizer" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> tråd och eventuella externa hanterade referenser sannolikt inte längre är giltiga eftersom de redan har skräpinsamlats.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the state that is monitored by the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class has changed.</source>
          <target state="translated">Hämtar ett värde som indikerar att det tillstånd som övervakas av den <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klass har ändrats.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can check the value of this property in a derived &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; class to see whether a dependency has changed.</source>
          <target state="translated">Du kan kontrollera värdet för den här egenskapen i en härledd &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;klassen för att se om ett beroende har ändrats.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is set to <ph id="ph1">`true`</ph> when a dependency change occurs (that is, when the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called).</source>
          <target state="translated">Värdet anges <ph id="ph1">`true`</ph> när något beroende ändras (det vill säga när den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metoden anropas).&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>After the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is called by the derived class, the value of the HasChanged property will be <ph id="ph1">`true`</ph>, regardless of whether a &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; instance has been notified by a call to the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method.</source>
          <target state="translated">Efter den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metoden anropas av den härledda klassen blir värdet på egenskapen HasChanged <ph id="ph1">`true`</ph>, oavsett om en &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;har blivit underrättade instans av ett anrop till den &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metoden.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Callers can check the HasChanged property to see whether a dependency has changed.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Anropare kan kontrollera egenskapen HasChanged om ett beroende har ändrats.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the HasChanged property.</source>
          <target state="translated">I ett flertrådat miljö är en enklare och mer hanterbar metoden dock att infoga data i en cache-implementering utan att kontrollera egenskapen HasChanged.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementations must check the HasChanged property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</source>
          <target state="translated">Cache-implementeringar måste kontrollera egenskapen HasChanged och måste inte utföra någon insert eller ange igen om en eller flera associerade beroenden redan har ändrats.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the state that is monitored by the <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> instance has changed; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Om det tillstånd som övervakas av den <bpt id="p2">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> instans har ändrats, annars <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Called from the constructor of derived classes to indicate that initialization is finished.</source>
          <target state="translated">Anropas från konstruktorn härledda klasser för att indikera att initialization är slutförd.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">Om ett beroende ändras innan har initierats i en härledd klass konstruktören för den härledda klassen måste anropa den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metoden.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is invoked, the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is automatically set to <ph id="ph1">`true`</ph> by the change monitor.</source>
          <target state="translated">När den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;-metoden har anropats på &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;automatiskt egenskapen <ph id="ph1">`true`</ph> genom att ändra Övervakare.&lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>As a result, when the change monitor's constructor calls the InitializationComplete method, the base class will automatically call the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method.</source>
          <target state="translated">Därför när övervakaren ändra konstruktorn anropar metoden InitializationComplete, basklassen automatiskt anropar den &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metoden.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If initialization is complete, the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method automatically disposes the derived change-monitor instance.</source>
          <target state="translated">Om initieringen har slutförts, den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metoden förfogar automatiskt härledda ändra-monitor-instans.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates that the derived instance of a <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class is disposed.</source>
          <target state="translated">Hämtar ett värde som indikerar att den härledda instansen av en <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klass har tagits bort.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The property is set to <ph id="ph1">`true`</ph> after the base &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method calls the &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; method in a derived class to dispose of the instance.</source>
          <target state="translated">Egenskapen anges till <ph id="ph1">`true`</ph> efter basen &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metodanrop på &lt;xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;metod i en härledd klass ta bort instansen.&lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the instance is disposed; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>om instansen har tagits bort; Annars <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Called by Cache implementers to register a callback and notify an <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> instance through the <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> delegate when a dependency has changed.</source>
          <target state="translated">Anropas av Cache-implementerare att registrera ett återanrop och meddela en <bpt id="p1">&lt;xref href="System.Runtime.Caching.ObjectCache"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> instansen via den <bpt id="p2">&lt;xref href="System.Runtime.Caching.OnChangedCallback"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> delegera när ett beroende har ändrats.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>Cache implementers use this method to wire themselves up to a change monitor.</source>
          <target state="translated">Cache implementerare använder den här metoden för att ansluta sig upp till en ändra Övervakare.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you associate one or more change monitors with the cache item, you pass a &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt; instance with a populated change monitors property to the cache item.</source>
          <target state="translated">Om du kopplar en eller flera ändra Övervakare med cacheobjekt, som du skickar en &lt;xref:System.Runtime.Caching.CacheItemPolicy&gt;-instans med en ifylld ändra Övervakare egenskap till cacheobjektet.&lt;/xref:System.Runtime.Caching.CacheItemPolicy&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cache implementer that supports change monitors is responsible for iterating over the &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt; property and register the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegates with each change monitor that it finds.</source>
          <target state="translated">En cache-implementerare att stöder ändrar Övervakare ansvarar för att iterera över den &lt;xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;egenskapen och registrera den &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;delegater med varje ändra Övervakare som påträffas.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</source>
          <target state="translated">Eftersom den &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;delegat innehåller ett valfritt steg som parameter, en konkret ändra övervakaren implementering kan skicka information om valfria tillstånd.&lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</source>
          <target state="translated">Cache-implementerare avgör om en explicit beroende på vilken typ av tillstånd som en anpassad ändra Övervakare skickas som en del av återanropet kan tas.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The base cache extensibility API has no requirement for explicit dependency on the type of state.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Grundläggande cache-utökningsbarhet API har inga krav på explicit beroende på vilken typ av tillstånd.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation of the NotifyOnChanged method automatically determines whether the state of the monitor has already changed at the time NotifyOnChanged method is called.</source>
          <target state="translated">Implementeringen av metoden NotifyOnChanged bestämmer automatiskt om tillståndet för övervakaren har redan ändrats när NotifyOnChanged-metoden anropas.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt; property is <ph id="ph1">`true`</ph>, then the method automatically calls the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; event handler, that was registered, through the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method.</source>
          <target state="translated">Om den &lt;xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;egenskapen är <ph id="ph1">`true`</ph>, och sedan metoden automatiskt anropar den &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;händelsehanteraren som har registrerats via den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metoden.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt; &lt;/xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</source>
          <target state="translated">Detta inträffar eftersom det är möjligt att tillståndet för underliggande övervakade har ändrats från den tid som en cache-implementering skapar en Övervakare för ändring till dess att en cache-implementering hämtar övervakaren och dra kablar själva upp till den.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the state has already changed then the object that is passed to the &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt; method is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Om tillståndet har redan ändrats sedan det objekt som har överförts till den &lt;xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;metoden är <ph id="ph1">`null`</ph>.&lt;/xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The NotifyOnChanged method can be invoked only one time, and will throw an exception on subsequent calls.</source>
          <target state="translated">NotifyOnChanged-metod kan anropas bara en gång och genereras ett undantagsfel på efterföljande anrop.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A reference to a method that is invoked when a dependency has changed.</source>
          <target state="translated">En referens till en metod som anropas när ett beroende har ändrats.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The callback method has already been invoked.</source>
          <target state="translated">Motringningsmetoden har redan anropats.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;onChangedCallback&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Called by derived classes to raise the event when a dependency changes.</source>
          <target state="translated">Anropas av härledda klasser för att generera en händelse när en beroende ändras.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the OnChanged method is called when dependency changes occur.</source>
          <target state="translated">OnChanged-metoden anropas vanligtvis när beroende ändringar sker.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The OnChanged method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</source>
          <target state="translated">OnChanged-metoden anropas också när en ändring monitor-instans har tagits bort men avyttring inträffar endast om återanropet inte har redan anropats.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the OnChanged method is called before the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is called, the state data from the call to the OnChanged method is saved by the cache implementation.</source>
          <target state="translated">Om OnChanged-metoden anropas innan den &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;metoden anropas, systemtillstånd från anrop till metoden OnChanged sparas i cache-implementeringen.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the callback to the &lt;xref:System.Runtime.Caching.OnChangedCallback&gt; method is invoked immediately when the &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; method is invoked.</source>
          <target state="translated">Dessutom återanrop till den &lt;xref:System.Runtime.Caching.OnChangedCallback&gt;-metoden har anropats omedelbart när den &lt;xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt;-metoden har anropats.&lt;/xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A&gt; &lt;/xref:System.Runtime.Caching.OnChangedCallback&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The data for the change event.</source>
          <target state="translated">Data för ändringshändelsen.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This value can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Det här värdet kan vara <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Gets a value that represents the <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class instance.</source>
          <target state="translated">Hämtar ett värde som representerar den <bpt id="p1">&lt;xref href="System.Runtime.Caching.ChangeMonitor"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> instans.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UniqueId property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Egenskapsvärdet UniqueId består vanligtvis av beroendedata namn kombineras sträng som unikt identifierare de data som övervakas av en &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instans.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the UniqueId property is a string.</source>
          <target state="translated">Värdet på egenskapen UniqueId är en sträng.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the string is used to assign the unique ID of the &lt;xref:System.Runtime.Caching.ChangeMonitor&gt; instance.</source>
          <target state="translated">Värdet för strängen som används för att tilldela unika ID för den &lt;xref:System.Runtime.Caching.ChangeMonitor&gt;instans.&lt;/xref:System.Runtime.Caching.ChangeMonitor&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The identifier for a change-monitor instance.</source>
          <target state="translated">Identifierare för en Övervakare för ändring-instans.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>