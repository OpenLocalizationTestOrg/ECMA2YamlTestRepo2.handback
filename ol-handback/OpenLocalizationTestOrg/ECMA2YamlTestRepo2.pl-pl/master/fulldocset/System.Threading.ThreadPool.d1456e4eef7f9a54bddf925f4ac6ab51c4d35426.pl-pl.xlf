<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ca694fa893704040c1750b3af4a5b75a4d11345</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Threading.ThreadPool.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20e6e7007a343a4397389f4342ee168c6fa4feba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">104685958ab9f148f376ded976c4acf120b8d949</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">Udostępnia puli wątków, które mogą służyć do wykonywania zadań, publikowania elementów roboczych, Przetwarzanie asynchroniczne We/Wy, Oczekiwanie w imieniu innych wątków i przetworzyć czasomierze.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">Wiele aplikacji Tworzenie wątków, które spędzają na dużą ilość czasu w stanie uśpiony, oczekuje na wystąpienie zdarzenia.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">Inne wątki może przejść w stan uśpiony tylko do wznowione okresowo sondować zmiany lub zaktualizować informacje o stanie.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">Pula wątków umożliwia korzystanie wątków wydajniej, udostępniając aplikację z pulą wątków roboczych, które są zarządzane przez system.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of operations that use thread pool threads include the following:      -   When you create a &lt;xref:System.Threading.Tasks.Task&gt; or &lt;xref:System.Threading.Tasks.Task%601&gt; object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">Operacje, które używają wątków z puli wątków są następujące: - podczas tworzenia &lt;xref:System.Threading.Tasks.Task&gt;lub &lt;xref:System.Threading.Tasks.Task%601&gt;obiektu w celu wykonania niektórych zadań asynchronicznie, domyślnie zadanie jest zaplanowane do uruchomienia w wątku puli wątków.&lt;/xref:System.Threading.Tasks.Task%601&gt; &lt;/xref:System.Threading.Tasks.Task&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Asynchronous timers use the thread pool.</source>
          <target state="translated">— Czasomierze asynchroniczne Użyj puli wątków.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thread pool threads execute callbacks from the &lt;xref:System.Threading.Timer?displayProperty=fullName&gt; class and raise events from the &lt;xref:System.Timers.Timer?displayProperty=fullName&gt; class.</source>
          <target state="translated">Wątków z puli wątków wykonywania wywołań zwrotnych z &lt;xref:System.Threading.Timer?displayProperty=fullName&gt;klasy i zgłoś zdarzenia z &lt;xref:System.Timers.Timer?displayProperty=fullName&gt;klasy.&lt;/xref:System.Timers.Timer?displayProperty=fullName&gt; &lt;/xref:System.Threading.Timer?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">— Jeśli używasz uchwyty oczekiwania zarejestrowanych wątku systemu monitoruje stan uchwyty oczekiwania.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">Po ukończeniu operacji oczekiwania wątku roboczego z puli wątków wykonuje odpowiednie funkcja wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   When you call the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">-Podczas wywoływania &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;metody do kolejki metody do wykonania w wątku puli wątków.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do this by passing the method a &lt;xref:System.Threading.WaitCallback&gt; delegate.</source>
          <target state="translated">Można to zrobić przez przekazanie metody &lt;xref:System.Threading.WaitCallback&gt;delegować.&lt;/xref:System.Threading.WaitCallback&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate has the signature      <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept>   <bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept>        where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">Delegat ma sygnaturę <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>0<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept><bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept> gdzie <ph id="ph1">`state`</ph> jest obiekt, który zawiera dane, które mają być używane przez delegata.   </target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The actual data can be passed to the delegate by calling the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt; method.</source>
          <target state="translated">Rzeczywiste dane mogą zostać przekazane do delegata, wywołując &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;metody.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The threads in the managed thread pool are background threads.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Wątków w puli wątków zarządzanych są wątki w tle.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, their &lt;xref:System.Threading.Thread.IsBackground%2A&gt; properties are <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Oznacza to, że ich &lt;xref:System.Threading.Thread.IsBackground%2A&gt;Właściwości są <ph id="ph1">`true`</ph>.&lt;/xref:System.Threading.Thread.IsBackground%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that a ThreadPool thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">Oznacza to, że puli wątków nie zachowa aplikacji uruchomionej po zamknięciu wszystkie wątki pierwszego planu.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Gdy puli wątków ponownie używa wątku, nie czyści danych lokalny magazyn wątków lub pola, które są oznaczone ikoną z &lt;xref:System.ThreadStaticAttribute&gt;atrybutu.&lt;/xref:System.ThreadStaticAttribute&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the &lt;xref:System.ThreadStaticAttribute&gt; attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">W związku z tym, gdy metoda sprawdza, czy lokalny magazyn wątków lub pola, które są oznaczone ikoną z &lt;xref:System.ThreadStaticAttribute&gt;Atrybut wartości znajdzie może pozostać za pośrednictwem z wcześniejszego użycia wątku puli wątków.&lt;/xref:System.ThreadStaticAttribute&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">Można również kolejki elementów pracy, które nie są powiązane z operacją oczekiwania do puli wątków.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To request that a work item be handled by a thread in the thread pool, call the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">Aby zażądać, że element pracy ma być obsługiwany przez wątek w puli wątków, należy wywołać &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">Ta metoda przyjmuje jako parametr odwołania do metody lub delegata, która zostanie wywołana przez wątek z puli wątków.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">Nie istnieje sposób anulowania elementu roboczego po jego zostało umieszczone w kolejce.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">Czasomierze kolejki czasomierza i zarejestrowanych oczekiwania operacji również używają puli wątków.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">Funkcje wywołania zwrotnego, ich są umieszczane w kolejce do puli wątków.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is one thread pool per process.</source>
          <target state="translated">Brak jednej puli wątków na proces.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]</ph>, domyślny rozmiar puli wątków procesu zależy od wielu czynników, takich jak rozmiar wirtualnej przestrzeni adresowej.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>A process can call the &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt; method to determine the number of threads.</source>
          <target state="translated">Proces może wywołać &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;metodę, aby określić liczbę wątków.&lt;/xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The number of threads in the thread pool can be changed by using the &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt; method.</source>
          <target state="translated">Liczba wątków w puli wątków można zmieniać za pomocą &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">Każdy wątek używa domyślny rozmiar stosu i uruchamia priorytetem domyślne.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph2">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Kodu niezarządzanego, który jest hostem środowiska .NET Framework, można zmienić rozmiar puli wątków za pomocą <ph id="ph2">`CorSetMaxThreads`</ph> funkcja zdefiniowana w pliku mscoree.h.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Puli wątków zawiera nowe wątków roboczych lub wątków zakończenia We/Wy na żądanie, dopóki nie osiągnie minimum dla każdej kategorii.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Po osiągnięciu minimum puli wątków można utworzyć dodatkowe wątki w tej kategorii lub zaczekaj na zakończenie niektórych zadań.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, pulą wątków tworzy i niszczy wątków roboczych w celu zoptymalizowania przepustowości, która jest zdefiniowana jako liczba zadań, kończące się na jednostkę czasu.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Zbyt mało wątków może nie mieć optymalne wykorzystanie dostępnych zasobów, natomiast zbyt wiele wątków można zwiększyć rywalizacji.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Gdy żądanie jest niskie, rzeczywista liczba wątków z puli wątków można spadnie poniżej wartości minimalnej.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt; method to obtain these minimum values.</source>
          <target state="translated">Można użyć &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;metodę, aby uzyskać te wartości minimalnej.&lt;/xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  You can use the &lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt; method to increase the minimum number of threads.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; Można użyć &lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;metodę, aby zwiększyć minimalną liczbę wątków roboczych.&lt;/xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Jednak niepotrzebnie zwiększenie tych wartości może spowodować problemy z wydajnością.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Jeśli zbyt wiele zadań jest uruchomiona w tym samym czasie, wszystkie z nich wydaje się powoli.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">W większości przypadków puli wątków będą działać lepiej z własną algorytmu alokacji wątków.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Binds an operating system handle to the <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Wiąże dojścia systemu operacyjnego do <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An &lt;xref:System.IntPtr&gt; that holds the handle.</source>
          <target state="translated">&lt;xref:System.IntPtr&gt;Przechowuje dojście.&lt;/xref:System.IntPtr&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">Dojście musi otwarte dla pokrywającej się z inną operacji We/Wy na stronie niezarządzane.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle is bound; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli dojście jest powiązana; w przeciwnym razie <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Obiekt wywołujący nie ma wymaganych uprawnień.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Binds an operating system handle to the <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Wiąże dojścia systemu operacyjnego do <bpt id="p1">&lt;xref href="System.Threading.ThreadPool"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;, which derives from the abstract &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; class.</source>
          <target state="translated"><ph id="ph1">`osHandle`</ph> Parametr powinien być &lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;co wynika ze abstrakcyjnej &lt;xref:System.Runtime.InteropServices.SafeHandle&gt;klasy.&lt;/xref:System.Runtime.InteropServices.SafeHandle&gt; &lt;/xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A &lt;xref:System.Runtime.InteropServices.SafeHandle&gt; that holds the operating system handle.</source>
          <target state="translated">A &lt;xref:System.Runtime.InteropServices.SafeHandle&gt;przechowuje dojście systemu operacyjnego.&lt;/xref:System.Runtime.InteropServices.SafeHandle&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">Dojście musi otwarte dla pokrywającej się z inną operacji We/Wy na stronie niezarządzane.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the handle is bound; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli dojście jest powiązana; w przeciwnym razie <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;osHandle&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;osHandle&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the &lt;xref:System.Threading.ThreadPool.GetMaxThreads*&gt; method, and the number currently active.</source>
          <target state="translated">Pobiera różnicę między maksymalną liczbę wątków z puli wątków zwrócony przez &lt;xref:System.Threading.ThreadPool.GetMaxThreads*&gt;— Metoda i liczba aktywnych.&lt;/xref:System.Threading.ThreadPool.GetMaxThreads*&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>When GetAvailableThreads returns, the variable specified by <ph id="ph1">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph2">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">Gdy zwraca GetAvailableThreads, określonej przez zmienną <ph id="ph1">`workerThreads`</ph> zawiera liczbę wątków roboczych dodatkowe, które można uruchomić, a zmienna określony przez <ph id="ph2">`completionPortThreads`</ph> zawiera liczbę dodatkowych asynchronicznych wątków We/Wy, które może zostać uruchomiona.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">Jeśli nie ma żadnych dostępnych wątków, żądania puli wątków dodatkowe pozostają w kolejce do momentu udostępnienie wątków z puli wątków.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The number of available worker threads.</source>
          <target state="translated">Liczba wątków roboczych dostępne.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">Liczba dostępnych asynchronicznych wątków We/Wy.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Pobiera liczbę żądań w puli wątków, które mogą być jednocześnie aktywne.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Wszystkie żądania powyżej tego numeru pozostają w kolejce do momentu udostępnienie wątków z puli wątków.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>When GetMaxThreads returns, the variable specified by <ph id="ph1">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph2">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">Gdy zwraca GetMaxThreads, określonej przez zmienną <ph id="ph1">`workerThreads`</ph> zawiera maksymalną liczbę dozwolonych w puli wątków wątków roboczych, a zmienna określony przez <ph id="ph2">`completionPortThreads`</ph> zawiera maksymalną liczbę asynchronicznych wątków We/Wy w puli wątków.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt; method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">Można użyć &lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;metodę, aby określić rzeczywistą liczbę wątków w puli wątków w danym momencie.&lt;/xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt; to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Można użyć &lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;Aby ustawić maksymalną liczbę wątków roboczych i asynchronicznych wątków We/Wy w puli wątków.&lt;/xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">Można dodać do kolejki jako wiele żądań w puli wątków zezwala pamięci systemowej.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">W przypadku żądań więcej niż wątków z puli wątków dodatkowe żądania pozostają w kolejce do momentu udostępnienie wątków z puli wątków.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Maksymalna liczba wątków roboczych w puli wątków.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Maksymalna liczba asynchronicznych wątków We/Wy w puli wątków.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Pobiera minimalną liczbę wątków, jakiej puli wątków tworzy na żądanie, jak zostały wprowadzone nowe żądania, przed przełączeniem do zarządzania wątku tworzenie i likwidacja algorytm.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Puli wątków zawiera nowe wątków roboczych lub wątków zakończenia We/Wy na żądanie, dopóki nie osiągnie minimum dla każdej kategorii.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">Minimalna liczba wątków domyślnie do liczby procesorów w systemie.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Po osiągnięciu wartości minimalnej puli wątków można utworzyć dodatkowe wątki w tej kategorii lub zaczekaj na zakończenie niektórych zadań.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, pulą wątków tworzy i niszczy wątki w celu zoptymalizowania przepustowości, która jest zdefiniowana jako liczba zadań, kończące się na jednostkę czasu.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Zbyt mało wątków może nie mieć optymalne wykorzystanie dostępnych zasobów, natomiast zbyt wiele wątków można zwiększyć rywalizacji.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Gdy żądanie jest niskie, rzeczywista liczba wątków z puli wątków można spadnie poniżej wartości minimalnej.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Gdy metoda zwróci wartość, zawiera minimalną liczbę wątków roboczych, utworzonych puli wątków na żądanie.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Gdy metoda zwróci wartość, zawiera minimalną liczbę asynchronicznych wątków We/Wy, które tworzy puli wątków na żądanie.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Queues a method for execution.</source>
          <target state="translated">Ustawia metodę do wykonania.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">Metoda jest wykonywana po udostępnieniu wątku puli wątków.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt; overload that accepts an object containing the necessary data.</source>
          <target state="translated">Można umieścić dane wymagane przez metodę umieszczonych w kolejce w pól wystąpień klasy, w którym zdefiniowano metody, lub można użyć &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;przeciążenia, które akceptuje obiekt zawierający potrzebne dane.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.WaitCallback&gt; constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Użytkowników programu Visual Basic można pominąć &lt;xref:System.Threading.WaitCallback&gt;Konstruktor i po prostu użyj <ph id="ph2">`AddressOf`</ph> operator podczas przekazywania metody wywołania zwrotnego do &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; &lt;/xref:System.Threading.WaitCallback&gt;</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic automatycznie wywołuje konstruktor delegata poprawne.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    In the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">Wersja informacji w programie .NET Framework w wersji 2.0, &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;wartość właściwości jest propagowana do wątków w kolejce za pomocą &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">We wcześniejszych wersjach głównych informacje nie są propagowane.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the method to be executed.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> reprezentujący metodę do wykonania.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method is successfully queued; &lt;xref:System.NotSupportedException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli metoda pomyślnie znajduje się w kolejce; &lt;xref:System.NotSupportedException&gt;jest generowany, jeśli nie można umieścić w kolejce elementu roboczego.&lt;/xref:System.NotSupportedException&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Środowisko uruchomieniowe języka wspólnego (CLR) jest obsługiwana, i host nie obsługuje tej akcji.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">Metody wykonywania kolejek i określa obiekt zawierający dane, które mają być używane przez metodę.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">Metoda jest wykonywana po udostępnieniu wątku puli wątków.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">Jeśli metoda wywołania zwrotnego wymaga złożone dane, można zdefiniować klasy zawierają dane.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Visual Basic users can omit the &lt;xref:System.Threading.WaitCallback&gt; constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to QueueUserWorkItem.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Użytkowników programu Visual Basic można pominąć &lt;xref:System.Threading.WaitCallback&gt;Konstruktor i po prostu użyj <ph id="ph2">`AddressOf`</ph> operator podczas przekazywania metody wywołania zwrotnego do QueueUserWorkItem.&lt;/xref:System.Threading.WaitCallback&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic automatycznie wywołuje konstruktor delegata poprawne.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    In the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method.</source>
          <target state="translated">Wersja informacji w programie .NET Framework w wersji 2.0, &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;wartość właściwości jest propagowana do wątków w kolejce za pomocą &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">We wcześniejszych wersjach głównych informacje nie są propagowane.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> representing the method to execute.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> reprezentujący metodę do wykonania.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">Obiekt zawierający dane, które mają być używane przez metodę.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method is successfully queued; &lt;xref:System.NotSupportedException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli metoda pomyślnie znajduje się w kolejce; &lt;xref:System.NotSupportedException&gt;jest generowany, jeśli nie można umieścić w kolejce elementu roboczego.&lt;/xref:System.NotSupportedException&gt;</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Środowisko uruchomieniowe języka wspólnego (CLR) jest obsługiwana, i host nie obsługuje tej akcji.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, określając 32-bitowej podpisanej liczby całkowitej wartość limitu czasu w milisekundach.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">Metoda funkcji RegisterWaitForSingleObject kolejek określonego delegata do puli wątków.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Wątek roboczy zostanie wykonany delegata, gdy wystąpi jedno z następujących czynności:-określony obiekt jest w stanie sygnałowego.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">— Upłynie interwał limitu czasu.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">Metoda funkcji RegisterWaitForSingleObject sprawdza bieżący stan określonego obiektu &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">Operacja oczekiwania została wykonana przez wątek z puli wątków.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Delegat jest wykonywana przez wątek roboczy w przypadku sygnalizowane staje się stan obiektu lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeOutInterval`</ph> parametru jest 0 (zero) i <ph id="ph2">`executeOnlyOnce`</ph> parametr jest <ph id="ph3">`false`</ph>, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Using &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph2">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Zamiast &lt;xref:System.Threading.Mutex&gt;, użyj &lt;xref:System.Threading.Semaphore&gt;Maksymalna liczba 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Aby anulować operację oczekiwania, należy wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Wątek oczekiwania używa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funkcja monitorowania zarejestrowanych oczekiwania operacji.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">W związku z tym, jeśli w wielu wywołań funkcji registerwaitforsingleobject, należy użyć tego samego uchwyt macierzysty systemu operacyjnego, należy skopiować uchwyt, za pomocą środowiska Win32 <ph id="ph1">`DuplicateHandle`</ph> funkcji.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Należy pamiętać, że użytkownik powinien nie impulsów zdarzeń obiektu przekazanych do funkcji RegisterWaitForSingleObject, ponieważ oczekiwania wątku nie może wykryć, że zdarzenie jest sygnalizowane, zanim zostanie zresetowane.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Przed powrotem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modyfikacja występuje tylko dla obiektu, którego stan sygnałowego spowodował stan oczekiwania, należy spełnić.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Na przykład Licznik semafora zostaje zmniejszona o jeden.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Wersja informacji w programie .NET Framework w wersji 2.0, &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;wartość właściwości jest propagowana do wątków roboczych w kolejce za pomocą &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">We wcześniejszych wersjach głównych informacje nie są propagowane.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Delegata do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Obiekt, który jest przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Limit czasu w milisekundach.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> parametru jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Która hermetyzuje uchwyt macierzysty.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> Parametr jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, określając 64-bitowej podpisanej liczby całkowitej wartość limitu czasu w milisekundach.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">Metoda funkcji RegisterWaitForSingleObject kolejek określonego delegata do puli wątków.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Wątek roboczy zostanie wykonany delegata, gdy wystąpi jedno z następujących czynności:-określony obiekt jest w stanie sygnałowego.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">— Upłynie interwał limitu czasu.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">Metoda funkcji RegisterWaitForSingleObject sprawdza bieżący stan określonego obiektu &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">Operacja oczekiwania została wykonana przez wątek z puli wątków.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Delegat jest wykonywana przez wątek roboczy w przypadku sygnalizowane staje się stan obiektu lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeOutInterval`</ph> parametru jest 0 (zero) i <ph id="ph2">`executeOnlyOnce`</ph> parametr jest <ph id="ph3">`false`</ph>, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Using &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph2">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Zamiast &lt;xref:System.Threading.Mutex&gt;, użyj &lt;xref:System.Threading.Semaphore&gt;Maksymalna liczba 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Aby anulować operację oczekiwania, należy wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Wątek oczekiwania używa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funkcja monitorowania zarejestrowanych oczekiwania operacji.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">W związku z tym, jeśli w wielu wywołań funkcji registerwaitforsingleobject, należy użyć tego samego uchwyt macierzysty systemu operacyjnego, należy skopiować uchwyt, za pomocą środowiska Win32 <ph id="ph1">`DuplicateHandle`</ph> funkcji.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Należy pamiętać, że użytkownik powinien nie impulsów zdarzeń obiektu przekazanych do funkcji RegisterWaitForSingleObject, ponieważ oczekiwania wątku nie może wykryć, że zdarzenie jest sygnalizowane, zanim zostanie zresetowane.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Przed powrotem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modyfikacja występuje tylko dla obiektu, którego stan sygnałowego spowodował stan oczekiwania, należy spełnić.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Na przykład Licznik semafora zostaje zmniejszona o jeden.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Wersja informacji w programie .NET Framework w wersji 2.0, &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;wartość właściwości jest propagowana do wątków roboczych w kolejce za pomocą &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">We wcześniejszych wersjach głównych informacje nie są propagowane.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Delegata do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">Obiekt przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Limit czasu w milisekundach.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> parametru jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Która hermetyzuje uchwyt macierzysty.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> Parametr jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a &lt;xref:System.TimeSpan&gt; value for the time-out.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, określania &lt;xref:System.TimeSpan&gt;wartość limitu czasu.&lt;/xref:System.TimeSpan&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method queues the specified delegate to the thread pool.</source>
          <target state="translated">Metoda funkcji RegisterWaitForSingleObject kolejek określonego delegata do puli wątków.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Wątek roboczy zostanie wykonany delegata, gdy wystąpi jedno z następujących czynności:-określony obiekt jest w stanie sygnałowego.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">— Upłynie interwał limitu czasu.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>The RegisterWaitForSingleObject method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">Metoda funkcji RegisterWaitForSingleObject sprawdza bieżący stan określonego obiektu &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">Operacja oczekiwania została wykonana przez wątek z puli wątków.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Delegat jest wykonywana przez wątek roboczy w przypadku sygnalizowane staje się stan obiektu lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeOutInterval`</ph> parametru jest 0 (zero) i <ph id="ph2">`executeOnlyOnce`</ph> parametr jest <ph id="ph3">`false`</ph>, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Using &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph2">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Zamiast &lt;xref:System.Threading.Mutex&gt;, użyj &lt;xref:System.Threading.Semaphore&gt;Maksymalna liczba 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Aby anulować operację oczekiwania, należy wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Wątek oczekiwania używa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funkcja monitorowania zarejestrowanych oczekiwania operacji.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to RegisterWaitForSingleObject, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">W związku z tym, jeśli w wielu wywołań funkcji registerwaitforsingleobject, należy użyć tego samego uchwyt macierzysty systemu operacyjnego, należy skopiować uchwyt, za pomocą środowiska Win32 <ph id="ph1">`DuplicateHandle`</ph> funkcji.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to RegisterWaitForSingleObject, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Należy pamiętać, że użytkownik powinien nie impulsów zdarzeń obiektu przekazanych do funkcji RegisterWaitForSingleObject, ponieważ oczekiwania wątku nie może wykryć, że zdarzenie jest sygnalizowane, zanim zostanie zresetowane.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Przed powrotem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modyfikacja występuje tylko dla obiektu, którego stan sygnałowego spowodował stan oczekiwania, należy spełnić.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Na przykład Licznik semafora zostaje zmniejszona o jeden.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Wersja informacji w programie .NET Framework w wersji 2.0, &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;wartość właściwości jest propagowana do wątków roboczych w kolejce za pomocą &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">We wcześniejszych wersjach głównych informacje nie są propagowane.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Delegata do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">Obiekt przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The time-out represented by a &lt;xref:System.TimeSpan&gt;.</source>
          <target state="translated">Limit czasu reprezentowane przez &lt;xref:System.TimeSpan&gt;.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that encapsulates the native handle.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Która hermetyzuje uchwyt macierzysty.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> Parametr jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> Parametru jest większa niż <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, określając 32-bitową nieznakowaną liczbą całkowitą wartość limitu czasu w milisekundach.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method queues the specified delegate to the thread pool.</source>
          <target state="translated">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;Metody kolejki określonego delegata do puli wątków.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>A worker thread will execute the delegate when one of the following occurs:      -   The specified object is in the signaled state.</source>
          <target state="translated">Wątek roboczy zostanie wykonany delegata, gdy wystąpi jedno z następujących czynności:-określony obiekt jest w stanie sygnałowego.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   The time-out interval elapses.</source>
          <target state="translated">— Upłynie interwał limitu czasu.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;method checks the current state of the specified object's &lt;xref:System.Threading.WaitHandle&gt;.</source>
          <target state="translated">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;Metoda sprawdza bieżący stan określonego obiektu &lt;xref:System.Threading.WaitHandle&gt;.&lt;/xref:System.Threading.WaitHandle&gt; &lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Jeśli stan obiektu jest unsignaled, metoda rejestruje operacji oczekiwania.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">Operacja oczekiwania została wykonana przez wątek z puli wątków.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Delegat jest wykonywana przez wątek roboczy w przypadku sygnalizowane staje się stan obiektu lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeOutInterval`</ph> parametru jest 0 (zero) i <ph id="ph2">`executeOnlyOnce`</ph> parametr jest <ph id="ph3">`false`</ph>, jest resetowany za każdym razem, gdy zdarzenie jest sygnalizowane lub upłynie limit czasu.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Using &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph2">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of a &lt;xref:System.Threading.Mutex&gt;, use a &lt;xref:System.Threading.Semaphore&gt; with a maximum count of 1.</source>
          <target state="translated">Zamiast &lt;xref:System.Threading.Mutex&gt;, użyj &lt;xref:System.Threading.Semaphore&gt;Maksymalna liczba 1.&lt;/xref:System.Threading.Semaphore&gt; &lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel the wait operation, call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method.</source>
          <target state="translated">Aby anulować operację oczekiwania, należy wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Wątek oczekiwania używa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funkcja monitorowania zarejestrowanych oczekiwania operacji.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, you must duplicate the handle using the Win32 <ph id="ph1">`DuplicateHandle`</ph> function.</source>
          <target state="translated">W związku z tym należy używać tej samej uchwyt macierzysty system operacyjny w wielu wywołań &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, należy skopiować uchwyt, za pomocą środowiska Win32 <ph id="ph1">`DuplicateHandle`</ph> funkcji.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that you should not pulse an event object passed to &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Należy pamiętać, że nie należy impulsów zdarzeń obiektu przekazanych do &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;, ponieważ oczekiwania wątku nie może wykryć, że zdarzenie jest sygnalizowane, zanim zostanie zresetowane.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Przed powrotem, funkcja modyfikuje stan niektórych typów obiektów synchronizacji.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modyfikacja występuje tylko dla obiektu, którego stan sygnałowego spowodował stan oczekiwania, należy spełnić.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Na przykład Licznik semafora zostaje zmniejszona o jeden.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>Version Information    Starting with the .NET Framework version 2.0, the &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt; property value is propagated to worker threads queued using the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method.</source>
          <target state="translated">Wersja informacji w programie .NET Framework w wersji 2.0, &lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;wartość właściwości jest propagowana do wątków roboczych w kolejce za pomocą &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; &lt;/xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">We wcześniejszych wersjach głównych informacje nie są propagowane.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.WaitOrTimerCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Delegata do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The object passed to the delegate.</source>
          <target state="translated">Obiekt przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Limit czasu w milisekundach.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> parametru jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Można anulować operacji zarejestrowanych oczekiwania.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> Parametr jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Ustawia liczbę żądań w puli wątków, które mogą być jednocześnie aktywne.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Wszystkie żądania powyżej tego numeru pozostają w kolejce do momentu udostępnienie wątków z puli wątków.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">Nie można ustawić maksymalną liczbę wątków roboczych lub wątków zakończenia We/Wy na liczbę mniejszą niż liczba procesorów na komputerze.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine how many processors are present, retrieve the value of the &lt;xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt; property.</source>
          <target state="translated">Aby ustalić liczbę procesorów są obecne, pobrać wartość &lt;xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt;Właściwości.&lt;/xref:System.Environment.ProcessorCount%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">Ponadto nie można ustawić maksymalną liczbę wątków roboczych lub zakończenia We/Wy wątków liczbą mniejszą niż odpowiedni minimalna liczba wątków roboczych lub wątków zakończenia We/Wy.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>To determine the minimum thread pool size,  call the &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt; method.</source>
          <target state="translated">Aby określić rozmiar puli wątków minimalne, należy wywołać &lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;metody.&lt;/xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">Jeśli środowisko uruchomieniowe języka wspólnego jest obsługiwana, na przykład przez Internet Information Services (IIS) lub SQL Server hosta można ograniczyć lub uniemożliwić zmiany rozmiaru puli wątków.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">Należy zachować ostrożność podczas zmiany maksymalną liczbę wątków w puli wątków.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">Gdy kod może korzystać, zmiany mogą mieć niekorzystny wpływ na bibliotekach kod, którego używasz.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">Ustawienie zbyt duży rozmiar puli wątków może spowodować problemy z wydajnością.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">Zbyt wiele wątków wykonywania jednocześnie przełączanie zadań nakładów pracy, staje się ważnym czynnikiem.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Maksymalna liczba wątków roboczych w puli wątków.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Maksymalna liczba asynchronicznych wątków We/Wy w puli wątków.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the change is successful; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli zmiana zakończy się pomyślnie; w przeciwnym razie <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Ustawia minimalną liczbę wątków, jakiej puli wątków tworzy na żądanie, wprowadzono nowe żądania, przed przełączeniem algorytm zarządzania wątku tworzenie i likwidacja.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Puli wątków zawiera nowe wątków roboczych lub wątków zakończenia We/Wy na żądanie, dopóki nie osiągnie minimum dla każdej kategorii.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Po osiągnięciu wartości minimalnej puli wątków można utworzyć dodatkowe wątki w tej kategorii lub zaczekaj na zakończenie niektórych zadań.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">Począwszy od <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, pulą wątków tworzy i niszczy wątki w celu zoptymalizowania przepustowości, która jest zdefiniowana jako liczba zadań, kończące się na jednostkę czasu.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Zbyt mało wątków może nie mieć optymalne wykorzystanie dostępnych zasobów, natomiast zbyt wiele wątków można zwiększyć rywalizacji.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Jeśli żądanie jest niska, rzeczywista liczba wątków z puli wątków można spadnie poniżej wartości minimalnej.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;), SetMinThreads returns <ph id="ph1">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">Jeśli określono wartość ujemną lub większą niż maksymalna liczba aktywnych wątków z puli wątków liczbą (uzyskanych przy użyciu &lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;), zwraca SetMinThreads <ph id="ph1">`false`</ph> i nie zmienia się od wartości minimalnej.&lt;/xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; Domyślnie, minimalna liczba wątków jest ustawiona wartość liczby procesorów w systemie.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the SetMinThreads method to increase the minimum number ofthreads.</source>
          <target state="translated">SetMinThreads — metoda umożliwia zwiększenie minimalna liczba ofthreads.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Jednak niepotrzebnie zwiększenie tych wartości może spowodować problemy z wydajnością.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Jeśli zbyt wiele zadań jest uruchomiona w tym samym czasie, wszystkie z nich wydaje się powoli.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">W większości przypadków puli wątków będą działać lepiej z własną algorytmu alokacji wątków.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">Zmniejszanie minimalnej na wartość mniejszą niż liczba procesorów również może pogarszać wydajność.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Minimalna liczba wątków roboczych, utworzonych puli wątków na żądanie.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Minimalna liczba asynchronicznych wątków We/Wy, które tworzy puli wątków na żądanie.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the change is successful; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli zmiana zakończy się pomyślnie; w przeciwnym razie <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">Kolejkuje pokrywającej się z inną operacji We/Wy do wykonania.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about using native Win32 overlapped I/O, see the &lt;xref:System.Threading.Overlapped&gt; class, the &lt;xref:System.Threading.NativeOverlapped&gt; structure, and the <ph id="ph1">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">Aby uzyskać informacji o korzystaniu z natywnego Win32 pokrywający się we/wy, zobacz &lt;xref:System.Threading.Overlapped&gt;klasy, &lt;xref:System.Threading.NativeOverlapped&gt;struktury i <ph id="ph1">`OVERLAPPED`</ph> struktury w zestawie SDK platformy Win32.&lt;/xref:System.Threading.NativeOverlapped&gt; &lt;/xref:System.Threading.Overlapped&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using the UnsafeQueueNativeOverlapped method could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; Przy użyciu UnsafeQueueNativeOverlapped metody przypadkowo może otworzyć się luka w zabezpieczeniach.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Zabezpieczenia dostępu kodu podstawowych jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeQueueNativeOverlapped, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">Podczas pracy przebywa w kolejce w wątku puli wątków, przy użyciu UnsafeQueueNativeOverlapped, stosu wątku puli wątków nie ma kontekście rzeczywiste obiekty wywołujące.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Złośliwy kod może być w stanie wykorzystać, aby uniknąć kontroli uprawnień.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> structure to queue.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.NativeOverlapped"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Struktury do kolejki.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the operation was successfully queued to an I/O completion port; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Operacja została pomyślnie umieszczane w kolejce do portu zakończenia We/Wy; w przeciwnym razie <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Kolejkuje określonego delegata do puli wątków, ale nie propaguje stosu wywołania do wątku roboczego.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt; method, UnsafeQueueUserWorkItem does not propagate the calling stack to the worker thread.</source>
          <target state="translated">W odróżnieniu od &lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;metody UnsafeQueueUserWorkItem nie propaguje stosu wywołania do wątku roboczego.&lt;/xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Dzięki temu kod utratę stosu wywołania i tym samym podniesienie poziomu swoje uprawnienia zabezpieczeń.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeQueueUserWorkItem could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeQueueUserWorkItem przy użyciu przypadkowo może otworzyć się luka w zabezpieczeniach.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Zabezpieczenia dostępu kodu podstawowych jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeQueueUserWorkItem, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Podczas pracy przebywa w kolejce w wątku puli wątków, przy użyciu UnsafeQueueUserWorkItem, stosu wątku puli wątków nie będzie miał kontekście rzeczywiste obiekty wywołujące.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Złośliwy kod może być w stanie wykorzystać, aby uniknąć kontroli uprawnień.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Threading.WaitCallback"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> reprezentujący delegata do wywołania, gdy wątek w puli wątków przejmuje elementu roboczego.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">Obiekt, który jest przekazywany do delegata, gdy obsługiwany z puli wątków.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the method succeeds; &lt;xref:System.OutOfMemoryException&gt; is thrown if the work item could not be queued.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Jeśli metoda zakończy się pomyślnie; &lt;xref:System.OutOfMemoryException&gt;jest generowany, jeśli nie można umieścić w kolejce elementu roboczego.&lt;/xref:System.OutOfMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Obiekt wywołujący nie ma wymaganych uprawnień.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">Wystąpił stan braku pamięci.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The work item could not be queued.</source>
          <target state="translated">Element roboczy nie można umieścić w kolejce.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;callBack&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, przy użyciu 32-bitowej podpisanej liczby całkowitej wartość limitu czasu w milisekundach.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ta metoda nie są propagowane stosu wywołania do wątku roboczego.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">W odróżnieniu od &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody UnsafeRegisterWaitForSingleObject nie propaguje stosu wywołania do wątku roboczego.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Dzięki temu kod utratę stosu wywołania i tym samym podniesienie poziomu swoje uprawnienia zabezpieczeń.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject przy użyciu przypadkowo może otworzyć się luka w zabezpieczeniach.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Zabezpieczenia dostępu kodu podstawowych jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Podczas pracy przebywa w kolejce w wątku puli wątków, przy użyciu UnsafeRegisterWaitForSingleObject, stosu wątku puli wątków nie będzie miał kontekście rzeczywiste obiekty wywołujące.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Złośliwy kod może być w stanie wykorzystać, aby uniknąć kontroli uprawnień.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Przy użyciu &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph1">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">Delegat do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Obiekt, który jest przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Limit czasu w milisekundach.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> parametru jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Obiektu, który może służyć do anulowania operacji zarejestrowanych oczekiwania.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> Parametr jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Obiekt wywołujący nie ma wymaganych uprawnień.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, określając 64-bitowej podpisanej liczby całkowitej wartość limitu czasu w milisekundach.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ta metoda nie są propagowane stosu wywołania do wątku roboczego.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">W odróżnieniu od &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody UnsafeRegisterWaitForSingleObject nie propaguje stosu wywołania do wątku roboczego.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Dzięki temu kod utratę stosu wywołania i tym samym podniesienie poziomu swoje uprawnienia zabezpieczeń.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject przy użyciu przypadkowo może otworzyć się luka w zabezpieczeniach.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Zabezpieczenia dostępu kodu podstawowych jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Podczas pracy przebywa w kolejce w wątku puli wątków, przy użyciu UnsafeRegisterWaitForSingleObject, stosu wątku puli wątków nie będzie miał kontekście rzeczywiste obiekty wywołujące.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Złośliwy kod może być w stanie wykorzystać, aby uniknąć kontroli uprawnień.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Przy użyciu &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph1">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">Delegat do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Obiekt, który jest przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Limit czasu w milisekundach.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> parametru jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Obiektu, który może służyć do anulowania operacji zarejestrowanych oczekiwania.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">millisecondsTimeOutInterval</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">millisecondsTimeOutInterval</ph> <ept id="p1">&lt;/code&gt;</ept> Parametr jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Obiekt wywołujący nie ma wymaganych uprawnień.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a &lt;xref:System.TimeSpan&gt; value for the time-out.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, określania &lt;xref:System.TimeSpan&gt;wartość limitu czasu.&lt;/xref:System.TimeSpan&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ta metoda nie są propagowane stosu wywołania do wątku roboczego.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">W odróżnieniu od &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody UnsafeRegisterWaitForSingleObject nie propaguje stosu wywołania do wątku roboczego.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Dzięki temu kod utratę stosu wywołania i tym samym podniesienie poziomu swoje uprawnienia zabezpieczeń.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject przy użyciu przypadkowo może otworzyć się luka w zabezpieczeniach.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Zabezpieczenia dostępu kodu podstawowych jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Podczas pracy przebywa w kolejce w wątku puli wątków, przy użyciu UnsafeRegisterWaitForSingleObject, stosu wątku puli wątków nie będzie miał kontekście rzeczywiste obiekty wywołujące.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Złośliwy kod może być w stanie wykorzystać, aby uniknąć kontroli uprawnień.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Przy użyciu &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph1">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">Delegat do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Obiekt, który jest przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The time-out represented by a &lt;xref:System.TimeSpan&gt;.</source>
          <target state="translated">Limit czasu reprezentowane przez &lt;xref:System.TimeSpan&gt;.&lt;/xref:System.TimeSpan&gt;</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`timeout`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`timeout`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Obiektu, który może służyć do anulowania operacji zarejestrowanych oczekiwania.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than -1.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> Parametr jest mniejsza niż -1.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> parameter is greater than <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">timeout</ph> <ept id="p1">&lt;/code&gt;</ept> Parametru jest większa niż <ph id="ph2">&amp;lt;</ph>xref:System.Int32.MaxValue?displayProperty=fullName<ph id="ph3">&amp;gt;</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Obiekt wywołujący nie ma wymaganych uprawnień.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Registers a delegate to wait for a &lt;xref:System.Threading.WaitHandle&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Rejestruje delegata oczekiwania &lt;xref:System.Threading.WaitHandle&gt;, określając 32-bitową nieznakowaną liczbą całkowitą wartość limitu czasu w milisekundach.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Ta metoda nie są propagowane stosu wywołania do wątku roboczego.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike the &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt; method, UnsafeRegisterWaitForSingleObject does not propagate the calling stack to the worker thread.</source>
          <target state="translated">W odróżnieniu od &lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;metody UnsafeRegisterWaitForSingleObject nie propaguje stosu wywołania do wątku roboczego.&lt;/xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Dzięki temu kod utratę stosu wywołania i tym samym podniesienie poziomu swoje uprawnienia zabezpieczeń.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!CAUTION]</ph> &gt;  Using UnsafeRegisterWaitForSingleObject could inadvertently open up a security hole.</source>
          <target state="translated">&gt; <ph id="ph1">[!CAUTION]</ph> &gt; UnsafeRegisterWaitForSingleObject przy użyciu przypadkowo może otworzyć się luka w zabezpieczeniach.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Zabezpieczenia dostępu kodu podstawowych jego uprawnień kontroli uprawnienia wszystkich obiektów wywołujących na stosie.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT">
          <source>When work is queued on a thread pool thread using UnsafeRegisterWaitForSingleObject, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Podczas pracy przebywa w kolejce w wątku puli wątków, przy użyciu UnsafeRegisterWaitForSingleObject, stosu wątku puli wątków nie będzie miał kontekście rzeczywiste obiekty wywołujące.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Złośliwy kod może być w stanie wykorzystać, aby uniknąć kontroli uprawnień.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using a &lt;xref:System.Threading.Mutex&gt; for <ph id="ph1">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Przy użyciu &lt;xref:System.Threading.Mutex&gt;dla <ph id="ph1">`waitObject`</ph> nie zapewnia wzajemne wykluczenie dla wywołań zwrotnych, ponieważ podstawowy interfejs API Win32 używa domyślnej <ph id="ph2">`WT_EXECUTEDEFAULT`</ph> Flaga, więc każdego wywołania zwrotnego jest wywoływane w wątku puli oddzielnym wątku.&lt;/xref:System.Threading.Mutex&gt;</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you are finished using the &lt;xref:System.Threading.RegisteredWaitHandle&gt; that is returned by this method, call its &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method to release references to the wait handle.</source>
          <target state="translated">Po zakończeniu przy użyciu &lt;xref:System.Threading.RegisteredWaitHandle&gt;, który jest zwracany przez tę metodę należy wywołać jej &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metodę, aby zwolnić odwołania do dojścia oczekiwania.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; &lt;/xref:System.Threading.RegisteredWaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>We recommend that you always call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method, even if you specify <ph id="ph1">`true`</ph> for <ph id="ph2">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Zaleca się, że należy zawsze wywołać &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;metody, nawet jeśli określisz <ph id="ph1">`true`</ph> dla <ph id="ph2">`executeOnlyOnce`</ph>.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>Garbage collection works more efficiently if you call the &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt; method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Wyrzucanie elementów bezużytecznych działa więcej w wydajnie połączeń &lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;zamiast metody w zależności od dojścia oczekiwania zarejestrowanych finalizator.&lt;/xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Threading.WaitHandle&gt; to register.</source>
          <target state="translated">&lt;xref:System.Threading.WaitHandle&gt;Do zarejestrowania.&lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Use a &lt;xref:System.Threading.WaitHandle&gt; other than &lt;xref:System.Threading.Mutex&gt;.</source>
          <target state="translated">Użyj &lt;xref:System.Threading.WaitHandle&gt;innego niż &lt;xref:System.Threading.Mutex&gt;.&lt;/xref:System.Threading.Mutex&gt; &lt;/xref:System.Threading.WaitHandle&gt;</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The delegate to call when the <ph id="ph1">`waitObject`</ph> parameter is signaled.</source>
          <target state="translated">Delegat do wywołania, gdy <ph id="ph1">`waitObject`</ph> jest sygnalizowane parametru.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Obiekt, który jest przekazywany do delegata.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Limit czasu w milisekundach.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`millisecondsTimeOutInterval`</ph> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> parametru jest 0 (zero), funkcja sprawdza stan obiektu i zwraca natychmiast.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`millisecondsTimeOutInterval`</ph> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Jeśli <ph id="ph1">`millisecondsTimeOutInterval`</ph> wynosi -1, nigdy nie upłynie funkcji limitu czasu.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> to indicate that the thread will no longer wait on the <ph id="ph1">`waitObject`</ph> parameter after the delegate has been called; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Aby wskazać, że wątek nie będzie czekać <ph id="ph1">`waitObject`</ph> parametru po wywołaniu delegata; <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> resetowany czasomierz jest każdorazowo po zakończeniu operacji poczekaj, aż czas oczekiwania jest zarejestrowany.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that can be used to cancel the registered wait operation.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Threading.RegisteredWaitHandle"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> Obiektu, który może służyć do anulowania operacji zarejestrowanych oczekiwania.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Obiekt wywołujący nie ma wymaganych uprawnień.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>