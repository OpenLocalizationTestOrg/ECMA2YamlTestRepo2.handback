<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nl-nl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f39f5af0aef3cebd78af7c30e0c5b8fd95c98c7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.CodeDom.CodeTypeReference.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b45739f82f438bc108ac9ecf89307b043ced5af1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74667c2ed0cd9f78f4e58c220bd21bee5cc1c4ca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a reference to a type.</source>
          <target state="translated">Vertegenwoordigt een verwijzing naar een type.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A CodeTypeReference object is used to represent a type for CodeDOM objects.</source>
          <target state="translated">Een object CodeTypeReference wordt gebruikt om weer te geven van een type voor CodeDOM-objecten.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When CodeDOM types have a <ph id="ph1">`Type`</ph> property, it is of type CodeTypeReference.</source>
          <target state="translated">Wanneer de CodeDOM-typen hebben een <ph id="ph1">`Type`</ph> -eigenschap is van het type CodeTypeReference.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the &lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=fullName&gt; property is a CodeTypeReference that represents a field's data type.</source>
          <target state="translated">Bijvoorbeeld, de &lt;xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=fullName&gt;eigenschap is een CodeTypeReference die het gegevenstype van een veld vertegenwoordigt.&lt;/xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A CodeTypeReference can be initialized with a &lt;xref:System.Type&gt; object or a string.</source>
          <target state="translated">Een CodeTypeReference kan worden ge√Ønitialiseerd met een &lt;xref:System.Type&gt;object of een tekenreeks.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is generally recommended to use a &lt;xref:System.Type&gt; to do this, although it may not always be possible.</source>
          <target state="translated">Het is raadzaam om te gebruiken een &lt;xref:System.Type&gt;om dit te doen, hoewel het mogelijk niet altijd mogelijk.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If initializing an instance of this class with a string, it is strongly recommended to always use fully qualified types, such as "System.Console" instead of just "Console", because not all languages support importing namespaces.</source>
          <target state="translated">Als tijdens de initialisatie van een exemplaar van deze klasse met een tekenreeks, is het raadzaam altijd gebruik van volledig gekwalificeerde typen, zoals 'System.Console' in plaats van alleen 'Console', omdat niet alle talen importeren naamruimten ondersteunen.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Array types can be specified by either passing in a type object for an array or using one of the constructors that accept rank as a parameter.</source>
          <target state="translated">Matrixtypen kunnen worden opgegeven met een van de constructors die positie als een parameter accepteren of doorgeven in een object van het type voor een matrix.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt; property specifies the name of the type to reference.</source>
          <target state="translated">De &lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;eigenschap geeft u de naam van het type om te verwijzen.&lt;/xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For references to array types, the &lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt; property indicates the type of the elements of the array, and the &lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt; property indicates the number of dimensions in the array.</source>
          <target state="translated">Voor verwijzingen naar matrixtypen, de &lt;xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;eigenschap geeft het type van de elementen van de matrix en de &lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;eigenschap geeft het aantal dimensies in de matrix.&lt;/xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt; &lt;/xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor creates an empty &lt;xref:System.CodeDom.CodeTypeReference&gt; object.</source>
          <target state="translated">Deze constructor maakt een lege &lt;xref:System.CodeDom.CodeTypeReference&gt;object.&lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use this constructor, set properties to establish the type reference.</source>
          <target state="translated">Als u deze constructor gebruikt, kunt u eigenschappen tot stand brengen van het typeverwijzing instellen.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified code type parameter.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met de opgegeven code typeparameter.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameter"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that represents the type of the type parameter.</source>
          <target state="translated">Een <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeParameter"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> die staat voor het type van het typeparameter.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type name.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met behulp van de opgegeven typenaam.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`typeName`</ph> parameter references a generic type, it must follow the syntax conventions for generic types.</source>
          <target state="translated">Als de <ph id="ph1">`typeName`</ph> parameter verwijst naar een generiek type, het moet voldoen aan de syntaxis van de regels voor algemene typen.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the reflection signature for a &lt;xref:System.Collections.Generic.Dictionary%602&gt; type, where <ph id="ph1">`K`</ph> is a string and <ph id="ph2">`V`</ph> is a &lt;xref:System.Collections.Generic.List%601&gt; of integers, is represented by reflection as the following (with the assembly information removed): <ph id="ph3">`System.Collections.Generic.Dictionary`</ph>2[[System.String], [System.Collections.Generic.List<ph id="ph4">`1[[System.Int32]]]]`</ph>.</source>
          <target state="translated">Bijvoorbeeld, de reflectie handtekening voor een &lt;xref:System.Collections.Generic.Dictionary%602&gt;type, waarbij <ph id="ph1">`K`</ph> is een tekenreeks en <ph id="ph2">`V`</ph> is een &lt;xref:System.Collections.Generic.List%601&gt;van gehele getallen, wordt vertegenwoordigd door reflectie als de volgende (met de assembly-informatie verwijderd): <ph id="ph3">`System.Collections.Generic.Dictionary`</ph>2[[System.String], [System.Collections.Generic.List<ph id="ph4">`1[[System.Int32]]]]`</ph>.&lt;/xref:System.Collections.Generic.List%601&gt; &lt;/xref:System.Collections.Generic.Dictionary%602&gt;</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  You must use square brackets ([]) and not the C# angle brackets (&lt;&gt;) to delimit generic parameters.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Moet u vierkante haken ([]) en niet de C# punthaken (&lt;&gt;) van elkaar te scheiden van algemene parameters.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid the possibility of making a mistake in specifying the syntax, consider using the constructor that takes a type as a parameter instead of a string.</source>
          <target state="translated">Om te voorkomen dat de mogelijkheid een fout bij het opgeven van de syntaxis, kunt u overwegen de constructor die een type als een parameter in plaats van een tekenreeks.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
          <target state="translated">De naam van het type om te verwijzen.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met behulp van het opgegeven type.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to reference.</source>
          <target state="translated">De &lt;xref:System.Type&gt;om te verwijzen naar.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;type &lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;type &lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified array type and rank.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met behulp van het type van de opgegeven matrix en de positie.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor can be used to construct arrays of arrays by nesting &lt;xref:System.CodeDom.CodeTypeReference&gt; objects.</source>
          <target state="translated">Deze constructor kan worden gebruikt voor het maken van matrices van matrices te nesten &lt;xref:System.CodeDom.CodeTypeReference&gt;objecten.&lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the type of the array.</source>
          <target state="translated">Een <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> die aangeeft dat het type van de matrix.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The number of dimensions in the array.</source>
          <target state="translated">Het aantal dimensies in de matrix.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type name and type arguments.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met behulp van de opgegeven naam en type typeargumenten.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
          <target state="translated">De naam van het type om te verwijzen.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An array of <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">Een matrix van <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> waarden.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type name and code type reference option.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met behulp van de opgegeven naam en type verwijzingsoptie code.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The name of the type to reference.</source>
          <target state="translated">De naam van het type om te verwijzen.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The code type reference option, one of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">Het type verwijzing optie code, een van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> waarden.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified array type name and rank.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met de naam van de opgegeven matrix en de positie.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The name of the type of the elements of the array.</source>
          <target state="translated">De naam van het type van de elementen van de matrix.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
          <target state="translated">Het aantal dimensies van de matrix.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class using the specified type and code type reference.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse met behulp van het opgegeven type en code van de typeverwijzing.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Type&gt; to reference.</source>
          <target state="translated">De &lt;xref:System.Type&gt;om te verwijzen naar.&lt;/xref:System.Type&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The code type reference option, one of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">Het type verwijzing optie code, een van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> waarden.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets or sets the type of the elements in the array.</source>
          <target state="translated">Opgehaald of ingesteld van het type van de elementen in de matrix.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is disregarded unless the &lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt; property is greater than or equal to 1.</source>
          <target state="translated">Dit wordt genegeerd als de &lt;xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;eigenschap is groter dan of gelijk zijn aan 1.&lt;/xref:System.CodeDom.CodeTypeReference.ArrayRank%2A&gt;</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> that indicates the type of the array elements.</source>
          <target state="translated">Een <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> die aangeeft dat het type van de matrixelementen.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Gets or sets the array rank of the array.</source>
          <target state="translated">Opgehaald of ingesteld van de matrixpositie van de matrix.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The number of dimensions of the array.</source>
          <target state="translated">Het aantal dimensies van de matrix.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the type being referenced.</source>
          <target state="translated">Opgehaald of ingesteld van de naam van het type waarnaar wordt verwezen.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains the name of the type unless it is an array type, in which case it is the array element type.</source>
          <target state="translated">Deze eigenschap bevat de naam van het type tenzij het een matrixtype, in welk geval is het elementtype van matrix.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  The name of the property may be misleading.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; De naam van de eigenschap misleidend zijn.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property contains just the type name with any array adornments or generic type arguments removed, not the base or parent type as might be expected.</source>
          <target state="translated">Deze eigenschap bevat de typenaam met een matrix aanduidingen of algemene typeargumenten verwijderd, niet het type basis of bovenliggende zoals kan worden verwacht.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the BaseType value for <ph id="ph1">`System.Collections.Generic.Dictionary`</ph>2[[System.String], [System.Collections.Generic.List<ph id="ph2">`1[[System.Int32]]]]`</ph> is <ph id="ph3">`System.Collections.Generic.Dictionary`</ph>2<ph id="ph4">`.      ## Representation of Generic Types    The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages. The return value can contain generic types. Generic types are formatted with the name of the type followed by a grave accent ("`</ph>") followed by a count of the generic type arguments.</source>
          <target state="translated">Bijvoorbeeld: de waarde voor BaseType <ph id="ph1">`System.Collections.Generic.Dictionary`</ph>2[[System.String], [System.Collections.Generic.List<ph id="ph2">`1[[System.Int32]]]]`</ph> is <ph id="ph3">`System.Collections.Generic.Dictionary`</ph>2<ph id="ph4">`.      ## Representation of Generic Types    The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages. The return value can contain generic types. Generic types are formatted with the name of the type followed by a grave accent ("`</ph>') gevolgd door een aantal van de algemene typeargumenten.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>The generic type arguments can be found in the &lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt; returned by the &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; property.</source>
          <target state="translated">De algemene typeargumenten vindt u in de &lt;xref:System.CodeDom.CodeTypeReferenceCollection&gt;geretourneerd door de &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;eigenschap.&lt;/xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; &lt;/xref:System.CodeDom.CodeTypeReferenceCollection&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>The values returned by BaseType and the associated &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; contain the same content as the value of the type returned by reflection.</source>
          <target state="translated">De waarden die door BaseType en de bijbehorende &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;bevatten dezelfde inhoud als de waarde van het type dat wordt geretourneerd door reflectie.&lt;/xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a constructed &lt;xref:System.Collections.Generic.Dictionary%602&gt; where <ph id="ph1">`K`</ph> is a string and <ph id="ph2">`V`</ph> is a constructed &lt;xref:System.Collections.Generic.List%601&gt; of integers is represented by reflection as the following (with the assembly information removed):      <ph id="ph3">```   System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]   ```</ph>       Recursively parsing the BaseType property from the &lt;xref:System.CodeDom.CodeTypeReference&gt; for &lt;xref:System.Collections.Generic.Dictionary%602&gt; yields the same strings as the reflection representation above:      -   The BaseType property for the parent &lt;xref:System.CodeDom.CodeTypeReference&gt; returns the following:      <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept>   -   The BaseType property for the first &lt;xref:System.CodeDom.CodeTypeReference&gt; object in the &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; collection returns the following:      <bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept>   -   The BaseType property for the second &lt;xref:System.CodeDom.CodeTypeReference&gt; object in the &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; collection returns the following:      <bpt id="p3">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p3">&lt;/CodeContentPlaceHolder&gt;</ept>   -   The &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; property in the &lt;xref:System.CodeDom.CodeTypeReference&gt; object for <ph id="ph4">`System.Collections.Generic.List`</ph>1` returns the following:          <ph id="ph5">```       System.Int32       ```</ph>       The type argument count should be used when parsing the associated &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; values.</source>
          <target state="translated">Bijvoorbeeld, een samengestelde &lt;xref:System.Collections.Generic.Dictionary%602&gt;waar <ph id="ph1">`K`</ph> is een tekenreeks en <ph id="ph2">`V`</ph> is een samengestelde &lt;xref:System.Collections.Generic.List%601&gt;van gehele getallen wordt vertegenwoordigd door reflectie als de volgende (met de assembly-informatie verwijderd): <ph id="ph3">```   System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]   ```</ph> recursief bij het parseren van de BaseType-eigenschap van de &lt;xref:System.CodeDom.CodeTypeReference&gt;voor &lt;xref:System.Collections.Generic.Dictionary%602&gt;levert de dezelfde tekenreeksen als de bovenstaande reflectie-weergave:-het BaseType-eigenschap voor de bovenliggende &lt;xref:System.CodeDom.CodeTypeReference&gt;resulteert in het volgende: <bpt id="p1">&lt;CodeContentPlaceHolder&gt;</bpt>1<ept id="p1">&lt;/CodeContentPlaceHolder&gt;</ept> -het BaseType-eigenschap voor het eerste &lt;xref:System.CodeDom.CodeTypeReference&gt;-object in de verzameling &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;resulteert in het volgende : <bpt id="p2">&lt;CodeContentPlaceHolder&gt;</bpt>2<ept id="p2">&lt;/CodeContentPlaceHolder&gt;</ept> -het BaseType-eigenschap voor het tweede &lt;xref:System.CodeDom.CodeTypeReference&gt;object in de &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;verzameling retourneert het volgende: <bpt id="p3">&lt;CodeContentPlaceHolder&gt;</bpt>3<ept id="p3">&lt;/CodeContentPlaceHolder&gt;</ept> : de &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;eigenschap in de &lt;xref:System.CodeDom.CodeTypeReference&gt;-object voor <ph id="ph4">`System.Collections.Generic.List`</ph>1 retourneert het volgende: <ph id="ph5">```       System.Int32       ```</ph> de telling van het type argument moet worden gebruikt bij het parseren van de bijbehorende &lt;xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt;waarden.&lt;/xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt; &lt;/xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; &lt;/xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt; &lt;/xref:System.CodeDom.CodeTypeReference.TypeArguments%2A&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt; &lt;/xref:System.Collections.Generic.Dictionary%602&gt; &lt;/xref:System.CodeDom.CodeTypeReference&gt; &lt;/xref:System.Collections.Generic.List%601&gt; &lt;/xref:System.Collections.Generic.Dictionary%602&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common practice is to remove the type argument count from the generated code, but the practice is compiler specific.</source>
          <target state="translated">De algemene procedure is het aantal type argumenten verwijderen uit de gegenereerde code, maar de praktijk compiler specifieke is.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is important to note that the type argument count can be found within a nested type name, in which case it is followed by a plus sign ("+").</source>
          <target state="translated">Het is belangrijk te weten dat het aantal type argumenten kan worden gevonden binnen de naam van een genest type, in welk geval wordt deze gevolgd door een plusteken ('+').</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  When creating a generic &lt;xref:System.CodeDom.CodeTypeReference&gt;, the recommended practice is to specify the type arguments as &lt;xref:System.CodeDom.CodeTypeReference&gt; objects or use the constructor that takes a &lt;xref:System.Type&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Bij het maken van een algemene &lt;xref:System.CodeDom.CodeTypeReference&gt;wordt u aangeraden de typeargumenten &lt;xref:System.CodeDom.CodeTypeReference&gt;-objecten&lt;/xref:System.CodeDom.CodeTypeReference&gt; of gebruik de constructor waarmee een &lt;xref:System.Type&gt;.&lt;/xref:System.Type&gt; opgeven&lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use of the constructor that creates a &lt;xref:System.CodeDom.CodeTypeReference&gt; from a string can lead to undiscoverable type-argument errors.</source>
          <target state="translated">Gebruik van de constructor waarmee een &lt;xref:System.CodeDom.CodeTypeReference&gt;uit een tekenreeks kan leiden tot fouten undiscoverable typeargument.&lt;/xref:System.CodeDom.CodeTypeReference&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The name of the type being referenced.</source>
          <target state="translated">De naam van het type waarnaar wordt verwezen.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets or sets the code type reference option.</source>
          <target state="translated">Opgehaald of ingesteld van de optie type verwijzing.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A bitwise combination of the <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> values.</source>
          <target state="translated">Een bitsgewijze combinatie van de <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceOptions"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> waarden.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets the type arguments for the current generic type reference.</source>
          <target state="translated">De typeargumenten voor de huidige generiek typeverwijzing opgehaald.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>The TypeArguments property is a collection of type references to be substituted for the type parameter references of the current generic type.</source>
          <target state="translated">De eigenschap TypeArguments dat is een verzameling van typeverwijzingen naar worden vervangen door het type parameterverwijzingen van de huidige algemeen type.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection contains all the type arguments for all nested types.</source>
          <target state="translated">De verzameling bevat de typeargumenten voor alle geneste typen.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see the &lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt; property.</source>
          <target state="translated">Zie voor een voorbeeld de &lt;xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;eigenschap.&lt;/xref:System.CodeDom.CodeTypeReference.BaseType%2A&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> containing the type arguments for the current <bpt id="p2">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">Een <bpt id="p1">&lt;xref href="System.CodeDom.CodeTypeReferenceCollection"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> met de typeargumenten voor de huidige <bpt id="p2">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>