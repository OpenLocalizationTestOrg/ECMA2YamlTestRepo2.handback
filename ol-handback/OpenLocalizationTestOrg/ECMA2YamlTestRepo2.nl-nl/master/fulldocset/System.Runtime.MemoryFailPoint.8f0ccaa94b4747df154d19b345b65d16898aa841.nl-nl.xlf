<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nl-nl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7394e5f549eebeb5d6874d28a8c1acadec70fd95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Runtime.MemoryFailPoint.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6367821b3c5ecca26342c3a63d46ad7cb5f28193</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5241403282e8494c4010a116ca0146ec85a43ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Checks for sufficient memory resources before executing an operation.</source>
          <target state="translated">Controleert of er voldoende geheugenbronnen voordat een bewerking wordt uitgevoerd.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
          <target state="translated">Deze klasse kan niet worden overgenomen.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&gt; [!NOTE]</ph> &gt;  This class is intended for use in advanced development.</source>
          <target state="translated"><ph id="ph1">&gt; [!NOTE]</ph>&gt; Deze klasse is bedoeld voor gebruik in de geavanceerde ontwikkeling.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating an instance of the MemoryFailPoint class creates a memory gate.</source>
          <target state="translated">Het maken van een exemplaar van de klasse MemoryFailPoint maakt een gate geheugen.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</source>
          <target state="translated">Een gate geheugen controleert voldoende bronnen zijn voordat u begint een activiteit een grote hoeveelheid geheugen moet.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Failing the check results in an &lt;xref:System.InsufficientMemoryException&gt; exception being thrown.</source>
          <target state="translated">De controle mislukt resulteert in een &lt;xref:System.InsufficientMemoryException&gt;uitzondering wordt veroorzaakt.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</source>
          <target state="translated">Deze uitzondering wordt voorkomen dat een bewerking wordt gestart en vermindert de kans bestaat dat is mislukt vanwege gebrek aan resources.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables you decrease performance to avoid an &lt;xref:System.OutOfMemoryException&gt; exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</source>
          <target state="translated">Dit kunt u de prestaties verminderen, om te voorkomen dat een &lt;xref:System.OutOfMemoryException&gt;uitzondering en beschadigingen staat dat leiden van een onjuiste afhandeling van de uitzondering op willekeurige locaties in uw code tot kan.&lt;/xref:System.OutOfMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt;  This type implements the &lt;xref:System.IDisposable&gt; interface.</source>
          <target state="translated">&gt; <ph id="ph1">[!IMPORTANT]</ph> &gt; Dit type implementeert de &lt;xref:System.IDisposable&gt;interface.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Wanneer u klaar bent met het type, moet u beschikken over het direct of indirect.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of the type directly, call its &lt;xref:System.IDisposable.Dispose%2A&gt; method in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">Aanroepen voor het rechtstreeks verwijderen van het type ervan &lt;xref:System.IDisposable.Dispose%2A&gt;methode in een <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> blok.&lt;/xref:System.IDisposable.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Gebruiken om de buitengebruikstelling van het indirect, een taal constructie zoals <ph id="ph1">`using`</ph> (in C#) of <ph id="ph2">`Using`</ph> (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the “Using an Object that Implements IDisposable” section in the &lt;xref:System.IDisposable&gt; interface topic.</source>
          <target state="translated">Zie voor meer informatie de sectie 'Met behulp van een Object dat wordt geïmplementeerd IDisposable' in de &lt;xref:System.IDisposable&gt;interface onderwerp.&lt;/xref:System.IDisposable&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>By throwing an &lt;xref:System.InsufficientMemoryException&gt; exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</source>
          <target state="translated">Door een &lt;xref:System.InsufficientMemoryException&gt;uitzondering, een toepassing kan onderscheid maken tussen een schatting maken die een bewerking kan niet worden voltooid en een gedeeltelijk voltooide bewerking die door de status van de toepassing mogelijk beschadigd.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current &lt;xref:System.AppDomain&gt; or recycling the process.</source>
          <target state="translated">Dit kan een toepassing Verlaag de frequentie van een volledige escalatiebeleid waarvoor het verwijderen van de huidige &lt;xref:System.AppDomain&gt;of het proces wordt gerecycled.&lt;/xref:System.AppDomain&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</source>
          <target state="translated">MemoryFailPoint controleert of voldoende geheugen en opeenvolgende virtuele adresruimte beschikbaar in alle garbagecollection heaps zijn en kunnen de grootte van het wisselbestand toenemen.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the &lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt; method to ensure that resources associated with MemoryFailPoint are released.</source>
          <target state="translated">MemoryFailPoint maakt geen garanties met betrekking tot de beschikbaarheid van het geheugen van de lange termijn tijdens de levensduur van de nieuwe telefoonpoort, maar aanroepfuncties gebruik altijd de &lt;xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;methode om ervoor te zorgen dat resources die zijn gekoppeld aan MemoryFailPoint zijn vrijgegeven.&lt;/xref:System.Runtime.MemoryFailPoint.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>To use a memory gate, you must create a MemoryFailPoint object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</source>
          <target state="translated">Als u wilt gebruiken een gate geheugen, moet u een object MemoryFailPoint maken en geef het aantal megabytes (MB) aan geheugen die wordt verwacht dat de volgende bewerking gebruiken.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If enough memory is not available, an &lt;xref:System.InsufficientMemoryException&gt; exception is thrown.</source>
          <target state="translated">Als er onvoldoende geheugen is niet beschikbaar is, een &lt;xref:System.InsufficientMemoryException&gt;uitzondering.&lt;/xref:System.InsufficientMemoryException&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter of the constructor must be a positive integer.</source>
          <target state="translated">De parameter van de constructor moet een positief geheel getal zijn.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>A negative value raises an &lt;xref:System.ArgumentOutOfRangeException&gt; exception.</source>
          <target state="translated">Een negatieve waarde wordt gegeven een &lt;xref:System.ArgumentOutOfRangeException&gt;uitzondering.&lt;/xref:System.ArgumentOutOfRangeException&gt;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>MemoryFailPoint operates at a granularity of 16 MB.</source>
          <target state="translated">MemoryFailPoint werkt op een granulatie van 16 MB.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</source>
          <target state="translated">Alle waarden die kleiner zijn dan 16 MB worden behandeld als 16 MB en andere waarden worden behandeld als het volgende grootste veelvoud van 16 MB.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class, specifying the amount of memory required for successful execution.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse, geven de hoeveelheid geheugen vereist is voor een geslaagde uitvoering.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The amount of memory used by your application to process a work item can be determined empirically.</source>
          <target state="translated">De hoeveelheid geheugen die door uw toepassing wordt gebruikt voor het verwerken van een werkitem kan langs worden bepaald.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>To estimate the amount of memory your application needs to process a request, consider using the &lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt; method to determine the amount of memory available before and after calling the method that processes the work item.</source>
          <target state="translated">Voor een schatting van de hoeveelheid geheugen die uw toepassing moet een aanvraag te verwerken, kunt u overwegen de &lt;xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;methode om te bepalen van de hoeveelheid geheugen die beschikbaar zijn voordat en nadat het aanroepen van de methode die het werkitem verwerkt.&lt;/xref:System.GC.GetTotalMemory%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the &lt;xref:System.Runtime.MemoryFailPoint&gt; class for a code example that dynamically determines the value for the <ph id="ph1">`sizeInMegabytes`</ph> parameter.</source>
          <target state="translated">Zie de &lt;xref:System.Runtime.MemoryFailPoint&gt;klasse voor een codevoorbeeld van een die dynamisch bepaalt de waarde voor de <ph id="ph1">`sizeInMegabytes`</ph> parameter.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The required memory size, in megabytes.</source>
          <target state="translated">De grootte van de vereiste geheugen in megabytes.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This must be a positive value.</source>
          <target state="translated">Dit moet een positieve waarde zijn.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The specified memory size is negative.</source>
          <target state="translated">De opgegeven geheugengrootte is negatief.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There is insufficient memory to begin execution of the code protected by the gate.</source>
          <target state="translated">Er is onvoldoende geheugen om te beginnen met het uitvoeren van de code die wordt beveiligd door de nieuwe telefoonpoort.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Versies van alle resources die worden gebruikt door de <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call Dispose when you are finished using the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">Dispose aanroepen wanneer u klaar bent met de &lt;xref:System.Runtime.MemoryFailPoint&gt;.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispose method leaves the &lt;xref:System.Runtime.MemoryFailPoint&gt; in an unusable state.</source>
          <target state="translated">De methode Dispose verlaat de &lt;xref:System.Runtime.MemoryFailPoint&gt;in een onbruikbare status.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling &lt;xref:System.Runtime.MemoryFailPoint&gt;, you must release all references to the &lt;xref:System.Runtime.MemoryFailPoint&gt; so the garbage collector can reclaim the memory that the &lt;xref:System.Runtime.MemoryFailPoint&gt; was occupying.</source>
          <target state="translated">Na het aanroepen &lt;xref:System.Runtime.MemoryFailPoint&gt;, moet u alle verwijzingen naar vrijgeven de &lt;xref:System.Runtime.MemoryFailPoint&gt;zodat het geheugen door de garbage collector vrijmaken kunt die de &lt;xref:System.Runtime.MemoryFailPoint&gt;is bepaald dat zich bevindt.&lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt; &lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Zie voor meer informatie <bpt id="p1">[</bpt>onbeheerde hulpbronnen reinigen<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept> en <bpt id="p2">[</bpt>uitvoering van een methode Dispose<ept id="p2">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  Always call Dispose before you release your last reference to the &lt;xref:System.Runtime.MemoryFailPoint&gt;.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Altijd aanroep verwijderen voordat u uw laatste verwijzing naar de &lt;xref:System.Runtime.MemoryFailPoint&gt;.&lt;/xref:System.Runtime.MemoryFailPoint&gt; loslaat</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the &lt;xref:System.Runtime.MemoryFailPoint&gt; object's <ph id="ph1">`Finalize`</ph> method.</source>
          <target state="translated">Anders wordt de resources die worden gebruikt niet vrij tot het aanroepen van de garbagecollector van de &lt;xref:System.Runtime.MemoryFailPoint&gt;van het object <ph id="ph1">`Finalize`</ph> methode.&lt;/xref:System.Runtime.MemoryFailPoint&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">Zorgt ervoor dat resources zijn vrijgegeven en andere opschonen-bewerkingen worden uitgevoerd wanneer de garbage collector indexrijen de <bpt id="p1">&lt;xref href="System.Runtime.MemoryFailPoint"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>The garbage collector calls the Finalize method when the current object is ready to be finalized.</source>
          <target state="translated">De garbage collector roept de methode Finalize wanneer het huidige object is gereed om te worden voltooid.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>