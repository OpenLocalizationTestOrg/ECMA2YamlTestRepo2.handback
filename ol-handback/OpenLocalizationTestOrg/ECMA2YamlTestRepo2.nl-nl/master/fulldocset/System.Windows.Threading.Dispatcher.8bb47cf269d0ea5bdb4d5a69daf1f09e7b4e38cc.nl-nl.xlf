<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nl-nl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9471ecf37d14e3c9866cdceab3911bc1e16e81d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Threading.Dispatcher.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1ba75c6776009c08979bc9c0c805a47cac363df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1749f49a8457313de1aebbbb85b52e79efa4befd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides services for managing the queue of work items for a thread.</source>
          <target state="translated">Biedt services voor het beheren van de wachtrij voor werkitems voor een thread.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispatcher maintains a prioritized queue of work items for a specific thread.</source>
          <target state="translated">De Dispatcher houdt een prioriteit wachtrij van werkitems voor een specifieke thread.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a Dispatcher is created on a thread, it becomes the only Dispatcher that can be associated with the thread, even if the Dispatcher is shut down.</source>
          <target state="translated">Wanneer een Dispatcher op een thread is gemaakt, wordt de enige Dispatcher die gekoppeld aan de thread worden kan, zelfs als de Dispatcher is afgesloten.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to get the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; for the current thread and a Dispatcher is not associated with the thread, a Dispatcher will be created.</source>
          <target state="translated">Als u probeert te krijgen de &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;voor de huidige thread en een Dispatcher is niet gekoppeld aan de thread, een Dispatcher wordt gemaakt.&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A Dispatcher is also created when you create a &lt;xref:System.Windows.Threading.DispatcherObject&gt;.</source>
          <target state="translated">Een Dispatcher wordt ook gemaakt wanneer u een &lt;xref:System.Windows.Threading.DispatcherObject&gt;.&lt;/xref:System.Windows.Threading.DispatcherObject&gt; maken</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you create a Dispatcher on a background thread, be sure to shut down the dispatcher before exiting the thread.</source>
          <target state="translated">Als u een Dispatcher in een achtergrondthread maakt, zorg er dan voor dat de verzender afgesloten voordat de thread wordt afgesloten.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a Dispatcher is shut down, it cannot be restarted.</source>
          <target state="translated">Als een Dispatcher is afgesloten, kan niet opnieuw gestart.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, a &lt;xref:System.Windows.Threading.DispatcherObject&gt; can only be accessed by the Dispatcher it is associated with.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, een &lt;xref:System.Windows.Threading.DispatcherObject&gt;alleen toegankelijk zijn voor de Dispatcher is gekoppeld.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that is associated with the Dispatcher on the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrond-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gekoppeld aan de Dispatcher op de <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt; property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the Dispatcher associated with the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de &lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;eigenschap van de &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet delegeren het werk moet de Dispatcher die zijn gekoppeld aan de <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]</ph> thread.&lt;/xref:System.Windows.Controls.Button&gt; &lt;/xref:System.Windows.Controls.ContentControl.Content%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the queue of the Dispatcher at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking is toegevoegd aan de wachtrij van de verzender op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a Dispatcher that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Als &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;in een Dispatcher die is afgesloten, de statuseigenschap van de geretourneerde &lt;xref:System.Windows.Threading.DispatcherOperation&gt;is ingesteld op &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; wordt aangeroepen&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>All of the methods on Dispatcher, with the exception of &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, are free-threaded.</source>
          <target state="translated">Alle methoden in Dispatcher, met uitzondering van &lt;xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;, zijn vrije threads.&lt;/xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from &lt;xref:System.Windows.Threading.DispatcherObject&gt; have thread affinity.</source>
          <target state="translated">Objecten die zijn afgeleid van &lt;xref:System.Windows.Threading.DispatcherObject&gt;thread-affiniteit hebben.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Objects that derive from &lt;xref:System.Windows.Freezable&gt; are free-threaded when they are frozen.</source>
          <target state="translated">Objecten die zijn afgeleid van &lt;xref:System.Windows.Freezable&gt;zijn gratis thread wanneer ze worden bevroren.&lt;/xref:System.Windows.Freezable&gt;</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Zie voor meer informatie <bpt id="p1">[</bpt>Freezable objecten overzicht<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">De opgegeven gemachtigde asynchroon met de opgegeven argumenten worden uitgevoerd op de thread die de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gemaakt op.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.DispatcherOperation&gt;object dat wordt geretourneerd door &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de &lt;xref:System.Windows.Threading.DispatcherPriority&gt;van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-De gemachtigde verwijderen uit de wachtrij.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-Er wordt gewacht tot de gemachtigde om terug te keren.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Als &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;voor een &lt;xref:System.Windows.Threading.Dispatcher&gt;die is afgesloten, de statuseigenschap van de geretourneerde &lt;xref:System.Windows.Threading.DispatcherOperation&gt;is ingesteld op &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; wordt aangeroepen&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">De gemachtigde moet een methode die parameters die zijn opgegeven <ph id="ph1">`args`</ph>, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk na de &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde asynchroon op de opgegeven prioriteit op de thread wordt uitgevoerd de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple BeginInvoke calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Als er meerdere BeginInvoke aanroepen worden aangebracht op hetzelfde &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, deze worden uitgevoerd in de volgorde waarin de aanroepen zijn aangebracht.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt;</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;retourneert een &lt;xref:System.Windows.Threading.DispatcherOperation&gt;-object dat kan worden gebruikt om te communiceren met de gemachtigde wanneer de gemachtigde in de gebeurtenisstroom wachtrij is.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.DispatcherOperation&gt;object dat wordt geretourneerd door &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de &lt;xref:System.Windows.Threading.DispatcherPriority&gt;van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-De gemachtigde verwijderen uit de wachtrij.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-Er wordt gewacht tot de gemachtigde om terug te keren.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Als &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;voor een &lt;xref:System.Windows.Threading.Dispatcher&gt;die is afgesloten, de statuseigenschap van de geretourneerde &lt;xref:System.Windows.Threading.DispatcherOperation&gt;is ingesteld op &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; wordt aangeroepen&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">De gemachtigde moet een methode die geen argumenten aanneemt, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk na de &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is geen geldige <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created on.</source>
          <target state="translated">De opgegeven gemachtigde asynchroon met de opgegeven argumenten, klikt u op de opgegeven prioriteit op de thread wordt uitgevoerd die de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gemaakt op.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.DispatcherOperation&gt;object dat wordt geretourneerd door &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de &lt;xref:System.Windows.Threading.DispatcherPriority&gt;van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-De gemachtigde verwijderen uit de wachtrij.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-Er wordt gewacht tot de gemachtigde om terug te keren.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Als &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;voor een &lt;xref:System.Windows.Threading.Dispatcher&gt;die is afgesloten, de statuseigenschap van de geretourneerde &lt;xref:System.Windows.Threading.DispatcherOperation&gt;is ingesteld op &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; wordt aangeroepen&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">De gemachtigde moet een methode die parameters die zijn opgegeven <ph id="ph1">`args`</ph>, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk na de &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde asynchroon op de opgegeven prioriteit en met het opgegeven argument op de thread wordt uitgevoerd de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>kan <ph id="ph2">`null`</ph> als er geen argumenten nodig zijn.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;retourneert een &lt;xref:System.Windows.Threading.DispatcherOperation&gt;-object dat kan worden gebruikt om te communiceren met de gemachtigde wanneer de gemachtigde in de gebeurtenisstroom wachtrij is.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.DispatcherOperation&gt;object dat wordt geretourneerd door &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de &lt;xref:System.Windows.Threading.DispatcherPriority&gt;van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-De gemachtigde verwijderen uit de wachtrij.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-Er wordt gewacht tot de gemachtigde om terug te keren.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Als er meerdere &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;worden aangeroepen op dezelfde &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, deze worden uitgevoerd in de volgorde waarin de aanroepen zijn aangebracht.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Als &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;voor een &lt;xref:System.Windows.Threading.Dispatcher&gt;die is afgesloten, de statuseigenschap van de geretourneerde &lt;xref:System.Windows.Threading.DispatcherOperation&gt;is ingesteld op &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; wordt aangeroepen&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde van een methode die één argument is naar wordt doorgeschoven, de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">Het object dat moet worden doorgegeven als argument aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk na de &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is geen geldige <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde asynchroon op de opgegeven prioriteit en met de opgegeven matrix van argumenten op de thread wordt uitgevoerd de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`arg`</ph> parameter can be <ph id="ph2">`null`</ph> if no arguments are needed.</source>
          <target state="translated">De <ph id="ph1">`arg`</ph> parameter is <ph id="ph2">`null`</ph> als er geen argumenten nodig zijn.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; returns a &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object that can be used to interact with the delegate when the delegate is in the event queue.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;retourneert een &lt;xref:System.Windows.Threading.DispatcherOperation&gt;-object dat kan worden gebruikt om te communiceren met de gemachtigde wanneer de gemachtigde in de gebeurtenisstroom wachtrij is.&lt;/xref:System.Windows.Threading.DispatcherOperation&gt;&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherOperation&gt; object returned by &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; can be used in several ways to interact with the specified delegate, such as:      -   Changing the &lt;xref:System.Windows.Threading.DispatcherPriority&gt; of the delegate as it is pending execution in the event queue.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.DispatcherOperation&gt;object dat wordt geretourneerd door &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de &lt;xref:System.Windows.Threading.DispatcherPriority&gt;van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt;</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Removing the delegate from the event queue.</source>
          <target state="translated">-De gemachtigde verwijderen uit de wachtrij.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Waiting for the delegate to return.</source>
          <target state="translated">-Er wordt gewacht tot de gemachtigde om terug te keren.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Obtaining the value that the delegate returns after it is executed.</source>
          <target state="translated">-Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous; therefore, control returns immediately to the calling object after it is called.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; calls are made at the same &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, they will be executed in the order the calls were made.</source>
          <target state="translated">Als er meerdere &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;worden aangeroepen op dezelfde &lt;xref:System.Windows.Threading.DispatcherPriority&gt;, deze worden uitgevoerd in de volgorde waarin de aanroepen zijn aangebracht.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>If &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is called on a &lt;xref:System.Windows.Threading.Dispatcher&gt; that has shut down, the status property of the returned &lt;xref:System.Windows.Threading.DispatcherOperation&gt; is set to &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.</source>
          <target state="translated">Als &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;voor een &lt;xref:System.Windows.Threading.Dispatcher&gt;die is afgesloten, de statuseigenschap van de geretourneerde &lt;xref:System.Windows.Threading.DispatcherOperation&gt;is ingesteld op &lt;xref:System.Windows.Threading.DispatcherOperationStatus&gt;.&lt;/xref:System.Windows.Threading.DispatcherOperationStatus&gt; &lt;/xref:System.Windows.Threading.DispatcherOperation&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; wordt aangeroepen&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The object to pass as an argument to the specified method.</source>
          <target state="translated">Het object dat moet worden doorgegeven als argument aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt; is called, that can be used to interact with the delegate as it is pending execution in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk na de &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde is zolang uitvoering in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke*&gt;</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is not a valid priority.</source>
          <target state="translated"><bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>is niet een geldig prioriteit.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Initiates shutdown of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> asynchronously.</source>
          <target state="translated">Initieert afsluiten van de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> asynchroon.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>BeginInvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">BeginInvokeShutdown demands onbeperkte machtigingen van de gebruikersinterface.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de &lt;xref:System.Windows.Threading.Dispatcher&gt;afgesloten, start de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;gebeurtenis is opgetreden en &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt niet afgesloten volledig totdat de wachtrij wordt afgewikkeld.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de Dispatcher klaar is met afsluiten, de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;gebeurtenis is opgetreden en de &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;eigenschap is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The priority at which to begin shutting down the dispatcher.</source>
          <target state="translated">De prioriteit waarop u wilt beginnen met de dispatcher afgesloten.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread is the thread associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Hiermee wordt bepaald of de aanroepende thread de thread die is gekoppeld aan dit <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the &lt;xref:System.Windows.Threading.Dispatcher&gt; that a &lt;xref:System.Windows.Threading.DispatcherObject&gt; is created on may access the object.</source>
          <target state="translated">Alleen de &lt;xref:System.Windows.Threading.Dispatcher&gt;die een &lt;xref:System.Windows.Threading.DispatcherObject&gt;wordt gemaakt op mogelijk toegang tot het object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; to access the object from a different thread.</source>
          <target state="translated">Gebruik &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;voor toegang tot het object van een andere thread.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>CheckAccess can be called from any thread.</source>
          <target state="translated">CheckAccess kan worden aangeroepen vanuit een willekeurige thread.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between CheckAccess and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; is CheckAccess returns a Boolean indicating whether the calling thread has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; throws an exception.</source>
          <target state="translated">Het verschil tussen CheckAccess en &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;is CheckAccess retourneert een Booleaanse waarde die aangeeft of de aanroepende thread toegang tot heeft de &lt;xref:System.Windows.Threading.Dispatcher&gt;en &lt;xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;er een uitzondering gegenereerd.&lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the calling thread is the thread associated with this <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Als de aanroepende thread de thread die is gekoppeld aan dit is <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>; anders <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the thread currently executing and creates a new <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> if one is not already associated with the thread.</source>
          <target state="translated">Haalt de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> voor de thread dat momenteel wordt uitgevoerd en maakt u een nieuwe <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> als deze nog niet gekoppeld aan de thread is.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a &lt;xref:System.Windows.Threading.Dispatcher&gt; is not associated with the current thread, a new &lt;xref:System.Windows.Threading.Dispatcher&gt; will be created.</source>
          <target state="translated">Als een &lt;xref:System.Windows.Threading.Dispatcher&gt;is niet gekoppeld aan de huidige thread, een nieuwe &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt gemaakt.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is not the case with the &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; method.</source>
          <target state="translated">Dit is niet het geval is bij de &lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;methode.&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt; will return <ph id="ph1">`null`</ph> if there is not a dispatcher associated with the specified thread.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;retourneert <ph id="ph1">`null`</ph> er is niet als een dispatcher die zijn gekoppeld aan de opgegeven thread.&lt;/xref:System.Windows.Threading.Dispatcher.FromThread%2A&gt;</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The dispatcher associated with the current thread.</source>
          <target state="translated">De dispatcher die zijn gekoppeld aan de huidige thread.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Disables processing of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> queue.</source>
          <target state="translated">Schakelt verwerking van de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</source>
          <target state="translated">Uitschakelen dispatcherverwerking is een geavanceerde methode die is bedoeld om de kans op niet-verwante herintreding weg te nemen.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The effects of disabling processing are as follows:      -   <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> locks will not pump messages internally.</source>
          <target state="translated">De effecten van het uitschakelen van verwerking als volgt zijn:- <ph id="ph1">[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]</ph> vergrendelingen wordt berichten niet intern pomp.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   &lt;xref:System.Windows.Threading.DispatcherFrame&gt; objects are not allowed to be pushed.</source>
          <target state="translated">- &lt;xref:System.Windows.Threading.DispatcherFrame&gt;objecten mogen niet worden gepusht.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   Message processing is not permitted.</source>
          <target state="translated">-Berichtverwerking is niet toegestaan.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure that DisableProcessing returns when it is called can be used to re-enable dispatcher processing.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;-structuur die DisableProcessing als resultaat gegeven wanneer deze wordt aangeroepen, kan worden gebruikt voor de dispatcherverwerking opnieuw in te schakelen.&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; structure re-enables processing.</source>
          <target state="translated">Het aanroepen van &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;op de &lt;xref:System.Windows.Threading.DispatcherProcessingDisabled&gt;schakelt verwerking van de structuur.&lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled&gt; &lt;/xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A&gt;</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>DisableProcessing can only be called on the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is associated with.</source>
          <target state="translated">DisableProcessing kan alleen worden aangeroepen in de thread de &lt;xref:System.Windows.Threading.Dispatcher&gt;is gekoppeld.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A structure used to re-enable dispatcher processing.</source>
          <target state="translated">Een structuur die wordt gebruikt voor de dispatcherverwerking opnieuw in te schakelen.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requests that all frames exit, including nested frames.</source>
          <target state="translated">Aanvragen die alle frames wordt afgesloten, met inbegrip van geneste frames.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Gets the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> for the specified thread.</source>
          <target state="translated">Haalt de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> voor de opgegeven thread.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a dispatcher is not available for the specified thread, <ph id="ph1">`null`</ph> will be returned.</source>
          <target state="translated">Als een dispatcher niet beschikbaar voor de opgegeven thread is <ph id="ph1">`null`</ph> wordt geretourneerd.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>FromThread does not create a &lt;xref:System.Windows.Threading.Dispatcher&gt; on a thread that does not have a &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">FromThread maakt geen een &lt;xref:System.Windows.Threading.Dispatcher&gt;op een thread die geen een &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>A new &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on a thread that does not already have a &lt;xref:System.Windows.Threading.Dispatcher&gt; when attempting to get the &lt;xref:System.Windows.Threading.Dispatcher&gt; by using the &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; property.</source>
          <target state="translated">Een nieuwe &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt gemaakt op een thread die nog niet heeft een &lt;xref:System.Windows.Threading.Dispatcher&gt;bij het ophalen van de &lt;xref:System.Windows.Threading.Dispatcher&gt;met behulp van de &lt;xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt;eigenschap.&lt;/xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The thread to obtain the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> from.</source>
          <target state="translated">De thread voor de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> uit.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The dispatcher for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">thread</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
          <target state="translated">De dispatcher voor <bpt id="p1">&lt;code&gt;</bpt> <ph id="ph1">thread</ph> <ept id="p1">&lt;/code&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> has finished shutting down.</source>
          <target state="translated">Hiermee wordt bepaald of de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> afsluiten is voltooid.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de &lt;xref:System.Windows.Threading.Dispatcher&gt;afgesloten, start de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;gebeurtenis is opgetreden en &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher&gt;niet afsluiten volledig totdat de wachtrij wordt afgewikkeld.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the HasShutdownFinished property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de Dispatcher klaar is met afsluiten, de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;gebeurtenis is opgetreden en de eigenschap HasShutdownFinished is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the dispatcher has finished shutting down; otherwise, <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Als de dispatcher is voltooid met afgesloten; anders <bpt id="p2">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Determines whether the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is shutting down.</source>
          <target state="translated">Hiermee wordt bepaald of de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wordt afgesloten.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and HasShutdownStarted is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de &lt;xref:System.Windows.Threading.Dispatcher&gt;afgesloten, start de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;gebeurtenis is opgetreden en HasShutdownStarted is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt niet afgesloten volledig totdat de wachtrij wordt afgewikkeld.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de Dispatcher klaar is met afsluiten, de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;gebeurtenis is opgetreden en de &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;eigenschap is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept> has started shutting down; otherwise, <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>Als de <bpt id="p2">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept> afgesloten omlaag; anders is gestart <bpt id="p3">&lt;xref uid="langword_csharp_false" name="false" href=""&gt;</bpt> <ept id="p3">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets the collection of hooks that provide additional event information about the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Hiermee wordt de verzameling hooks die aanvullende gebeurtenisinformatie geven over de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.DispatcherHooks&gt; class provides additional event information about the &lt;xref:System.Windows.Threading.Dispatcher&gt;, such as when the &lt;xref:System.Windows.Threading.Dispatcher&gt; is inactive or when an operation has competed.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.DispatcherHooks&gt;klasse biedt informatie over aanvullende gebeurtenissen over de &lt;xref:System.Windows.Threading.Dispatcher&gt;, bijvoorbeeld wanneer de &lt;xref:System.Windows.Threading.Dispatcher&gt;is niet actief of wanneer een bewerking is voltooid.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.DispatcherHooks&gt;</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The hooks associated with this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">De hooks die zijn gekoppeld aan dit <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Voert de opgegeven &lt;xref:System.Action&gt;synchroon in de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Een gemachtigde aan te roepen via de dispatcher.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Voert de opgegeven &lt;xref:System.Action&gt;synchroon met de opgegeven prioriteit in de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Een gemachtigde aan te roepen via de dispatcher.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde van een methode die parameters die zijn opgegeven <ph id="ph1">`args`</ph>, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority on the thread on which the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Hiermee voert u de opgegeven gemachtigde synchroon met de opgegeven prioriteit op de thread waarop het <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde aan een methode die geen argumenten aanneemt, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is gelijk aan <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is niet een geldig prioriteit.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Voert de opgegeven &lt;xref:System.Action&gt;synchroon met de opgegeven prioriteit in de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Een gemachtigde aan te roepen via de dispatcher.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Een object dat Hiermee wordt aangegeven of de bewerking geannuleerd.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde binnen de toegewezen tijdsduur op de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde van een methode die parameters die zijn opgegeven <ph id="ph1">`args`</ph>, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">De maximale hoeveelheid tijd wachten totdat de bewerking is voltooid.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde met de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde van een methode die parameters die zijn opgegeven <ph id="ph1">`args`</ph>, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde met de opgegeven prioriteit met het opgegeven argument synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>kan <ph id="ph2">`null`</ph> als een argument is niet nodig <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes one argument, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde van een methode die één argument is naar wordt doorgeschoven, de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Een object worden doorgegeven als argument aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is gelijk aan <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is niet een geldig prioriteit.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> was created.</source>
          <target state="translated">De opgegeven gemachtigde synchroon met de opgegeven prioriteit en met de opgegeven time-outwaarde op de thread wordt uitgevoerd de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gemaakt.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">De maximale tijd wacht u totdat de bewerking te voltooien.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The delegate to a method that takes no arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">De gemachtigde moet een methode die geen argumenten aanneemt, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; synchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Voert de opgegeven &lt;xref:System.Action&gt;synchroon met de opgegeven prioriteit in de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Een gemachtigde aan te roepen via de dispatcher.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Een object dat Hiermee wordt aangegeven of de bewerking geannuleerd.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The minimum amount of time to wait for the operation to start.</source>
          <target state="translated">De minimale hoeveelheid wachttijd voor het opnieuw te starten.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde binnen de toegewezen tijdsduur op de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes parameters specified in <ph id="ph1">`args`</ph>, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde van een methode die parameters die zijn opgegeven <ph id="ph1">`args`</ph>, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The maximum amount of time to wait for the operation to complete.</source>
          <target state="translated">De maximale hoeveelheid tijd wachten totdat de bewerking is voltooid.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde met de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>kan <ph id="ph2">`null`</ph> als een argument is niet nodig <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Een object worden doorgegeven als argument aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is gelijk aan <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is niet een geldig prioriteit.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde met de opgegeven prioriteit met het opgegeven argument synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed       In <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>kan <ph id="ph2">`null`</ph> als een argument is niet nodig <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">De maximale tijd wacht u totdat de bewerking te voltooien.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the given method.</source>
          <target state="translated">Een object worden doorgegeven als argument aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This can be <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if no arguments are needed.</source>
          <target state="translated">Dit kan zijn <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als er geen argumenten nodig zijn.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is gelijk aan <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid priority.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is niet een geldig prioriteit.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De opgegeven gemachtigde met de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`Arg`</ph> can be <ph id="ph2">`null`</ph> if an argument is not needed.</source>
          <target state="translated"><ph id="ph1">`Arg`</ph>kan <ph id="ph2">`null`</ph> als een argument is niet nodig.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, only the thread that created a &lt;xref:System.Windows.Threading.DispatcherObject&gt; may access that object.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>, alleen de thread die gemaakt een &lt;xref:System.Windows.Threading.DispatcherObject&gt;mogelijk toegang tot dit object.&lt;/xref:System.Windows.Threading.DispatcherObject&gt;</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, a background thread that is spun off from the main UI thread cannot update the contents of a &lt;xref:System.Windows.Controls.Button&gt; that was created on the UI thread.</source>
          <target state="translated">Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een &lt;xref:System.Windows.Controls.Button&gt;die is gemaakt op de UI-thread.&lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for the background thread to access the Content property of the &lt;xref:System.Windows.Controls.Button&gt;, the background thread must delegate the work to the &lt;xref:System.Windows.Threading.Dispatcher&gt; associated with the UI thread.</source>
          <target state="translated">Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het &lt;xref:System.Windows.Controls.Button&gt;, de achtergrondthread moet het werk te delegeren de &lt;xref:System.Windows.Threading.Dispatcher&gt;die zijn gekoppeld aan de UI-thread.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Controls.Button&gt;</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is accomplished by using either &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.</source>
          <target state="translated">Dit kan worden bereikt via &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is synchronous and &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is asynchronous.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;synchroon is en &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is asynchroon.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>The operation is added to the event queue of the &lt;xref:System.Windows.Threading.Dispatcher&gt; at the specified &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.</source>
          <target state="translated">De bewerking wordt toegevoegd aan de wachtrij van het &lt;xref:System.Windows.Threading.Dispatcher&gt;op de opgegeven &lt;xref:System.Windows.Threading.DispatcherPriority&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.&lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The priority, relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue, the specified method is invoked.</source>
          <target state="translated">De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij, de opgegeven methode wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The maximum time to wait for the operation to finish.</source>
          <target state="translated">De maximale tijd wacht u totdat de bewerking te voltooien.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>A delegate to a method that takes multiple arguments, which is pushed onto the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> event queue.</source>
          <target state="translated">Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> wachtrij.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>An object to pass as an argument to the specified method.</source>
          <target state="translated">Een object moeten worden doorgegeven als argument aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">Een matrix met objecten op te geven als argumenten aan de opgegeven methode.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The return value from the delegate being invoked or <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> if the delegate has no return value.</source>
          <target state="translated">De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> als de gemachtigde geen retourwaarde heeft.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is equal to <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is gelijk aan <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is geen geldige <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;method&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Voert de opgegeven &lt;xref:System.Action&gt;asynchroon op thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Een gemachtigde aan te roepen via de dispatcher.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk nadat InvokeAsync wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Voert de opgegeven &lt;xref:System.Action&gt;asynchroon op de opgegeven prioriteit in de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Een gemachtigde aan te roepen via de dispatcher.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk nadat InvokeAsync wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Executes the specified &lt;xref:System.Action&gt; asynchronously at the specified priority on the thread the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">Voert de opgegeven &lt;xref:System.Action&gt;asynchroon op de opgegeven prioriteit in de thread de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.&lt;/xref:System.Action&gt;</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>A delegate to invoke through the dispatcher.</source>
          <target state="translated">Een gemachtigde aan te roepen via de dispatcher.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>An object that indicates whether to cancel the action.</source>
          <target state="translated">Een object dat Hiermee wordt aangegeven of de bewerking geannuleerd.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>An object, which is returned immediately after InvokeAsync is called, that can be used to interact with the delegate as it is pending execution in the event queue.</source>
          <target state="translated">Een object dat wordt geretourneerd onmiddellijk nadat InvokeAsync wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Initiates the shutdown process of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> synchronously.</source>
          <target state="translated">Start het afsluitproces van de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> synchroon.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT">
          <source>InvokeShutdown demands unrestricted UI Permissions.</source>
          <target state="translated">InvokeShutdown demands onbeperkte machtigingen van de gebruikersinterface.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de &lt;xref:System.Windows.Threading.Dispatcher&gt;afgesloten, start de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;gebeurtenis is opgetreden en &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shut down completely until the event queue unwinds.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt niet afgesloten volledig totdat de wachtrij wordt afgewikkeld.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de Dispatcher klaar is met afsluiten, de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;gebeurtenis is opgetreden en de &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;eigenschap is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Enters an execute loop.</source>
          <target state="translated">Voert een lus uitvoeren.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT">
          <source>A &lt;xref:System.Windows.Threading.DispatcherFrame&gt; represents a loop that processes pending work items.</source>
          <target state="translated">Een &lt;xref:System.Windows.Threading.DispatcherFrame&gt;vertegenwoordigt een lus die in behandeling werkitems verwerkt.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Dispatcher processes the work item queue in a loop.</source>
          <target state="translated">De Dispatcher verwerkt de wachtrij voor werkitems in een lus.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">De lus wordt aangeduid als een frame.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.</source>
          <target state="translated">De eerste lus wordt doorgaans door de toepassing gestart door het aanroepen van &lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;.&lt;/xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT">
          <source>PushFrame enters a loop represented by the parameter <ph id="ph1">`frame`</ph>.</source>
          <target state="translated">PushFrame krijgt een lus dat wordt vertegenwoordigd door de parameter <ph id="ph1">`frame`</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT">
          <source>At each iteration of the loop, the &lt;xref:System.Windows.Threading.Dispatcher&gt; will check the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property on the &lt;xref:System.Windows.Threading.DispatcherFrame&gt; class to determine whether the loop should continue or if it should stop.</source>
          <target state="translated">Bij elke herhaling van de lus, de &lt;xref:System.Windows.Threading.Dispatcher&gt;controleert de &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;-eigenschap op de &lt;xref:System.Windows.Threading.DispatcherFrame&gt;klasse om te bepalen of de lus blijven moet of als het moet worden gestopt.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT">
          <source>&lt;xref:System.Windows.Threading.DispatcherFrame&gt; allows for the &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt; property to be set explicitly and it respects the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; property on the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.DispatcherFrame&gt;kunt u de &lt;xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;eigenschap moet expliciet worden ingesteld en de &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;eigenschap op de &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; respecteert&lt;/xref:System.Windows.Threading.DispatcherFrame.Continue%2A&gt;&lt;/xref:System.Windows.Threading.DispatcherFrame&gt;</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means when the &lt;xref:System.Windows.Threading.Dispatcher&gt; starts to shut down, frames that use the default &lt;xref:System.Windows.Threading.DispatcherFrame&gt; implementation will exit, which enables all nested frames to exit.</source>
          <target state="translated">Dit betekent dat wanneer de &lt;xref:System.Windows.Threading.Dispatcher&gt;begint af te sluiten, frames die de standaard &lt;xref:System.Windows.Threading.DispatcherFrame&gt;implementatie wordt afgesloten, waardoor alle geneste frames om af te sluiten.&lt;/xref:System.Windows.Threading.DispatcherFrame&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The frame for the dispatcher to process.</source>
          <target state="translated">Het frame voor de dispatcher worden verwerkt.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;frame&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt; is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.</source>
          <target state="translated">&lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;is <bpt id="p1">&lt;xref uid="langword_csharp_true" name="true" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>       -or-       <bpt id="p2">&lt;code&gt;</bpt><ph id="ph1">frame</ph><ept id="p2">&lt;/code&gt;</ept> is running on a different <bpt id="p3">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p3">&lt;/xref&gt;</ept>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*&gt;</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>-or-       Dispatcher processing has been disabled.</source>
          <target state="translated">- of - Dispatcher verwerking is uitgeschakeld.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Pushes the main execution frame on the event queue of the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Het belangrijkste uitvoering frame pushes in de wachtrij van de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; processes the event queue in a loop.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher&gt;verwerkt de wachtrij in een lus.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT">
          <source>The loop is referred to as a frame.</source>
          <target state="translated">De lus wordt aangeduid als een frame.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT">
          <source>The initial loop is typically initiated by the application by calling Run.</source>
          <target state="translated">De eerste lus wordt doorgaans door de toepassing gestart door het aanroepen van uitvoeren.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT">
          <source>The main execution frame will continue until the &lt;xref:System.Windows.Threading.Dispatcher&gt; is shutdown.</source>
          <target state="translated">Het belangrijkste uitvoering frame blijft totdat de &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt afgesloten.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> finishes shutting down.</source>
          <target state="translated">Deze gebeurtenis treedt op wanneer de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klaar is met afsluiten.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Bij het afsluiten van een &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt gestart, de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt;gebeurtenis is opgetreden en &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownStarted&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher&gt;niet afsluiten volledig totdat de wachtrij wordt afgewikkeld.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the ShutdownFinished event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de Dispatcher afgesloten is, de ShutdownFinished-gebeurtenis wordt geactiveerd en de &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;eigenschap is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Occurs when the <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> begins to shut down.</source>
          <target state="translated">Deze gebeurtenis treedt op wanneer de <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> begint af te sluiten.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the shutdown process of a &lt;xref:System.Windows.Threading.Dispatcher&gt; is started, the ShutdownStarted event is raised and &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Bij het afsluiten van een &lt;xref:System.Windows.Threading.Dispatcher&gt;is gestart, wordt de ShutdownStarted-gebeurtenis geactiveerd en &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt;is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher&gt; does not shutdown completely until the event queue unwinds.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher&gt;niet afsluiten volledig totdat de wachtrij wordt afgewikkeld.&lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the Dispatcher finishes shutting down, the &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt; event is raised and the &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; property is set to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Wanneer de Dispatcher klaar is met afsluiten, de &lt;xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;gebeurtenis is opgetreden en de &lt;xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt;eigenschap is ingesteld op <ph id="ph1">`true`</ph>.&lt;/xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.ShutdownFinished&gt;</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT">
          <source>Once the shutdown process begins, all pending work items in the queue are aborted.</source>
          <target state="translated">Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Gets the thread this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is associated with.</source>
          <target state="translated">De thread wordt dit <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is gekoppeld.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The thread.</source>
          <target state="translated">De thread.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt;.</source>
          <target state="translated">Treedt op wanneer een thread-uitzondering veroorzaakt en tijdens het uitvoeren van een gemachtigde van onbekende &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; of &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt;.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised when an exception that was thrown during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; is uncaught.</source>
          <target state="translated">Deze gebeurtenis treedt op wanneer een uitzondering die is opgetreden tijdens het uitvoeren van een gemachtigde van &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;is niet-onderschepte.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT">
          <source>A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</source>
          <target state="translated">Een handler kunt markeren de uitzondering als verwerkt, dit voorkomt dat de handler voor de interne uitzondering wordt aangeroepen.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">Gebeurtenis-handlers voor deze gebeurtenis moeten worden geschreven zorgvuldig om te voorkomen dat secundaire uitzonderingen maken en om af te vangen eventuele die zich voordoen.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">Het verdient aanbeveling om te voorkomen dat het toewijzen van geheugen of rekenintensieve bewerkingen in de handler voor een resource doet.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event provides a means to not raise the UnhandledException event.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;gebeurtenis biedt een manier om niet afkomstig van de gebeurtenis UnhandledException.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT">
          <source>The &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt; event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the UnhandledException event will not be raised.</source>
          <target state="translated">De &lt;xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;gebeurtenis eerst is opgetreden en als &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;op de &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;is ingesteld op <ph id="ph1">`false`</ph>, de gebeurtenis UnhandledException niet verschijnt.&lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&gt;</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke<bpt id="p1">*</bpt>&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke<ept id="p1">*</ept>&gt; when in the filter stage.</source>
          <target state="translated">Treedt op wanneer een thread-uitzondering veroorzaakt en tijdens het uitvoeren van een gemachtigde van onbekende &lt;&gt; &lt;/&gt; <bpt id="p1">*</bpt>&gt; of &lt;&gt; &lt;/&gt; <ept id="p1">*</ept>&gt; wanneer in de fase van het filter.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt; or &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; and is uncaught.</source>
          <target state="translated">Deze gebeurtenis is opgetreden tijdens de fase van het filter voor een uitzondering die is opgetreden tijdens de uitvoering van een gemachtigde van &lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;of &lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;en is niet-onderschepte.&lt;/xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT">
          <source>The call stack is not unwound at this point (first-chance exception).</source>
          <target state="translated">Er is geen de aanroepstack afgewikkeld op dit punt (eerste kans uitzondering).</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</source>
          <target state="translated">Gebeurtenis-handlers voor deze gebeurtenis moeten worden geschreven zorgvuldig om te voorkomen dat secundaire uitzonderingen maken en om af te vangen eventuele die zich voordoen.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</source>
          <target state="translated">Het verdient aanbeveling om te voorkomen dat het toewijzen van geheugen of rekenintensieve bewerkingen in de handler voor een resource doet.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnhandledExceptionFilter event provides a means to not raise the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event.</source>
          <target state="translated">De gebeurtenis UnhandledExceptionFilter biedt een manier om niet afkomstig van de &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;gebeurtenis.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT">
          <source>The UnhandledExceptionFilter event is raised first, and If &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt; on the &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; is set to <ph id="ph1">`false`</ph>, the &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; event will not be raised.</source>
          <target state="translated">De gebeurtenis UnhandledExceptionFilter eerst wordt gegenereerd en als &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;op de &lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt;is ingesteld op <ph id="ph1">`false`</ph>, wordt de &lt;xref:System.Windows.Threading.Dispatcher.UnhandledException&gt;gebeurtenis wordt niet worden verhoogd.&lt;/xref:System.Windows.Threading.Dispatcher.UnhandledException&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs&gt; &lt;/xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A&gt;</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Determines whether the specified <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> is a valid priority.</source>
          <target state="translated">Hiermee wordt bepaald of de opgegeven <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> is een geldige prioriteit.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The priority to check.</source>
          <target state="translated">De prioriteit te controleren.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>A string that will be returned by the exception that occurs if the priority is invalid.</source>
          <target state="translated">Een tekenreeks die wordt geretourneerd door de uitzondering die deze gebeurtenis treedt op als de prioriteit ongeldig is.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph> is not a valid <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;priority&lt;/code&gt;</ph>is geen geldige <bpt id="p1">&lt;xref href="System.Windows.Threading.DispatcherPriority"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Determines whether the calling thread has access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Hiermee wordt bepaald of de aanroepende thread toegang tot dit <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the thread the &lt;xref:System.Windows.Threading.Dispatcher&gt; is created on may access the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">Alleen de thread de &lt;xref:System.Windows.Threading.Dispatcher&gt;wordt gemaakt op mogelijk toegang tot de &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher&gt;</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is public; therefore, any thread can check to see whether it has access to the &lt;xref:System.Windows.Threading.Dispatcher&gt;.</source>
          <target state="translated">Deze methode is openbare; Daarom kunt een willekeurige thread controleren of deze toegang tot de &lt;xref:System.Windows.Threading.Dispatcher&gt;.&lt;/xref:System.Windows.Threading.Dispatcher&gt; heeft</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT">
          <source>The difference between &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; and VerifyAccess is &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; returns a Boolean if the calling thread does not have access to the &lt;xref:System.Windows.Threading.Dispatcher&gt; and VerifyAccess throws an exception.</source>
          <target state="translated">Het verschil tussen &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;en VerifyAccess &lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;retourneert een Booleaanse waarde als de aanroepende thread geen toegang tot heeft de &lt;xref:System.Windows.Threading.Dispatcher&gt;en VerifyAccess er een uitzondering gegenereerd.&lt;/xref:System.Windows.Threading.Dispatcher&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt; &lt;/xref:System.Windows.Threading.Dispatcher.CheckAccess%2A&gt;</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>The calling thread does not have access to this <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">De aanroepende thread heeft geen toegang tot dit <bpt id="p1">&lt;xref href="System.Windows.Threading.Dispatcher"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Maakt een afgewacht object die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">Deze methode biedt een manier om uitvoering beheer om de huidige dispatcher tijdelijk vrijgeven zodat deze andere taken, zoals andere gebeurtenissen verwerken kunt doen.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">Gebruik de <ph id="ph1">`await`</ph>, of <ph id="ph2">`Await`</ph> in Visual Basic kunt operator op de retourwaarde besturingselement terugkeren naar de huidige dispatcher.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">Gebruik deze methode als uw app geven een kans om gebeurtenissen te verwerken terwijl u de app veel werk op de UI-thread doet.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">Bijvoorbeeld, kunt u deze methode in een lus langlopende waarmee een besturingselement wordt bijgewerkt.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to calling the &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt; method and passing in &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.</source>
          <target state="translated">Deze methode is gelijk aan het aanroepen van de &lt;xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;methode en doorgeven in &lt;xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName&gt; &lt;/xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29&gt;</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Een object van het type afgewacht die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Maakt een afgewacht object die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</source>
          <target state="translated">Het werk dat deze gebeurtenis treedt op wanneer u keert terug naar de code in afwachting van het resultaat van deze methode is gepland met de opgegeven prioriteit.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</source>
          <target state="translated">Deze methode biedt een manier om uitvoering beheer om de huidige dispatcher tijdelijk vrijgeven zodat deze andere taken, zoals andere gebeurtenissen verwerken kunt doen.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">`await`</ph>, or <ph id="ph2">`Await`</ph> in Visual Basic, operator on the return value to return control to the current dispatcher.</source>
          <target state="translated">Gebruik de <ph id="ph1">`await`</ph>, of <ph id="ph2">`Await`</ph> in Visual Basic kunt operator op de retourwaarde besturingselement terugkeren naar de huidige dispatcher.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</source>
          <target state="translated">Gebruik deze methode als uw app geven een kans om gebeurtenissen te verwerken terwijl u de app veel werk op de UI-thread doet.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can use this method in a long-running loop that updates a control.</source>
          <target state="translated">Bijvoorbeeld, kunt u deze methode in een lus langlopende waarmee een besturingselement wordt bijgewerkt.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The priority at which to schedule the continuation.</source>
          <target state="translated">De prioriteit waarmee de voortzetting plannen.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</source>
          <target state="translated">Een object van het type afgewacht die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>