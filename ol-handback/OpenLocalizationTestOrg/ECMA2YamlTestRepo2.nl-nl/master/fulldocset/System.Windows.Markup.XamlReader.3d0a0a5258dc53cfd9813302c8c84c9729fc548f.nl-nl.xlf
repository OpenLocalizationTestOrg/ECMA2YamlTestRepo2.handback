<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="nl-nl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-192e1fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6268fc94480a4936a59717d3dc614a6d4975ccec</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset\System.Windows.Markup.XamlReader.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fulldocset</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">974ec307b3512b7e8acac3fc2c82475555d82dac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa63fc760c757e6f8ed203edf588d497bc9712ca</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reads XAML input and creates an object graph, using the WPF default XAML reader and an associated XAML object writer.</source>
          <target state="translated">XAML-invoer leest en maakt een objectgrafiek met behulp van de WPF standaard XAML-lezer en een bijbehorende XAML-object-schrijver.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The synchronous &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt; methods are static, but the asynchronous &lt;xref:System.Windows.Markup.XamlReader.LoadAsync%2A&gt; methods are not static and require an instance of the XamlReader class to use.</source>
          <target state="translated">De synchrone &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;methoden zijn statisch, maar de asynchrone &lt;xref:System.Windows.Markup.XamlReader.LoadAsync%2A&gt;methoden zijn niet statisch en vereisen een exemplaar van het XamlReader-klasse moet worden gebruikt.&lt;/xref:System.Windows.Markup.XamlReader.LoadAsync%2A&gt; &lt;/xref:System.Windows.Markup.XamlReader.Load%2A&gt;</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The output of the <ph id="ph1">`Load`</ph> methods is a single object, which represents the root object of a created object tree or object graph.</source>
          <target state="translated">De uitvoer van de <ph id="ph1">`Load`</ph> methoden is een enkel object, waarmee het hoofdobject van een structuur van de gemaakte object of een objectgrafiek.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Object graphs that are created by XamlReader are typically added to the existing object tree of a WPF application at run time.</source>
          <target state="translated">Objectgrafieken die zijn gemaakt door XamlReader zijn meestal toegevoegd aan de bestaande objectboomstructuur van een toepassing WPF tijdens runtime.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise the new object graph is considered disconnected for purposes of the WPF application model.</source>
          <target state="translated">Anders de nieuwe objectgrafiek wordt beschouwd als verbroken ten behoeve van de WPF-toepassingsmodel.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that it does not render, and cannot be accessed using any of the object tree techniques as applied to the WPF application's main object tree (for example, the APIs &lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;, &lt;xref:System.Windows.LogicalTreeHelper&gt;, &lt;xref:System.Windows.Media.VisualTreeHelper&gt;).</source>
          <target state="translated">Dit betekent dat niet meer worden weergegeven en kan niet geopend met behulp van een structuur technieken met het object als op de WPF-toepassing hoofdobject structuur toegepast worden (bijvoorbeeld de API's &lt;xref:System.Windows.FrameworkElement.FindName%2A&gt;, &lt;xref:System.Windows.LogicalTreeHelper&gt;, &lt;xref:System.Windows.Media.VisualTreeHelper&gt;).&lt;/xref:System.Windows.Media.VisualTreeHelper&gt; &lt;/xref:System.Windows.LogicalTreeHelper&gt; &lt;/xref:System.Windows.FrameworkElement.FindName%2A&gt;</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on object tree concepts, see <bpt id="p1">[</bpt>Trees in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Zie voor meer informatie over concepten van object-structuur <bpt id="p1">[</bpt>structuren in WPF<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlReader supports the following primary scenarios:      -   <bpt id="p1">**</bpt>Cloning/object factory<ept id="p1">**</ept>: Without additional mechanisms, a reference type generally cannot be included in more than one position in a WPF object tree.</source>
          <target state="translated">XamlReader ondersteunt de volgende primaire scenario's:- <bpt id="p1">**</bpt>klonen/object factory<ept id="p1">**</ept>: zonder aanvullende mechanismen een verwijzingstype in het algemeen kan niet worden opgenomen in meer dan één positie in een boomstructuur WPF-object.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>(Examples of additional mechanisms that offer support for sharing or re-use in WPF include objects that are based on &lt;xref:System.Windows.Freezable&gt;, or support for commonly shareable objects such as &lt;xref:System.Windows.Media.Brush&gt; that are referenced as an item from a &lt;xref:System.Windows.ResourceDictionary&gt;.) One way to clone an object that is already in the object tree is to serialize the object using &lt;xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName&gt;.</source>
          <target state="translated">(Voorbeelden van aanvullende mechanismen die bieden ondersteuning voor het delen of opnieuw te gebruiken in de WPF-objecten die zijn gebaseerd op &lt;xref:System.Windows.Freezable&gt;, of ondersteuning voor veel deelbaar objecten, zoals &lt;xref:System.Windows.Media.Brush&gt;die waarnaar wordt verwezen als een item uit een &lt;xref:System.Windows.ResourceDictionary&gt;.)&lt;/xref:System.Windows.ResourceDictionary&gt; &lt;/xref:System.Windows.Media.Brush&gt; &lt;/xref:System.Windows.Freezable&gt; Een manier voor het klonen van een object dat zich al in de objectboomstructuur van het is voor het serialiseren van het object met behulp van &lt;xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName&gt;.&lt;/xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>You then use the serialized string as input for a call to &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;, with a stream or &lt;xref:System.Xml.XmlReader&gt; as an intermediary.</source>
          <target state="translated">U Volg de geserialiseerde tekenreeks als invoer voor een aanroep van &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;, met een stream of &lt;xref:System.Xml.XmlReader&gt;als intermediaire.&lt;/xref:System.Xml.XmlReader&gt; &lt;/xref:System.Windows.Markup.XamlReader.Load%2A&gt;</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>Constructing objects based on just-in-time information<ept id="p1">**</ept>: There are often other ways to have late-binding or user-supplied input change the state of existing objects.</source>
          <target state="translated">- <bpt id="p1">**</bpt>Objecten maken op basis van just in time informatie<ept id="p1">**</ept>: Er zijn vaak andere manieren om late binding of de gebruiker opgegeven invoer, de status van bestaande objecten wijzigen.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example you could use the same value to set more than one property, or use data binding.</source>
          <target state="translated">U kunt bijvoorbeeld gebruik van dezelfde waarde meer dan één eigenschap in te stellen of gegevensbinding gebruiken.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>But if you have a scenario where even the type of object to create is only determinable at run time or with user interaction, then creating such an object by building up a string for &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt; input is often a useful technique.</source>
          <target state="translated">Maar als u een scenario waarbij zelfs het soort object maken alleen kan worden bepaald tijdens runtime of gebruikersinteractie hebt, maak vervolgens dergelijk object opbouw van een tekenreeks op voor &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;invoer is het vaak nuttig.&lt;/xref:System.Windows.Markup.XamlReader.Load%2A&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>Using existing resource techniques<ept id="p1">**</ept>: The &lt;xref:System.IO.Stream&gt; type is used frequently in other frameworks or technologies for transferring data or objects across application boundaries or for similar situations.</source>
          <target state="translated">- <bpt id="p1">**</bpt>Met behulp van bestaande resource technieken<ept id="p1">**</ept>: de &lt;xref:System.IO.Stream&gt;type voor het overbrengen van gegevens of objecten buiten de toepassingsgrenzen van de of voor soortgelijke situaties regelmatig in andere frameworks of technologieën wordt gebruikt.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can then use the &lt;xref:System.IO.Stream&gt; techniques to store or obtain XAML-formatted data that you eventually use to create an object as part of your application.</source>
          <target state="translated">U kunt de &lt;xref:System.IO.Stream&gt;technieken opslaan of XAML-indeling gegevens ophalen die u gaat gebruiken voor het maken van een object als onderdeel van uw toepassing.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   <bpt id="p1">**</bpt>Fixed documents:<ept id="p1">**</ept> Your application might load local or downloaded XPS documents for inclusion in a WPF application object tree and UI.</source>
          <target state="translated">- <bpt id="p1">**</bpt>Vaste documenten:<ept id="p1">**</ept> uw toepassing lokaal of gedownloade XPS-documenten voor opname in een WPF objectstructuur en gebruikersinterface laadt.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>&gt; <ph id="ph1">[!NOTE]</ph> &gt;  This documentation sometimes describes an object graph, as opposed to an object tree.</source>
          <target state="translated">&gt; <ph id="ph1">[!NOTE]</ph> &gt; Deze documentatie soms beschrijft een objectgrafiek in plaats van een objectboomstructuur.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>A strict parent-child relationship does not always exist in the run time object relationships of a run time WPF application, so an object graph is a more widely applicable terminology.</source>
          <target state="translated">Een strikte bovenliggende / onderliggende relatie bestaat altijd niet in de runtime-objectrelaties van een runtime-WPF-toepassing, zodat een objectgrafiek een ruimere toepasselijke terminologie.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, because WPF also includes two different tree conceptualization APIs (&lt;xref:System.Windows.LogicalTreeHelper&gt;, &lt;xref:System.Windows.Media.VisualTreeHelper&gt;) the tree metaphor still applies adequately to most real-world cases in WPF.</source>
          <target state="translated">Echter, omdat de WPF bevat ook twee andere structuur conceptvorming API's (&lt;xref:System.Windows.LogicalTreeHelper&gt;, &lt;xref:System.Windows.Media.VisualTreeHelper&gt;) de structuur metafoor nog steeds van toepassing is voldoende op meestal echte in WPF.&lt;/xref:System.Windows.Media.VisualTreeHelper&gt; &lt;/xref:System.Windows.LogicalTreeHelper&gt;</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>From the XAML language perspective however, the object graph is often the best way to think about how objects are created out of XAML, because the XAML language itself does not necessarily specify helper class methodologies that bring the relationships more into a tree structure again.</source>
          <target state="translated">Vanuit het perspectief van de taal XAML echter is de objectgrafiek vaak de beste manier om na te denken over hoe objecten worden gemaakt buiten XAML, omdat de XAML-taal zelf noodzakelijkerwijs geen geeft methoden van de helper-klasse die de relaties in een boomstructuur opnieuw meenemen.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code Access Security, Loose XAML, and XamlReader    XAML is a markup language that directly represents object instantiation and execution.</source>
          <target state="translated">Is een markup language dat rechtstreeks vertegenwoordigt instantiëring en uitvoering van code Access Security Losse XAML en XamlReader XAML.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, elements created in XAML have the same ability to interact with system resources (network access, file system IO, for example) as the equivalent generated code does.</source>
          <target state="translated">Daarom elementen die zijn gemaakt in XAML hebben dezelfde mogelijkheid om te communiceren met systeemresources (netwerktoegang, i/o file system, bijvoorbeeld) als het equivalent gegenereerde code doet.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> supports the <ph id="ph2">[!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)]</ph> security framework <ph id="ph3">[!INCLUDE[TLA#tla_cas](~/add/includes/tlasharptla-cas-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph>ondersteunt de <ph id="ph2">[!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)]</ph> beveiligingskader <ph id="ph3">[!INCLUDE[TLA#tla_cas](~/add/includes/tlasharptla-cas-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> content running in the internet zone has reduced execution permissions.</source>
          <target state="translated">Dit betekent dat <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</ph> inhoud die wordt uitgevoerd in de internetzone machtigingen van de uitvoering is verminderd.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>"Loose XAML" (pages of noncompiled XAML interpreted at load time by a XAML viewer) and <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph> are usually run in this internet zone and use the same permission set.</source>
          <target state="translated">'Losse XAML' (pagina's van niet-gecompileerde XAML geïnterpreteerd tijdens het laden van een XAML-viewer) en <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]</ph> meestal worden uitgevoerd in deze zone internet en het gebruik van de dezelfde machtigingen zijn ingesteld.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, XAML loaded in to a fully trusted application has the same access to the system resources as the hosting application does.</source>
          <target state="translated">XAML-is geladen in een volledig vertrouwde toepassing heeft echter dezelfde toegang tot de resources als de hosttoepassing.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>WPF Partial Trust Security<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</source>
          <target state="translated">Zie voor meer informatie <bpt id="p1">[</bpt>WPF gedeeltelijk vertrouwen beveiliging<ept id="p1">](~/add/includes/ajax-current-ext-md.md)</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implications of these statements for XamlReader is that your application design must make trust decisions about the XAML you decide to load.</source>
          <target state="translated">De implicaties van deze instructies voor XamlReader is dat het ontwerp van uw toepassing moet aanbrengen vertrouwensrelatie nemen van beslissingen over de XAML die u wilt laden.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are loading XAML that is not trusted, consider implementing your own sandboxing technique for how you load the resulting object graph.</source>
          <target state="translated">Als u de XAML die wordt niet vertrouwd laadt, kunt u uw eigen techniek sandbox voor hoe u de resulterende objectgrafiek laden.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>XamlReader can also be called by partial trust code.</source>
          <target state="translated">XamlReader kan ook worden aangeroepen door gedeeltelijk vertrouwde code.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, Internet security zone is applied for code access security.</source>
          <target state="translated">In dit geval wordt beveiligingszone Internet toegepast op basis van codetoegangsrechten.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If anything in the loaded XAML is invalid under Internet security zone, a XAML parse exception is thrown.</source>
          <target state="translated">Als er iets in de geladen XAML ongeldige onder beveiligingszone Internet, een XAML parse uitzondering.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Under XBAP and other cases that are partial trust at the platform level, where XamlReader is part of the execution, you get the same exception behavior as with explicit partial trust calls.</source>
          <target state="translated">Onder XBAP en andere gevallen die gedeeltelijk vertrouwen op het niveau van het platform zijn, waarbij XamlReader deel van de uitvoering uitmaakt, krijgt u hetzelfde uitzondering gedrag als met gedeeltelijk vertrouwen expliciete aanroepen.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF XAML, XAML Readers/Writers, and XAML Language Versioning    <ph id="ph1">[!INCLUDE[xaml2009](~/add/includes/xaml2009-md.md)]</ph> includes language features such as  and .</source>
          <target state="translated">WPF XAML, XAML lezers/schrijvers en XAML taal Versioning <ph id="ph1">[!INCLUDE[xaml2009](~/add/includes/xaml2009-md.md)]</ph> bevat functies voor talen zoals en.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use signatures of <ph id="ph1">`Load`</ph> or <ph id="ph2">`Parse`</ph> to load XAML that uses these features.</source>
          <target state="translated">U kunt handtekeningen van <ph id="ph1">`Load`</ph> of <ph id="ph2">`Parse`</ph> laden van XAML die gebruikmaakt van deze functies.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, those language features are not supported for XAML that needs to be markup compiled (such as XAML for the <bpt id="p1">**</bpt>Page<ept id="p1">**</ept> build action in a WPF application, or any XAML that involves the markup compile task in the build actions).</source>
          <target state="translated">Deze taalfuncties worden echter niet ondersteund voor de XAML die moet worden gecompileerd (zoals XAML voor de <bpt id="p1">**</bpt>pagina<ept id="p1">**</ept> actie in een WPF-toepassing of de XAML waarmee de taak voor het compileren van aantekeningen in de build-acties omvat bouwen).</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF types and the WPF technology in general support concepts that rely on access to WPF internals.</source>
          <target state="translated">WPF-typen en de WPF-technologie in het algemeen concepten die afhankelijk van de toegang tot interne werking van WPF zijn te ondersteunen.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>For instance, how WPF implements dependency properties relies on internal techniques for efficient type-member lookup.</source>
          <target state="translated">Bijvoorbeeld, hoe WPF-dependency properties implementeert is afhankelijk van interne technieken voor het opzoeken van efficiënte type lid.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>Access to these internals is enabled by the XAML reading and writing APIs provided in &lt;xref:System.Windows.Markup.XamlWriter&gt; and XamlReader from the &lt;xref:System.Windows.Markup&gt; namespace and PresentationFramework assembly.</source>
          <target state="translated">Toegang tot deze inhoud is ingeschakeld door de XAML lezen en schrijven van API's die zijn opgegeven in &lt;xref:System.Windows.Markup.XamlWriter&gt;en XamlReader van de &lt;xref:System.Windows.Markup&gt;naamruimte en PresentationFramework assembly.&lt;/xref:System.Windows.Markup&gt; &lt;/xref:System.Windows.Markup.XamlWriter&gt;</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the lower-level XAML readers and XAML writers from the System.Xaml assembly (classes based on &lt;xref:System.Xaml.XamlReader?displayProperty=fullName&gt;, &lt;xref:System.Xaml.XamlWriter?displayProperty=fullName&gt;) do not have access to the WPF internals.</source>
          <target state="translated">Echter, de XAML lager niveau en XAML schrijfprogramma uit de assembly System.Xaml (klassen op basis van &lt;xref:System.Xaml.XamlReader?displayProperty=fullName&gt;, &lt;xref:System.Xaml.XamlWriter?displayProperty=fullName&gt;) geen toegang tot het inwendige WPF.&lt;/xref:System.Xaml.XamlWriter?displayProperty=fullName&gt; &lt;/xref:System.Xaml.XamlReader?displayProperty=fullName&gt;</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no dependency from System.Xaml to any WPF-specific assembly.</source>
          <target state="translated">Er is geen afhankelijkheid van System.Xaml naar een assembly WPF-specifieke.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Without access to the WPF internals, System.Xaml readers and writers cannot correctly load or save all WPF types, or types based on WPF types.</source>
          <target state="translated">Zonder toegang tot het inwendige WPF, System.Xaml en schrijfprogramma kunnen niet correct worden geladen of sla alle WPF typen of typen gebaseerd op WPF-typen.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>In particular, the System.Xaml readers and writers do not understand concepts such as the WPF dependency property backing property store, or all the specifics of how WPF uses styles, resource dictionaries and templates.</source>
          <target state="translated">In het bijzonder de System.Xaml en schrijfprogramma wordt niet begrepen concepten zoals de WPF-afhankelijkheidseigenschap back-ups eigenschappenarchief noch de details van hoe WPF stijlen, bronwoordenboeken en sjablonen gebruikt.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore you have a choice to make:      -   If you are loading WPF types, and/or you are using XAML in BAML form in any way, use the PresentationFramework XAML readers and XAML writers.</source>
          <target state="translated">Daarom hebt u de mogelijkheid om ervoor te: - als u bij het laden van WPF-typen en/of u XAML in BAML-formulier op elke manier gebruikt de PresentationFramework XAML en XAML schrijfprogramma gebruiken.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>-   If you are not relying on any WPF types or the BAML form of XAML, and are not using another specific technology's XAML reader or XAML writer implementation for reasons that are specific to that framework, use the System.Xaml XAML readers and XAML writers.</source>
          <target state="translated">-Als u zijn niet vertrouwen op eventuele WPF-typen of de BAML-vorm van XAML, of niet gebruikt een andere specifieke technologie XAML lezer XAML writer implementatie om redenen die specifiek voor die framework zijn, gebruikt de System.Xaml XAML en schrijfprogramma XAML.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>System.Xaml Backing Implementation in .NET 4    XamlReader is the callable API surface for the WPF framework-level XAML parser.</source>
          <target state="translated">Een back-up System.Xaml-implementatie in .NET 4 XamlReader is aanroepbare API-gebied voor de WPF framework niveau XAML-parser.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same underlying XAML parser also performs the run-time XAML loading and parsing for WPF applications that target <ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>.</source>
          <target state="translated">De XAML runtime geladen en geparseerd voor WPF-toepassingen die zijn gericht worden ook uitgevoerd door de dezelfde onderliggende XAML-parser <ph id="ph1">[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]</ph> en <ph id="ph2">[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are targeting <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, the external API is the same, but parts of the implementation are built on the <ph id="ph2">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> general XAML implementation in the System.Xaml assembly, which improves many of the technical and reporting aspects of parsing XAML.</source>
          <target state="translated">Als u ontwikkelt voor <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph>, de externe API is hetzelfde, maar de onderdelen van de implementatie zijn gebouwd op de <ph id="ph2">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> algemene XAML-implementatie in de assembly System.Xaml, wat zorgt voor betere veel van de technische en rapportage aspecten van het parseren van XAML.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Targeting <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> necessarily entails including System.Xaml as a reference, and details of implementation such as the exceptions reported may come from System.Xaml defined types.</source>
          <target state="translated">Targeting <ph id="ph1">[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]</ph> noodzakelijkerwijs houdt waaronder System.Xaml als een verwijzing en details van de implementatie, zoals de uitzonderingen die zijn gerapporteerd kunnen afkomstig zijn van System.Xaml typen zijn gedefinieerd.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">&lt;a name="xamlTextUsage_XamlReader"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>    ## XAML Text Usage</source>
          <target state="translated"><bpt id="p1">&lt;a name="xamlTextUsage_XamlReader"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>## XAML tekst gebruik</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> class.</source>
          <target state="translated">Initialiseert een nieuw exemplaar van de <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> klasse.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Aborts the current asynchronous load operation, if there is an asynchronous load operation pending.</source>
          <target state="translated">Annuleert de huidige bewerking voor het asynchroon laden als er een bewerking asynchroon laden in behandeling.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>CancelAsync is an asynchronous operation; therefore, some loading may occur before the operation is aborted.</source>
          <target state="translated">CancelAsync is een asynchrone bewerking. Daarom optreden enkele laden voordat de bewerking is afgebroken.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the WPF schema context settings for a <bpt id="p2">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Retourneert een <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> -object met de WPF-schema-instellingen voor een <bpt id="p2">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object that represents the WPF schema context settings for a <bpt id="p2">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt><ept id="p2">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Een <bpt id="p1">&lt;xref href="System.Xaml.XamlSchemaContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> -object met de WPF-schema-instellingen voor een <bpt id="p2">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt> <ept id="p2">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Reads the XAML input in the specified &lt;xref:System.IO.Stream&gt; and returns an &lt;xref:System.Object&gt; that is the root of the corresponding object tree.</source>
          <target state="translated">Leest de XAML-invoer in de opgegeven &lt;xref:System.IO.Stream&gt;en retourneert een &lt;xref:System.Object&gt;is de hoofdmap van de bijbehorende objectstructuur.&lt;/xref:System.Object&gt; &lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The XAML to load, in stream form.</source>
          <target state="translated">De XAML laden in stroom vorm.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The object at the root of the created object tree.</source>
          <target state="translated">Het object in de hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Reads the XAML input through a provided <bpt id="p1">&lt;xref href="System.Xaml.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> and returns an object that is the root of the corresponding object tree.</source>
          <target state="translated">Leest de XAML-invoer via een opgegeven <bpt id="p1">&lt;xref href="System.Xaml.XamlReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept> en retourneert een object dat is de hoofdmap van de objectboomstructuur van het bijbehorende.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>The input &lt;xref:System.Xaml.XamlReader&gt; can be &lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;.</source>
          <target state="translated">De invoer &lt;xref:System.Xaml.XamlReader&gt;kan worden &lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;.&lt;/xref:System.Windows.Baml2006.Baml2006Reader&gt; &lt;/xref:System.Xaml.XamlReader&gt;</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is how you can load BAML at run time, or for localization tool purposes.</source>
          <target state="translated">Dit is hoe u BAML kunt laden tijdens runtime, of voor lokalisatie hulpprogramma doeleinden.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">&lt;xref href="System.Xaml.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</source>
          <target state="translated">A <bpt id="p1">&lt;xref href="System.Xaml.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept> object.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This is expected to be initialized with input XAML.</source>
          <target state="translated">Dit moet worden geïnitialiseerd met invoer XAML.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The object that is the root of the created object tree.</source>
          <target state="translated">Het object dat is de hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Reads the XAML input in the specified &lt;xref:System.Xml.XmlReader&gt; and returns an object that is the root of the corresponding object tree.</source>
          <target state="translated">Leest de XAML-invoer in de opgegeven &lt;xref:System.Xml.XmlReader&gt;en retourneert een object dat is de hoofdmap van de bijbehorende objectstructuur.&lt;/xref:System.Xml.XmlReader&gt;</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The &lt;xref:System.Xml.XmlReader&gt; that has already loaded the XAML input to load in XML form.</source>
          <target state="translated">De &lt;xref:System.Xml.XmlReader&gt;die de invoer laden in XML-vorm XAML al is geladen.&lt;/xref:System.Xml.XmlReader&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The object that is the root of the created object tree.</source>
          <target state="translated">Het object dat is de hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Reads the XAML input in the specified &lt;xref:System.IO.Stream&gt; and returns an object that is the root of the corresponding object tree.</source>
          <target state="translated">Leest de XAML-invoer in de opgegeven &lt;xref:System.IO.Stream&gt;en retourneert een object dat is de hoofdmap van de bijbehorende objectstructuur.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The stream that contains the XAML input to load.</source>
          <target state="translated">De stroom waarin de invoer voor het laden van XAML.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Context information used by the parser.</source>
          <target state="translated">Contextinformatie die wordt gebruikt door de parser.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The object that is the root of the created object tree.</source>
          <target state="translated">Het object dat is de hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>-or-       <ph id="ph1">&lt;code&gt;parserContext&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">-or-       <ph id="ph1">&lt;code&gt;parserContext&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Reads the XAML input in the specified &lt;xref:System.IO.Stream&gt; and returns the root of the corresponding object tree.</source>
          <target state="translated">Leest de XAML-invoer in de opgegeven &lt;xref:System.IO.Stream&gt;en retourneert de hoofdmap van de bijbehorende objectstructuur.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>An asynchronous XAML load operation will initially return an object that is purely the root object.</source>
          <target state="translated">Een object dat is alleen het hoofdobject wordt in eerste instantie geretourneerd door een asynchrone bewerking voor het laden van XAML.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</source>
          <target state="translated">Asynchroon, blijft het XAML vervolgens parseren en alle onderliggende objecten onder de hoofdmap zijn ingevuld.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</source>
          <target state="translated">Dit is in tegenstelling tot de gebruikelijke WPF XAML gedrag en de interactie met WPF-concepten van de levensduur van het object te verwerken.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</source>
          <target state="translated">In de interactie met de gebruikelijke (niet-async), worden alle eigenschappen van een object met inbegrip van alle onderliggende verzamelingen gevuld voordat het retourneren van een element en rapportage deze zo geladen.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</source>
          <target state="translated">Dit gedrag is gelijk aan een beneden methodologie voor het maken van de boomstructuur waar het hoofdobject het laatste object weer beschikbaar is.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically would assign the returned object to some location in your WPF application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</source>
          <target state="translated">U doorgaans het geretourneerde object naar een locatie in object-structuur van uw toepassing WPF zou toewijzen, in de wetenschap dat inhoud mogelijk nog steeds worden ingevuld en lay-out incrementele updates mogelijk als de volledige inhoud als onderdeel van de gebruikersinterface wordt weergegeven.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when &lt;xref:System.Windows.Markup.XamlReader.LoadCompleted&gt; is handled.</source>
          <target state="translated">Daarom is het typische te isoleren of te virtualiseren asynchroon geladen objecten van XAML en toepassingsspecifieke logica of toepassingsstatus gebruiken om u te waarschuwen als &lt;xref:System.Windows.Markup.XamlReader.LoadCompleted&gt;wordt verwerkt.&lt;/xref:System.Windows.Markup.XamlReader.LoadCompleted&gt;</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for LoadAsync to load XAML input asynchronously, the root element in the XAML input must contain the attribute and value <ph id="ph1">`x:SynchronousMode="Async"`</ph>.</source>
          <target state="translated">Opdat LoadAsync asynchroon laden van XAML invoer het hoofdelement in de XAML invoer moet het kenmerk en waarde bevatten <ph id="ph1">`x:SynchronousMode="Async"`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is treated as case sensitive.</source>
          <target state="translated">De waarde behandeld als hoofdlettergevoelig.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the XAML input root does not contain <ph id="ph1">`x:SynchronousMode="Async"`</ph>, no exception is thrown, and the call is processed as a synchronous load (see &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29&gt;).</source>
          <target state="translated">Als de basis van XAML-invoer geen bevat <ph id="ph1">`x:SynchronousMode="Async"`</ph>geen uitzondering en de aanroep wordt verwerkt als een synchrone belasting (Zie &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29&gt;).&lt;/xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29&gt;</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one asynchronous load operation per instance of the &lt;xref:System.Windows.Markup.XamlReader&gt; class can be performed at a time.</source>
          <target state="translated">Slechts één asynchrone laadbewerking per exemplaar van de &lt;xref:System.Windows.Markup.XamlReader&gt;klasse kan worden uitgevoerd op een tijdstip.&lt;/xref:System.Windows.Markup.XamlReader&gt;</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one asynchronous operation is attempted on the same instance of the &lt;xref:System.Windows.Markup.XamlReader&gt; class an &lt;xref:System.InvalidOperationException&gt; is thrown.</source>
          <target state="translated">Als meer dan een asynchrone bewerking is geprobeerd op hetzelfde exemplaar van de &lt;xref:System.Windows.Markup.XamlReader&gt;klasse een &lt;xref:System.InvalidOperationException&gt;gegenereerd.&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Windows.Markup.XamlReader&gt;</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The stream containing the XAML input to load.</source>
          <target state="translated">De stroom met de invoer voor het laden van XAML.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The object that is the root of the created object tree.</source>
          <target state="translated">Het object dat is de hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Multiple load operations are pending concurrently with the same <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Meerdere load-bewerkingen in behandeling zijn als dezelfde <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Reads the XAML input in the specified &lt;xref:System.Xml.XmlReader&gt; and returns the root of the corresponding object tree.</source>
          <target state="translated">Leest de XAML-invoer in de opgegeven &lt;xref:System.Xml.XmlReader&gt;en retourneert de hoofdmap van de bijbehorende objectstructuur.&lt;/xref:System.Xml.XmlReader&gt;</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>An asynchronous XAML load operation will initially return an object that is purely the root object.</source>
          <target state="translated">Een object dat is alleen het hoofdobject wordt in eerste instantie geretourneerd door een asynchrone bewerking voor het laden van XAML.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</source>
          <target state="translated">Asynchroon, blijft het XAML vervolgens parseren en alle onderliggende objecten onder de hoofdmap zijn ingevuld.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</source>
          <target state="translated">Dit is in tegenstelling tot de gebruikelijke WPF XAML gedrag en de interactie met WPF-concepten van de levensduur van het object te verwerken.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</source>
          <target state="translated">In de interactie met de gebruikelijke (niet-async), worden alle eigenschappen van een object met inbegrip van alle onderliggende verzamelingen gevuld voordat het retourneren van een element en rapportage deze zo geladen.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</source>
          <target state="translated">Dit gedrag is gelijk aan een beneden methodologie voor het maken van de boomstructuur waar het hoofdobject het laatste object weer beschikbaar is.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically would assign the returned object from LoadAsync to some location in your application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</source>
          <target state="translated">U doorgaans zou toewijzen aan het geretourneerde object LoadAsync naar een locatie in object-structuur van uw toepassing, in de wetenschap dat inhoud mogelijk nog steeds worden ingevuld en indeling voor incrementele updates mogelijk als de volledige inhoud als onderdeel van de gebruikersinterface wordt weergegeven.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when &lt;xref:System.Windows.Markup.XamlReader.LoadCompleted&gt; is handled.</source>
          <target state="translated">Daarom is het typische te isoleren of te virtualiseren asynchroon geladen objecten van XAML en toepassingsspecifieke logica of toepassingsstatus gebruiken om u te waarschuwen als &lt;xref:System.Windows.Markup.XamlReader.LoadCompleted&gt;wordt verwerkt.&lt;/xref:System.Windows.Markup.XamlReader.LoadCompleted&gt;</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for LoadAsync to load XAML input asynchronously, the root element in the XAML markup must contain the attribute and value <ph id="ph1">`x:SynchronousMode="Async"`</ph>.</source>
          <target state="translated">Opdat LoadAsync laden van XAML invoer asynchroon, het hoofdelement in de XAML-opmaak moet het kenmerk en een waarde bevatten <ph id="ph1">`x:SynchronousMode="Async"`</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is treated as case sensitive.</source>
          <target state="translated">De waarde behandeld als hoofdlettergevoelig.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the XAML markup root does not contain <ph id="ph1">`x:SynchronousMode="Async"`</ph>, no exception is thrown, and the call is instead processed as a synchronous load (see &lt;xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29&gt;).</source>
          <target state="translated">Als de hoofdmap van de opmaak XAML geen bevat <ph id="ph1">`x:SynchronousMode="Async"`</ph>geen uitzondering en de aanroep in plaats daarvan wordt verwerkt als een synchrone belasting (Zie &lt;xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29&gt;).&lt;/xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29&gt;</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one asynchronous load operation per instance of the &lt;xref:System.Windows.Markup.XamlReader&gt; class can be performed at a time.</source>
          <target state="translated">Slechts één asynchrone laadbewerking per exemplaar van de &lt;xref:System.Windows.Markup.XamlReader&gt;klasse kan worden uitgevoerd op een tijdstip.&lt;/xref:System.Windows.Markup.XamlReader&gt;</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one asynchronous operation is attempted on the same instance of the &lt;xref:System.Windows.Markup.XamlReader&gt; class an &lt;xref:System.InvalidOperationException&gt; is thrown.</source>
          <target state="translated">Als meer dan een asynchrone bewerking is geprobeerd op hetzelfde exemplaar van de &lt;xref:System.Windows.Markup.XamlReader&gt;klasse een &lt;xref:System.InvalidOperationException&gt;gegenereerd.&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Windows.Markup.XamlReader&gt;</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>An existing  &lt;xref:System.Xml.XmlReader&gt; that has already loaded/read the XAML input.</source>
          <target state="translated">Een bestaande &lt;xref:System.Xml.XmlReader&gt;die is al geladen leestijd de XAML-invoer.&lt;/xref:System.Xml.XmlReader&gt;</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The root of the created object tree.</source>
          <target state="translated">De hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;reader&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Multiple load operations are performed concurrently with the same <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Meerdere load-bewerkingen worden uitgevoerd als dezelfde <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Reads the XAML input in the specified &lt;xref:System.IO.Stream&gt; and returns the root of the corresponding object tree.</source>
          <target state="translated">Leest de XAML-invoer in de opgegeven &lt;xref:System.IO.Stream&gt;en retourneert de hoofdmap van de bijbehorende objectstructuur.&lt;/xref:System.IO.Stream&gt;</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>An asynchronous XAML load operation will initially return an object that is purely the root object.</source>
          <target state="translated">Een object dat is alleen het hoofdobject wordt in eerste instantie geretourneerd door een asynchrone bewerking voor het laden van XAML.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</source>
          <target state="translated">Asynchroon, blijft het XAML vervolgens parseren en alle onderliggende objecten onder de hoofdmap zijn ingevuld.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</source>
          <target state="translated">Dit is in tegenstelling tot de gebruikelijke WPF XAML gedrag en de interactie met WPF-concepten van de levensduur van het object te verwerken.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</source>
          <target state="translated">In de interactie met de gebruikelijke (niet-async), worden alle eigenschappen van een object met inbegrip van alle onderliggende verzamelingen gevuld voordat het retourneren van een element en rapportage deze zo geladen.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</source>
          <target state="translated">Dit gedrag is gelijk aan een beneden methodologie voor het maken van de boomstructuur waar het hoofdobject het laatste object weer beschikbaar is.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>You typically would assign the returned object to some location in your application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</source>
          <target state="translated">U doorgaans het geretourneerde object naar een locatie in object-structuur van uw toepassing zou toewijzen, in de wetenschap dat inhoud mogelijk nog steeds worden ingevuld en indeling voor incrementele updates mogelijk als de volledige inhoud als onderdeel van de gebruikersinterface wordt weergegeven.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when &lt;xref:System.Windows.Markup.XamlReader.LoadCompleted&gt; is handled.</source>
          <target state="translated">Daarom is het typische te isoleren of te virtualiseren asynchroon geladen objecten van XAML en toepassingsspecifieke logica of toepassingsstatus gebruiken om u te waarschuwen als &lt;xref:System.Windows.Markup.XamlReader.LoadCompleted&gt;wordt verwerkt.&lt;/xref:System.Windows.Markup.XamlReader.LoadCompleted&gt;</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order for LoadAsync to load markup asynchronously, the root element in the XAML markup must contain the attribute and value <ph id="ph1">`x:SynchronousMode="Async"`</ph>.</source>
          <target state="translated">Opdat LoadAsync markup asynchroon laden, het hoofdelement in de XAML-opmaak moet het kenmerk en waarde bevatten <ph id="ph1">`x:SynchronousMode="Async"`</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value is treated as case sensitive.</source>
          <target state="translated">De waarde behandeld als hoofdlettergevoelig.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the XAML markup root does not contain <ph id="ph1">`x:SynchronousMode="Async"`</ph>, no exception is thrown, and the call is processed as a synchronous load (see &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29&gt;).</source>
          <target state="translated">Als de hoofdmap van de opmaak XAML geen bevat <ph id="ph1">`x:SynchronousMode="Async"`</ph>geen uitzondering en de aanroep wordt verwerkt als een synchrone belasting (Zie &lt;xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29&gt;).&lt;/xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29&gt;</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one asynchronous load operation per instance of the &lt;xref:System.Windows.Markup.XamlReader&gt; class can be performed at a time.</source>
          <target state="translated">Slechts één asynchrone laadbewerking per exemplaar van de &lt;xref:System.Windows.Markup.XamlReader&gt;klasse kan worden uitgevoerd op een tijdstip.&lt;/xref:System.Windows.Markup.XamlReader&gt;</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one asynchronous operation is attempted on the same instance of the &lt;xref:System.Windows.Markup.XamlReader&gt; class an &lt;xref:System.InvalidOperationException&gt; is thrown.</source>
          <target state="translated">Als meer dan een asynchrone bewerking is geprobeerd op hetzelfde exemplaar van de &lt;xref:System.Windows.Markup.XamlReader&gt;klasse een &lt;xref:System.InvalidOperationException&gt;gegenereerd.&lt;/xref:System.InvalidOperationException&gt; &lt;/xref:System.Windows.Markup.XamlReader&gt;</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A stream containing the XAML input to load.</source>
          <target state="translated">Een stroom met de invoer voor het laden van XAML.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Context information used by the parser.</source>
          <target state="translated">Contextinformatie die wordt gebruikt door de parser.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The root of the created object tree.</source>
          <target state="translated">De hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph> is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;code&gt;stream&lt;/code&gt;</ph>is <bpt id="p1">&lt;xref uid="langword_csharp_null" name="null" href=""&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Multiple load operations are performed concurrently with the same <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>.</source>
          <target state="translated">Meerdere load-bewerkingen worden uitgevoerd als dezelfde <bpt id="p1">&lt;xref href="System.Windows.Markup.XamlReader"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Occurs when an asynchronous load operation completes.</source>
          <target state="translated">Deze gebeurtenis treedt op wanneer een bewerking asynchroon laden is voltooid.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>LoadCompleted is also raised when an asynchronous load operation aborts.</source>
          <target state="translated">LoadCompleted ook treedt op wanneer een bewerking asynchroon laden annuleert.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To be added.</source>
          <target state="translated">Moet worden toegevoegd.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Reads the XAML input in the specified text string and returns an object that corresponds to the root of the specified markup.</source>
          <target state="translated">De XAML-invoer in de opgegeven tekenreeks leest en retourneert een object dat overeenkomt met naar de hoofdmap van de markering opgegeven.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation calls &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt; internally after creating a stream from the string.</source>
          <target state="translated">Het aanroepen van de implementatie &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;intern na het maken van een stroom uit de tekenreeks.&lt;/xref:System.Windows.Markup.XamlReader.Load%2A&gt;</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt; for additional information such as possible exceptions.</source>
          <target state="translated">Zie &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;voor aanvullende informatie zoals mogelijke uitzonderingen.&lt;/xref:System.Windows.Markup.XamlReader.Load%2A&gt;</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The input XAML, as a single text string.</source>
          <target state="translated">De invoer XAML als één tekenreeks.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The root of the created object tree.</source>
          <target state="translated">De hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Reads the XAML markup in the specified text string (using a specified <bpt id="p1">&lt;xref href="System.Windows.Markup.ParserContext"&gt;</bpt><ept id="p1">&lt;/xref&gt;</ept>) and returns an object that corresponds to the root of the specified markup.</source>
          <target state="translated">Leest de XAML-opmaak in de opgegeven tekenreeks (met behulp van een opgegeven <bpt id="p1">&lt;xref href="System.Windows.Markup.ParserContext"&gt;</bpt> <ept id="p1">&lt;/xref&gt;</ept>) en een object dat overeenkomt met geretourneerd naar de hoofdmap van de markering opgegeven.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation calls &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt; internally after creating a stream from the string.</source>
          <target state="translated">Het aanroepen van de implementatie &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;intern na het maken van een stroom uit de tekenreeks.&lt;/xref:System.Windows.Markup.XamlReader.Load%2A&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>See &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt; for additional information such as possible exceptions.</source>
          <target state="translated">Zie &lt;xref:System.Windows.Markup.XamlReader.Load%2A&gt;voor aanvullende informatie zoals mogelijke uitzonderingen.&lt;/xref:System.Windows.Markup.XamlReader.Load%2A&gt;</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The input XAML, as a single text string.</source>
          <target state="translated">De invoer XAML als één tekenreeks.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Context information used by the parser.</source>
          <target state="translated">Contextinformatie die wordt gebruikt door de parser.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The root of the created object tree.</source>
          <target state="translated">De hoofdmap van de structuur van het gemaakte object.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>